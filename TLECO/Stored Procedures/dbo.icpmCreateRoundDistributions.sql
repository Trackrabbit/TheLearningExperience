SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[icpmCreateRoundDistributions]  @I_cVoucherNumber char(21) = NULL,  @I_sControlType smallint = NULL,  @I_cOrigICID char(5)         = NULL,   @I_sOrigCurrencyIndex smallint = NULL,  @I_cUserID char(15)   = NULL,  @IO_bPMWorkMessages binary(4) = NULL output,  @IO_bICMessages binary(4) = NULL  output,  @O_tPostingError tinyint  = NULL output,   @O_iErrorState        int             = NULL  output as  declare  @MS_ITEM_09 int,  @MS_ITEM_12 int,  @MS_ITEM_14 int,  @MS_ITEM_21 int,  @tTransaction    tinyint,  @tLoop    tinyint,  @mFuncTotal numeric(19,5),  @mOrigTotal numeric(19,5),  @mCreditAmount numeric(19,5),  @mDebitAmount numeric(19,5),  @iRoundIndex int,  @sUNIT     smallint,   @iROUND smallint,  @dEmptyDate datetime,   @iStatus   int,  @iError   int,  @cCurrencyID char(15),  @sCurrencyIndex  smallint,  @cRateTypeID char(15),  @cICID char(5),  @SeqLine   int,   @tTRUE tinyint,   @vProcName   varchar(50),  @vDBName    varchar(11),  @iSEQUENCENUMBER int,  @sAccountType   smallint,  @dMinDate datetime   select  @O_iErrorState  = 0,  @iStatus   = 0,   @iError    = 0,  @O_tPostingError = 0   exec @iStatus = smGetMinDate @dMinDate output  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction  end   while (@tLoop is NULL) begin   select @tLoop = 1    if     @I_cOrigICID is NULL or  @I_sOrigCurrencyIndex  is NULL or  @I_cVoucherNumber is NULL or  @I_sControlType is NULL or  @I_cUserID is NULL   begin     select @O_iErrorState = 21017   break  end    select   @MS_ITEM_09  = power(2, 16),  @MS_ITEM_12  = power(2, 19),  @MS_ITEM_14  = power(2, 21),  @MS_ITEM_21  = power(2, 12),  @dEmptyDate = @dMinDate,  @tTRUE  = 1,  @sUNIT    = 15,  @iROUND  = 16,  @iSEQUENCENUMBER = 16384   if not exists( select   1  from   PM10100   where   VCHRNMBR = @I_cVoucherNumber  and CNTRLTYP = @I_sControlType  and   ICCURRIX <> @I_sOrigCurrencyIndex)   break    create table #accttype   (AccountType smallint)   select   @mOrigTotal  = isnull(sum(ORCRDAMT - ORDBTAMT), 0.0),  @mFuncTotal  = isnull(sum(CRDTAMNT - DEBITAMT), 0.0),  @cCurrencyID = isnull(min(CURNCYID),''),  @cRateTypeID = isnull(min(RATETPID),'')   from   PM10100   where   VCHRNMBR = @I_cVoucherNumber  and CNTRLTYP = @I_sControlType  and INTERID  = @I_cOrigICID  and  DISTTYPE <> @sUNIT  if (@mOrigTotal = 0) and (@mFuncTotal = 0)   select @iRoundIndex = 0  else  if (@mOrigTotal <> 0)   begin     select   @IO_bPMWorkMessages  = (@IO_bPMWorkMessages | @MS_ITEM_09),  @IO_bICMessages  = (@IO_bICMessages | @MS_ITEM_14)   select @O_tPostingError = @tTRUE   end   else   begin    exec @iStatus = icpmcGetRoundingAccount  @I_cOrigICID,  @cCurrencyID,   @cRateTypeID,  @iRoundIndex output,  @sAccountType  output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0   select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break    if @iRoundIndex = 0   begin     select   @IO_bPMWorkMessages  = (@IO_bPMWorkMessages | @MS_ITEM_09),  @IO_bICMessages  = (@IO_bICMessages | @MS_ITEM_21 )   select @O_tPostingError = @tTRUE  end   if @mFuncTotal > 0.0   begin  select  @mDebitAmount  = @mFuncTotal,  @mCreditAmount = 0.0   end  else  begin  select  @mDebitAmount  = 0.0,  @mCreditAmount = (@mFuncTotal * -1.0)   end    if @iRoundIndex <> 0   begin  select @SeqLine = (  select   max(DSTSQNUM) + @iSEQUENCENUMBER   from   PM10100   where  VCHRNMBR = @I_cVoucherNumber   and CNTRLTYP = @I_sControlType)   insert into   PM10100   select distinct  @I_cVoucherNumber,  @SeqLine,  @I_sControlType,  @mCreditAmount,  @mDebitAmount,  @iRoundIndex ,   @iROUND,      0,      '',       0,      VENDORID,   '',      @dEmptyDate,       @I_cOrigICID,  @cCurrencyID,   CURRNIDX,  0.0,      0.0,       '',       0,      0.0,      '',      RATETPID,  EXGTBLID,  0.0,       EXCHDATE,   TIME1,  RTCLCMTD,  DECPLACS,  EXPNDATE,  ICCURRID,  ICCURRIX,  0.0,      MCTRXSTT,   CorrespondingUnit  from  PM10100   where   VCHRNMBR = @I_cVoucherNumber  and CNTRLTYP = @I_sControlType   and INTERID  = @I_cOrigICID   and  DISTTYPE <> @sUNIT    end     end     declare   Companycursor INSENSITIVE  cursor for select distinct  INTERID,  CURNCYID,  ICCURRIX  from   PM10100   where   VCHRNMBR  = @I_cVoucherNumber   and  CNTRLTYP  = @I_sControlType   and INTERID  <> @I_cOrigICID   and ICCURRIX  <> @I_sOrigCurrencyIndex   open Companycursor   if @@cursor_rows <>  0  begin   fetch next from  Companycursor  into  @cICID,  @cCurrencyID,  @sCurrencyIndex   while (@@fetch_status <> -1)  begin  select   @mFuncTotal = isnull(sum(CRDTAMNT-DEBITAMT), 0.0),  @cRateTypeID = isnull(min(RATETPID) ,'')  from   PM10100   where   VCHRNMBR  = @I_cVoucherNumber   and  CNTRLTYP  = @I_sControlType   and INTERID  = @cICID   and  DISTTYPE  <> @sUNIT  if (@mFuncTotal <> 0)   begin   select @vDBName =   (select   distinct (DBNAME)  from  DYNAMICS.dbo.SY02100 path with (NOLOCK),  DYNAMICS.dbo.SY01500 comp with (NOLOCK)  where   path.CMPANYID = comp.CMPANYID  and comp.INTERID = @cICID)   select @vProcName = rtrim(@vDBName) + '.dbo.icpmcGetRoundingAccount'  exec @iStatus = @vProcName  @cICID,  @cCurrencyID,   @cRateTypeID,   @iRoundIndex output,  @sAccountType  output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0   select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   if @iRoundIndex = 0   begin     select   @IO_bPMWorkMessages = (@IO_bPMWorkMessages | @MS_ITEM_09),  @IO_bICMessages = (@IO_bICMessages | @MS_ITEM_12)    select @O_tPostingError = @tTRUE  break   end    if @mFuncTotal > 0.0   begin  select  @mDebitAmount  = @mFuncTotal,  @mCreditAmount = 0.0   end  else  begin  select  @mDebitAmount  = 0.0,  @mCreditAmount = (@mFuncTotal * -1.0)   end      if @iRoundIndex <> 0   begin   select @SeqLine = (  select   isnull(max(DSTSQNUM) + @iSEQUENCENUMBER, @iSEQUENCENUMBER)   from   PM10100   where  VCHRNMBR = @I_cVoucherNumber   and CNTRLTYP = @I_sControlType)   set ROWCOUNT 1  insert into   PM10100   select distinct  @I_cVoucherNumber,  @SeqLine,  @I_sControlType,  @mCreditAmount,  @mDebitAmount,  @iRoundIndex ,   @iROUND,      0,      '',       0,      VENDORID,   '',      @dEmptyDate,       @cICID,  @cCurrencyID,  @sCurrencyIndex,  0.0,      0.0,       '',       0,      0.0,      '',      RATETPID,  EXGTBLID,  0.0,       EXCHDATE,   TIME1,  RTCLCMTD,  DECPLACS,  EXPNDATE,  ICCURRID,  ICCURRIX ,  0.0,      MCTRXSTT,  CorrespondingUnit   from  PM10100   where   VCHRNMBR = @I_cVoucherNumber  and CNTRLTYP = @I_sControlType   and INTERID  = @cICID   and  DISTTYPE <> @sUNIT    set ROWCOUNT 0   end    end     fetch next from  Companycursor  into  @cICID,   @cCurrencyID,  @sCurrencyIndex  end   end    deallocate Companycursor  end   if @O_iErrorState <> 0 or @iStatus <> 0 begin     if @tTransaction = 1   rollback transaction  end else if @tTransaction = 1  commit transaction   return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[icpmCreateRoundDistributions] TO [DYNGRP]
GO
