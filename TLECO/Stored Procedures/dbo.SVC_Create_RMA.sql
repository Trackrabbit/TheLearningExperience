SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Create_RMA]   (    @RETDOCID char(15) OUTPUT,  @Line as numeric(19,5) output,  @RETORIG smallint,  @RETTYPE char(11),  @RETREF char(31),  @custnmbr char(15),  @adrscode varchar(15) = NULL,  @equipid integer = NULL,  @serial char(21) = NULL,  @item varchar(31) = NULL,  @LOCNCODE char(11) = NULL,  @CUSTOWN smallint = NULL,  @CALLNBR char(11) = NULL,  @SRVRECTYPE smallint,   @EQPLINE int,   @LNITMSEQ int,   @QTY numeric(19,5),  @UOM char(10),  @ReasonCode char(3),  @ReasonDesc char(31),  @USERID char(15),  @UserDate datetime,  @Bin char(15),  @CMPNTSEQ int = 0   ) AS  declare @custname varchar(65) declare @address1 varchar(31) declare @address2 varchar(31) declare @address3 varchar(31) declare @city varchar(31) declare @statecd varchar(30) declare @zip varchar(11) declare @Country char(21) declare @phone1 varchar(21) declare @retadrs char(15) declare @timezone varchar(3) declare @offid2 varchar(10) declare @entdte datetime declare @enttme datetime declare @tempcntcprsn varchar(31) declare @taxschid varchar(15) declare @prclevel varchar(15) declare @taxexmt1 varchar(25) declare @taxexmt2 varchar(25) declare @pymtrmid varchar(21) declare @ShipMethod char(15) declare @slspersonid varchar(15) declare @svcarea varchar(10) declare @NewNoteIndex numeric(19,5) declare @ITEMDESC char(101) declare @OFFID char(11) declare @RTRNNAME char(21) declare @RETADDR1 char(31) declare @RETADDR2 char(31) declare @RETADDR3 char(31) declare @ReturnCountry char(21) declare @RTRNCITY char(31) declare @RTRNSTAT char(30) declare @RTRNZIP char(11) declare @RETSTAT char(3) declare @REFERENCE char(31) declare @INVITEM char(31) declare @WARRSTART datetime declare @WARREND datetime declare @BILLTOCUST char(15) declare @BILLTOADDRESS char(15) declare @Status int declare @l_UOM char(10) declare @CurrencyID char(15) , @DecPlcQty smallint, @DecPlcCur smallint,  @BillToCustomer varchar(15) ,  @BillToAddress1 varchar(15) ,  @OnHold tinyint,  @RETPATH integer  declare   @CURRNIDX  smallint,  @I_sRateCalcMethod  smallint ,   @I_sViewMode  smallint,   @I_nExchangeRate  numeric(15,7),   @I_nDenomExchangeRate numeric(15,7),   @I_sMCTrxState  smallint,   @I_sDecimalPlaces  smallint,   @RateType  char(15),  @ExchangeTableType char(15),  @ExchangeDate datetime,  @ExchangeTime datetime,  @ISMCTRX smallint,  @EXPNDATE datetime,  @O_iErrorState int declare @UnitCost numeric(19,5),@UnitPrice numeric(19,5) , @ReturnCost numeric(19,5) declare @OrigUnitCost numeric(19,5),@OrigUnitPrice numeric(19,5), @CurrentCost numeric(19,5) declare @ExUnitCost numeric(19,5),@ExUnitPrice numeric(19,5)  declare @ExOrigUnitCost numeric(19,5),@ExOrigUnitPrice numeric(19,5) declare @SOPQty numeric(19,5), @SOPMarkDown numeric(19,5) declare @MinDate datetime declare @FromService tinyint declare @QtyInBase numeric(19,5), @PriceLevel char(11) declare @UseReturnPrice tinyint declare @ReturnQTY numeric(19,5) declare @SOPType smallint, @SOPNumber char(21), @SOPLine numeric(19,5) declare @History tinyint declare @l_Call char(11) declare @Exists tinyint declare @OriginalBin char(15) declare @EnableBin tinyint, @BinQty numeric(19,5) declare @Tracking smallint declare @CustPO char(20), @rcv_date datetime,@exp_date datetime, @mfg_date datetime, @date_seq numeric(19,5), @lot_qty numeric (19,5) declare  @ReplaceLocation char(11),  @ItemType smallint, @RMACompSeq int, @svcRMAKitComponentFrom smallint declare @Origin tinyint declare @QtyType smallint,@QTYONHND numeric(19,5), @QTYRTRND numeric(19,5), @QTYINUSE numeric(19,5), @QTYINSVC numeric(19,5), @QTYDMGED numeric(19,5)  exec smGetMinDate @MinDate output select @EnableBin = ENABLEMULTIBIN from IV40100 if @CALLNBR > ''  select @FromService = 1, @l_Call = @CALLNBR else  select @FromService = 0 select @entdte = CONVERT(varchar(10),GETDATE(),102) + ' 00:00:00',  @enttme = @MinDate + CONVERT(varchar(10),GETDATE(),108),  @History = 0, @SOPType = 0, @SOPNumber = '', @SOPLine = 0, @Exists = 0, @svcRMAKitComponentFrom = 0, @Origin = 0 if @RETORIG = 3 and @RETREF > ''   begin  select   @adrscode = PRSTADCD,   @tempcntcprsn     = CNTCPRSN,  @phone1       = PHONE1,  @address1     = ADDRESS1,  @address2     = ADDRESS2,  @address3     = ADDRESS3,  @city         = CITY,  @statecd        = STATE,  @zip          = ZIPCODE,  @Country      = COUNTRY, @CMPNTSEQ = @EQPLINE,  @taxschid     = TAXSCHID, @ShipMethod = SHIPMTHD,  @prclevel     = PRCLEVEL, @I_sDecimalPlaces = DECPLCUR,  @slspersonid  = SLPRSNID, @SOPType = SOPTYPE, @SOPNumber = SOPNUMBE, @SOPLine = @LNITMSEQ  from SOP30300 where SOPTYPE =3 and SOPNUMBE = @RETREF and LNITMSEQ =@LNITMSEQ and CMPNTSEQ = 0  select @custname = CUSTNAME,  @CustPO = CSTPONBR from SOP30200 where SOPTYPE =3 and SOPNUMBE = @RETREF  end else  exec SVC_Get_Customer_Info @custnmbr, @adrscode OUTPUT,   @custname output, @retadrs output, @tempcntcprsn output,  @phone1 output, @address1 output, @address2 output,@address3 output,  @city output, @statecd output, @zip output, @Country output,  @taxschid output, @prclevel output,   @taxexmt1 output, @taxexmt2 output, @pymtrmid output,  @slspersonid output,  @svcarea output, @offid2 output, @timezone output,   @CurrencyID OUTPUT,  @BILLTOCUST OUTPUT, @BILLTOADDRESS OUTPUT , @OnHold OUTPUT  if @RETREF > ''   begin  select @Origin = 1  if @RETORIG = 3  select @CURRNIDX = CURRNIDX, @CurrencyID = CURNCYID,  @I_sRateCalcMethod = RTCLCMTD,  @I_nExchangeRate = XCHGRATE,  @I_nDenomExchangeRate = DENXRATE,  @I_sMCTrxState = MCTRXSTT,  @RateType = RATETPID,  @ExchangeTableType = EXGTBLID,  @ExchangeDate = EXCHDATE,  @ExchangeTime = TIME1,  @I_sViewMode  = 3,  @BILLTOCUST = CUSTNMBR,  @BILLTOADDRESS = PRBTADCD   from SOP30200 where SOPTYPE =3 and SOPNUMBE = @RETREF  else   begin  if exists(select * from SVC00200 where CALLNBR = @RETREF and SRVRECTYPE = 3)   select @CURRNIDX = CURRNIDX,  @I_sRateCalcMethod = RATECALC,  @I_sViewMode  = VIEWMODE,  @I_nExchangeRate = XCHGRATE,  @I_nDenomExchangeRate = DENXRATE,  @I_sMCTrxState = MCTRXSTT,  @I_sDecimalPlaces = DECPLACS,  @RateType = RATETPID,  @ExchangeTableType = EXGTBLID,  @ExchangeDate = EXCHDATE,  @ExchangeTime = TIME1,  @ISMCTRX = ISMCTRX,   @EXPNDATE = EXPNDATE, @l_Call = @RETREF, @SRVRECTYPE = 3, @EQPLINE = 1  from SVC00200 where CALLNBR = @RETREF and SRVRECTYPE = 3  else  select @History = 1, @CURRNIDX = CURRNIDX,  @I_sRateCalcMethod = RATECALC,  @I_sViewMode  = VIEWMODE,  @I_nExchangeRate = XCHGRATE,  @I_nDenomExchangeRate = DENXRATE,  @I_sMCTrxState = MCTRXSTT,  @I_sDecimalPlaces = DECPLACS,  @RateType = RATETPID,  @ExchangeTableType = EXGTBLID,  @ExchangeDate = EXCHDATE,  @ExchangeTime = TIME1,  @ISMCTRX = ISMCTRX,   @EXPNDATE = EXPNDATE, @l_Call = @RETREF, @SRVRECTYPE = 3, @EQPLINE = 1  from SVC30200 where CALLNBR = @RETREF and SRVRECTYPE = 3  end   end if @CALLNBR >'' and @SRVRECTYPE > 0   select @CURRNIDX = CURRNIDX,  @I_sRateCalcMethod = RATECALC,  @I_sViewMode  = VIEWMODE,  @I_nExchangeRate = XCHGRATE,  @I_nDenomExchangeRate = DENXRATE,  @I_sMCTrxState = MCTRXSTT,  @I_sDecimalPlaces = DECPLACS,  @RateType = RATETPID,  @ExchangeTableType = EXGTBLID,  @ExchangeDate = EXCHDATE,  @ExchangeTime = TIME1,  @ISMCTRX = ISMCTRX,   @EXPNDATE = EXPNDATE  from SVC00200 where CALLNBR = @CALLNBR and SRVRECTYPE = @SRVRECTYPE  if @l_Call > ''  exec SVC_RMA_FindAppendingRMA @RETDOCID output, @l_Call, @SRVRECTYPE, @Exists output  select @REFERENCE = '', @ReturnQTY = 0 if exists(select * from IV00101  where ITEMNMBR = @item)   select @ITEMDESC = ITEMDESC, @DecPlcQty = DECPLQTY, @DecPlcCur = DECPLCUR, @Tracking = ITMTRKOP,   @ItemType = ITEMTYPE, @CurrentCost = CURRCOST from IV00101  where ITEMNMBR = @item else  select @DecPlcQty = DECPLQTY, @DecPlcCur = DECPLCUR, @CurrentCost = 0 from SOP40100   if @ItemType = 3  select @svcRMAKitComponentFrom = 1 select @ITEMDESC = IsNull(@ITEMDESC,'') select @item = IsNull(@item,'') select @serial = IsNull(@serial,'')  if (select SVC_Use_CurrentCost from SVC00951 where ITEMNMBR = @item) = 1  select @ReturnCost = @CurrentCost else  select @ReturnCost = RETCOST from SVC00951 where ITEMNMBR = @item  if @RETORIG <> 3   select @BILLTOCUST = Bill_To_Customer from SVC00950 where CUSTNMBR = @custnmbr and ADRSCODE = @adrscode if @BILLTOCUST is null or @BILLTOCUST = ''  BEGIN  select @BILLTOCUST = @custnmbr  select @BILLTOADDRESS = PRBTADCD  from RM00101   where CUSTNMBR = @custnmbr   if @BILLTOADDRESS is null or @BILLTOADDRESS = ''  select @BILLTOADDRESS = @adrscode  END  ELSE if @BILLTOADDRESS is null or @BILLTOADDRESS = ''  BEGIN  select @BILLTOADDRESS = PRBTADCD  from RM00101   where CUSTNMBR = @BILLTOCUST   if @BILLTOADDRESS is null or @BILLTOADDRESS = ''  select @BILLTOADDRESS = ADRSCODE  from RM00101   where CUSTNMBR = @BILLTOCUST   END if @ShipMethod is null or @ShipMethod = ''  select @ShipMethod = SHIPMTHD from RM00102 where CUSTNMBR = @custnmbr and ADRSCODE = @adrscode if @RETTYPE is null or @RETTYPE = ''  select @RETTYPE = SVC00998.RETTYPE from SVC00998  select @RETSTAT = SVC05501.RETSTAT, @QtyType = QTYTYPE,  @INVITEM = SVC05501.ITEMNMBR,  @RETPATH = SVC05501.RETPATH  from SVC05501 where SVC05501.RETTYPE = @RETTYPE if @RETPATH = 1   select @CUSTOWN = 1 if @LOCNCODE is null or @LOCNCODE = ''  select @LOCNCODE = SVC05501.LOCNCODE from SVC05501 where SVC05501.RETTYPE = @RETTYPE   if @RETORIG = 2 and @CUSTOWN = 0   select @QtyType = 1 select     @RTRNNAME = LOCNDSCR,  @RETADDR1 = ADDRESS1,  @RETADDR2 = ADDRESS2,  @RETADDR3 = ADDRESS3,  @RTRNCITY = CITY,  @ReturnCountry = COUNTRY,  @RTRNSTAT = STATE,  @RTRNZIP = ZIPCODE from IV40700 where LOCNCODE = @LOCNCODE select @ReplaceLocation = LOCNCODE from SOP40100  if exists(select * from SVC00950 INNER JOIN SVC00902 ON (SVC00950.OFFID = SVC00902.OFFID)  where SVC00950.CUSTNMBR = @custnmbr and SVC00950.ADRSCODE = @BILLTOADDRESS)  select @OFFID = SVC00902.OFFID  from SVC00950 INNER JOIN  SVC00902 ON (SVC00950.OFFID = SVC00902.OFFID)  where SVC00950.CUSTNMBR = @custnmbr and SVC00950.ADRSCODE = @BILLTOADDRESS else if exists(select * from SVC00998 INNER JOIN SVC00902 ON (SVC00998.OFFID = SVC00902.OFFID))  select @OFFID = SVC00902.OFFID  from SVC00998 INNER JOIN  SVC00902 ON (SVC00998.OFFID = SVC00902.OFFID) else  select @OFFID = ''  IF @UOM is null or @UOM = '' BEGIN  exec SVC_IV_UMObj_GetBaseUofM @item,@UOM OUTPUT, @Status OUTPUT  IF @Status <> 0   select @UOM = 'Each' END   select @UseReturnPrice = SVC_Use_Return_Price_Lev from SVC00998   if @UseReturnPrice = 1  select @PriceLevel = SVC_Return_Price_Level from SVC00998  else  select @PriceLevel = isnull(@prclevel,'') if @CALLNBR > ''  select @UnitCost = UNITCOST, @UnitPrice = UNITPRCE, @OrigUnitCost = ORUNTCST, @OrigUnitPrice = ORUNTPRC,  @ExUnitCost = UNITCOST * @QTY, @ExOrigUnitCost = ORUNTCST * @QTY,  @ExUnitPrice = UNITPRCE * @QTY , @ExOrigUnitPrice = ORUNTPRC * @QTY  from SVC00203 where CALLNBR = @CALLNBR and SRVRECTYPE = @SRVRECTYPE and EQPLINE= @EQPLINE and LNITMSEQ = @LNITMSEQ and CMPNTSEQ = @CMPNTSEQ else   begin  if @RETORIG = 2 and @RETREF > ''   begin  if @History = 1  select @UnitCost = UNITCOST, @UnitPrice = UNITPRCE, @OrigUnitCost = ORUNTCST, @OrigUnitPrice = ORUNTPRC,  @ExUnitCost = UNITCOST * @QTY, @ExOrigUnitCost = ORUNTCST * @QTY,  @ExUnitPrice = UNITPRCE * @QTY , @ExOrigUnitPrice = ORUNTPRC * @QTY  from SVC30203 where CALLNBR = @RETREF and SRVRECTYPE = 3 and EQPLINE= 1 and LNITMSEQ = @LNITMSEQ and CMPNTSEQ = @CMPNTSEQ  else  select @UnitCost = UNITCOST, @UnitPrice = UNITPRCE, @OrigUnitCost = ORUNTCST, @OrigUnitPrice = ORUNTPRC,  @ExUnitCost = UNITCOST * @QTY, @ExOrigUnitCost = ORUNTCST * @QTY,  @ExUnitPrice = UNITPRCE * @QTY , @ExOrigUnitPrice = ORUNTPRC * @QTY  from SVC00203 where CALLNBR = @RETREF and SRVRECTYPE = 3 and EQPLINE= 1 and LNITMSEQ = @LNITMSEQ and CMPNTSEQ = @CMPNTSEQ  end  else if @RETORIG = 3 and @RETREF > ''   Begin  select @UnitCost = UNITCOST, @UnitPrice = UNITPRCE, @SOPMarkDown = MRKDNAMT  from SOP30300 where SOPTYPE =3 and SOPNUMBE = @RETREF and LNITMSEQ =@LNITMSEQ and CMPNTSEQ = @EQPLINE  if @SOPMarkDown > 0   select @UnitPrice = @UnitPrice - @SOPMarkDown  End  else  begin  exec SVC_ExtPricing_GetPrice 'R', @item , @PriceLevel , @custnmbr, @QTY , @CurrencyID,  @UOM output, @UnitPrice output, @UnitCost output   if @ReturnCost > 0 select @UnitCost = @ReturnCost  end   end  if @CURRNIDX > 0   begin  exec SVC_Convert_Amount @I_sRateCalcMethod, 3,@I_nExchangeRate,  @I_nDenomExchangeRate,@I_sMCTrxState,@I_sDecimalPlaces,  @UnitCost, @OrigUnitCost OUTPUT, @O_iErrorState OUTPUT  exec SVC_Convert_Amount @I_sRateCalcMethod, 3,@I_nExchangeRate,  @I_nDenomExchangeRate,@I_sMCTrxState,@I_sDecimalPlaces,  @UnitPrice, @OrigUnitPrice OUTPUT, @O_iErrorState OUTPUT  end else  begin  select @OrigUnitCost = @UnitCost  select @OrigUnitPrice = @UnitPrice  end  if @Exists = 0 and (@RETDOCID is null or @RETDOCID = '')  exec SVC_New_DocumentID 'RMA', @RETDOCID  OUTPUT  if not exists(select * from SVC05000 where RETDOCID = @RETDOCID and Return_Record_Type = 1)  begin  exec SVC_Get_Next_Note_Index @NewNoteIndex output  insert into SVC05000 with (rowlock)  select @RETDOCID, 1, 0,0, isnull(@RETORIG,1), isnull(@RETREF,''),  isnull(@RETSTAT, ''), isnull(@RETTYPE,''),   CONVERT(char(10),@UserDate,102) + ' 00:00:00' ,   @enttme,  @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate,  @USERID,   isnull(@OFFID,''), isnull(@RTRNNAME,''),  isnull(@RETADDR1,''), isnull(@RETADDR2,''), isnull(@RETADDR3,''),  isnull(@RTRNCITY,''), isnull(@RTRNSTAT,''), isnull(@RTRNZIP,''), isnull(@ReturnCountry,''),  isnull(@LOCNCODE,''),  @custnmbr, isnull(@adrscode,''), isnull(@custname,''),  isnull(@tempcntcprsn,''),   isnull(@address1,''), isnull(@address2,''), isnull(@address3,''),  isnull(@city,''), isnull(@statecd,''), isnull(@zip,''), isnull(@Country,''),  @NewNoteIndex, isnull(@l_Call,''), @SRVRECTYPE, @EQPLINE, @LNITMSEQ,   '', isnull(@ShipMethod,''), @SOPType, @SOPNumber, @SOPLine,  @CMPNTSEQ, isnull(@BILLTOCUST,''), isnull(@BILLTOADDRESS,''), @MinDate, @MinDate,  '', '', '', '', '',  isnull(@CurrencyID,''), isnull(@CURRNIDX,0), isnull(@RateType,''), isnull(@ExchangeTableType,''),  isnull(@I_nExchangeRate,0), isnull(@ExchangeDate,@MinDate), isnull(@I_sDecimalPlaces,1),  isnull(@ExchangeTime,@MinDate), isnull(@I_sRateCalcMethod,0), isnull(@I_sViewMode,0),  isnull(@ISMCTRX,0), isnull(@EXPNDATE,@MinDate), isnull(@I_nDenomExchangeRate,0), isnull(@I_sMCTrxState,0),  isnull(@CustPO,''), isnull(@ReasonCode,''), isnull(@ReasonDesc,''), @FromService, ''   if @@error <> 0 goto baderror  end  else   begin  if @RETORIG > 1 and @RETREF > ''   update SVC05000 with (rowlock) set   RETORIG = @RETORIG, RETREF = @RETREF, SOPTYPE = isnull(@SOPType,0),  SOPNUMBE = isnull(@SOPNumber,''), SOP_Line_Item_Sequence = isnull(@SOPLine,0)  where RETDOCID = @RETDOCID and Return_Record_Type = 1  if @RETORIG = 3 and @RETREF > '' and @EQPLINE = 0   Begin  update SVC05000 with (rowlock) set  ADRSCODE = isnull(@adrscode, ADRSCODE),  SVC_Bill_To_Address_Code = isnull(@BILLTOADDRESS, SVC_Bill_To_Address_Code),  CONTACT = isnull(@tempcntcprsn,CONTACT),  ADDRESS1 = isnull(@address1,ADDRESS1),  ADDRESS2 = isnull(@address2,ADDRESS2),  ADDRESS3 = isnull(@address3,ADDRESS3),  CITY = isnull(@city,CITY),  STATE = isnull(@statecd,STATE),  ZIPCODE = isnull(@zip,ZIPCODE),  COUNTRY = isnull(@Country,COUNTRY),  SHIPMTHD = isnull(@ShipMethod,SHIPMTHD),  CSTPONBR = isnull(@CustPO,CSTPONBR)  where RETDOCID = @RETDOCID and Return_Record_Type = 1  End  end  if exists(select * from SVC05200 where RETDOCID = @RETDOCID and SRVRECTYPE=@SRVRECTYPE and CMPNTSEQ = @CMPNTSEQ  and CALLNBR =@CALLNBR and EQPLINE =@EQPLINE and LNITMSEQ = @LNITMSEQ and SVC_RMA_From_Service = 1)  or exists(select * from SVC05200 where RETDOCID = @RETDOCID and LNSEQNBR = @Line)  begin  if @Line = 0   select @Line = LNSEQNBR, @RMACompSeq = svcRMAComponentSeq from SVC05200 where RETDOCID = @RETDOCID and SRVRECTYPE=@SRVRECTYPE and CMPNTSEQ = @CMPNTSEQ  and CALLNBR =@CALLNBR and EQPLINE =@EQPLINE and LNITMSEQ = @LNITMSEQ and SVC_RMA_From_Service = 1  update SVC05200 set QUANTITY = QUANTITY + 1, QTYONHND = QTYONHND + 1 where RETDOCID = @RETDOCID and Return_Record_Type = 1 and LNSEQNBR = @Line   end  else  begin  if @RETORIG = 3 and @RETREF > '' and @EQPLINE > 0   begin  if exists(select 1 from SVC05200 where RETDOCID = @RETDOCID and Return_Record_Type = 1  and   SOPTYPE = @SOPType and SOPNUMBE = @SOPNumber and SOP_Line_Item_Sequence = @SOPLine and CMPNTSEQ = 0)  select @RMACompSeq = @EQPLINE, @Line = LNSEQNBR from SVC05200 where RETDOCID = @RETDOCID and Return_Record_Type = 1  and   SOPTYPE = @SOPType and SOPNUMBE = @SOPNumber and SOP_Line_Item_Sequence = @SOPLine and CMPNTSEQ = 0  else  select @RMACompSeq = 0, @Line = isnull(Max(LNSEQNBR),0) + 100 from SVC05200 where RETDOCID = @RETDOCID and Return_Record_Type = 1   end  else  begin  select @RMACompSeq = 0, @Line = isnull(Max(LNSEQNBR),0) + 100 from SVC05200 where RETDOCID = @RETDOCID and Return_Record_Type = 1   end  exec SVC_Get_Next_Note_Index @NewNoteIndex output  select @QTYONHND=0,@QTYRTRND=0,@QTYINUSE=0,@QTYINSVC=0,@QTYDMGED = 0  if @QtyType = 1 select @QTYONHND = @QTY   else if @QtyType = 2 select @QTYRTRND = @QTY  else if @QtyType = 3 select @QTYINUSE = @QTY  else if @QtyType = 4 select @QTYINSVC = @QTY  else select @QTYDMGED = @QTY  insert into SVC05200 with (rowlock) select   RETDOCID, Return_Record_Type, @Line, 0,0,   isnull(@RETTYPE,''), 0, isnull(@RETSTAT,''), 0, 0, 0,   SVC_RMA_Reason_Code, SVC_RMA_Reason_Code_Desc, @NewNoteIndex, @RETORIG, @RETREF, SRVRECTYPE, CALLNBR, EQPLINE, @LNITMSEQ,  SVC_RMA_From_Service, SOPTYPE, SOPNUMBE, @CMPNTSEQ, @LNITMSEQ,   CONVERT(char(10),@UserDate,102) + ' 00:00:00' ,   @enttme, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate,  @MinDate, '', @USERID, OFFID,   isnull(@LOCNCODE,''),RTRNNAME, RETADDR1, RETADDR2, RETADDR3, RTRNCITY,SVC_Return_State, RTRNZIP,Return_Country,  CUSTNMBR, CUSTNAME, isnull(@adrscode,ADRSCODE), isnull(@tempcntcprsn,''),   isnull(@address1,''), isnull(@address2,''), isnull(@address3,''),  isnull(@city,''), isnull(@statecd,''), isnull(@zip,''), isnull(@Country,''),  Bill_To_Customer, SVC_Bill_To_Address_Code, CSTPONBR, @QTY, isnull(@DecPlcQty,1), isnull(@UOM,''), isnull( @item,''),isnull(@ITEMDESC,''),  isnull(@UnitCost,0.0), isnull(@OrigUnitCost,0),  isnull(@QTY* @UnitCost,0), isnull(@QTY * @OrigUnitCost,0), isnull(@UnitPrice,0.0), isnull(@OrigUnitPrice,0),   isnull(@QTY * @UnitPrice,0), isnull(@QTY * @OrigUnitPrice,0), @CUSTOWN,  0,  '', 0, 0, 0, 0,  0, 0, 0, 0, 0, 0,  Bill_of_Lading, isnull(@ShipMethod,''), 0, '', 0,   0, '', 0, isnull(@ReplaceLocation,LOCNCODE) , @item,  @UOM, isnull(@prclevel,''), 0, 0, 0, 0,  0, '', isnull(@INVITEM,''),   '','','','','', CURRNIDX, isnull(@DecPlcCur,1), isnull(@DecPlcCur,1),   isnull( @item,''), @ITEMDESC, isnull(@LOCNCODE,''), @ReturnQTY,  isnull(@UOM,''), isnull(@UnitCost,0), isnull(@OrigUnitCost,0),   isnull(@UnitCost * @ReturnQTY,0), isnull(@OrigUnitCost * @ReturnQTY,0),   isnull(@PriceLevel,''), isnull(@UnitPrice,0), isnull(@OrigUnitPrice,0),   isnull(@UnitPrice * @ReturnQTY,0), isnull(@OrigUnitPrice * @ReturnQTY,0), '', 0,   @svcRMAKitComponentFrom,@RMACompSeq, 0,  @QTYONHND,@QTYRTRND,@QTYINUSE,@QTYINSVC,@QTYDMGED,0,0  from SVC05000  where RETDOCID = @RETDOCID and Return_Record_Type = 1   if @@error <> 0 goto baderror  if @EnableBin = 1 and (@Bin = '' or @Bin is null)   exec SVC_Bin_GetDefault @item, @LOCNCODE, 'R', @Bin output   if @EnableBin = 1 and @Tracking = 1   begin  exec SVC_Get_QtyInBase @item,@UOM,1,@QtyInBase OUTPUT  select @BinQty = @QTY * @QtyInBase  exec SVC_Bin_CreateBinWork 3, 1, @RETDOCID, @Line,  @item, @LOCNCODE, @LOCNCODE, @Bin, @Bin, @BinQty, @RMACompSeq, @QtyType  end  end if @serial> '' and @Tracking = 2  begin  exec SVC_RMA_Create_SerialLot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @Bin, @custnmbr, @adrscode, 1, @RMACompSeq, @QtyType  end else  begin  if @RETORIG = 2   begin  if @CALLNBR > '' and @SRVRECTYPE = 2  declare SerialLot cursor for select SERLTNUM , UNITCOST, DATERECD, DTSEQNUM, SERLTQTY, BIN,MFGDATE,EXPNDATE from SVC00250 where  SRVRECTYPE= @SRVRECTYPE and CALLNBR = @CALLNBR and EQPLINE = @EQPLINE and LINITMTYP = 'P' and LNITMSEQ = @LNITMSEQ and CMPNTSEQ = @CMPNTSEQ  else  declare SerialLot cursor for select SERLTNUM , UNITCOST, DATERECD, DTSEQNUM, SERLTQTY, BIN,MFGDATE,EXPNDATE from SVC05251 where  SRVRECTYPE=3 and CALLNBR = @RETREF and EQPLINE = 1 and LINITMTYP = 'P' and LNITMSEQ = @LNITMSEQ   open SerialLot  fetch next from SerialLot into @serial, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @OriginalBin, @mfg_date, @exp_date  while @@FETCH_STATUS = 0  BEGIN  select @Bin = isnull(@Bin, @OriginalBin)  if @Tracking = 2  exec SVC_RMA_Create_SerialLot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @Bin, @custnmbr, @adrscode, 1, @RMACompSeq, @QtyType  else  exec SVC_RMA_Create_Lot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @Bin,  @Origin, @exp_date,@mfg_date, @RMACompSeq, @QtyType   fetch next from SerialLot into @serial, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @OriginalBin, @mfg_date, @exp_date  END  deallocate SerialLot   if @ItemType = 3 and @CALLNBR = ''  Begin  if @History = 0  declare SerialLot cursor for select ITEMNMBR, SERLTNUM , UNITCOST, DATERECD, DTSEQNUM, SERLTQTY, BIN,MFGDATE,EXPNDATE ,CMPNTSEQ from SVC00250 where  SRVRECTYPE=3 and CALLNBR = @RETREF and EQPLINE = 1 and LINITMTYP = 'P' and LNITMSEQ = @LNITMSEQ and POSTED = 1 and CMPNTSEQ > 0  else  declare SerialLot cursor for select ITEMNMBR, SERLTNUM , UNITCOST, DATERECD, DTSEQNUM, SERLTQTY, BIN,MFGDATE,EXPNDATE ,CMPNTSEQ from SVC30250 where  SRVRECTYPE=3 and CALLNBR = @RETREF and EQPLINE = 1 and LINITMTYP = 'P' and LNITMSEQ = @LNITMSEQ and POSTED = 1 and CMPNTSEQ > 0   open SerialLot  fetch next from SerialLot into @item, @serial, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @OriginalBin, @mfg_date, @exp_date, @CMPNTSEQ  while @@FETCH_STATUS = 0  BEGIN  select @Bin = isnull(@Bin, @OriginalBin)  if exists(select * from IV00101 where ITEMNMBR = @item and ITMTRKOP = 2)  exec SVC_RMA_Create_SerialLot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @Bin, @custnmbr, @adrscode, 1, @CMPNTSEQ, @QtyType  else  exec SVC_RMA_Create_Lot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @Bin, @Origin, @exp_date,@mfg_date, @CMPNTSEQ, @QtyType   fetch next from SerialLot into @item, @serial, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @OriginalBin, @mfg_date, @exp_date, @CMPNTSEQ  END  deallocate SerialLot  End   end   else if @RETORIG = 3 and @Tracking > 1  begin  if (select sum(SERLTQTY) from SVC05250 where SOPTYPE = 3 and SOPNUMBE =@RETREF and LNITMSEQ = @LNITMSEQ) = @QTY   declare SerialLot cursor for select SERLTNUM, UNITCOST, DATERECD, DTSEQNUM, SERLTQTY, BIN,MFGDATE,EXPNDATE from SVC05250 where  SOPTYPE = 3 and SOPNUMBE =@RETREF and LNITMSEQ = @LNITMSEQ and CMPNTSEQ = @EQPLINE order by LNITMSEQ  else  declare SerialLot cursor for select SERLTNUM, UNITCOST, DATERECD, DTSEQNUM, SERLTQTY, BIN,MFGDATE,EXPNDATE from SOP10201 where  SOPTYPE = 3 and SOPNUMBE =@RETREF and LNITMSEQ = @LNITMSEQ and CMPNTSEQ = @EQPLINE order by LNITMSEQ   open SerialLot  fetch next from SerialLot into @serial, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @OriginalBin, @mfg_date, @exp_date  while @@FETCH_STATUS = 0  BEGIN  select @Bin = isnull(@Bin, @OriginalBin)  if @Tracking = 2  exec SVC_RMA_Create_SerialLot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @Bin, @custnmbr, @adrscode, 1, @RMACompSeq, @QtyType  else  exec SVC_RMA_Create_Lot 1, @RETDOCID, @Line, @serial, @item, @LOCNCODE, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @Bin, @Origin, @exp_date, @mfg_date, @RMACompSeq, @QtyType  fetch next from SerialLot into @serial, @CurrentCost, @rcv_date, @date_seq, @lot_qty, @OriginalBin, @mfg_date, @exp_date  END  deallocate SerialLot  end  end if @FromService = 0  begin  exec SVC_Get_QtyInBase @item,@UOM,1,@QtyInBase OUTPUT  select @ExUnitPrice = @UnitPrice * @QTY * @QtyInBase  select @ExUnitCost = @UnitCost * @QTY * @QtyInBase  select @ExOrigUnitPrice = @OrigUnitPrice * @QTY * @QtyInBase  select @ExOrigUnitCost = @OrigUnitCost * @QTY * @QtyInBase  end  exec SVC_Set_RMA_Dist @RETDOCID,1,@Line, 0,'',0,@ExUnitPrice,@ExOrigUnitPrice,  @ExUnitCost,@ExOrigUnitCost,1,0 exec SVC_RMA_Set_HDR_Status @RETDOCID  return 0 baderror:  return   
GO
GRANT EXECUTE ON  [dbo].[SVC_Create_RMA] TO [DYNGRP]
GO
