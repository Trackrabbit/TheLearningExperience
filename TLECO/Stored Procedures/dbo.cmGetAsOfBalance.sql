SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[cmGetAsOfBalance]  @iCheckBookID char(15)   = NULL,  @iEndDate datetime   = NULL,  @oAsOfBalance numeric(19,5)   = NULL output,  @oAppError int    = NULL output as  declare  @lControlLoop tinyint,  @lSqlError int,  @lPaymentAmt numeric(19,5),  @lDepositAmt numeric(19,5),  @lTrxType smallint,  @lClearedAmt numeric(19,5),   @lTrxAmt numeric(19,5),  @lReconciled tinyint,  @lRecNum numeric(19,5),  @lXfrNum numeric(19,5),  @lVoided tinyint,  @lVoidDate datetime,  @lTrxDate datetime  while (@lControlLoop is NULL) begin  select @lControlLoop = 1   if @iCheckBookID = NULL or  @iEndDate = NULL   begin  select @oAppError = 1  break  end   select @oAsOfBalance = 0  select @oAppError = 0  select @lSqlError = 0   select   @oAsOfBalance = CURRBLNC  from  CM00100  where  CHEKBKID = @iCheckBookID   declare   TrxCursor scroll cursor  for  select   CMTrxType,  ClrdAmt,  Checkbook_Amount,  Recond,  CMRECNUM,  Xfr_Record_Number,  VOIDED,  VOIDDATE,  TRXDATE  from  CM20200  where  CHEKBKID = @iCheckBookID  and  (TRXDATE > @iEndDate or VOIDDATE > @iEndDate)  order by  TRXDATE   open TrxCursor   if @@cursor_rows = 0  begin  deallocate TrxCursor  break  end   fetch last from  TrxCursor  into  @lTrxType,  @lClearedAmt,   @lTrxAmt,  @lReconciled,  @lRecNum,  @lXfrNum,  @lVoided,  @lVoidDate,  @lTrxDate   while (@@fetch_status = 0)  begin  select @lPaymentAmt = 0  select @lDepositAmt = 0   exec @lSqlError = cmGetPaymentDepositAmounts  @lTrxType,  @lClearedAmt,  @lTrxAmt,  @lReconciled,  @lVoided,  @lRecNum,  @lXfrNum,  @lPaymentAmt output,  @lDepositAmt output,  @oAppError output   if @lSqlError = 0 and @@error <> 0   select @lSqlError = @@error  if @lSqlError <> 0 or @oAppError <> 0  break    if @lPaymentAmt <> 0 and @lVoided = 0  select @oAsOfBalance = @oAsOfBalance + @lPaymentAmt   if @lPaymentAmt <> 0 and @lVoided = 1 and @lVoidDate > @iEndDate and @lTrxDate <= @iEndDate  select @oAsOfBalance = @oAsOfBalance - @lPaymentAmt   if @lDepositAmt <> 0 and @lVoided = 0  select @oAsOfBalance = @oAsOfBalance - @lDepositAmt   if @lDepositAmt <> 0 and @lVoided = 1 and @lVoidDate > @iEndDate and @lTrxDate <= @iEndDate  select @oAsOfBalance = @oAsOfBalance + @lDepositAmt   fetch prior from  TrxCursor  into  @lTrxType,  @lClearedAmt,   @lTrxAmt,  @lReconciled,  @lRecNum,  @lXfrNum,  @lVoided,  @lVoidDate,  @lTrxDate  end  deallocate TrxCursor end return (@lSqlError)    
GO
GRANT EXECUTE ON  [dbo].[cmGetAsOfBalance] TO [DYNGRP]
GO
