SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE   PROCEDURE [dbo].[aagValidateBudgetForImport] (  @aaBudgetID INTEGER ,  @CodeSeqAbove INTEGER OUTPUT ,  @CodeSeqBelow INTEGER OUTPUT ,  @nResultOut INTEGER OUTPUT ) AS  BEGIN  DECLARE @nPeriodCount INTEGER  DECLARE @nCodeCount INTEGER  DECLARE @aaCodeSequence INTEGER  DECLARE @aaFiscalPeriod INTEGER  DECLARE @PeriodDate DATETIME  DECLARE @aaBudgetTreeID INTEGER  DECLARE @nChCount INTEGER  DECLARE @nResult INTEGER  DECLARE @temp_CodeSequence TABLE (aaCodeSequence INTEGER)   DECLARE @aaActualPriliminary INTEGER   DECLARE @aaAmountQty INTEGER   declare @ChildrenTotal FLOAT   declare @NodeAmount FLOAT   SELECT @aaBudgetTreeID = aaBudgetTreeID   FROM AAG00903   WHERE aaBudgetID = @aaBudgetID   DECLARE MainLoopCur cursor fast_forward for  SELECT DISTINCT aaCodeSequence FROM AAG00904 WHERE   aaBudgetID = @aaBudgetID   open MainLoopCur   fetch next from MainLoopCur into  @aaCodeSequence  WHILE @@fetch_status = 0  BEGIN   UPDATE AAG00906   SET aaCodeSequence = @aaCodeSequence,   ACTINDX = 0  WHERE WINTYPE = 1    set @aaActualPriliminary=0  set @aaAmountQty=0  SELECT @aaActualPriliminary = aaActualPriliminary ,  @aaAmountQty = aaAmtQty   FROM AAG00906 WHERE USERID = SYSTEM_USER and WINTYPE = 1  DELETE FROM @temp_CodeSequence  INSERT INTO @temp_CodeSequence SELECT aaCodeSequence FROM   dbo.aagGetChildNodes ( @aaBudgetTreeID, @aaCodeSequence )  IF (SELECT COUNT(*) FROM @temp_CodeSequence)  > 0  BEGIN   declare SecondLoopCur cursor fast_forward for  SELECT DISTINCT PERIODDT, aaFiscalPeriod  FROM AAG00904 WHERE   aaBudgetID = @aaBudgetID   ORDER BY PERIODDT  open SecondLoopCur   fetch next from SecondLoopCur into  @PeriodDate, @aaFiscalPeriod  WHILE @@fetch_status = 0  BEGIN  SELECT @NodeAmount = CASE @aaAmountQty WHEN 0 THEN Balance WHEN 1 THEN QUANTITY END  FROM AAG00904 WHERE  aaCodeSequence = @aaCodeSequence AND  aaBudgetID = @aaBudgetID AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  PERIODDT = @PeriodDate  SELECT @ChildrenTotal = CASE @aaAmountQty WHEN 0 THEN SUM(Balance)  ELSE SUM(QUANTITY) END FROM AAG00904 WHERE aaBudgetID = @aaBudgetID AND  aaCodeSequence IN  (  SELECT aaCodeSequence FROM  @temp_CodeSequence   )  AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate  IF @ChildrenTotal IS NULL OR (@NodeAmount < @ChildrenTotal)  BEGIN  SET @nResultOut = -1  PRINT @aaCodeSequence  PRINT @aaFiscalPeriod  PRINT @PeriodDate  SET @CodeSeqAbove = @aaCodeSequence  SELECT TOP 1 @CodeSeqBelow = aaCodeSequence   FROM dbo.aagGetChildNodes( @aaBudgetTreeID  , @aaCodeSequence )  close SecondLoopCur   deallocate SecondLoopCur   close MainLoopCur   deallocate MainLoopCur  RETURN -1   END  fetch next from SecondLoopCur into  @PeriodDate, @aaFiscalPeriod  END  CLOSE SecondLoopCur  DEALLOCATE SecondLoopCur  END   fetch next from MainLoopCur into  @aaCodeSequence  END  CLOSE MainLoopCur  DEALLOCATE MainLoopCur   SET @nResultOut = 1  RETURN 1 END    
GO
GRANT EXECUTE ON  [dbo].[aagValidateBudgetForImport] TO [DYNGRP]
GO
