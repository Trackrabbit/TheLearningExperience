SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taFSServiceCallLine]  @I_vSRVRECTYPE smallint,    @I_vCALLNBR char(11),     @I_vEQPLINE int = 1,     @I_vLNITMSEQ bigint = 0,    @I_vLINITMTYP char(3) = 'P',    @I_vSRVSTAT char(3) = null,    @I_vTECHID char(11) = null,    @I_vCUSTNMBR char (15) = null,    @I_vADRSCODE char(15) = null,    @I_vITEMNMBR char(31) = null,    @I_vCKNORETURNS smallint = 0,    @I_vITEMDESC char(101) = null,    @I_vLOCNCODE char(11) = null,    @I_vUOFM char(9) = null,    @I_vQTYORDER numeric(19, 5) = null,   @I_vATYALLOC numeric(19, 5) = null,   @I_vQTYBACKO numeric(19, 5) = null,   @I_vQTYSOLD numeric(19, 5) = null,   @I_vUNITCOST numeric(19, 5) = null,   @I_vUNITPRCE numeric(19, 5) = null,   @I_vXTNDPRCE numeric(19, 5) = null,   @I_vNOTETXT varchar(8000) = '',    @I_vSTRTDATE datetime = null,    @I_vSTRTTIME datetime = null,    @I_vENDDATE datetime = null,    @I_vENDTME datetime = null,    @I_vTRANSTME numeric(10,2) = null,   @I_vBILLABLTIM numeric(10,2) = null,   @I_vENTDTE datetime = null,    @I_vENTTME datetime = null,    @I_vLABPCT numeric(19, 5) = null,   @I_vPARTPCT numeric(19, 5) = null,    @I_vMISCPCT numeric(19, 5) = null,    @I_vCKCREATEPO smallint = 0,    @I_vVENDORID char(15) = null,    @I_vPRMDATE datetime = null,    @I_vMiles_Start int = null,    @I_vMiles_End int = null,    @I_vMiles_Used int = null,    @I_vPRICELVL char(15) = null,    @I_vSVC_Address_Option smallint = null,   @I_vSVC_Misc_Address_Code char(15) = null,  @I_vSVC_Disable_XFR_Grouping tinyint = null,  @I_vWork_Type char(11) = null,    @I_vSVC_FO_ID char(51) = null,    @I_vCURNCYID char(15) = '',    @I_vNonInventory smallint = 0,    @I_vCreate_Overtime_Labor smallint = 0,  @I_vOvertime_Labor_Item_Number char(31) = '',   @I_vUpdateIfExists tinyint = 1,    @I_vRequesterTrx smallint = 0,    @I_vUSRDEFND1 char(50) = '',    @I_vUSRDEFND2 char(50) = '',      @I_vUSRDEFND3 char(50) = '',    @I_vUSRDEFND4 varchar(8000) = '',   @I_vUSRDEFND5 varchar(8000) = '',   @O_iErrorState int output,    @oErrString varchar(255) output     with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @O_TODAY datetime,  @O_DUMMYDT datetime,  @O_vFUFILDAT datetime,  @NOTEINDX numeric(19,5),  @iGetNextNoteIdxErrState int,  @O_iNOTEINDX numeric(19,5),  @O_iQTYSOLD numeric(19,5),  @O_iQTYORDER numeric(19,5),   @O_iATYALLOC numeric(19,5),  @O_iQTYBACKO numeric(19,5),  @O_iQTYONHND numeric(19,5),  @O_iQTYALLOC numeric(19,5),  @iTRXQTYSOLD numeric(19,5),  @iStatus int,  @iError int,  @iCustomState int,  @O_oErrorState int,  @iCustomErrString varchar(255),  @CMPANYID smallint,  @O_vITEMUSETYPE char(3),   @ReturnableItem smallint,  @PRICELVL char(15),  @DEFPRICELVL char(15),  @RMPRICELVL char(15),  @TECHPRICELVL char(15),  @CUSTPRICELVL char(15),  @ITMDEFPRCLEVEL char(15),  @SVCAREA char(11),  @OFFID char(11),  @iTECHID char(11),  @TIMEZONE char(3),  @O_TRANSTME char(7),  @O_BILLABLTIM char(7),  @O_Hours integer,  @O_Minutes integer,  @iCURRCOST numeric(19,5),  @iSTNDCOST numeric(19,5),  @iLISTPRCE numeric(17,5),  @O_vITMSHNAM char(15),  @O_vITMGEDSC char(10),  @O_vITMCLSCD char(10),  @O_vITEMSHWT bigint,  @Backorder_Status char(3),  @Intransit_Status char(3),  @Dispatch_Status char(3),  @Arrival_Status char(3),  @Complete_Status char(3),  @FRMSTAT char(3),  @SRVSTAT char(3),  @POSTAT char(3),  @iBOSTATUS char(3),  @SRVTYPE char(11),  @TECHID char(11),  @TECHSTAT char(11),  @GOODTECHLOCN char(11),  @BADLOCNCODE char(11),  @GOODOFFLOCN char(11),  @DEFLOCNCODE char(11),  @O_vOn_Return tinyint,  @O_vRETDOCID char(15),  @O_vLNSEQNBR numeric(19,5),  @iRETDOCID char(15),  @O_iRETDOCID char(15),  @O_iRETDOCTYP smallint,  @iGetNextDocIdErrState int,  @SVC_Sales_Only smallint,  @iValueExists smallint,  @HOLD smallint,  @INACTIVE smallint,  @PYMTRMID char (21),  @PRBTADCD char(15),  @AuditDesc char(31),  @UserID char(15),  @Tech_Available int,  @AuditLNITMSEQ int,  @Line_Seq_Exists smallint,  @O_iITEMNMBR char(31),  @iITMTRKOP smallint,  @iITEMTYPE smallint,  @iUOMSCHDL char(11),  @iSELNGUOM char(11),  @iCurrDecPlaces smallint,  @CURRNIDX int,  @iQtyDecPlaces smallint,  @iMCCurrDecPlaces smallint,  @iValid tinyint,  @O_iHasDocs smallint,  @O_vADDRESS1 char(30),  @O_vADDRESS2 char(30),  @O_vADDRESS3 char(30),  @O_vCOUNTRY char(30),  @O_vCITY char(30),  @O_vSTATE char(30),  @O_vZIP char(10),  @O_vCNTCPRSN char(30),  @O_vPHONE1 char(22),  @O_vIVDOCNBR char(17),  @O_NextIVDOCNBR char(20),  @O_vIVBACHNUMB char(15),  @O_vSERLTNUM char(21),  @O_vBIN char(15),  @O_POSTED tinyint,  @O_SLTSQNUM int,   @O_SERLTQTY numeric(19,5),  @O_DTSEQNUM numeric(19,5),   @O_DATERECD datetime,  @O_vPONMBRSTR char(17),  @O_vPOLNSEQ numeric(19,5),  @O_NextPONUMBER char(17),  @VENDHOLD smallint,  @VENDINACTIVE int,  @VENDPYMTRMID char(20),  @VADDCDPR char(10),  @VENDCURNCYID char(15),  @VENDRATETPID char(15),  @VENDNAME char(65),  @VNDITNUM char(30),  @VNDITDSC char(100),  @Use_POP smallint,  @O_vTRNSFLOC char(11),  @O_vTRNSFQTY numeric(19, 5),  @O_vTRNFLAG tinyint,  @O_vORDDOCID char(15),  @O_vTRANSLINESEQ int,  @iRETORIG smallint,  @O_vRETQTY numeric(19,5),  @O_vRETLNITMSEQ bigint,  @O_vRETLOCNCODE char(11),  @O_vEXTDCOST numeric(19, 5),  @O_vORUNTCST numeric(19, 5),  @O_vORUNTPRC numeric(19, 5),  @O_vOREXTCST numeric(19, 5),  @O_vOXTNDPRC numeric(19, 5),  @O_vTAXAMNT numeric(19, 5),  @O_vORTAXAMT numeric(19, 5),  @CURNCYID char(15),  @I_vCURRNIDX smallint,  @RATETPID char(15),  @ISMCTRX int,  @FUNLCURR char (15),  @EXGTBLID char(15),  @I_vDECPLACS int,  @I_vRATECALC int,  @I_vVIEWMODE int,  @I_vDENXRATE numeric (19,5),  @I_vMCTRXSTT int,  @SLSRATETPID char(15),  @FINRATETPID char(15),  @PURRATETPID char(15),  @O_vXCHGRATE numeric(19,5),  @O_vRATETPID char(15),  @O_vEXPNDATE datetime,  @O_vEXCHDATE datetime,  @O_vEXGTBDSC char(30),  @O_vEXTBLSRC char(50),  @O_vRATEEXPR smallint,  @O_vDYSTINCR smallint,  @O_vRATEVARC numeric(19,5),  @O_vTRXDTDEF smallint,  @O_vRTCLCMTD smallint,  @O_vPRVDSLMT smallint,  @O_vDATELMTS smallint,  @O_vTIME1 datetime,  @ItemListPrice numeric(19,5),  @ItemCost numeric(19,5),  @iCounter smallint,  @iSerialCount smallint,  @iInventoryOffsetIndex int,  @iInventoryAccount int,  @iBILLPCT numeric(19,5),  @O_vQTYINBASE numeric(19,5),  @SVC_Use_Return smallint,  @O_vRETURNPRICELVL char(15),  @iUSECURRCOST smallint,  @O_vRETCOST numeric(19,5),  @O_vRETUNITCOST numeric(19,5),  @O_vRETUNITPRCE numeric(19,5),  @O_vRETORUNTCST numeric(19,5),  @O_vRETORUNTPRC numeric(19,5),  @O_PREVLOCNCODE char(11),  @O_PREVITEMNMBR char(31),  @Prices_Not_Required_In_Pr tinyint,  @Hotline_Labor_Item char(31),  @Travel_Labor_Item char(31),  @Overtime_Labor_Item char(31),  @svcAllowNonInventoried tinyint,  @ISMCREG tinyint,  @NonInventoryItem tinyint,  @O_OTTRANSTME char(7),  @iSplitTransaction tinyint,  @ENABLEMULTIBIN smallint,  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint,  @INACTIVEITEM tinyint  select  @O_TODAY = convert(varchar(10),getdate(), 101),  @O_DUMMYDT = convert(varchar(10),'1900-01-01', 101),  @O_vFUFILDAT = @O_DUMMYDT,  @NOTEINDX = 0.0,  @iGetNextNoteIdxErrState = 0,  @O_iNOTEINDX = 0.0,  @O_iQTYSOLD = 0.0,  @O_iQTYORDER = 0.0,  @O_iATYALLOC = 0.0,  @O_iQTYBACKO = 0.0,  @O_iQTYONHND = null,   @O_iQTYALLOC = null,   @iTRXQTYSOLD = 0,  @iStatus = 0,  @iError = 0,  @iCustomState =  0,  @O_oErrorState = 0,  @iCustomErrString = '',  @O_iErrorState = 0,  @oErrString = '',  @CMPANYID = 0,  @O_vITEMUSETYPE = '',  @ReturnableItem = 0,  @PRICELVL = '',  @DEFPRICELVL = '',  @RMPRICELVL = '',  @TECHPRICELVL = '',  @CUSTPRICELVL = '',  @ITMDEFPRCLEVEL = '',  @SVCAREA = '',  @OFFID = '',  @iTECHID = '',  @SRVTYPE = '',  @TIMEZONE = '',  @O_TRANSTME = '',  @O_BILLABLTIM ='',  @iCURRCOST = 0.0,  @iSTNDCOST = 0.0,  @iLISTPRCE = 0.0,  @O_vITMSHNAM = '',  @O_vITMGEDSC = '',  @O_vITMCLSCD = '',  @O_vITEMSHWT = '',  @Backorder_Status = '',  @Intransit_Status = '',  @Dispatch_Status = '',  @Arrival_Status = '',  @Complete_Status = '',  @FRMSTAT = '',  @SRVSTAT = '',  @POSTAT = '',  @iBOSTATUS = '',  @SRVTYPE = '',  @TECHID = '',  @TECHSTAT = '',  @GOODTECHLOCN = '',  @BADLOCNCODE = '',  @GOODOFFLOCN = '',  @DEFLOCNCODE = '',  @SVC_Sales_Only = 0,  @iValueExists = 0,  @HOLD = 0,  @INACTIVE = 0,  @PYMTRMID = '',  @PRBTADCD = '',  @CURNCYID = '',  @RATETPID = '',  @O_vOn_Return = 0,  @O_vRETDOCID = '',  @O_vLNSEQNBR = 0,  @iRETDOCID = '',  @O_iRETDOCID = '',  @O_iRETDOCTYP = 0,  @iGetNextDocIdErrState = 0,  @AuditDesc = 'Service Line Add/Update via eConnect',  @UserID = 'eConnect',  @Tech_Available = 0,  @AuditLNITMSEQ = 0,  @Line_Seq_Exists = 0,  @O_iITEMNMBR = '',  @iITMTRKOP = 0,  @iITEMTYPE = 0,  @iUOMSCHDL = '',  @iSELNGUOM = '',  @iCurrDecPlaces = 0,  @CURRNIDX = 0,  @iQtyDecPlaces = 0,  @iMCCurrDecPlaces = 0,  @iValid = 0,  @O_iHasDocs = 0,  @O_vADDRESS1 = '',  @O_vADDRESS2 = '',  @O_vADDRESS3 = '',  @O_vCOUNTRY = '',  @O_vCITY = '',  @O_vSTATE = '',  @O_vZIP = '',  @O_vCNTCPRSN = '',  @O_vPHONE1 = '',  @O_vIVDOCNBR = '',  @O_NextIVDOCNBR = '',  @O_vIVBACHNUMB = 'eConnect-FSS',  @O_vSERLTNUM = '',  @O_vBIN = '',  @O_POSTED = 0,  @O_SLTSQNUM = 0,   @O_SERLTQTY = 0,  @O_DTSEQNUM = 0,   @O_DATERECD = @O_DUMMYDT,  @O_vPONMBRSTR = '',  @O_vPOLNSEQ = 0,  @O_NextPONUMBER = '',  @VENDHOLD = 0,  @VENDINACTIVE = 1,  @VENDPYMTRMID = '',  @VADDCDPR = '',  @VENDCURNCYID = '',  @VENDRATETPID = '',  @VENDNAME = '',  @VNDITNUM = '',  @VNDITDSC = '',  @Use_POP = 1,  @O_vTRNSFLOC = '',  @O_vTRNSFQTY = 0,  @O_vTRNFLAG = 0,  @O_vORDDOCID = '',  @O_vTRANSLINESEQ = 0,  @iRETORIG = 2,  @O_vRETQTY = 0,  @O_vRETLNITMSEQ = 0,  @O_vRETLOCNCODE = '',  @O_vEXTDCOST = 0,  @O_vORUNTCST = 0,  @O_vORUNTPRC = 0,  @O_vOREXTCST = 0,  @O_vOXTNDPRC = 0,  @O_vTAXAMNT = 0,  @O_vORTAXAMT = 0,  @I_vCURRNIDX = 0,  @ISMCTRX = 0,  @FUNLCURR = '',  @I_vRATECALC = 0,  @I_vMCTRXSTT = 0,  @I_vDECPLACS = 0,  @I_vVIEWMODE = 3,  @I_vDENXRATE = 0,  @EXGTBLID = '',  @SLSRATETPID = '',  @FINRATETPID = '',  @PURRATETPID = '',  @O_vRATEEXPR = -1,  @O_vDYSTINCR = -1,  @O_vRATEVARC = 0,  @O_vTRXDTDEF = -1,  @O_vRTCLCMTD = -1,  @O_vPRVDSLMT = 0,  @O_vDATELMTS = 0,  @ItemListPrice = 0,  @ItemCost = 0,  @iCounter = 0,  @iSerialCount = 0,  @iInventoryOffsetIndex = 0,  @iInventoryAccount = 0,  @iBILLPCT = 0,  @O_vQTYINBASE = 0,  @SVC_Use_Return = 0,  @O_vRETURNPRICELVL = '',  @iUSECURRCOST = 0,  @O_vRETCOST = 0,  @O_vRETUNITCOST = 0,  @O_vRETUNITPRCE = 0,  @O_vRETORUNTCST = 0,  @O_vRETORUNTPRC = 0,  @O_PREVLOCNCODE = '',  @O_PREVITEMNMBR = '',  @Prices_Not_Required_In_Pr = 0,  @Hotline_Labor_Item = '',  @Travel_Labor_Item = '',  @Overtime_Labor_Item = '',  @svcAllowNonInventoried = 0,  @ISMCREG = 1,  @NonInventoryItem = 0,  @O_OTTRANSTME = '',  @iSplitTransaction = 0,   @ENABLEMULTIBIN = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0,  @INACTIVEITEM = 0  exec @iStatus = taFSServiceCallLinePre  @I_vSRVRECTYPE output,  @I_vCALLNBR output,  @I_vEQPLINE output,  @I_vLNITMSEQ output,  @I_vLINITMTYP output,  @I_vSRVSTAT output,  @I_vTECHID output,  @I_vCUSTNMBR output,  @I_vADRSCODE output,  @I_vITEMNMBR output,  @I_vCKNORETURNS output,  @I_vITEMDESC output,  @I_vLOCNCODE output,  @I_vUOFM output,  @I_vQTYORDER output,  @I_vATYALLOC output,  @I_vQTYBACKO output,  @I_vQTYSOLD output,  @I_vUNITCOST output,  @I_vUNITPRCE output,  @I_vXTNDPRCE output,  @I_vNOTETXT output,  @I_vSTRTDATE output,  @I_vSTRTTIME output,  @I_vENDDATE output,  @I_vENDTME output,  @I_vTRANSTME output,  @I_vBILLABLTIM output,  @I_vENTDTE output,  @I_vENTTME output,  @I_vLABPCT output,  @I_vPARTPCT output,  @I_vMISCPCT output,  @I_vCKCREATEPO output,  @I_vVENDORID output,  @I_vMiles_Start output,  @I_vMiles_End output,  @I_vMiles_Used output,  @I_vPRICELVL output,  @I_vSVC_Address_Option output,  @I_vSVC_Misc_Address_Code output,  @I_vSVC_Disable_XFR_Grouping output,  @I_vWork_Type output,  @I_vSVC_FO_ID output,  @I_vCURNCYID output,  @I_vNonInventory output,  @I_vCreate_Overtime_Labor output,  @I_vOvertime_Labor_Item_Number output,  @I_vUpdateIfExists output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  set @iError = @@error if @iStatus = 0 and @iError <> 0 begin  set @iStatus = @iError end  if (@iStatus <> 0) or (@iCustomState <> 0) begin  set @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 9720    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vSRVRECTYPE is NULL or  @I_vCALLNBR is NULL or  @I_vEQPLINE is NULL or   @I_vLNITMSEQ is NULL or  @I_vLINITMTYP is NULL or   @I_vCUSTNMBR is NULL or  @I_vADRSCODE is NULL or   @I_vITEMNMBR is NULL or  (@I_vLINITMTYP = 'P' and @I_vLOCNCODE is NULL) or   (@I_vCKCREATEPO = 1 and @I_vVENDORID is NULL)) begin  set @O_iErrorState = 9721    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vCALLNBR = '' or  @I_vSRVRECTYPE = 0 or  @I_vCUSTNMBR = '' or  @I_vADRSCODE = '' ) begin  set @O_iErrorState = 9722    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSRVRECTYPE not in (1,2)) begin  set @O_iErrorState = 8956     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if @I_vSRVRECTYPE < 0 or  @I_vLNITMSEQ < 0 or   @I_vSVC_Address_Option < 0 begin  set @O_iErrorState = 9723    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  set @iValueExists = 0 select @iValueExists = 1 from SVC30200 (nolock) where CALLNBR = @I_vCALLNBR and SRVRECTYPE = 3 if (@iValueExists <> 1)  select @iValueExists = 1 from SVC00200 (nolock) where CALLNBR = @I_vCALLNBR and SRVRECTYPE = 3  if (@iValueExists = 1) begin  select @O_iErrorState = 8958     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSRVRECTYPE < 1 or @I_vSRVRECTYPE > 3) begin  set @O_iErrorState = 9725    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if exists(select 1 from SVC00200 (nolock) where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR and SVC_On_Hold = 1) begin  set @O_iErrorState = 8890    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if exists(select 1 from SVC00203 (nolock) where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR   and EQPLINE = @I_vEQPLINE and LNITMSEQ = @I_vLNITMSEQ and LINITMTYP = @I_vLINITMTYP) begin  select @Line_Seq_Exists=1 end  if (@Line_Seq_Exists = 0) begin  if (@I_vITEMNMBR = '' or  (@I_vLINITMTYP = 'P' and @I_vLOCNCODE = ''))   begin  set @O_iErrorState = 9781     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if @I_vQTYORDER < 0 or   @I_vATYALLOC < 0 or   @I_vQTYBACKO < 0 or   @I_vQTYSOLD < 0 or  @I_vMiles_Start < 0 or   @I_vMiles_End < 0 or   @I_vMiles_Used < 0 begin  set @O_iErrorState = 9779     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if @I_vUNITCOST < 0 or  @I_vUNITPRCE < 0 begin  set @O_iErrorState = 9780     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSVC_Disable_XFR_Grouping < 0 or @I_vSVC_Disable_XFR_Grouping > 1) begin  set @O_iErrorState = 9782     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vNonInventory not in (0, 1)) begin  select @O_iErrorState = 11401     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vCreate_Overtime_Labor not in (0, 1)) begin  select @O_iErrorState = 11447     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vUpdateIfExists not in (0,1)) begin  set @O_iErrorState = 9797     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock) where SETUPKEY = 1 if (@ENABLEMULTIBIN = 1 and @I_vQTYSOLD > 0 and @I_vNonInventory = 0 and @I_vLINITMTYP = 'P') begin   set @O_iErrorState = 11974     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end   select @I_vCUSTNMBR = UPPER(@I_vCUSTNMBR),  @I_vADRSCODE = UPPER(@I_vADRSCODE),  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vCURNCYID = UPPER(@I_vCURNCYID),  @I_vLINITMTYP = UPPER(@I_vLINITMTYP),  @I_vVENDORID = UPPER(@I_vVENDORID),  @I_vOvertime_Labor_Item_Number = UPPER(@I_vOvertime_Labor_Item_Number)  if (@I_vLINITMTYP <> 'P' and @I_vLINITMTYP <> 'L' and @I_vLINITMTYP <> 'A' and @I_vLINITMTYP <> 'E') begin  set @O_iErrorState = 9724    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end   if exists(select 1 from SVC00215 (nolock) where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR and MKDTOPST = 1) begin  set @O_iErrorState = 9726    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @svcAllowNonInventoried = isnull(svcAllowNonInventoried, 0) from SVC00998 where SEQUENCE1 = 0 if @I_vNonInventory = 1 and @svcAllowNonInventoried = 0 begin  set @O_iErrorState = 11402     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if @I_vNonInventory = 0 begin  select @ReturnableItem = isnull(RTRNABLE, 0),   @iUSECURRCOST = isnull(SVC_Use_CurrentCost, 0),  @O_vRETCOST = isnull(RETCOST, 0)  from SVC00951 where ITEMNMBR = @I_vITEMNMBR end else begin  select @ReturnableItem = 0,  @iUSECURRCOST = 0,  @O_vRETCOST = 0 end  if (@I_vLINITMTYP = 'P' and @ReturnableItem = 1)   select @O_vITEMUSETYPE = 'I' else  select @O_vITEMUSETYPE = case  when @I_vNonInventory = 1 then 'N'  when @I_vLINITMTYP = 'P' then 'C'  when @I_vLINITMTYP = 'L' then 'L'  else ''  end  if (@ReturnableItem = 1) and (@I_vCKNORETURNS = 1)  set @ReturnableItem = 0  select @O_iITEMNMBR = ITEMNMBR,   @FRMSTAT = isnull(SRVSTAT,''),  @I_vSRVSTAT = case  when @I_vSRVSTAT is null then isnull(SRVSTAT,'')  else @I_vSRVSTAT  end,  @I_vTECHID = case  when @I_vTECHID is null then isnull(TECHID, '')  else @I_vTECHID  end,  @O_vITEMUSETYPE = case  when @O_vITEMUSETYPE is null then isnull(ITEMUSETYPE, 'C')  else @O_vITEMUSETYPE  end,  @I_vITEMDESC = case  when @I_vITEMDESC is null then isnull(ITEMDESC, '')  else @I_vITEMDESC  end,  @I_vLOCNCODE = case  when @I_vLOCNCODE is null or @I_vLOCNCODE = '' then isnull(LOCNCODE, '')  else @I_vLOCNCODE  end,  @I_vUOFM = case  when @I_vUOFM is null then isnull(UOFM, '')  else @I_vUOFM  end,  @I_vQTYORDER = case  when @I_vQTYORDER is null then isnull(QTYORDER, 0)  else @I_vQTYORDER  end,  @I_vATYALLOC = case  when @I_vATYALLOC is null then isnull(ATYALLOC, 0)  else @I_vATYALLOC  end,  @I_vQTYBACKO = case  when @I_vQTYBACKO is null then isnull(QTYBACKO, 0)  else @I_vQTYBACKO  end,  @I_vQTYSOLD = case  when @I_vQTYSOLD is null then isnull(QTYSOLD, 0)  else @I_vQTYSOLD  end,  @I_vUNITCOST = case  when @I_vUNITCOST is null then isnull(UNITCOST, 0)  else @I_vUNITCOST  end,  @I_vUNITPRCE = case  when @I_vUNITPRCE is null then isnull(UNITPRCE, 0)  else @I_vUNITPRCE  end,  @O_vEXTDCOST = isnull(EXTDCOST, 0),  @I_vXTNDPRCE = case  when @I_vXTNDPRCE is null then isnull(XTNDPRCE, 0)  else @I_vXTNDPRCE  end,  @I_vSTRTDATE = case   when @I_vSTRTDATE is null then isnull(STRTDATE, @O_DUMMYDT)  else @I_vSTRTDATE  end,  @I_vSTRTTIME = case  when @I_vSTRTTIME is null then isnull(STRTTIME, @O_DUMMYDT)  else @I_vSTRTTIME  end,  @I_vENDDATE = case  when @I_vENDDATE is null then isnull(ENDDATE, @O_DUMMYDT)  else @I_vENDDATE  end,  @I_vENDTME = case  when @I_vENDTME is null then isnull(ENDTME, @O_DUMMYDT)         else @I_vENDTME  end,  @O_TRANSTME = case  when @I_vTRANSTME is null then isnull(TRANSTME, 0)  else @O_TRANSTME  end,  @O_BILLABLTIM = case  when @I_vBILLABLTIM is null then isnull(BILLABLTIM, 0)  else @O_BILLABLTIM  end,  @O_vTRNSFLOC = isnull(TRNSFLOC, ''),  @O_vTRNSFQTY = isnull(TRNSFQTY, 0),  @O_vTRNFLAG = isnull(TRNFLAG, 0),  @O_vORDDOCID = isnull(ORDDOCID, ''),  @O_vTRANSLINESEQ = isnull(TRANSLINESEQ, 0),  @I_vLABPCT = case   when @I_vLABPCT is null then isnull(LABPCT, 100.00)  else @I_vLABPCT  end,  @I_vPARTPCT = case   when @I_vPARTPCT is null then isnull(PARTPCT, 100.00)  else @I_vPARTPCT  end,  @I_vMISCPCT = case  when @I_vMISCPCT is null then isnull(MISCPCT, 100.00)  else @I_vMISCPCT  end,  @O_vPONMBRSTR = isnull(PONMBRSTR, ''),  @O_vPOLNSEQ = case  when @O_vPONMBRSTR is not null and @O_vPONMBRSTR <> '' then isnull(POLNSEQ, 0)  else @O_vPOLNSEQ  end,  @O_vOn_Return = isnull(On_Return, 0),  @O_vRETDOCID = isnull(RETDOCID, ''),  @O_vLNSEQNBR = isnull(LNSEQNBR, 0),  @I_vMiles_Start = case  when @I_vMiles_Start is null then isnull(Miles_Start, 0)  else @I_vMiles_Start  end,  @I_vMiles_End = case  when @I_vMiles_End is null then isnull(Miles_End, 0)  else @I_vMiles_End  end,  @I_vMiles_Used = case  when @I_vMiles_Used is null then isnull(Miles_Used, 0)  else @I_vMiles_Used  end,  @I_vPRICELVL = case  when @I_vPRICELVL is null then isnull(PRICELVL, '')  else @I_vPRICELVL  end,  @I_vSVC_Address_Option = case  when @I_vSVC_Address_Option is null then isnull(SVC_Address_Option, 1)  else @I_vSVC_Address_Option  end,  @I_vSVC_Misc_Address_Code = case  when @I_vSVC_Misc_Address_Code is null then isnull(SVC_Misc_Address_Code, '')  else @I_vSVC_Misc_Address_Code  end,  @I_vSVC_Disable_XFR_Grouping = case  when @I_vSVC_Disable_XFR_Grouping is null then isnull(SVC_Disable_XFR_Grouping, 0)  else @I_vSVC_Disable_XFR_Grouping  end,  @I_vWork_Type = case  when @I_vWork_Type is null then isnull(Work_Type, '')  else @I_vWork_Type  end,  @O_vORUNTCST = isnull(ORUNTCST, 0.0),  @O_vORUNTPRC = isnull(ORUNTPRC, 0.0),  @O_vOREXTCST = isnull(OREXTCST, 0.0),  @O_vOXTNDPRC = isnull(OXTNDPRC, 0.0),  @O_vTAXAMNT = isnull(TAXAMNT, 0.0),  @O_vORTAXAMT = isnull(ORTAXAMT, 0.0),  @I_vSVC_FO_ID = case   when @I_vSVC_FO_ID is null then isnull(SVC_FO_ID, '')  else @I_vSVC_FO_ID  end  from SVC00203 (nolock)   where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR   and EQPLINE = @I_vEQPLINE and LNITMSEQ = @I_vLNITMSEQ and LINITMTYP = @I_vLINITMTYP  select @SRVTYPE = case  when SRVTYPE = '' or SRVTYPE is null then @SRVTYPE  else SRVTYPE  end,  @I_vLABPCT = case  when @I_vLABPCT is null then isnull(LABPCT, 100.00)  else @I_vLABPCT  end,  @I_vPARTPCT = case  when @I_vPARTPCT is null then isnull(PARTPCT, 100.00)  else @I_vPARTPCT  end,  @I_vMISCPCT = case  when @I_vMISCPCT is null then isnull(MISCPCT, 100.00)  else @I_vMISCPCT  end,  @I_vTECHID = case  when @I_vTECHID is null then isnull(TECHID, '')  else @I_vTECHID  end,  @PRICELVL = isnull(PRICELVL, ''),  @I_vCURNCYID = case  when @I_vCURNCYID is null then isnull(CURNCYID, '')  else @I_vCURNCYID  end  from SVC00200 (nolock) where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR  select @I_vSRVSTAT = case  when @I_vSRVSTAT is null then ''  else @I_vSRVSTAT  end,  @I_vTECHID = case  when @I_vTECHID is null then ''  else @I_vTECHID  end,  @O_vITEMUSETYPE = case  when @O_vITEMUSETYPE is null then 'C'  else @O_vITEMUSETYPE  end,  @I_vITEMDESC = case  when @I_vITEMDESC is null then ''  else @I_vITEMDESC  end,  @I_vLOCNCODE = case  when @I_vLOCNCODE is null then ''  else @I_vLOCNCODE  end,  @I_vUOFM = case   when @I_vUOFM is null then ''  else @I_vUOFM  end,  @I_vQTYORDER = case  when @I_vQTYORDER is null then 0  else @I_vQTYORDER  end,  @I_vATYALLOC = case  when @I_vATYALLOC is null then 0  else @I_vATYALLOC  end,  @I_vQTYBACKO = case  when @I_vQTYBACKO is null then 0  else @I_vQTYBACKO  end,  @I_vQTYSOLD = case  when @I_vQTYSOLD is null then 0  else @I_vQTYSOLD  end,  @O_vEXTDCOST = (isnull(@I_vUNITCOST, 0) * @I_vQTYSOLD),  @I_vXTNDPRCE = case  when @I_vXTNDPRCE is null then 0  else @I_vXTNDPRCE  end,  @I_vSTRTDATE = case  when @I_vSTRTDATE is null then @O_DUMMYDT  else @I_vSTRTDATE  end,  @I_vSTRTTIME = case  when @I_vSTRTTIME is null then @O_DUMMYDT  else @I_vSTRTTIME  end,  @I_vENDDATE = case  when @I_vENDDATE is null then @O_DUMMYDT  else @I_vENDDATE  end,  @I_vENDTME = case  when @I_vENDTME is null then @O_DUMMYDT  else @I_vENDTME  end,  @I_vTRANSTME = case  when @I_vTRANSTME is null then 0  else @I_vTRANSTME  end,  @I_vBILLABLTIM = case  when @I_vBILLABLTIM is null then 0  else @I_vBILLABLTIM  end,  @I_vENTDTE = case  when @I_vENTDTE is null then @O_TODAY  else @I_vENTDTE  end,  @I_vENTTME = case  when @I_vENTTME is null then convert(varchar(10), getdate(), 108)  else @I_vENTTME  end,  @I_vLABPCT = case  when @I_vLABPCT is null then 100.00  else @I_vLABPCT  end,  @I_vPARTPCT = case  when @I_vPARTPCT is null then 100.00  else @I_vPARTPCT  end,  @I_vMISCPCT = case  when @I_vMISCPCT is null then 100.00  else @I_vMISCPCT  end,  @iBILLPCT = case  when @I_vLINITMTYP = 'P' then isnull(@I_vPARTPCT,100.00)/100.00  when @I_vLINITMTYP = 'L' then isnull(@I_vLABPCT,100.00)/100.00  else isnull(@I_vMISCPCT,100.00)/100.00  end,  @O_vPOLNSEQ = case  when @O_vPONMBRSTR is not null and @O_vPONMBRSTR <> '' then 0  else @O_vPOLNSEQ  end,  @I_vMiles_Start = case  when @I_vMiles_Start is null then 0  else @I_vMiles_Start  end,  @I_vMiles_End = case  when @I_vMiles_End is null then 0  else @I_vMiles_End  end,  @I_vMiles_Used = case  when @I_vMiles_Used is null then 0  else @I_vMiles_Used  end,  @I_vPRICELVL = case  when @I_vPRICELVL is null then ''  else @I_vPRICELVL  end,  @I_vSVC_Address_Option = case   when @I_vSVC_Address_Option is null then 1  else @I_vSVC_Address_Option  end,  @I_vSVC_Misc_Address_Code = case  when @I_vSVC_Misc_Address_Code is null then ''  else @I_vSVC_Misc_Address_Code  end,  @I_vSVC_Disable_XFR_Grouping = case  when @I_vSVC_Disable_XFR_Grouping is null then 0  else @I_vSVC_Disable_XFR_Grouping  end,  @I_vWork_Type = case  when @I_vWork_Type is null then ''  else @I_vWork_Type  end,  @I_vSVC_FO_ID = case  when @I_vSVC_FO_ID is null then ''  else @I_vSVC_FO_ID  end,  @O_vXCHGRATE = case   when @O_vXCHGRATE is null then 0  else @O_vXCHGRATE  end,  @O_vRATETPID = case  when @O_vRATETPID is null then ''  else @O_vRATETPID  end,  @O_vEXCHDATE = case  when @O_vEXCHDATE is null then @O_DUMMYDT  else @O_vEXCHDATE  end,  @O_vEXPNDATE = case   when @O_vEXPNDATE is null then @O_DUMMYDT  else @O_vEXPNDATE  end,   @O_vEXGTBDSC = case  when @O_vEXGTBDSC is null then ''  else @O_vEXGTBDSC  end,  @O_vEXTBLSRC = case  when @O_vEXTBLSRC is null then ''  else @O_vEXTBLSRC  end,  @O_vTIME1 = case  when @O_vTIME1 is null then @O_DUMMYDT  else @O_vTIME1  end  if @I_vLNITMSEQ > 0 and ((@Line_Seq_Exists = 1) and (@O_iITEMNMBR <> @I_vITEMNMBR)) begin  set @Line_Seq_Exists = 0  set @I_vLNITMSEQ = 0 end  if (@I_vLNITMSEQ = 0) begin  select @I_vLNITMSEQ = (isnull(max(LNITMSEQ),0) + 16384) from SVC00203 (nolock) where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR  and EQPLINE = @I_vEQPLINE and LINITMTYP = @I_vLINITMTYP  set @Line_Seq_Exists = 0 end  if (@Line_Seq_Exists=1) and (@I_vUpdateIfExists = 0)  begin  set @O_iErrorState = 9728    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if @O_vITEMUSETYPE <> 'R' or @I_vLINITMTYP <> 'P' begin  select @O_vRETDOCID = '',  @O_vOn_Return = 0,  @O_vLNSEQNBR = 0 end  if @I_vLINITMTYP <> 'P' begin  select @O_vTRNSFLOC = '',  @O_vTRNSFQTY = 0,  @O_vTRNFLAG = 0,  @O_vORDDOCID = '',  @O_vTRANSLINESEQ = 0 end if (@O_vORDDOCID <> '') and (@O_vTRANSLINESEQ > 0) and (@O_vTRNSFLOC <> '')  set @O_vTRNFLAG = 1 else  select @O_vTRANSLINESEQ = 0,   @O_vTRNFLAG = 0,   @O_vORDDOCID = '',  @O_vTRNSFLOC = '',  @O_vTRNSFQTY = 0  if (@I_vLINITMTYP = 'P' and (@I_vSVC_Address_Option < 1) or (@I_vSVC_Address_Option > 4))  or (@I_vLINITMTYP <> 'P' and (@I_vSVC_Address_Option < 0) or (@I_vSVC_Address_Option > 4)) begin  set @O_iErrorState = 9778     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSVC_Misc_Address_Code <> '' and @I_vSVC_Address_Option <> 3) or (@I_vSVC_Address_Option = 3 and @I_vSVC_Misc_Address_Code = '') begin  set @O_iErrorState = 9796     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vITEMNMBR <> '' and @I_vNonInventory = 0) begin  set @iValueExists = 0  select @iValueExists = 1, @iITMTRKOP = ITMTRKOP, @iITEMTYPE = ITEMTYPE, @iUOMSCHDL = UOMSCHDL, @iSELNGUOM = SELNGUOM,   @iCurrDecPlaces = (isnull(DECPLCUR, 1)-1), @iQtyDecPlaces = (isnull(DECPLQTY,1)-1),  @iSTNDCOST = isnull(STNDCOST, 0.0), @iCURRCOST = isnull(CURRCOST, 0.0),   @O_vITMSHNAM = isnull(ITMSHNAM,''), @O_vITMGEDSC = isnull(ITMGEDSC, ''), @O_vITMCLSCD = isnull(ITMCLSCD, ''),  @O_vITEMSHWT = isnull(ITEMSHWT, ''),  @ITMDEFPRCLEVEL = isnull(PRCLEVEL, ''),  @I_vITEMDESC =   case  when @I_vITEMDESC <> '' then  @I_vITEMDESC  else  ITEMDESC  end  from IV00101 (nolock) where ITEMNMBR=rtrim(@I_vITEMNMBR)  if (@iValueExists <> 1)  begin  set @O_iErrorState = 9729     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else if (@I_vITEMNMBR <> '' and @I_vNonInventory = 1) begin  if (exists(select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR))  begin  select @O_iErrorState = 11403     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   select @iQtyDecPlaces = (isnull(DECPLQTY,1)-1) from SOP40100 (nolock) where SETUPKEY = 1  if ((round(@I_vQTYORDER, @iQtyDecPlaces) <> (@I_vQTYORDER)) or (round(@I_vQTYSOLD, @iQtyDecPlaces) <> (@I_vQTYSOLD)))  begin  select @O_iErrorState = 11404     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @NonInventoryItem = 1 end  if (@I_vUOFM = '') begin  if (@I_vNonInventory = 0)  begin  if (@iSELNGUOM is NULL or @iSELNGUOM = '')  begin  SELECT @I_vUOFM = isnull(rtrim(BASEUOFM),'') from IV40201 where UOMSCHDL = @iUOMSCHDL  if (@@ERROR <> 0 or @I_vUOFM = '')  begin  return (@O_iErrorState)  end  end  else  set @I_vUOFM = rtrim(@iSELNGUOM)  end  else  begin  select @I_vUOFM = 'Each'  end end  if (@I_vITEMNMBR <> '' and @I_vUOFM <> '' and @I_vNonInventory = 0) begin  exec @iStatus = SVC_Obj_ValidateUOM  @I_vITEMNMBR,  @I_vUOFM,  @iValid output  select @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  if (@iStatus = 0)  set @iStatus = @iError   set @O_iErrorState = 9765    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if ((@iValid is NULL) or (@iValid <> 1))  begin  set @O_iErrorState = 9766    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  if @I_vLINITMTYP = 'L'   and (@I_vTRANSTME = 0 or (@I_vQTYSOLD = 0 and @I_vBILLABLTIM = 0)) begin  if (datediff(hh, (convert(varchar(12), @I_vSTRTDATE, 101) + ' ' + convert(varchar(10), @I_vSTRTTIME, 108)), (convert(varchar(12), @I_vENDDATE, 101) + ' ' + convert(varchar(10), @I_vENDTME, 108))) >= 24)  begin  set @O_iErrorState = 0  return (@O_iErrorState)  end end  select @SVCAREA =  case  when @SVCAREA = ''  then isnull(SVCAREA, '')  else @SVCAREA  end,  @OFFID=  case  when @OFFID = ''  then isnull(OFFID, '')  else @OFFID  end,  @iTECHID=  case  when @iTECHID = ''  then isnull(TECHID, '')  else @iTECHID  end,  @SRVTYPE=  case  when @SRVTYPE = ''  then isnull(SRVTYPE, '')  else @SRVTYPE  end,  @TIMEZONE=  case  when @TIMEZONE = ''  then isnull(TIMEZONE, '')  else @TIMEZONE  end  from SVC00950 (nolock) where CUSTNMBR=@I_vCUSTNMBR and ADRSCODE = @I_vADRSCODE  if (@I_vTECHID = '')  SET @I_vTECHID = @iTECHID  select @SRVTYPE =  case  when @SRVTYPE = ''  then isnull(SRVTYPE, '')  else @SRVTYPE  end,  @TIMEZONE =  case  when @TIMEZONE = ''  then isnull(TIMEZONE, '')  else @TIMEZONE  end,  @DEFPRICELVL = isnull(PRCLEVEL, ''),  @Backorder_Status = isnull(Backorder_Status, ''),  @Intransit_Status = isnull(Intransit_Status, ''),  @Dispatch_Status = isnull(Dispatch_Status, ''),  @Arrival_Status = isnull(Arrival_Status, ''),  @Complete_Status = isnull(Complete_Status, ''),  @SRVSTAT = isnull(SRVSTAT, ''),  @POSTAT = isnull(POSTAT, ''),  @Use_POP = isnull(Use_POP, 1),  @SVC_Use_Return = isnull(SVC_Use_Return, 0),  @O_vRETURNPRICELVL = isnull(SVC_Return_Price_Level, ''),  @DEFLOCNCODE = isnull(LOCNCODE, '')  from SVC00998 (nolock)  select @RMPRICELVL = isnull(PRCLEVEL,'') from RM40101 (nolock)  select @O_iQTYORDER = isnull(QTYORDER, 0),   @O_iATYALLOC = isnull(ATYALLOC, 0),   @O_iQTYBACKO = isnull(QTYBACKO, 0),   @O_iQTYSOLD = isnull(QTYSOLD,0),   @O_iNOTEINDX = isnull(NOTEINDX,0),  @O_PREVLOCNCODE = isnull(LOCNCODE, ''),  @O_PREVITEMNMBR = isnull(ITEMNMBR, '')  from SVC00203 (nolock)   where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR  and EQPLINE = @I_vEQPLINE and LNITMSEQ = @I_vLNITMSEQ and LINITMTYP = @I_vLINITMTYP  exec @iStatus = SVC_Obj_CheckLineDocExists   @I_vSRVRECTYPE,   @I_vCALLNBR,   @I_vLNITMSEQ,   @I_vLINITMTYP,   @O_iHasDocs output select @iError = @@error if (@iStatus <> 0 or @iError <> 0) begin  if (@iStatus = 0)  set @iStatus = @iError   set @O_iErrorState = 9730    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if @O_iHasDocs = 2  begin  set @O_iErrorState = 9731    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if @I_vCUSTNMBR <> '' begin  set @iValueExists = 0  select  @iValueExists=1,  @HOLD=isnull(HOLD,0),  @INACTIVE=isnull(INACTIVE,0),  @PYMTRMID=isnull(PYMTRMID,''),  @PRBTADCD=isnull(PRBTADCD,''),  @CURNCYID=isnull(CURNCYID,''),  @RATETPID=isnull(RATETPID,''),  @CUSTPRICELVL = isnull(PRCLEVEL, '')  from RM00101 (nolock) where CUSTNMBR=@I_vCUSTNMBR   if (@iValueExists <> 1)  begin  set @O_iErrorState = 9747    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @I_vCURNCYID = case  when @I_vCURNCYID is null or @I_vCURNCYID = '' then @CURNCYID  else @I_vCURNCYID  end,  @O_vRATETPID = case  when @O_vRATETPID = '' then @RATETPID  else @O_vRATETPID  end   select @I_vCURNCYID = case   when @I_vCURNCYID is null or @I_vCURNCYID = '' then isnull(FUNLCURR,'')   else @I_vCURNCYID  end  from MC40000 (nolock)  end  if (@I_vADRSCODE <> '') begin  set @iValueExists = 0  select  @iValueExists = 1,  @O_vADDRESS1=isnull(ADDRESS1,''),  @O_vADDRESS2=isnull(ADDRESS2,''),  @O_vADDRESS3=isnull(ADDRESS3,''),  @O_vCOUNTRY=isnull(COUNTRY,''),  @O_vCITY=isnull(CITY,''),  @O_vSTATE=isnull(STATE,''),  @O_vZIP=isnull(ZIP,''),  @O_vCNTCPRSN=isnull(CNTCPRSN,0),  @O_vPHONE1=isnull(PHONE1,'')  from RM00102 (nolock) where CUSTNMBR=@I_vCUSTNMBR and ADRSCODE = @I_vADRSCODE   if (@iValueExists <> 1)  begin  set @O_iErrorState = 9750     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vCURNCYID <> '') begin  set @iMCCurrDecPlaces = null  select @CURRNIDX = CURRNIDX, @iMCCurrDecPlaces = DECPLCUR from DYNAMICS..MC40200 (nolock) where CURNCYID = @I_vCURNCYID  if (@iMCCurrDecPlaces is NULL) or (@CURRNIDX = 0)  begin  set @O_iErrorState = 9732     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else  set @iCurrDecPlaces = @iMCCurrDecPlaces end  if (@I_vTECHID <> '') begin  set @iValueExists = 0  select @iValueExists=1,   @TECHSTAT=isnull(TECHSTAT,''),  @GOODTECHLOCN = isnull(LOCNCODE, ''),  @BADLOCNCODE = isnull(LOCCODEB, ''),  @TECHPRICELVL = case  when (@I_vPRICELVL is null or @I_vPRICELVL = '') and @I_vLINITMTYP = 'L' then isnull(PRCLEVEL, '')  else @I_vPRICELVL  end  from SVC00100 (nolock) where TECHID = @I_vTECHID  if (@iValueExists <> 1)  begin  set @O_iErrorState = 9762    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @Tech_Available=isnull(Tech_Available,0) from SVC00905 (nolock) where TECHSTAT = @TECHSTAT  if (@Tech_Available=0)  begin  set @O_iErrorState = 10250     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@OFFID = '')  select @OFFID = isnull(OFFID,'') from SVC00100 (nolock) where TECHID = @I_vTECHID end  if (@OFFID <> '') begin  set @iValueExists = 0  select @iValueExists = 1, @GOODOFFLOCN = isnull(LOCNCODE, '') from SVC00902 (nolock) where OFFID = @OFFID  if (@iValueExists <> 1)  begin  set @O_iErrorState = 9761    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@SRVTYPE <> '') begin  set @iValueExists = 0  select @iValueExists = 1, @TECHID=isnull(TECHID,''), @SVC_Sales_Only=isnull(SVC_Sales_Only,0),  @Travel_Labor_Item = isnull(Travel_Labor_Item, ''), @Hotline_Labor_Item = isnull(Hotline_Labor_Item, ''),  @Overtime_Labor_Item = isnull(LABITMOV, '')  from SVC00920 (nolock) where SRVTYPE = @SRVTYPE  if (@iValueExists <> 1)  begin  set @O_iErrorState = 9751    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else  begin  if (@I_vTECHID='')  set @I_vTECHID = @TECHID   if (@SVC_Sales_Only=1)  select @I_vPARTPCT = case  when @I_vPARTPCT is null then 100  else @I_vPARTPCT  end  end end  select @Prices_Not_Required_In_Pr = isnull(Prices_Not_Required_In_Pr, 0) from SOP40100 (nolock)  if (@I_vPRICELVL = '' and @I_vNonInventory = 0) begin  select @PRICELVL = case  when @PRICELVL is null then ''  else @PRICELVL  end   if (@TECHPRICELVL <> '' and @I_vLINITMTYP = 'L')  begin  if exists(select 1 from IV40800 (nolock) where PRCLEVEL = @TECHPRICELVL)  begin  set @I_vPRICELVL = @TECHPRICELVL   if (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @TECHPRICELVL)  set @I_vPRICELVL = ''  end  end   if (@I_vPRICELVL = '' and @CUSTPRICELVL <> '')  begin  if exists(select 1 from IV40800 (nolock) where PRCLEVEL = @CUSTPRICELVL)  begin  set @I_vPRICELVL = @CUSTPRICELVL   if (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @CUSTPRICELVL)  set @I_vPRICELVL = ''  end   end   if (@I_vPRICELVL = '' and @RMPRICELVL <> '')  begin  if exists(select 1 from IV40800 (nolock) where PRCLEVEL = @RMPRICELVL)  begin  set @I_vPRICELVL = @RMPRICELVL   if (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @RMPRICELVL)  set @I_vPRICELVL = ''  end   end   if (@I_vPRICELVL = '' and @ITMDEFPRCLEVEL <> '')  begin  if exists(select 1 from IV40800 (nolock) where PRCLEVEL = @ITMDEFPRCLEVEL)  begin  set @I_vPRICELVL = @ITMDEFPRCLEVEL   if (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @ITMDEFPRCLEVEL)  set @I_vPRICELVL = ''  end   end   if (@I_vPRICELVL = '' and @DEFPRICELVL <> '')  begin  if exists(select 1 from IV40800 (nolock) where PRCLEVEL = @DEFPRICELVL)  begin  set @I_vPRICELVL = @DEFPRICELVL   if (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @DEFPRICELVL)  set @I_vPRICELVL = ''  end   end   if (@I_vPRICELVL = '' and @PRICELVL <> '')  begin  if exists(select 1 from IV40800 (nolock) where PRCLEVEL = @PRICELVL)  begin  set @I_vPRICELVL = @PRICELVL   if (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @PRICELVL)  set @I_vPRICELVL = ''  end   end end else  begin  if @I_vNonInventory = 0  begin  if not exists(select 1 from IV40800 (nolock) where PRCLEVEL = @I_vPRICELVL)  begin  set @O_iErrorState = 9753     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@I_vPRICELVL <> '') and (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '') and (@Prices_Not_Required_In_Pr = 0)  and not exists(select 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @I_vPRICELVL)  begin  set @O_iErrorState = 9795     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else   begin  if @I_vUOFM= ''  set @I_vUOFM = 'Each'  end end  if ( (not exists(select top 1 CURNCYID from IV00105 (nolock) where CURNCYID <> '')) and  (not exists(select top 1 CURNCYID from CM00100 (nolock) where CURNCYID <> ''))) begin  select @ISMCREG = 0 end  if (@ISMCREG = 1) begin  if (exists(select 1 from SOP40600 (nolock) where CURNCYID = @I_vCURNCYID))  begin  select @iCurrDecPlaces = DECPLCUR - 1 from SOP40600 (nolock) where CURNCYID = @I_vCURNCYID  end end else begin  select @iCurrDecPlaces = DECPLCUR - 1 from SOP40100 (nolock) where SETUPKEY = 1 end  if (@I_vPRICELVL = '' and @I_vNonInventory = 0) begin  set @O_iErrorState = 8971     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if @I_vNonInventory = 0 begin  exec @iStatus = taItemListPrice  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vDOCDATE = @I_vENTDTE,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vPRCLEVEL = @I_vPRICELVL,  @I_vQUANTITY = 1,  @I_vNONINVEN = 0,  @I_vCURNCYID = @I_vCURNCYID,  @I_vUOFM = @I_vUOFM,  @I_vUNITPRCE = @ItemListPrice output,  @I_vITEMDESC = @I_vITEMDESC,  @O_iErrorState = @O_oErrorState output,  @oErrString = @oErrString output   set @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  set @O_iErrorState = 9798     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   exec SVC_Get_QtyInBase  @I_vITEMNMBR,   @I_vUOFM,   1,  @O_vQTYINBASE OUTPUT  set @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  set @O_iErrorState = 9804     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @O_vQTYINBASE = case  when @O_vQTYINBASE is null or @O_vQTYINBASE = 0 then 1  else @O_vQTYINBASE  end,  @I_vUNITPRCE = case  when @I_vUNITPRCE is null then @ItemListPrice  else @I_vUNITPRCE  end,  @I_vUNITCOST = case  when @I_vUNITCOST is null and @ItemCost > 0 then @ItemCost  when @I_vUNITCOST is null and @iCURRCOST > 0 then (@iCURRCOST * @O_vQTYINBASE)  when @I_vUNITCOST is null and @iSTNDCOST > 0 then (@iSTNDCOST * @O_vQTYINBASE)  else isnull(@I_vUNITCOST, 0)  end end else if @I_vNonInventory = 1 begin  select  @I_vUNITPRCE = case  when @I_vUNITPRCE is null then 0  else @I_vUNITPRCE  end,  @I_vUNITCOST = case  when @I_vUNITCOST is null then 0  else @I_vUNITCOST  end end  select @FUNLCURR = FUNLCURR, @SLSRATETPID = isnull(DEFSLSTP, ''), @FINRATETPID = isnull(DEFFINTP, ''), @PURRATETPID = isnull(DEFPURTP, '')  from MC40000 (nolock)  select @O_vRATETPID = case  when @O_vRATETPID = '' and @SLSRATETPID <> '' then @SLSRATETPID   when @O_vRATETPID = '' and @FINRATETPID <> '' then @FINRATETPID  when @O_vRATETPID = '' then @RATETPID  else @O_vRATETPID  end  if (@O_vRATETPID <> '')  begin  if (not exists(select 1 from MC40100 (nolock) where RATETPID = @O_vRATETPID))  begin  set @O_iErrorState = 9733     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  select @I_vDECPLACS = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @FUNLCURR  select  @O_vORUNTCST = @I_vUNITCOST,     @O_vORUNTPRC = @I_vUNITPRCE,     @O_vOREXTCST = @O_vEXTDCOST,     @O_vOXTNDPRC = @I_vXTNDPRCE,     @O_vTAXAMNT = 0,   @O_vORTAXAMT = @O_vTAXAMNT     if (@I_vCURNCYID = '') begin  select @I_vCURNCYID = isnull(FUNLCURR,''), @I_vCURRNIDX = isnull(FUNCRIDX,0) from MC40000 (nolock) end else begin  select @I_vCURRNIDX = isnull(CURRNIDX,0) from DYNAMICS..MC40200 (nolock) where CURNCYID = @I_vCURNCYID end  if ((@I_vCURRNIDX = 0) or (@I_vCURNCYID = '')) begin  set @O_iErrorState = 10251     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if  (@I_vCURNCYID <> '') and ( @I_vCURNCYID <> @FUNLCURR) begin   select @ISMCTRX = 1, @I_vVIEWMODE=4   if (@O_vEXCHDATE is null or @O_vEXCHDATE = '' or @O_vEXCHDATE = @O_DUMMYDT)  begin  select top 1 @O_vEXCHDATE = EXCHDATE from DYNAMICS..MC00100 (nolock)  where EXGTBLID = (select top 1 EXGTBLID from MC40301 where CURNCYID = @I_vCURNCYID AND RATETPID = @O_vRATETPID)  AND EXCHDATE <= @I_vENTDTE  order by EXCHDATE + TIME1 desc  end   exec @iStatus = taMCCurrencyValidate  @I_vMASTERID = @I_vCUSTNMBR,  @I_vDOCDATE  = @I_vENTDTE,  @I_vCURNCYID = @I_vCURNCYID,  @I_vEXCHDATE = @O_vEXCHDATE,  @I_vEXGTBDSC = @O_vEXGTBDSC,  @I_vEXTBLSRC = @O_vEXTBLSRC,  @I_vRATEEXPR = @O_vRATEEXPR output,  @I_vDYSTINCR = @O_vDYSTINCR output,  @I_vRATEVARC = @O_vRATEVARC,  @I_vTRXDTDEF = @O_vTRXDTDEF,  @I_vPRVDSLMT = @O_vPRVDSLMT,  @I_vDATELMTS = @O_vDATELMTS,  @I_vMODULE = 0,  @I_vTIME1 = @O_vTIME1 output,  @I_vXCHGRATE = @O_vXCHGRATE output,  @I_vEXPNDATE = @O_vEXPNDATE output,  @I_vRATETPID = @O_vRATETPID output,  @I_vRTCLCMTD = @O_vRTCLCMTD output,  @I_vEXGTBLID = @EXGTBLID output,  @oErrString = @oErrString output,  @O_iErrorState = @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  begin  if (@O_iErrorState <> 0)  begin  exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   set @O_iErrorState = 9768   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  else begin  select @ISMCTRX = 0,@O_vRATEEXPR=0,@O_vDYSTINCR=0,@O_vRTCLCMTD=0,@I_vVIEWMODE=3 end   if ( @ISMCTRX = 1) begin  if @O_vXCHGRATE = 0   begin  set @O_iErrorState = 9789     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if @O_vRTCLCMTD = 0     begin  select   @I_vUNITCOST = round(@O_vORUNTCST * @O_vXCHGRATE, @I_vDECPLACS),  @I_vUNITPRCE = round(@O_vORUNTPRC * @O_vXCHGRATE, @I_vDECPLACS),  @O_vEXTDCOST = round(@O_vOREXTCST * @O_vXCHGRATE, @I_vDECPLACS),  @I_vXTNDPRCE = round(@O_vOXTNDPRC * @O_vXCHGRATE, @I_vDECPLACS),  @O_vTAXAMNT = 0,   @O_vTAXAMNT = round(@O_vORTAXAMT * @O_vXCHGRATE, @I_vDECPLACS)   end  else if @O_vRTCLCMTD = 1    begin  select   @I_vUNITCOST = round(@O_vORUNTCST / @O_vXCHGRATE, @I_vDECPLACS),  @I_vUNITPRCE = round(@O_vORUNTPRC / @O_vXCHGRATE, @I_vDECPLACS),  @O_vEXTDCOST = round(@O_vOREXTCST / @O_vXCHGRATE, @I_vDECPLACS),  @I_vXTNDPRCE = round(@O_vOXTNDPRC / @O_vXCHGRATE, @I_vDECPLACS),  @O_vTAXAMNT = 0,   @O_vTAXAMNT = round(@O_vORTAXAMT / @O_vXCHGRATE, @I_vDECPLACS)  end end  if (@I_vLINITMTYP = 'L') begin  select @I_vLOCNCODE = case  when @I_vLOCNCODE = '' and @GOODTECHLOCN <> '' then @GOODTECHLOCN  when @I_vLOCNCODE = '' and @GOODOFFLOCN <> '' then @GOODOFFLOCN  when @I_vLOCNCODE = '' and @DEFLOCNCODE <> '' then @DEFLOCNCODE  else @I_vLOCNCODE  end end  if (@I_vLINITMTYP = 'E' or @I_vLINITMTYP = 'A') begin  select @I_vLOCNCODE = case  when @I_vLOCNCODE = '' and @GOODOFFLOCN <> '' then @GOODOFFLOCN  when @I_vLOCNCODE = '' and @DEFLOCNCODE <> '' then @DEFLOCNCODE  else @I_vLOCNCODE  end end  if (@I_vLOCNCODE <> '') and (@I_vLINITMTYP <> 'L') begin  if not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE)  begin  set @O_iErrorState = 9734    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)   end  else   begin  if @I_vNonInventory = 0  begin  set @iValueExists = 0  select @iValueExists = 1, @O_iQTYONHND = QTYONHND, @O_iQTYALLOC = ATYALLOC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@iValueExists <> 1)  begin  set @O_iErrorState = 9735    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end end  if ((@I_vLINITMTYP = 'P') and (@I_vITEMNMBR <> '') and (@I_vNonInventory = 0)) begin  set @I_vSTRTDATE = '01/01/1900'  set @I_vSTRTTIME = '12:00 AM'  set @I_vENDDATE = '01/01/1900'  set @I_vENDTME = '12:00 AM'  set @O_TRANSTME = ''  set @O_BILLABLTIM = ''   if (@O_iQTYONHND is NULL)  set @O_iQTYONHND = 0.0  if (@O_iQTYALLOC is NULL)  set @O_iQTYALLOC = 0.0  if (@O_iQTYSOLD is NULL)  set @O_iQTYSOLD = 0.0   if ((@I_vQTYSOLD + @I_vQTYBACKO) > @I_vQTYORDER)  begin  set @O_iErrorState = 9736    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output   set @I_vQTYSOLD = @O_iQTYSOLD   set @I_vATYALLOC = (@I_vQTYORDER - @O_iQTYSOLD - @I_vQTYBACKO)   end   if (@I_vQTYSOLD - @O_iQTYSOLD > 0)   begin  if ((@O_iQTYONHND - @O_iQTYALLOC + @O_iATYALLOC) < (@I_vQTYSOLD - @O_iQTYSOLD))   begin  set @O_iErrorState = 9737    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output   set @O_iQTYSOLD = @O_iQTYSOLD + (@O_iQTYONHND - @O_iQTYALLOC + @O_iATYALLOC)   set @I_vQTYBACKO = @I_vQTYBACKO + (@I_vQTYSOLD - @I_vQTYSOLD)   set @I_vQTYSOLD = @O_iQTYSOLD   end  end  select @I_vATYALLOC = @I_vQTYORDER - @I_vQTYSOLD - @I_vQTYBACKO   if @O_iQTYORDER > 0   begin  if @O_iQTYBACKO > 0   delete SVC00710 where SRCDOCTYP = 1 and SRCDOCNUM = @I_vCALLNBR  and LNITMSEQ = @I_vLNITMSEQ and ITEMNMBR = @I_vITEMNMBR  if @O_iATYALLOC > 0 and @O_vITEMUSETYPE <> 'R'   begin  select @O_iATYALLOC = (@O_iATYALLOC * (-1)),  @O_PREVLOCNCODE = case  when @O_PREVLOCNCODE = '' then @I_vLOCNCODE  else @O_PREVLOCNCODE  end,  @O_PREVITEMNMBR = case  when @O_PREVITEMNMBR = '' then @I_vITEMNMBR  else @O_PREVITEMNMBR  end   exec @iStatus = SVC_Allocate_Quantity   @O_PREVITEMNMBR,  @O_PREVLOCNCODE,  @O_iATYALLOC  select @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  if (@iStatus = 0)  set @iStatus = @iError   set @O_iErrorState = 9738    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   end  select @I_vQTYBACKO = 0  end   if @O_vITEMUSETYPE <> 'R' and @I_vQTYORDER > 0  begin    exec @iStatus = SVC_Allocate_and_Backorder   @I_vITEMNMBR,  @I_vLOCNCODE,  @I_vQTYORDER,  @I_vCALLNBR,  1,  @I_vLNITMSEQ,  @I_vITEMDESC,  @I_vUOFM,  '',  '',  @I_vATYALLOC output,  @I_vQTYBACKO output   select @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  if (@iStatus = 0)  set @iStatus = @iError   set @O_iErrorState = 9739    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   set @I_vATYALLOC = @I_vQTYORDER - @I_vQTYBACKO - @I_vQTYSOLD   if @I_vQTYBACKO > 0  select @I_vSRVSTAT = @Backorder_Status   if @I_vATYALLOC > 0 and @O_iQTYORDER <> @I_vQTYORDER  begin  exec @iStatus = SVC_Allocate_Quantity   @I_vITEMNMBR,  @I_vLOCNCODE,  @I_vATYALLOC  select @iError = @@error  if (@iStatus = 0 and @iError <> 0)  set @iStatus = @iError   if (@iStatus <> 0)  begin  set @O_iErrorState = 9741    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   if (@O_iATYALLOC < 0 and (@I_vATYALLOC + @O_iATYALLOC) > 0 and @ENABLEMULTIBIN = 1) or (@O_iATYALLOC >= 0 and (@I_vATYALLOC - @O_iATYALLOC) > 0 and @ENABLEMULTIBIN = 1)  begin  set @O_iErrorState = 11975    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   end  if (@I_vQTYORDER = 0) or (@O_vITEMUSETYPE = 'R')  select @I_vATYALLOC = 0   if (@iITMTRKOP = 2 or @iITMTRKOP = 3) and @I_vQTYSOLD >= 0  begin   select @I_vQTYSOLD = @I_vQTYSOLD  end  else  begin  if @I_vQTYORDER = 0  begin  set @O_iErrorState = 9742    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if (@I_vUNITPRCE = 0) and (@I_vQTYSOLD > 0)  set @I_vUNITPRCE = round((@I_vXTNDPRCE/abs(@I_vQTYSOLD)), @iCurrDecPlaces)  if ((@I_vLINITMTYP = 'L') and (@I_vITEMNMBR <> '')) begin  if (@iITEMTYPE <= 3) and (@I_vNonInventory = 0)  begin  set @O_iErrorState = 9743     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @O_vITEMUSETYPE = case  when @I_vNonInventory = 1 then 'N'  when @I_vITEMNMBR = @Travel_Labor_Item then 'T'  when @I_vITEMNMBR = @Hotline_Labor_Item then 'H'  else 'L'  end,   @I_vATYALLOC = 0.0,  @I_vQTYBACKO = 0.0,  @I_vUNITCOST = case  when @I_vNonInventory = 1 then 0.0  else @I_vUNITCOST  end,  @O_vORUNTCST = case  when @I_vNonInventory = 1 then 0.0  else @O_vORUNTCST  end   if (@I_vLOCNCODE = '' and @I_vTECHID <> '')  set @I_vLOCNCODE = isnull(@GOODTECHLOCN,'')   if (@I_vTRANSTME = 0)  begin  if (datediff(hh, (convert(varchar(12), @I_vSTRTDATE, 101) + ' ' + convert(varchar(10), @I_vSTRTTIME, 108)), (convert(varchar(12), @I_vENDDATE, 101) + ' ' + convert(varchar(10), @I_vENDTME, 108))) >= 24)  begin  return;  end  if ((@I_vTECHID <> '') and (@I_vCreate_Overtime_Labor = 1))  begin  exec taFSCalcAutomaticOvertime  @I_vTECHID,  @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vENDDATE,  @I_vENDTME,  @O_TRANSTME output,  @O_OTTRANSTME output,  @iSplitTransaction output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 11441    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@iSplitTransaction = 1)  begin   set @O_iErrorState = 11442     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else  begin  if (@O_OTTRANSTME <> '')  begin  if ((@Overtime_Labor_Item = '') and (@I_vOvertime_Labor_Item_Number = ''))  begin  set @O_iErrorState = 11443     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else  select @I_vITEMNMBR = case  when @I_vOvertime_Labor_Item_Number <> '' then @I_vOvertime_Labor_Item_Number  else @Overtime_Labor_Item  end,  @iITMTRKOP = 0,  @iITEMTYPE = 0,  @iUOMSCHDL = '',  @iSELNGUOM = '',  @iSTNDCOST = 0,  @iCURRCOST = 0,  @O_vITMSHNAM = '',  @O_vITMGEDSC = '',  @O_vITMCLSCD = '',  @O_vITEMSHWT = 0,  @ITMDEFPRCLEVEL = '',  @O_vQTYINBASE = 0,  @I_vUOFM = '',  @I_vUNITPRCE = null,  @I_vUNITCOST = null  set @iValueExists = 0  select @iValueExists = 1, @iITMTRKOP = ITMTRKOP, @iITEMTYPE = ITEMTYPE, @iUOMSCHDL = UOMSCHDL, @iSELNGUOM = SELNGUOM,   @iCurrDecPlaces = (isnull(DECPLCUR, 1)-1), @iQtyDecPlaces = (isnull(DECPLQTY,1)-1),  @iSTNDCOST = isnull(STNDCOST, 0.0), @iCURRCOST = isnull(CURRCOST, 0.0),   @O_vITMSHNAM = isnull(ITMSHNAM,''), @O_vITMGEDSC = isnull(ITMGEDSC, ''), @O_vITMCLSCD = isnull(ITMCLSCD, ''),  @O_vITEMSHWT = isnull(ITEMSHWT, ''),  @ITMDEFPRCLEVEL = isnull(PRCLEVEL, ''),  @I_vITEMDESC = ISNULL(ITEMDESC, '')  from IV00101 (nolock) where ITEMNMBR=rtrim(@I_vITEMNMBR)  if (@iValueExists <> 1)  begin  set @O_iErrorState = 11444    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@I_vUOFM = '')  begin  if (@iSELNGUOM is NULL or @iSELNGUOM = '')  begin  SELECT @I_vUOFM = isnull(rtrim(BASEUOFM),'') from IV40201 where UOMSCHDL = @iUOMSCHDL  if (@@ERROR <> 0 or @I_vUOFM = '')  begin  return (@O_iErrorState)  end  end  else  set @I_vUOFM = rtrim(@iSELNGUOM)  end   if ((@I_vITEMNMBR <> '') and (@I_vUOFM <> ''))  begin  exec @iStatus = SVC_Obj_ValidateUOM  @I_vITEMNMBR,  @I_vUOFM,  @iValid output  select @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  if (@iStatus = 0)  set @iStatus = @iError   set @O_iErrorState = 11448    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if ((@iValid is NULL) or (@iValid <> 1))  begin  set @O_iErrorState = 11449    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   end  exec @iStatus = taItemListPrice  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vDOCDATE = @I_vENTDTE,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vPRCLEVEL = @I_vPRICELVL,  @I_vQUANTITY = 1,  @I_vNONINVEN = 0,  @I_vCURNCYID = @I_vCURNCYID,  @I_vUOFM = @I_vUOFM,  @I_vUNITPRCE = @ItemListPrice output,  @I_vITEMDESC = @I_vITEMDESC,  @O_iErrorState = @O_oErrorState output,  @oErrString = @oErrString output   set @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  set @O_iErrorState = 11445     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   exec SVC_Get_QtyInBase  @I_vITEMNMBR,   @I_vUOFM,   1,  @O_vQTYINBASE OUTPUT  set @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  set @O_iErrorState = 11446     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @O_vQTYINBASE = case  when @O_vQTYINBASE is null or @O_vQTYINBASE = 0 then 1  else @O_vQTYINBASE  end,  @I_vUNITPRCE = case  when @I_vUNITPRCE is null then @ItemListPrice  else @I_vUNITPRCE  end,  @I_vUNITCOST = case  when @I_vUNITCOST is null and @ItemCost > 0 then @ItemCost  when @I_vUNITCOST is null and @iCURRCOST > 0 then (@iCURRCOST * @O_vQTYINBASE)  when @I_vUNITCOST is null and @iSTNDCOST > 0 then (@iSTNDCOST * @O_vQTYINBASE)  else isnull(@I_vUNITCOST, 0)  end  select  @O_vORUNTCST = @I_vUNITCOST,  @O_vORUNTPRC = @I_vUNITPRCE,  @O_vOREXTCST = @O_vEXTDCOST,  @O_vOXTNDPRC = @I_vXTNDPRCE  if ( @ISMCTRX = 1)  begin  if @O_vRTCLCMTD = 0     begin  select   @I_vUNITCOST = round(@O_vORUNTCST * @O_vXCHGRATE, @I_vDECPLACS),  @I_vUNITPRCE = round(@O_vORUNTPRC * @O_vXCHGRATE, @I_vDECPLACS),  @O_vEXTDCOST = round(@O_vOREXTCST * @O_vXCHGRATE, @I_vDECPLACS),  @I_vXTNDPRCE = round(@O_vOXTNDPRC * @O_vXCHGRATE, @I_vDECPLACS),  @O_vTAXAMNT = 0,   @O_vTAXAMNT = round(@O_vORTAXAMT * @O_vXCHGRATE, @I_vDECPLACS)   end  else if @O_vRTCLCMTD = 1    begin  select   @I_vUNITCOST = round(@O_vORUNTCST / @O_vXCHGRATE, @I_vDECPLACS),  @I_vUNITPRCE = round(@O_vORUNTPRC / @O_vXCHGRATE, @I_vDECPLACS),  @O_vEXTDCOST = round(@O_vOREXTCST / @O_vXCHGRATE, @I_vDECPLACS),  @I_vXTNDPRCE = round(@O_vOXTNDPRC / @O_vXCHGRATE, @I_vDECPLACS),  @O_vTAXAMNT = 0,   @O_vTAXAMNT = round(@O_vORTAXAMT / @O_vXCHGRATE, @I_vDECPLACS)  end  end  select @O_Hours = convert(int,substring(@O_OTTRANSTME,1,3)),  @O_Minutes = convert(int,substring(@O_OTTRANSTME,5,2))  end  else  begin  select @O_Hours = convert(int,substring(@O_TRANSTME,1,3)),  @O_Minutes = convert(int,substring(@O_TRANSTME,5,2))  end   end  end  else  begin   exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE, @I_vSTRTTIME,   @I_vENDDATE, @I_vENDTME,   @O_TRANSTME OUTPUT    select @O_Hours = convert(int,substring(@O_TRANSTME,1,3)),  @O_Minutes = convert(int,substring(@O_TRANSTME,5,2))  end   end  else  begin  if @I_vTRANSTME < 546.12  select @O_Hours = @I_vTRANSTME / 60,  @O_Minutes = @I_vTRANSTME - (@O_Hours * 60)  else  select @O_Hours = 546,  @O_Minutes = 07  end   exec SVC_util_convert_timelength_to_string   @O_Hours,   @O_Minutes,   @O_TRANSTME output   if (@I_vQTYSOLD = 0 and @I_vBILLABLTIM = 0)  begin  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE, @I_vSTRTTIME,   @I_vENDDATE, @I_vENDTME,   @O_BILLABLTIM OUTPUT   select @O_Hours = convert(int,substring(@O_BILLABLTIM, 1, 3)),  @O_Minutes = convert(int,substring(@O_BILLABLTIM, 5, 2))  set @I_vBILLABLTIM = (@O_Hours * 60) + @O_Minutes  end   if ((@I_vBILLABLTIM = 0) and (@I_vQTYSOLD <> 0))  begin  if @I_vQTYSOLD < 546.12  set @I_vBILLABLTIM = @I_vQTYSOLD * 60  else  set @I_vBILLABLTIM = 546.12  end   else if (@I_vQTYSOLD = 0 and @I_vBILLABLTIM <> 0)  begin  set @I_vQTYSOLD = round((@I_vBILLABLTIM / 60), @iQtyDecPlaces)  end  select @I_vQTYORDER = @I_vQTYSOLD  if @I_vBILLABLTIM < 546.12  begin  select @O_Hours = @I_vBILLABLTIM / 60,  @O_Minutes = @I_vBILLABLTIM - (@O_Hours * 60)  end  else  begin  select @O_Hours = 546,  @O_Minutes = 07   end   exec SVC_util_convert_timelength_to_string   @O_Hours,   @O_Minutes,   @O_BILLABLTIM output   if (@O_vITEMUSETYPE = 'R')  begin  set @I_vXTNDPRCE = (-1)* round(isnull(@iBILLPCT, 1.00) * (abs(@I_vQTYSOLD) * @I_vUNITPRCE), @iCurrDecPlaces)  set @O_vEXTDCOST = (-1)* round((abs(@I_vQTYSOLD) * @I_vUNITCOST), @iCurrDecPlaces)   set @O_vOXTNDPRC = (-1)* round(isnull(@iBILLPCT, 1.00) * (abs(@I_vQTYSOLD) * @O_vORUNTPRC), @iCurrDecPlaces)  set @O_vOREXTCST = (-1)* round((abs(@I_vQTYSOLD) * @O_vORUNTCST), @iCurrDecPlaces)  end  else  begin  set @I_vXTNDPRCE = round(isnull(@iBILLPCT, 1.00) * (abs(@I_vQTYSOLD) * @I_vUNITPRCE), @iCurrDecPlaces)  set @O_vEXTDCOST = round((abs(@I_vQTYSOLD) * @I_vUNITCOST), @iCurrDecPlaces)   set @O_vOXTNDPRC = round(isnull(@iBILLPCT, 1.00) * (abs(@I_vQTYSOLD) * @O_vORUNTPRC), @iCurrDecPlaces)  set @O_vOREXTCST = round((abs(@I_vQTYSOLD) * @O_vORUNTCST), @iCurrDecPlaces)  end  end  if ((@I_vLINITMTYP = 'A' or @I_vLINITMTYP = 'E') and (@I_vITEMNMBR <> '')) begin  if (@iITEMTYPE <= 3) and (@I_vNonInventory = 0)  begin  set @O_iErrorState = 9744     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @O_vITEMUSETYPE = case  when @I_vNonInventory = 1 then 'N'  when @I_vLINITMTYP = 'E' then ''   else 'C'  end,  @I_vQTYORDER = 0.0,  @I_vATYALLOC = 0.0,  @I_vQTYBACKO = 0.0  if (@I_vLOCNCODE = '' and @I_vTECHID <> '')  set @I_vLOCNCODE = isnull(@GOODTECHLOCN,'')   set @I_vSTRTDATE = '01/01/1900'  set @I_vSTRTTIME = '12:00 AM'  set @I_vENDDATE = '01/01/1900'  set @I_vENDTME = '12:00 AM'  end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  if (@I_vLOCNCODE <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11976     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vLOCNCODE <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11977     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @INACTIVEITEM = INACTIVE from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  if (@I_vITEMNMBR <> '' and @I_vNonInventory = 0 and @INACTIVEITEM = 1) begin  select @O_iErrorState = 11978     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vCKCREATEPO = 1) and (@I_vVENDORID is not null) and (@I_vVENDORID <> '') begin  set @iValueExists = 0  select  @iValueExists=1,  @VENDHOLD=isnull(HOLD,0),  @VENDINACTIVE=isnull(VENDSTTS,1),  @VENDPYMTRMID=isnull(PYMTRMID,''),  @VADDCDPR=isnull(VADDCDPR,''),  @VENDCURNCYID=isnull(CURNCYID,''),  @VENDRATETPID=isnull(RATETPID,''),  @VENDNAME = isnull(@VENDNAME, '')  from PM00200 (nolock) where VENDORID=@I_vVENDORID   if (@iValueExists <> 1)  begin  set @O_iErrorState = 9783     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@VENDHOLD=1)  begin  set @O_iErrorState = 9784     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@VENDINACTIVE=2)  begin   set @O_iErrorState = 9785     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if @I_vNonInventory = 0  begin  set @iValueExists = 0  select @iValueExists = 1, @VNDITNUM = isnull(VNDITNUM,''), @VNDITDSC = isnull(VNDITDSC, '') from IV00103 where ITEMNMBR = @I_vITEMNMBR and VENDORID = @I_vVENDORID  if (@iValueExists <> 1)  begin  set @O_iErrorState = 9786     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end else begin  set @I_vCKCREATEPO = 0  set @I_vVENDORID = ''  end  if (@I_vSRVSTAT = '')  select @I_vSRVSTAT = @SRVSTAT  if @I_vSRVSTAT <> '' begin  if not exists(select 1 from SVC00913 (nolock) where SRVSTAT = @I_vSRVSTAT)  begin  set @O_iErrorState = 9727     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@TIMEZONE <> '') begin  if (not exists(select 1 from SVC00900 (nolock) where TIMEZONE = @TIMEZONE))  begin  set @O_iErrorState = 9752     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vSTRTDATE <> '') and not (datepart(hour,@I_vSTRTDATE) = 0 and datepart(minute,@I_vSTRTDATE) = 0 and datepart(second,@I_vSTRTDATE) = 0   and datepart(millisecond,@I_vSTRTDATE) = 0) begin  set @O_iErrorState = 9755     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  set @I_vSTRTTIME = convert(varchar(10), @I_vSTRTTIME, 108)  if (@I_vSTRTTIME <> '') and not (datepart(day,@I_vSTRTTIME) = 1 and datepart(month,@I_vSTRTTIME) = 1 and datepart(year,@I_vSTRTTIME) = 1900) begin  set @O_iErrorState = 9754     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vENDDATE is NULL)  set @I_vENDDATE = ''  if (@I_vENDTME is NULL)  set @I_vENDTME = '' else  set @I_vENDTME = convert(varchar(10), @I_vENDTME, 108)  if (@I_vENDTME <> '')   if not (datepart(day,@I_vENDTME) = 1 and datepart(month,@I_vENDTME) = 1 and datepart(year,@I_vENDTME) = 1900)  begin  set @O_iErrorState = 9756     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@I_vENDDATE <> '')   if not (datepart(hour,@I_vENDDATE) = 0 and datepart(minute,@I_vENDDATE) = 0 and datepart(second,@I_vENDDATE) = 0   and datepart(millisecond,@I_vENDDATE) = 0)  begin  set @O_iErrorState = 9757     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  set @O_vFUFILDAT = convert(varchar(10),'1900-01-01', 101)  if (@O_vFUFILDAT <> '')  begin  if not (datepart(hour,@O_vFUFILDAT) = 0 and datepart(minute,@O_vFUFILDAT) = 0 and datepart(second,@O_vFUFILDAT) = 0   and datepart(millisecond,@O_vFUFILDAT) = 0)  begin  set @O_iErrorState = 9758     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@I_vSTRTDATE <> '') and (@I_vSTRTTIME <> '')  and (@I_vENDDATE <> '') and (@I_vENDTME <> '')) begin  if (@I_vSTRTDATE > @I_vENDDATE)  or ((@I_vSTRTDATE = @I_vENDDATE) and (@I_vSTRTTIME > @I_vENDTME))  begin  set @O_iErrorState = 9759     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@SVCAREA <> '') begin  if (not exists(select 1 from SVC00909 (nolock) where SVCAREA = @SVCAREA))  begin  set @O_iErrorState = 9764    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vQTYSOLD is NULL)  set @I_vQTYSOLD = 0.0  if (@O_vITEMUSETYPE = 'R') begin  set @O_vEXTDCOST = (-1)* round((@I_vUNITCOST * abs(@I_vQTYSOLD)), @iCurrDecPlaces)  set @O_vOREXTCST = (-1)* round((@O_vORUNTCST * abs(@I_vQTYSOLD)), @iCurrDecPlaces)   set @I_vXTNDPRCE = (-1)* round(isnull(@iBILLPCT, 1.00) * (@I_vUNITPRCE * abs(@I_vQTYSOLD)), @iCurrDecPlaces)  set @O_vOXTNDPRC = (-1)* round(isnull(@iBILLPCT, 1.00) * (@O_vORUNTPRC * abs(@I_vQTYSOLD)), @iCurrDecPlaces) end else begin  set @O_vEXTDCOST = round((@I_vUNITCOST * abs(@I_vQTYSOLD)), @iCurrDecPlaces)  set @O_vOREXTCST = round((@O_vORUNTCST * abs(@I_vQTYSOLD)), @iCurrDecPlaces)   set @I_vXTNDPRCE = round(isnull(@iBILLPCT, 1.00) * (@I_vUNITPRCE * abs(@I_vQTYSOLD)), @iCurrDecPlaces)  set @O_vOXTNDPRC = round(isnull(@iBILLPCT, 1.00) * (@O_vORUNTPRC * abs(@I_vQTYSOLD)), @iCurrDecPlaces) end   select @AuditLNITMSEQ = count(CALLNBR) + 1 from SVC00210 (nolock) where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR  if (@Line_Seq_Exists=0) or (isnull(@O_iNOTEINDX,0) = 0) begin  select @CMPANYID = CMPANYID from DYNAMICS..SY01500 c (nolock) where c.INTERID = db_name()  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @CMPANYID,  @I_iSQLSessionID = 0,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error   if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end   if (@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0)  begin  if (@iGetNextNoteIdxErrState <> 0)  begin  exec @iStatus = taUpdateString  @iGetNextNoteIdxErrState,   @oErrString,  @oErrString output,  @O_oErrorState output  end  set @O_iErrorState = 9745    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else begin  select @NOTEINDX = isnull(@O_iNOTEINDX, 0) end  if ((@O_vOn_Return = 1 or @O_vRETDOCID <> '') and ((@O_vITEMUSETYPE = 'I' or @O_vITEMUSETYPE = 'R') and @I_vLINITMTYP = 'P'))  begin     if (@O_vRETDOCID <> '' and @O_vLNSEQNBR > 0)  begin  if (not exists(select 1 from SVC05200 (nolock) where (Return_Record_Type = 1 or Return_Record_Type = 2)   and RETDOCID = @O_vRETDOCID and LNSEQNBR = @O_vLNSEQNBR))  begin  set @O_iErrorState = 9746    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  select @O_vRETDOCID = '',  @O_vOn_Return = 0,  @O_vLNSEQNBR = 0  end   end     else if (@O_vRETDOCID <> '')  begin  if (not exists(select 1 from SVC05000 (nolock) where (Return_Record_Type = 1 or Return_Record_Type = 2)   and RETDOCID = @O_vRETDOCID))  begin  set @O_iErrorState = 9767    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  select @O_vRETDOCID = '',  @O_vOn_Return = 0,  @O_vLNSEQNBR = 0  end   end  if (@O_iErrorState <> 0)  return (@O_iErrorState) end else begin  select @O_vOn_Return = 0,  @O_vRETDOCID = '',  @O_vLNSEQNBR = 0 end  if (@oErrString <> '')  return (@O_iErrorState)  select @iSerialCount = count(SERLTQTY) from SVC00250   where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR and EQPLINE = @I_vEQPLINE   and LINITMTYP = @I_vLINITMTYP and LNITMSEQ = @I_vLNITMSEQ  and ITEMNMBR = @I_vITEMNMBR  if ((@iITMTRKOP = 2 or @iITMTRKOP = 3) and ((@I_vQTYSOLD <> 0 and @iSerialCount <> @I_vQTYSOLD) or (@iSerialCount > 0 and @I_vQTYORDER < @iSerialCount))) begin  set @O_iErrorState = 9799    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@Line_Seq_Exists = 0 or (@Line_Seq_Exists = 1 and @I_vUpdateIfExists = 1))  and (@I_vQTYSOLD > 0 and @I_vITEMNMBR <> '' and @I_vLINITMTYP = 'P' and @O_vITEMUSETYPE <> 'R' and @O_iQTYSOLD <> @I_vQTYSOLD)  and @I_vNonInventory = 0 begin  select @O_vIVDOCNBR = NXADJDOC from IV40100 where SETUPKEY = 1  set @O_NextIVDOCNBR = @O_vIVDOCNBR  exec ivNumber_Inc_Dec 1, @O_NextIVDOCNBR output, @O_iErrorState output  if @@error <> 0 or @O_iErrorState <> 0  begin  set @O_iErrorState = 9775    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  update IV40100 set NXADJDOC = @O_NextIVDOCNBR where SETUPKEY = 1   if (@O_vIVDOCNBR <> '' and (@iITMTRKOP = 2 or @iITMTRKOP = 3)) and (@iSerialCount > 0)  begin   declare SVCLineSerial cursor   for  select SERLTNUM, BIN, POSTED, SLTSQNUM, SERLTQTY, DTSEQNUM, DATERECD from SVC00250   where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR and EQPLINE = @I_vEQPLINE   and LINITMTYP = @I_vLINITMTYP and LNITMSEQ = @I_vLNITMSEQ  and ITEMNMBR = @I_vITEMNMBR and POSTED = 0  order by SRVRECTYPE, CALLNBR, EQPLINE, LINITMTYP, LNITMSEQ, SLTSQNUM   set @iCounter = 0  OPEN SVCLineSerial  FETCH NEXT FROM SVCLineSerial INTO @O_vSERLTNUM, @O_vBIN, @O_POSTED, @O_SLTSQNUM, @O_SERLTQTY, @O_DTSEQNUM, @O_DATERECD  WHILE @@FETCH_STATUS = 0  begin  set @iCounter = @iCounter + 1  if (@iCounter <= @I_vQTYSOLD)   begin  if (@iITMTRKOP = 2)  begin  update IV00200 set SERLNSLD = 0 where ITEMNMBR = @I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND SERLNMBR = @O_vSERLTNUM  exec @iStatus = taIVTransactionSerialInsert  @I_vIVDOCNBR = @O_vIVDOCNBR,  @I_vIVDOCTYP = 1,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vSERLNMBR = @O_vSERLTNUM,  @I_vADJTYPE = 1,  @I_vLNSEQNBR = 16384,  @I_vBIN = @O_vBIN,  @I_vCreateBin = 0,  @I_vLOCNCODE = @I_vLOCNCODE,  @I_vAUTOCREATESERIAL = 0,  @I_vRequesterTrx = 0,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if @O_iErrorState <> 0 or @iStatus <> 0  begin  set @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 9769    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  CLOSE SVCLineSerial  DEALLOCATE SVCLineSerial  return (@O_iErrorState)  end  end  else if (@iITMTRKOP = 3)  begin  update IV00300 set   ATYALLOC = case  when ATYALLOC - @O_SERLTQTY >= 0 then ATYALLOC - @O_SERLTQTY  else 0  end  where ITEMNMBR = @I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @O_vSERLTNUM  AND DATERECD = @O_DATERECD AND DTSEQNUM = @O_DTSEQNUM  exec @iStatus = taIVTransactionLotInsert  @I_vIVDOCNBR = @O_vIVDOCNBR,  @I_vIVDOCTYP = 1,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vLOTNUMBR = @O_vSERLTNUM,  @I_vSERLTQTY = @O_SERLTQTY,  @I_vADJTYPE = 1,  @I_vBIN = @O_vBIN,  @I_vCreateBin = 0,  @I_vLNSEQNBR = 16384,  @I_vLOCNCODE = @I_vLOCNCODE,  @I_vAUTOCREATELOT = 0,  @I_vRequesterTrx = 0,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if @O_iErrorState <> 0 or @iStatus <> 0  begin  set @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 8967    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  CLOSE SVCLineSerial  DEALLOCATE SVCLineSerial  return (@O_iErrorState)  end  end  end   FETCH NEXT FROM SVCLineSerial INTO @O_vSERLTNUM, @O_vBIN, @O_POSTED, @O_SLTSQNUM, @O_SERLTQTY, @O_DTSEQNUM, @O_DATERECD  end  CLOSE SVCLineSerial  DEALLOCATE SVCLineSerial  end   select @iInventoryOffsetIndex = DPSHPIDX,   @iInventoryAccount = IVIVINDX from IV00101 where ITEMNMBR = @I_vITEMNMBR   select @iInventoryOffsetIndex = case  when @iInventoryOffsetIndex = 0 then ACTINDX   else @iInventoryOffsetIndex  end  from SY01100 where SERIES = 5 and SEQNUMBR = 1100   select @iInventoryOffsetIndex = case  when @iInventoryOffsetIndex = 0 then @iInventoryAccount  else @iInventoryOffsetIndex  end   set @iTRXQTYSOLD = (-1)*@I_vQTYSOLD   if (@I_vQTYSOLD <> @O_iQTYSOLD) and (@I_vUpdateIfExists = 1)  begin  if (@I_vQTYSOLD > @O_iQTYSOLD)  begin  select @iTRXQTYSOLD = (-1)*(@I_vQTYSOLD - @O_iQTYSOLD)  end   else  begin  select @iTRXQTYSOLD = (@O_iQTYSOLD - @I_vQTYSOLD)  end   end   exec @iStatus = taIVTransactionLineInsert  @I_vIVDOCNBR = @O_vIVDOCNBR,  @I_vIVDOCTYP = 1,   @I_vITEMNMBR = @I_vITEMNMBR,  @I_vTRXQTY = @iTRXQTYSOLD,  @I_vUNITCOST = @I_vUNITCOST,  @I_vTRXLOCTN = @I_vLOCNCODE,  @I_vIVIVOFIX = @iInventoryOffsetIndex,  @I_vRequesterTrx = 0,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if @@error <> 0 or @O_iErrorState <> 0 or @iStatus <> 0  begin  set @O_iErrorState = 9770    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   exec taIVTransactionHeaderInsert  @I_vBACHNUMB = @O_vIVBACHNUMB,  @I_vIVDOCNBR = @O_vIVDOCNBR,  @I_vIVDOCTYP = 1,   @I_vDOCDATE = @O_TODAY,   @I_vPOSTTOGL = 0,   @I_vRequesterTrx = 0,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if @@error <> 0 or @O_iErrorState <> 0  begin  set @O_iErrorState = 9771    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV10000 set SOURCEINDICATOR = 7, SRCRFRNCNMBR = @I_vCALLNBR where IVDOCNBR = @O_vIVDOCNBR and BACHNUMB = @O_vIVBACHNUMB  end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  if @SVC_Sales_Only = 0   and (@I_vCKCREATEPO = 1) and (@I_vVENDORID <> '') and (@Use_POP = 2) begin  set @I_vPRMDATE = convert(varchar(10), @I_vPRMDATE, 101)   set @iValueExists = 0  select @iValueExists = 1, @O_vPONMBRSTR = isnull(PONUMBER,'') from POP40100 where INDEX1 = 1  if (@iValueExists <> 1)  begin  set @O_iErrorState = 10252    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   set @O_NextPONUMBER = @O_vPONMBRSTR  exec ivNumber_Inc_Dec 1, @O_NextPONUMBER output, @O_iErrorState output  if @@error <> 0 or @O_iErrorState <> 0  begin  set @O_iErrorState = 9791    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  update POP40100 set PONUMBER = @O_NextPONUMBER where INDEX1 = 1  if (@O_vPONMBRSTR <> '')  begin  exec taPoLine  @I_vPOTYPE = 1,   @I_vPONUMBER = @O_vPONMBRSTR,  @I_vVENDORID = @I_vVENDORID,  @I_vLOCNCODE = @I_vLOCNCODE,  @I_vVNDITNUM = @VNDITNUM,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vQUANTITY = @I_vQTYORDER,  @I_vQTYCANCE = 0,  @I_vFREEONBOARD = 1,   @I_vREQSTDBY = @I_vCALLNBR,  @I_vCOMMNTID  = '',  @I_vREQDATE = @O_TODAY,  @I_vRELEASEBYDATE = @O_DUMMYDT,  @I_vPRMDATE = @I_vPRMDATE,  @I_vPRMSHPDTE = @I_vPRMDATE,  @I_vNONINVEN = @NonInventoryItem,  @I_vITEMDESC = @I_vITEMDESC,  @I_vUNITCOST = @I_vUNITCOST,  @I_vUOFM = @I_vUOFM,  @I_vVNDITDSC = @VNDITDSC,  @I_vRequesterTrx = 0,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if @@error <> 0 or @O_iErrorState <> 0  begin  set @O_iErrorState = 9792    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   exec @iStatus = taPoHdr  @I_vPOTYPE = 1,   @I_vPONUMBER = @O_vPONMBRSTR,  @I_vVENDORID = @I_vVENDORID,  @I_vVENDNAME = @VENDNAME,  @I_vDOCDATE = @O_TODAY,  @I_vALLOWSOCMTS = 1,  @I_vTRDISAMT = 0,  @I_vMSCCHAMT = 0,  @I_vRequesterTrx = 0,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if @@error <> 0 or @O_iErrorState <> 0 or @iStatus <> 0  begin  set @O_iErrorState = 9793    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  if (@ReturnableItem = 1) and ((@O_vITEMUSETYPE = 'I' or @O_vITEMUSETYPE = 'R') and @I_vLINITMTYP = 'P')   and @Line_Seq_Exists = 0 begin  select @O_vRETQTY = 0,   @O_vRETLNITMSEQ = @I_vLNITMSEQ + 16384,  @O_vRETLOCNCODE = isnull(@BADLOCNCODE, '')   if (@O_vOn_Return = 1) and (@O_vRETDOCID = '') and (@ReturnableItem = 1) and (@O_vRETQTY > 0)  begin  exec @iStatus = taFSSGetNextReturnDocumentID   @O_iRETDOCTYP = 'RMA',  @O_iRETDOCID = @iRETDOCID output,  @O_iErrorState = @iGetNextDocIdErrState output  select @iError = @@error   if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end   if (@iStatus <> 0) or (@iGetNextDocIdErrState <> 0)  begin  if (@iGetNextDocIdErrState <> 0)  begin  exec @iStatus = taUpdateString  @iGetNextDocIdErrState,   @oErrString,  @oErrString output,  @O_oErrorState output  end  set @O_iErrorState = 9794    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@O_iRETDOCID <> '') and (@O_vRETDOCID = '')  begin  set @iRETORIG = 2  exec taFSRMALine  @I_vReturn_Record_Type = 1,  @I_vRETDOCID = @O_iRETDOCID,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vADRSCODE = @I_vADRSCODE,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vLOCNCODE = @O_vRETLOCNCODE,  @I_vReceived = 0,  @I_vUOFM = @I_vUOFM,  @I_vUNITCOST = @I_vUNITCOST,  @I_vUNITPRCE = @I_vUNITPRCE,  @I_vXTNDPRCE = @I_vXTNDPRCE,  @I_vCUSTOWN = 0,  @I_vCURNCYID = @I_vCURNCYID,  @O_vXCHGRATE = @O_vXCHGRATE,  @O_vRATETPID = @O_vRATETPID,  @I_vRETORIG = @iRETORIG,  @I_vRETREF = @I_vCALLNBR,  @I_vSRVRECTYPE = @I_vSRVRECTYPE,  @I_vEQPLINE = @I_vEQPLINE,  @I_vLNITMSEQ = @O_vRETLNITMSEQ,  @I_vSVC_RMA_From_Service = 1  set @O_vRETDOCID = @O_iRETDOCID  end  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  if (@Line_Seq_Exists=0) begin     insert into SVC00203(  CALLNBR,  SRVRECTYPE,  EQPLINE,  LNITMSEQ,  LINITMTYP,  SRVSTAT,  TECHID,  ITEMNMBR,  ITEMUSETYPE,  ITEMDESC,  LOCNCODE,  UOFM,  QTYORDER,  ATYALLOC,  QTYBACKO,  QTYSOLD,  UNITCOST,  UNITPRCE,  EXTDCOST,  XTNDPRCE,  NOTEINDX,  STRTDATE,  STRTTIME,  ENDDATE,  ENDTME,  TRANSTME,  BILLABLTIM,  TRNSFLOC,  TRNSFQTY,  TRNFLAG,  ORDDOCID,  TRANSLINESEQ,  LABPCT,  PARTPCT,  MISCPCT,  FUFILDAT,  PONMBRSTR,  POLNSEQ,  On_Return,  RETDOCID,  LNSEQNBR,  Miles_Start,  Miles_End,  Miles_Used,  PRICELVL,  SVC_Address_Option,  SVC_Misc_Address_Code,  SVC_Disable_XFR_Grouping,  Work_Type,  ORUNTCST,  ORUNTPRC,  OREXTCST,  OXTNDPRC,  TAXAMNT,  ORTAXAMT,  SVC_FO_ID,  svcCreateVoucher,  VCHRNMBR,  CMPNTSEQ,  CMPITQTY)   select  @I_vCALLNBR,  @I_vSRVRECTYPE,  @I_vEQPLINE,  @I_vLNITMSEQ,  @I_vLINITMTYP,  @I_vSRVSTAT,  @I_vTECHID,  @I_vITEMNMBR,  @O_vITEMUSETYPE,  @I_vITEMDESC,  @I_vLOCNCODE,  @I_vUOFM,  @I_vQTYORDER,  @I_vATYALLOC,  @I_vQTYBACKO,  @I_vQTYSOLD,  @I_vUNITCOST,  @I_vUNITPRCE,  @O_vEXTDCOST,  @I_vXTNDPRCE,  @NOTEINDX,  @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vENDDATE,  @I_vENDTME,  @O_TRANSTME,  @O_BILLABLTIM,  @O_vTRNSFLOC,  @O_vTRNSFQTY,  @O_vTRNFLAG,  @O_vORDDOCID,  @O_vTRANSLINESEQ,  @I_vLABPCT,  @I_vPARTPCT,  @I_vMISCPCT,  @O_vFUFILDAT,  @O_vPONMBRSTR,  @O_vPOLNSEQ,  @O_vOn_Return,  @O_vRETDOCID,  @O_vLNSEQNBR,  @I_vMiles_Start,  @I_vMiles_End,  @I_vMiles_Used,  @I_vPRICELVL,  @I_vSVC_Address_Option,  @I_vSVC_Misc_Address_Code,  @I_vSVC_Disable_XFR_Grouping,  @I_vWork_Type,  @O_vORUNTCST,  @O_vORUNTPRC,  @O_vOREXTCST,  @O_vOXTNDPRC,  @O_vTAXAMNT,  @O_vORTAXAMT,  @I_vSVC_FO_ID,  0,       '',       0,       0        set @iError = @@error   if @iError <> 0  begin  set @O_iErrorState = 9772    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert into SVC00210  (CALLNBR,  SRVRECTYPE,  LNITMSEQ,  FRMSTAT,  TOSTAT,  TECHID,  DSCRIPTN,  USERID,  CREATDDT,  CREATETIME)  select  @I_vCALLNBR,  @I_vSRVRECTYPE,  @AuditLNITMSEQ,  @FRMSTAT,  @I_vSRVSTAT,  @I_vTECHID,  @AuditDesc,  @UserID,  convert(varchar(12),getdate(),101),  getdate()- convert(char(12),getdate(),12)  if @@error <> 0  begin  set @O_iErrorState = 10253    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else begin     if (@I_vUpdateIfExists > 0)  begin  update SVC00203 set CALLNBR = @I_vCALLNBR,  SRVRECTYPE = @I_vSRVRECTYPE,  EQPLINE = @I_vEQPLINE,  LNITMSEQ = @I_vLNITMSEQ,  LINITMTYP = @I_vLINITMTYP,  SRVSTAT = @I_vSRVSTAT,  TECHID = @I_vTECHID,  ITEMNMBR = @I_vITEMNMBR,  ITEMUSETYPE = @O_vITEMUSETYPE,  ITEMDESC = @I_vITEMDESC,  LOCNCODE = @I_vLOCNCODE,  UOFM = @I_vUOFM,  QTYORDER = @I_vQTYORDER,  ATYALLOC = @I_vATYALLOC,  QTYBACKO = @I_vQTYBACKO,  QTYSOLD = @I_vQTYSOLD,  UNITCOST = @I_vUNITCOST,  UNITPRCE = @I_vUNITPRCE,  EXTDCOST = @O_vEXTDCOST,  XTNDPRCE = @I_vXTNDPRCE,  NOTEINDX = @NOTEINDX,  STRTDATE = @I_vSTRTDATE,  STRTTIME = @I_vSTRTTIME,  ENDDATE = @I_vENDDATE,  ENDTME = @I_vENDTME,  TRANSTME = @O_TRANSTME,  BILLABLTIM = @O_BILLABLTIM,  TRNSFLOC = @O_vTRNSFLOC,  TRNSFQTY = @O_vTRNSFQTY,  TRNFLAG = @O_vTRNFLAG,  ORDDOCID = @O_vORDDOCID,  TRANSLINESEQ = @O_vTRANSLINESEQ,  LABPCT = @I_vLABPCT,  PARTPCT = @I_vPARTPCT,  MISCPCT = @I_vMISCPCT,  FUFILDAT = @O_vFUFILDAT,  PONMBRSTR = @O_vPONMBRSTR,  POLNSEQ = @O_vPOLNSEQ,  On_Return = @O_vOn_Return,  RETDOCID = @O_vRETDOCID,  LNSEQNBR = @O_vLNSEQNBR,  Miles_Start = @I_vMiles_Start,  Miles_End = @I_vMiles_End,  Miles_Used = @I_vMiles_Used,  PRICELVL = @I_vPRICELVL,  SVC_Address_Option = @I_vSVC_Address_Option,  SVC_Misc_Address_Code = @I_vSVC_Misc_Address_Code,  SVC_Disable_XFR_Grouping = @I_vSVC_Disable_XFR_Grouping,  Work_Type = @I_vWork_Type,  ORUNTCST = @O_vORUNTCST,  ORUNTPRC = @O_vORUNTPRC,  OREXTCST = @O_vOREXTCST,  OXTNDPRC = @O_vOXTNDPRC,  TAXAMNT = @O_vTAXAMNT,  ORTAXAMT = @O_vORTAXAMT,  SVC_FO_ID = @I_vSVC_FO_ID  where SRVRECTYPE = @I_vSRVRECTYPE and CALLNBR = @I_vCALLNBR  and EQPLINE = @I_vEQPLINE and LNITMSEQ = @I_vLNITMSEQ and LINITMTYP = @I_vLINITMTYP  if (@@error <> 0)  begin  set @O_iErrorState = 9774    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert into SVC00210  (CALLNBR,  SRVRECTYPE,  LNITMSEQ,  FRMSTAT,  TOSTAT,  TECHID,  DSCRIPTN,  USERID,  CREATDDT,  CREATETIME)  select  @I_vCALLNBR,  @I_vSRVRECTYPE,  @AuditLNITMSEQ,  @FRMSTAT,  @I_vSRVSTAT,  @I_vTECHID,  @AuditDesc,  @UserID,  convert(varchar(12),getdate()),  getdate()- convert(char(12),getdate(),12)  if @@error <> 0  begin  set @O_iErrorState = 9773    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   end end  if (@I_vNOTETXT <> '') and (@NOTEINDX > 0) begin  if exists(select 1 from SY03900 where NOTEINDX = @NOTEINDX)  update SY03900 set TXTFIELD = @I_vNOTETXT,   DATE1 = @O_TODAY,   TIME1 = convert(char(12), getdate(), 108)   where NOTEINDX = @NOTEINDX  else  insert into SY03900 (NOTEINDX,   DATE1,   TIME1,   TXTFIELD)   select @NOTEINDX,   @O_TODAY,   convert(char(12), getdate(), 108),   @I_vNOTETXT end  if (@I_vQTYSOLD > 0) begin  exec @iStatus = taSVC_Set_Service_Line_Dist   @srvrectype = @I_vSRVRECTYPE,  @callnbr = @I_vCALLNBR,  @EquipLine = @I_vEQPLINE,  @Line = @I_vLNITMSEQ,  @LineType = @I_vLINITMTYP,  @Amount = @I_vXTNDPRCE,  @OrigAmount = @O_vOXTNDPRC,  @iType = 1,  @CMPNTSEQ = 0,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vCURNCYID = @I_vCURNCYID,  @SRVTYPE = @SRVTYPE   select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 9776    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@ReturnableItem = 1) and (@O_vITEMUSETYPE = 'I' and @I_vLINITMTYP = 'P')   and (@Line_Seq_Exists = 0) begin  select @O_vRETQTY = @I_vQTYORDER,  @O_vRETLNITMSEQ = @I_vLNITMSEQ + 16384,  @O_vITEMUSETYPE = 'R',  @O_vRETURNPRICELVL = case  when (@O_vRETURNPRICELVL is null or @O_vRETURNPRICELVL = '') or (@SVC_Use_Return = 0) then @I_vPRICELVL  else @O_vRETURNPRICELVL  end   if (@O_vRETURNPRICELVL <> @I_vPRICELVL)  begin  if not exists(select 1 from IV40800 where PRCLEVEL = @O_vRETURNPRICELVL)  begin  set @O_iErrorState = 9801     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@O_vRETURNPRICELVL <> '') and (@I_vITEMNMBR <> '') and (@I_vCURNCYID <> '') and (@I_vUOFM <> '')  and not exists(select 1 from IV00108 where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM   and (CURNCYID = '' or CURNCYID = @I_vCURNCYID) and PRCLEVEL = @O_vRETURNPRICELVL)  begin  set @O_iErrorState = 9802     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   exec @iStatus = taItemListPrice  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vDOCDATE = @I_vENTDTE,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vPRCLEVEL = @O_vRETURNPRICELVL,  @I_vQUANTITY = 1,  @I_vNONINVEN = 0,  @I_vCURNCYID = @I_vCURNCYID,  @I_vUOFM = @I_vUOFM,  @I_vUNITPRCE = @ItemListPrice output,  @I_vITEMDESC = @I_vITEMDESC,  @O_iErrorState = @O_oErrorState output,  @oErrString = @oErrString output   set @iError = @@error  if (@iStatus <> 0 or @iError <> 0)  begin  set @O_iErrorState = 9803    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  select @O_vQTYINBASE = case  when @O_vQTYINBASE is null or @O_vQTYINBASE = 0 then 1  else @O_vQTYINBASE  end,  @O_vRETUNITPRCE = case  when @ItemListPrice is not null then @ItemListPrice  else isnull(@I_vUNITPRCE, 0)  end,  @O_vRETUNITCOST = case  when @iUSECURRCOST = 0 then @O_vRETCOST  when @iUSECURRCOST = 1 and @iCURRCOST > 0 then (@iCURRCOST * @O_vQTYINBASE)  when @iUSECURRCOST = 1 and @iSTNDCOST > 0 then (@iSTNDCOST * @O_vQTYINBASE)  when @iUSECURRCOST = 1 then isnull(@I_vUNITCOST, 0)  else 01  end   select  @O_vRETORUNTCST = @O_vRETUNITCOST,    @O_vRETORUNTPRC = @O_vRETUNITPRCE     if (@ISMCTRX = 1)  begin  if @O_vXCHGRATE <> 0   begin  if @O_vRTCLCMTD = 0     begin  select   @O_vRETUNITCOST = round(@O_vRETORUNTCST * @O_vXCHGRATE, @I_vDECPLACS),  @O_vRETUNITPRCE = round(@O_vRETORUNTPRC * @O_vXCHGRATE, @I_vDECPLACS)  end  else if @O_vRTCLCMTD = 1    begin  select   @O_vRETUNITCOST = round(@O_vRETORUNTCST / @O_vXCHGRATE, @I_vDECPLACS),  @O_vRETUNITPRCE = round(@O_vRETORUNTPRC / @O_vXCHGRATE, @I_vDECPLACS)  end  end  end  end   insert into SVC00203(CALLNBR,  SRVRECTYPE,  EQPLINE,  LNITMSEQ,  LINITMTYP,  SRVSTAT,  TECHID,  ITEMNMBR,  ITEMUSETYPE,  ITEMDESC,  LOCNCODE,  UOFM,  QTYORDER,  ATYALLOC,  QTYBACKO,  QTYSOLD,  UNITCOST,  UNITPRCE,  EXTDCOST,  XTNDPRCE,  STRTDATE,  STRTTIME,  ENDDATE,  ENDTME,  TRANSTME,  BILLABLTIM,  TRNSFLOC,  TRNSFQTY,  TRNFLAG,  ORDDOCID,  TRANSLINESEQ,  LABPCT,  PARTPCT,  MISCPCT,  FUFILDAT,  PONMBRSTR,  POLNSEQ,  On_Return,  RETDOCID,  LNSEQNBR,  Miles_Start,  Miles_End,  Miles_Used,  PRICELVL,  SVC_Address_Option,  SVC_Misc_Address_Code,  SVC_Disable_XFR_Grouping,  Work_Type,  ORUNTCST,  ORUNTPRC,  OREXTCST,  OXTNDPRC,  TAXAMNT,  ORTAXAMT,  SVC_FO_ID,  svcCreateVoucher,  VCHRNMBR,  CMPNTSEQ,  CMPITQTY)  select @I_vCALLNBR,  @I_vSRVRECTYPE,  @I_vEQPLINE,  @O_vRETLNITMSEQ,  @I_vLINITMTYP,  @SRVSTAT,   @I_vTECHID,  @I_vITEMNMBR,  @O_vITEMUSETYPE,  @I_vITEMDESC,  @O_vRETLOCNCODE,  @I_vUOFM,  @O_vRETQTY,  0,   0,  0,  @O_vRETUNITCOST,  @O_vRETUNITPRCE,  0,  0,  @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vENDDATE,  @I_vENDTME,  @O_TRANSTME,  @O_BILLABLTIM,  '',  0,  0,  '',  0,  @I_vLABPCT,  @I_vPARTPCT,  @I_vMISCPCT,  @O_vFUFILDAT,  '',  0,  @O_vOn_Return,  @O_vRETDOCID,  @O_vLNSEQNBR,  @I_vMiles_Start,  @I_vMiles_End,  @I_vMiles_Used,  @O_vRETURNPRICELVL,  @I_vSVC_Address_Option,  @I_vSVC_Misc_Address_Code,  @I_vSVC_Disable_XFR_Grouping,  @I_vWork_Type,  @O_vRETORUNTCST,  @O_vRETORUNTPRC,  0,  0,  0,  0,  @I_vSVC_FO_ID,  0,       '',       0,       0        if @@error <> 0  begin  set @O_iErrorState = 9787    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   set @AuditDesc = 'Return Line created via eConnect'  insert into SVC00210  (CALLNBR,  SRVRECTYPE,  LNITMSEQ,  FRMSTAT,  TOSTAT,  TECHID,  DSCRIPTN,  USERID,  CREATDDT,  CREATETIME)  select  @I_vCALLNBR,  @I_vSRVRECTYPE,  @AuditLNITMSEQ + 1,  @FRMSTAT,  @I_vSRVSTAT,  @I_vTECHID,  @AuditDesc,  @UserID,  convert(varchar(12),getdate(),101),  getdate()- convert(char(12),getdate(),12)  if @@error <> 0  begin  set @O_iErrorState = 9788    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  exec @iStatus = taFSServiceCallLinePost  @I_vSRVRECTYPE,  @I_vCALLNBR,  @I_vEQPLINE,  @I_vLNITMSEQ,  @I_vLINITMTYP,  @I_vSRVSTAT,  @I_vTECHID,  @I_vCUSTNMBR,  @I_vADRSCODE,  @I_vITEMNMBR,  @I_vCKNORETURNS,  @I_vITEMDESC,  @I_vLOCNCODE,  @I_vUOFM,  @I_vQTYORDER,  @I_vATYALLOC,  @I_vQTYBACKO,  @I_vQTYSOLD,  @I_vUNITCOST,  @I_vUNITPRCE,  @I_vXTNDPRCE,  @I_vNOTETXT,  @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vENDDATE,  @I_vENDTME,  @I_vTRANSTME,  @I_vBILLABLTIM,  @I_vENTDTE,  @I_vENTTME,  @I_vLABPCT,  @I_vPARTPCT,  @I_vMISCPCT,  @I_vCKCREATEPO,  @I_vVENDORID,  @I_vMiles_Start,  @I_vMiles_End,  @I_vMiles_Used,  @I_vPRICELVL,  @I_vSVC_Address_Option,  @I_vSVC_Misc_Address_Code,  @I_vSVC_Disable_XFR_Grouping,  @I_vWork_Type,  @I_vSVC_FO_ID,  @I_vCURNCYID,  @I_vNonInventory,  @I_vCreate_Overtime_Labor,  @I_vOvertime_Labor_Item_Number,  @I_vUpdateIfExists,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 9777    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taFSServiceCallLine] TO [DYNGRP]
GO
