SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create              procedure [dbo].[aagValidateTrxDimCode]  @I_cTableCode nvarchar(30) = null,   @I_nHdrID int = 0,   @I_nDistID    int = 0,   @I_nAssignID   int = 0,   @IRelTrxDimID  int= 0,   @IRelTrxDimCodeID int= 0,  @IGLValidation int =0,  @IO_fValidCodeComb tinyint = 1 output AS  set @IO_fValidCodeComb = 1  begin  declare  @nTrxDimID int,   @nTrxDimCodeID int,  @nRelTrxDimID  int,  @nRelTrxDimCodeID int,  @cTrxDimID int,   @cTrxCodeID int,  @cParentTrxDimID int,   @cParentTrxDimCodeID int,  @cParentTrxDim char(16),   @cParentTrxDimCode char(31),  @cParentTrxDimCodeDesc char(51),  @cChildTrxDimID int,  @cChildTrxDimCodeID int,  @sqlstr varchar(4000),  @TempTable VARCHAR(50),  @TempTableQuery VARCHAR (8000)   set @cTrxDimID = @IRelTrxDimID  set @cTrxCodeID = @IRelTrxDimCodeID  set @cParentTrxDim = null  set @cParentTrxDimCode = null  set @nRelTrxDimID = 0  set @nRelTrxDimCodeID =0  select @TempTable = '##ValidateTrxDimRel'  + REPLACE(system_user,'''','') + db_name()  select @TempTableQuery = 'drop table [' + @TempTable + ']'    if @IGLValidation = 10  exec ('declare aaAssign cursor fast_forward FOR  select aaTrxDimID, aaTrxDimCodeIDDflt from ' + @I_cTableCode )  else if @IGLValidation = 1  exec ('declare aaAssign cursor fast_forward FOR  select aaTrxDimID, aaTrxCodeID from ' +@I_cTableCode + ' where aaGLWorkHdrID = ' + @I_nHdrID + ' and aaGLWorkDistID ='   + @I_nDistID + ' and aaGLWorkAssignID = ' + @I_nAssignID)  else  exec ('declare aaAssign cursor fast_forward FOR  select aaTrxDimID, aaTrxCodeID from ' +@I_cTableCode + ' where aaSubLedgerHdrID = ' + @I_nHdrID + ' and aaSubLedgerDistID ='  + @I_nDistID + ' and aaSubLedgerAssignID = ' + @I_nAssignID )  open aaAssign  fetch next from aaAssign into @nTrxDimID,@nTrxDimCodeID  WHILE @@fetch_status = 0  begin  if  @nTrxDimID <> 0 and @nTrxDimCodeID <> 0  begin  exec aagValidateCodes  @nTrxDimID,   @nTrxDimCodeID,  @IRelTrxDimID,   @IRelTrxDimCodeID,  @IO_fValidCodeComb output  if @IO_fValidCodeComb = 0  begin  close aaAssign  deallocate aaAssign  return(0)  end  end  fetch next from aaAssign into @nTrxDimID,@nTrxDimCodeID  end  close aaAssign  deallocate aaAssign  set @nTrxDimID = 0  set @nTrxDimCodeID =0  if exists(select * from tempdb..sysobjects where name = @TempTable and type = 'U')  exec(@TempTableQuery)  exec('select * into [' + @TempTable + '] from ' + @I_cTableCode + ' where 1=2')  if @IGLValidation = 1  exec ('insert into [' + @TempTable + ']  select aaGLWorkHdrID, aaGLWorkDistID,aaGLWorkAssignID,aaTrxDimID,aaOrder,aaTrxCodeID,  aaLine,aaCodeErrors,aaDataType,aaDataEntry,aaShow,aaTrxDim,aaTrxDimDescr,aaTrxDimCode,aaTrxDimCodeNum,  aaTrxDimCodeBool,aaTrxDimCodeDate,aaTrxDimCodeDescr,DECPLQTY,BASEUOFM,aaFocus  from ' + @I_cTableCode + ' where aaGLWorkHdrID = ' + @I_nHdrID + ' and aaGLWorkDistID ='   + @I_nDistID + ' and aaGLWorkAssignID = ' + @I_nAssignID )  else if @IGLValidation <>10  exec ('insert into [' + @TempTable + ']  select aaSubLedgerHdrID, aaSubLedgerDistID,aaSubLedgerAssignID,aaTrxDimID,aaOrder,aaTrxCodeID,  aaLine,aaCodeErrors,aaDataType,aaDataEntry,aaShow,aaTrxDim,aaTrxDimDescr,aaTrxDimCode,aaTrxDimCodeNum,  aaTrxDimCodeBool,aaTrxDimCodeDate,aaTrxDimCodeDescr,DECPLQTY,BASEUOFM,aaFocus  from ' + @I_cTableCode + ' where aaSubLedgerHdrID = ' + @I_nHdrID + ' and aaSubLedgerDistID ='  + @I_nDistID + ' and aaSubLedgerAssignID = ' + @I_nAssignID )  else if @IGLValidation =10  exec ('insert into [' + @TempTable + ']  select aaTrxDimID, aaTrxDim, aaOrder, aaTrxDimCodeIDDflt,aaTrxDimCode,aaTrxDimCodeNum,aaTrxDimCodeBool,aaTrxDimCodeDate,  aaTrxDimCodeDescr, aaDataType, aaDataEntry, aaShow,DECPLQTY, BASEUOFM,INACTIVE from ' + @I_cTableCode +  ' where aaDataType = 1')  if @IGLValidation =10  exec('update [' + @TempTable + '] set aaTrxDimCodeIDDflt = ' + @IRelTrxDimCodeID +  ' where aaTrxDimID = ' + @IRelTrxDimID + ' and aaDataType = 1')  else  exec('update [' + @TempTable + '] set aaTrxCodeID = ' + @IRelTrxDimCodeID +  ' where aaTrxDimID = ' + @IRelTrxDimID)  WHILE (@cTrxDimID <> 0 and  @cTrxCodeID <> 0)  begin  set @cParentTrxDimID = 0   set @cParentTrxDimCodeID = 0  exec aagDeriveParentDimCode  @cTrxDimID,   @cTrxCodeID,  @cParentTrxDimID output,   @cParentTrxDimCodeID output,  @cParentTrxDim output,   @cParentTrxDimCode output,  @cParentTrxDimCodeDesc output  if (@cParentTrxDimID = 0 or  @cParentTrxDimCodeID = 0 )  begin  set @cTrxDimID = 0  set @cTrxCodeID = 0  end  else  begin  if @IGLValidation = 10  begin  if (select INACTIVE from AAG00400 where aaTrxDimID = @cParentTrxDimID) = 1  begin  set @IO_fValidCodeComb = 0  return(0)  end  else  if (select INACTIVE from AAG00401 where aaTrxDimID = @cParentTrxDimID   and aaTrxDimCodeID = @cParentTrxDimCodeID) = 1  begin  set @IO_fValidCodeComb = 0  return(0)  end  exec ('update [' + @TempTable + ']  set aaTrxDimCodeIDDflt ='  + @cParentTrxDimCodeID +  '  where aaTrxDimID = ' + @cParentTrxDimID + ' and aaDataEntry <> 1')   exec ('update [' + @TempTable + ']  set aaTrxDimCodeIDDflt = space(1)  where aaTrxDimID = ' + @cParentTrxDimID + ' and aaDataEntry = 1')   end  else  exec ('update [' + @TempTable + '] set aaTrxCodeID ='  + @cParentTrxDimCodeID +  ' where aaTrxDimID = ' + @cParentTrxDimID + ' and aaDataEntry not in (1,4)')  set @cTrxDimID = @cParentTrxDimID  set @cTrxCodeID = @cParentTrxDimCodeID  end  end  set  @cParentTrxDimID = @IRelTrxDimID  set  @cParentTrxDimCodeID = @IRelTrxDimCodeID   set @cChildTrxDimID = 0  set @cChildTrxDimCodeID = 0   WHILE (@cParentTrxDimID <> 0)  begin  exec aagDeriveChildDimCode  @cParentTrxDimID,   @cParentTrxDimCodeID,  @cChildTrxDimID output,   @cChildTrxDimCodeID output  if (@cChildTrxDimID = 0 and  @cChildTrxDimCodeID = 0)  set @cParentTrxDimID = 0  else  if @IGLValidation = 10  exec ('update [' + @TempTable + ']  set aaTrxDimCodeIDDflt = 0 where aaTrxDimID = ' + @cChildTrxDimID)  else  exec ('update [' + @TempTable + ']  set aaTrxCodeID = 0 where aaTrxDimID = ' + @cChildTrxDimID + ' and aaDataEntry <> 4')  set @cParentTrxDimID = @cChildTrxDimID  set @cParentTrxDimCodeID = @cChildTrxDimCodeID  end  if @IGLValidation = 10  exec ('declare aaAssign cursor fast_forward FOR  select aaTrxDimID, aaTrxDimCodeIDDflt from [' + @TempTable + ']')  else  exec ('declare aaAssign cursor fast_forward FOR  select aaTrxDimID, aaTrxCodeID from [' + @TempTable + ']')   open aaAssign  fetch next from aaAssign into @nTrxDimID,@nTrxDimCodeID  WHILE @@fetch_status = 0  begin  if @IGLValidation = 10  exec ('declare aaCodes cursor fast_forward FOR   select aaTrxDimID, aaTrxDimCodeIDDflt from [' + @TempTable + '] ')  else  exec ('declare aaCodes cursor fast_forward FOR   select aaTrxDimID, aaTrxCodeID from [' + @TempTable + '] ')  open aaCodes  fetch next from aaCodes into @nRelTrxDimID,@nRelTrxDimCodeID  WHILE @@fetch_status = 0   begin  if @nTrxDimID <> @nRelTrxDimID   and @nTrxDimID <> 0 and @nTrxDimCodeID <> 0  and @nRelTrxDimID <> 0 and @nRelTrxDimCodeID <> 0  begin  exec aagValidateCodes  @nTrxDimID,   @nTrxDimCodeID,  @nRelTrxDimID,   @nRelTrxDimCodeID,  @IO_fValidCodeComb output  if @IO_fValidCodeComb = 0  begin  close aaAssign  deallocate aaAssign  close aaCodes  deallocate aaCodes  return(0)  end  end  fetch next from aaCodes into @nRelTrxDimID,@nRelTrxDimCodeID  end  close aaCodes  deallocate aaCodes  fetch next from aaAssign into @nTrxDimID,@nTrxDimCodeID  end  close aaAssign  deallocate aaAssign  return(0) end    
GO
GRANT EXECUTE ON  [dbo].[aagValidateTrxDimCode] TO [DYNGRP]
GO
