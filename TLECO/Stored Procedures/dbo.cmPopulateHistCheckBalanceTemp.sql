SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[cmPopulateHistCheckBalanceTemp]  @iCheckBookID char(15)   = NULL,  @iStartDate datetime   = NULL,  @iEndDate datetime   = NULL,  @iTempTable varchar(35)  = NULL,  @oAsOfBalance numeric(19,5)    = NULL output,  @oAppError int    = NULL output as  declare  @lControlLoop tinyint,  @lSqlError int,  @lStatus int,  @lPaymentAmt numeric(19,5),  @lDepositAmt numeric(19,5),  @lTrxType smallint,  @lClearedAmt numeric(19,5),   @lTrxAmt numeric(19,5),  @lReconciled tinyint,  @lRecNum numeric(19,5),  @lXfrNum numeric(19,5),  @lVoided tinyint,  @lTrxDate datetime,  @lTrxNum char(21),  @lDesc char(31),  @lPdToRcvFrm char(65),  @lClearedDate datetime,  @lRunningBalance numeric(19,5),  @lSrcDoc char(11),  @lSrcDocNum char(21),  @lSrcDocType smallint,  @lMinDate datetime,  @lMaxDate datetime,  @lCMLinkID char(15),  @lVoidDate datetime  create table #HcbTemp  (  TRXDATE   datetime,  CMTrxNum   char(21),  PAYMENT_AMOUNT   numeric(19,5),  DepAmt    numeric (19,5),  Balance   numeric (19,5),  Recond    tinyint,  CMTrxType   smallint,  DSCRIPTN   char(31),  paidtorcvdfrom   char(65),  clearedate   datetime,  SrcDoc char(11),  SrcDocNum char(21),  SrcDocType smallint,  RecNum numeric(19,5),  ClearedAmt numeric(19,5),  TrxAmt numeric(19,5),  Voided tinyint,  CMLinkID char(15),  VoidDate datetime )  while (@lControlLoop is NULL) begin  select @lControlLoop = 1   if @iCheckBookID = NULL or  @iTempTable = NULL   begin  select @oAppError = 1  break  end   exec @lStatus = smGetMinDate @lMinDate output  exec @lStatus = smGetMaxDate @lMaxDate output   if @iEndDate = @lMinDate  select @iEndDate = @lMaxDate   select @oAsOfBalance = 0  select @oAppError = 0  select @lSqlError = 0   exec('truncate table ' + @iTempTable)   exec @lSqlError = cmGetAsOfBalance  @iCheckBookID,  @iEndDate,  @oAsOfBalance output,  @oAppError output   if @lSqlError = 0 and @@error <> 0   select @lSqlError = @@error  if @lSqlError <> 0 or @oAppError <> 0  break    select @lRunningBalance = @oAsOfBalance   declare   TrxCursor scroll cursor  for  select   CMTrxType,  ClrdAmt,  Checkbook_Amount,  Recond,  CMRECNUM,  Xfr_Record_Number,  VOIDED,  TRXDATE,  CMTrxNum,  DSCRIPTN,  paidtorcvdfrom,  clearedate,  SOURCDOC,  SRCDOCNUM,  SRCDOCTYP,  CMLinkID,  VOIDDATE  from  CM20200  where  CHEKBKID = @iCheckBookID  and  TRXDATE between @iStartDate and @iEndDate  order by  TRXDATE, CMTrxNum, CMTrxType, CMRECNUM   open TrxCursor   if @@cursor_rows = 0  begin  deallocate TrxCursor  select @oAppError = 9  break  end   fetch last from  TrxCursor  into  @lTrxType,  @lClearedAmt,   @lTrxAmt,  @lReconciled,  @lRecNum,  @lXfrNum,  @lVoided,  @lTrxDate,  @lTrxNum,  @lDesc,  @lPdToRcvFrm,  @lClearedDate,  @lSrcDoc,  @lSrcDocNum,  @lSrcDocType,  @lCMLinkID,  @lVoidDate   while (@@fetch_status = 0)  begin  select @lPaymentAmt = 0  select @lDepositAmt = 0   exec @lSqlError = cmGetPaymentDepositAmounts  @lTrxType,  @lClearedAmt,  @lTrxAmt,  @lReconciled,  @lVoided,  @lRecNum,  @lXfrNum,  @lPaymentAmt output,  @lDepositAmt output,  @oAppError output   if @lSqlError = 0 and @@error <> 0   select @lSqlError = @@error  if @lSqlError <> 0 or @oAppError <> 0  break    truncate table #HcbTemp   insert into #HcbTemp(  TRXDATE,  CMTrxNum,  PAYMENT_AMOUNT,  DepAmt,  Balance,  Recond,  CMTrxType,  DSCRIPTN,  paidtorcvdfrom,  clearedate,  SrcDoc,  SrcDocNum,  SrcDocType,  RecNum,  ClearedAmt,  TrxAmt,  Voided,  CMLinkID,  VoidDate)  select   @lTrxDate,  @lTrxNum,   @lPaymentAmt,   @lDepositAmt,  @lRunningBalance,   @lReconciled,   @lTrxType,   @lDesc,  @lPdToRcvFrm,  @lClearedDate,  @lSrcDoc,  @lSrcDocNum,  @lSrcDocType,  @lRecNum,  @lClearedAmt,  @lTrxAmt,  @lVoided,  @lCMLinkID,  @lVoidDate   exec('insert into ' +   @iTempTable + '(  TRXDATE,  CMTrxNum,  PAYMENT_AMOUNT,  DepAmt,  Balance,  Recond,  CMTrxType,  DSCRIPTN,  paidtorcvdfrom,  clearedate,  SOURCDOC,  SRCDOCNUM,  SRCDOCTYP,  CMRECNUM,  ClrdAmt,  TRXAMNT,  VOIDED,  CMLinkID,  VOIDDATE)  select   TRXDATE,  CMTrxNum,  PAYMENT_AMOUNT,  DepAmt,  Balance,  Recond,  CMTrxType,  DSCRIPTN,  paidtorcvdfrom,  clearedate,  SrcDoc,  SrcDocNum,  SrcDocType,  RecNum,  ClearedAmt,  TrxAmt,  Voided,  CMLinkID,  VoidDate from #HcbTemp')   if @lPaymentAmt <> 0 and (@lVoided = 0 or @lVoided = 1 and @lVoidDate > @iEndDate)  select @lRunningBalance = @lRunningBalance + @lPaymentAmt   if @lDepositAmt <> 0 and (@lVoided = 0 or @lVoided = 1 and @lVoidDate > @iEndDate)  select @lRunningBalance = @lRunningBalance - @lDepositAmt  fetch prior from  TrxCursor  into  @lTrxType,  @lClearedAmt,   @lTrxAmt,  @lReconciled,  @lRecNum,  @lXfrNum,  @lVoided,  @lTrxDate,  @lTrxNum,  @lDesc,  @lPdToRcvFrm,  @lClearedDate,  @lSrcDoc,  @lSrcDocNum,  @lSrcDocType,  @lCMLinkID,  @lVoidDate  end  deallocate TrxCursor end  return (@lSqlError)    
GO
GRANT EXECUTE ON  [dbo].[cmPopulateHistCheckBalanceTemp] TO [DYNGRP]
GO
