SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ncCreateHistoryInterfaceRec] 	@I_iSQLSessionID int = NULL,   	@I_sTransactionType smallint = NULL,    	@I_iJournalEntry int = NULL,   	@I_cBatchSource  char(15) = NULL,    	@I_cBatchNumber  char(15) = NULL,  	@I_cUserID char(15) = NULL,    	@I_sSeries smallint = NULL,    	@I_iAccountIndex int = NULL,   	@I_sAccountType  smallint = NULL,   	@I_sPostingType  smallint = NULL,  	@I_sRateCalculationMethod smallint = NULL,  	@I_nDebit numeric(19,5) = NULL,   	@I_nCredit numeric(19,5) = NULL,   	@I_cAuditTrailCode char(13) = NULL,   	@I_dTransactionDate datetime = NULL,   	@I_sHistoryYear  smallint = NULL,   	@I_sClosingYear  smallint = NULL,   	@I_sPeriodID smallint = NULL,   	@I_cDescription  char(30) = NULL,   	@I_tPrintDistributions  tinyint = NULL,    	@I_tReversing tinyint  = NULL,    	@I_tPrinting tinyint = NULL,    	@I_tPosting tinyint = NULL,    	@I_tRealTimeQuick tinyint = NULL,   	@I_sQuickOffset  smallint = NULL,   	@I_tOffsetAccount tinyint = NULL,   	@I_tAllowCloseHistory  tinyint = NULL,    	@I_nSequenceLine numeric(19,5) = NULL,   	@I_mRecurringTRXSequence numeric(19,5) = NULL,   	@I_nExchangeRate numeric(15,7) = NULL,   	@I_cExchangeTableID char(15) = NULL,   	@I_cFuncCurrencyID char(15) = NULL,   	@I_sFuncCurrencyIndex  smallint = NULL,   	@I_sFuncDecimalPlaces  smallint = NULL,   	@I_tMCRegistered tinyint  = NULL,   	@I_sMCTransaction smallint = NULL,   	@I_nOrigDebit numeric(19,5) = NULL,   	@I_nOrigCredit numeric(19,5) = NULL,   	@I_cOrigCurrencyID char(15) = NULL,  	@I_cRateTypeID char(15) = NULL,  	@I_sOrigCurrencyIndex  smallint = NULL,   	@I_sOrigDecimalPlaces  smallint = NULL,   	@I_cIntercompanyID char(5) = NULL,   	@I_tICTransaction tinyint = NULL,   	@I_cOriginatingDocNumber char(21) = NULL,   	@I_cOriginatingControlNumber char(21) = NULL,   	@I_cOriginatingMasterID char(21) = NULL,   	@I_cOriginatingMasterName char(65) = NULL,   	@I_sOriginatingTrxType smallint = NULL,   	@I_cOriginatingTRXDesc char(30) = NULL,   	@I_sOrigDTASeries smallint = NULL,   	@I_iOrigSequenceNumber int = NULL,   	@I_sDTAGLStatus smallint = NULL,   	@I_nDTAIndex numeric(19,5) = NULL,   	@I_nDenomExchangeRate numeric(15,7) = NULL,   	@I_sMCTrxState smallint = NULL,   	@I_dDocumentDate datetime = NULL,   	@I_iPostingNumber int = NULL,   	@I_iPeriodPostingNumber int = NULL,   	@I_iPostingNumberHist int = NULL,   	@I_iPeriodPostingNumberHist int = NULL,  	@I_cCorrespondingUnit char(5) = NULL,   	@IO_bLineMessages binary(4) = NULL output,   	@IO_bLineMessages2 binary(4) = NULL output,   	@IO_bRetainEarnMessages binary(4) = NULL output,   	@IO_bRetainEarnMessages2 binary(4) = NULL output,   	@O_iErrorState int = NULL output  as  declare   	@TRXSource CHAR(13), 	@TRUE tinyint,   	@FALSE tinyint,  	@dExchangeDate datetime, 	@dExchangeTime datetime, 	@cRateTypeID char(15), 	@cExchangeTableID char(15), 	@BUSINESS_FORM smallint, 	@NORMAL_TRX smallint, 	/* Start of modifications - 13/11/00 - pjsparrow */ 	@AUTO_REV_TRX smallint, 	/* End of modifications - 13/11/00 - pjsparrow */ 	@sCompanyID smallint, 	@iDecimalPlaces int, 	@cRemoteDestAcc char(129), 	@DEFAULT_DATE datetime, 	@POST_ACCT smallint,   	@UNIT_ACCT smallint,   	@UNIT_ALLOC_ACCT smallint,   	@MC_TRANSACTION smallint,   	@tTransaction tinyint,   	@cRemoteCompany char (6), 	@sHdrSeries smallint, 	@iSeries int, 	@iFunctionalIndex smallint, 	@cHdrSourceDocument char(11), 	@cHdrOrigTrxSource char(13), 	@tHdrICTransaction tinyint, 	@dHdrTrxDate datetime, 	@iError int,   	@iStatus int,  	@tLoop tinyint,   	@tKeepingTransactionHistory tinyint,   	@tKeepingAccountHistory tinyint,   	@tKeepingMCSummaryHistory tinyint,   	@tDivisionalClosing tinyint,   	@iSETPRetainedEarningsIndex int,    	@sDivisionalAccountSegment smallint,   	@tBeforeSegmentLength tinyint,   	@tDivisionalSegmentLength tinyint, 	@cRemoteDestICAcc char(129),   	@tAfterSegmentLength tinyint,   	@dClosingDate datetime, 	@iProcessTemplate smallint, 	@dMinDate datetime, 	@sIC_DestCompany smallint, 	@iIC_TrigAccount int, 	@iIC_SrcAccount int, 	@iIC_SrcICAccount int, 	@iIC_DestAccount int, 	@iIC_DestICAccount int, 	@tIC_CopyMDA tinyint, 	@tIC_ReverseMDA tinyint, 	@iRemoteDest int,	 	@cSrcICAccount char(129), 	@cSrcAccount char(129), 	@iFoundOne int, 	@cStatement char(255), 	@nIC_SequenceLine numeric(19,5), 	@sKF_DTASeries smallint, 	@cKF_DTAReference char(25), 	@iKF_SequenceLine Numeric(19,5), 	@cKF_DTAGLReference char(25), 	@cKF_DocumentNumber char(21), 	@sKF_DocumentType smallint, 	@Reference char(31), 	@IsICAccount int, 	@cORTRXTYP int,  /* KDP 99 */ 	@cORDOCNUM char(31) set nocount on select 	@O_iErrorState = 0, 	@iStatus = 0 exec @iStatus = smGetMinDate @dMinDate output /* IB - 20/06/06, Added Intercompany Log table */ exec dbo.ncWriteInterLog 'ncCreateHistoryInterfaceRec started' if @@trancount = 0 begin 	select @tTransaction = 1 	begin transaction end while (@tLoop is NULL) begin 	select @tLoop = 1 	if @I_iSQLSessionID is NULL or 		@I_sTransactionType is NULL or 		@I_iJournalEntry is NULL or 		@I_cUserID is NULL or 		@I_iAccountIndex is NULL or 		@I_sAccountType is NULL or 		@I_nDebit is NULL or 		@I_nCredit is NULL or 		@I_cAuditTrailCode is NULL or 		@I_cDescription is NULL or 		@I_mRecurringTRXSequence is NULL or 		@I_nExchangeRate is NULL or 		@I_cExchangeTableID is NULL or 		@I_cFuncCurrencyID is NULL or 		@I_sFuncCurrencyIndex is NULL or 		@I_tMCRegistered is NULL or 		@I_sMCTransaction is NULL or 		@I_nOrigDebit is NULL or 		@I_nOrigCredit is NULL or 		@I_cOrigCurrencyID is NULL or 		@I_sOrigCurrencyIndex is NULL or 		@I_sRateCalculationMethod is NULL or 		@I_cRateTypeID is NULL or 		@I_cOriginatingDocNumber is NULL or 		@I_cOriginatingControlNumber is NULL or 		@I_cOriginatingMasterID is NULL or 		@I_cOriginatingMasterName is NULL or 		@I_sOriginatingTrxType is NULL or 		@I_sOrigDTASeries is NULL or 		@I_iOrigSequenceNumber is NULL or 		@I_nSequenceLine is NULL or 		@I_sDTAGLStatus is NULL or 		@I_nDTAIndex is NULL or 		@I_nDenomExchangeRate is NULL or 		@I_sMCTrxState is NULL or 		@I_dDocumentDate is NULL 	begin 		select @O_iErrorState = 20030 		break 	end 	select 		@BUSINESS_FORM = 5, 		@NORMAL_TRX = 1, 		/* Start of modifications - 13/11/00 - pjsparrow */ 		@AUTO_REV_TRX = 4, 		/* End of modifications - 13/11/00 - pjsparrow */ 		@UNIT_ACCT = 2, 		@TRUE = 1, 		@FALSE = 0, 		@DEFAULT_DATE = @dMinDate 	/* 04/04/2005, pboniface */ 	/* only do our processing if actually posting rather than just printing edit list ... */ 	if @I_tPosting = @FALSE  		break 	/* end of mods */ 	/* only do our intercompany for normal and quick transactions */ 	/* Start of modifications - 13/11/00 - pjsparrow */ 	if (@I_sTransactionType <> @NORMAL_TRX) and (@I_sTransactionType <> @BUSINESS_FORM) and (@I_sTransactionType <> @AUTO_REV_TRX) 		break 	/* End of modifications - 13/11/00 - pjsparrow */ 	/* read necessary values from the trx header */ 	select 		@sHdrSeries = Series, 		@cHdrSourceDocument = SourceDocument, 		@cHdrOrigTrxSource = OrigTransactionSource, 		@tHdrICTransaction = ICTransaction, 		@TRXSource=TRXSource, 		@Reference = Reference 		/* Start of modifications - 13/11/00 - pjsparrow */ 		/* @dHdrTrxDate = TransactionDate */ 		/* End of modifications - 13/11/00 - pjsparrow */ 	from 		#TRXHeader 	where 		JournalEntry = @I_iJournalEntry 	/* Start of modifications - 13/11/00 - pjsparrow */ 	/* Get the Transaction or Reversing Date depending on the Transaction Type */ 	if @I_sTransactionType = @AUTO_REV_TRX 	begin 		select 			@dHdrTrxDate = ReversingDate 		from 			#TRXHeader 		where 			JournalEntry = @I_iJournalEntry 	end 	else begin 		select 			@dHdrTrxDate = TransactionDate 		from 			#TRXHeader 		where 			JournalEntry = @I_iJournalEntry 	end 	/* End of modifications - 13/11/00 - pjsparrow */ 	/* KDP 08/01/2014 allow GP Intercompany and Nolan on same transaction */ 	/* if this is a GPS intercompany transaction, quit now */ 	/* if @tHdrICTransaction = @TRUE */ 	/*	break			*/ 	/* if this is a NCL intercompany reversing transaction, quit now too */ 	if @cHdrOrigTrxSource = 'IC' 		break 	/* if this is a BBL transaction, quit now too */ 	/*mike south*/	 	/*SELECT @TRXSource = SOURCDOC  	FROM GL20000  	where JRNENTRY = @I_iJournalEntry and RCTRXSEQ = @I_mRecurringTRXSequence 	if @TRXSource = 'BBF'   		break*/ 	/*if series = gl then set */ 	if @iSeries=2 	begin 		select @I_cOriginatingDocNumber=@I_iJournalEntry 		select @I_cOriginatingMasterID=@TRXSource 		select @I_cOriginatingMasterName=@Reference 	end 	/* get the company id for the current company */ 	select 		@sCompanyID = CMPANYID 	from 		DYNAMICS..SY01500 	where 		INTERID = db_name() 	 	/* get the functional currency index */ 	select @iFunctionalIndex = FUNCRIDX from MC40000 	if @iFunctionalIndex = NULL  		select @iFunctionalIndex = 2999 /* the value set in Set_System_Variables in Dynamics as the default */ 	 	/* set the series */ 	select @iSeries = @sHdrSeries /*  SERIES from GL10000  */ 	/* just default these to blank at the moment til we get it all working */ 	select 	@cRemoteCompany = '', 		@cRemoteDestAcc = '', 		@cRemoteDestICAcc = '' 				 	/* check if this line is a trigger line for intercompany */ 	if exists(select 1 from NCIC0003 where (NC_Source_Company_ID = @sCompanyID) and (NC_Trigger_Account_Index = @I_iAccountIndex))  				 	begin 				 		/* read the necessary values from the trx line */ 		if @I_sTransactionType = @NORMAL_TRX 		begin 			select 				@dExchangeDate = EXCHDATE, 				@dExchangeTime = TIME1, 				@cRateTypeID = RATETPID, 				@cExchangeTableID = EXGTBLID, 				@cORTRXTYP = ORTRXTYP, /* KDP 99 */ 				@cORDOCNUM = ORDOCNUM 			from 				GL10001 			where 				JRNENTRY = @I_iJournalEntry and 				SQNCLINE = @I_nSequenceLine 	 			/* KDP 99  */ 			if @cORTRXTYP = 7  			begin 			   select 				@cRateTypeID = RATETPID, 				@cExchangeTableID = EXGTBLID 			   from 				CM20200 			   where 				 CMTrxType  = @cORTRXTYP and 				 CMTrxNUM   = @cORDOCNUM  			 end 		end 		if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 		begin 			select 				@dExchangeDate = @DEFAULT_DATE, 				@dExchangeTime = @DEFAULT_DATE, 				@cRateTypeID = '', 				@cExchangeTableID = '' 		end 		/* get the decimal places for this line */ 		if @I_sAccountType = @UNIT_ACCT 			select 				@iDecimalPlaces = DECPLACS - 1 			from 				GL00100 			where 				ACTINDX = @I_iAccountIndex 		else 			select 				@iDecimalPlaces = DECPLCUR - 1 			from 				DYNAMICS..MC40200 			where 				CURNCYID = @I_cOrigCurrencyID 		if @iDecimalPlaces is NULL 			select @iDecimalPlaces = 2 		/* get the accounts and setup info from NC_IC_Accounts_MSTR */ 		select 			@sIC_DestCompany = CMPANYID, 			@iIC_TrigAccount = NC_Trigger_Account_Index, 			@iIC_SrcAccount = NC_Src_Account_Index, 			@iIC_SrcICAccount = NC_Src_IC_Account_Index, 			@iIC_DestAccount = NC_Dest_Account_Index, 			@iIC_DestICAccount = NC_Dest_IC_Account_Index, 			@tIC_CopyMDA = NC_Copy_MDA_CB, 			@tIC_ReverseMDA = NC_Reverse_MDA_CB, 			@cRemoteCompany = Remote_Company_ID, 			@cRemoteDestAcc = Remote_Destination_Accou, 			@cRemoteDestICAcc = Remote_Destination_IC_Ac 		from 			NCIC0003 		where 			(NC_Source_Company_ID = @sCompanyID) and 			(NC_Trigger_Account_Index = @I_iAccountIndex) 		/* get the next sequence number for our new interface record */ 		select 			@nIC_SequenceLine = (max(SQNCLINE) + 100) 		from 			DYNAMICS..NCIC1004 		where 			(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 		if @nIC_SequenceLine is NULL 			select @nIC_SequenceLine = 100 		/* get the dta series and dta reference for this GL line */ 		exec @iStatus = dtaGetGLKeyFields 			@I_sDTAGLStatus, 			@I_mRecurringTRXSequence, 			@I_nSequenceLine, 			@I_iOrigSequenceNumber, 			@I_cOriginatingDocNumber, 			@I_cOriginatingControlNumber, 			@I_sOriginatingTrxType, 			@I_cAuditTrailCode, 			@sHdrSeries, 			@I_sOrigDTASeries, 			1, 			@I_nDTAIndex, 			@sKF_DTASeries output, 			@cKF_DTAReference output, 			@iKF_SequenceLine output, 			@cKF_DTAGLReference output, 			@cKF_DocumentNumber output, 			@sKF_DocumentType output, 			@O_iErrorState output 		/* if the above stored proc failed, bail out */ 		select @iError = @@error 		if @iStatus = 0 and @iError <> 0 			select @iStatus = @iError 		if @iStatus <> 0 or @O_iErrorState <> 0 			break 		/* write the new line to the NC_IC_Interface_MSTR table */ 		insert into DYNAMICS..NCIC1004 ( 			CMPANYID, 			NC_Source_Company_ID, 			NC_Src_Account_Index, 			NC_Src_IC_Account_Index, 			NC_Dest_Account_Index, 			NC_Dest_IC_Account_Index, 			NC_Trigger_Account_Index, 			JRNENTRY, 			SQNCLINE, 			ACTINDX, 			DEBITAMT, 			CRDTAMNT, 			ORDBTAMT, 			ORCRDAMT, 			XCHGRATE, 			DSCRIPTN, 			GLLINMSG, 			GLLINMS2, 			CURRNIDX, 			DECPLACS, 			ORCTRNUM, 			ORDOCNUM, 			ORMSTRID, 			ORMSTRNM, 			ORTRXTYP, 			OrigSeqNum, 			OrigDTASeries, 			SEQNUMBR, 			DTA_GL_Status, 			DTAREF, 			DTA_Index, 			RATETPID, 			EXGTBLID, 			EXCHDATE, 			TIME1, 			RTCLCMTD, 			DENXRATE, 			MCTRXSTT, 			NC_Src_Batch_Created, 			NC_Dest_Batch_Created, 			NC_Copy_MDA_CB, 			NC_Reverse_MDA_CB, 			MKDTOPST, 			SOURCDOC, 			USERID, 			TRXDATE, 			CURRVAL, 			DATE1, 			String1, 			STRGA255, 			IntegerValue, 			NC_Source_Currency_Index, 			SERIES, 			Remote_Company_ID, 			Remote_Destination_Accou, 			Remote_Destination_IC_Ac, 			MCSTRUCT_1, 			MCSTRUCT_2, 			MCSTRUCT_3, 			MCSTRUCT_4, 			MCSTRUCT_5, 			MCSTRUCT_6, 			MCSTRUCT_7, 			MCSTRUCT_8, 			MCSTRUCT_9, 			MCSTRUCT_10, 			MCSTRUCT_11, 			MCSTRUCT_12, 			MCSTRUCT_13, 			MCSTRUCT_14, 			ORTRXDESC, 			NC_Spare_Int) 		values ( 			@sIC_DestCompany, 			@sCompanyID, 			@iIC_SrcAccount, 			@iIC_SrcICAccount, 			@iIC_DestAccount, 			@iIC_DestICAccount, 			@iIC_TrigAccount, 			@I_iJournalEntry, 			@nIC_SequenceLine, 			@I_iAccountIndex, 			@I_nDebit, 			@I_nCredit, 			@I_nOrigDebit, 			@I_nOrigCredit, 			@I_nExchangeRate, 			@I_cDescription, 			0x00000000, 			0x00000000, 			@I_sOrigCurrencyIndex, 			@iDecimalPlaces, 			@I_cOriginatingControlNumber, 			@I_cOriginatingDocNumber, 			@I_cOriginatingMasterID, 			@I_cOriginatingMasterName, 			@I_sOriginatingTrxType, 			@I_iOrigSequenceNumber, 			@sKF_DTASeries, 			@I_nSequenceLine, 			32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 			@cKF_DTAReference, 			@I_nDTAIndex, 			@cRateTypeID, 			@cExchangeTableID, 			@dExchangeDate, 			@dExchangeTime, 			@I_sRateCalculationMethod, 			@I_nDenomExchangeRate, 			@I_sMCTrxState, 			@FALSE, 			@FALSE, 			@tIC_CopyMDA, 			@tIC_ReverseMDA, 			@TRUE, 			@cHdrSourceDocument, 			@I_cUserID, 			@dHdrTrxDate, 			0, 			'01 Jan 1900', 			'', 			'', 			0, 			@iFunctionalIndex, 			@iSeries, 			@cRemoteCompany, 			@cRemoteDestAcc, 			@cRemoteDestICAcc, 			'', 			0, 			'', 			'', 			0, 			'01 Jan 1900', 			0, 			'01 Jan 1900', 			0, 			0, 			0, 			'01 Jan 1900', 			0, 			0, 			@Reference, 			0) 		/* check if we need to copy any mda from this GL line as well */ 		if @tIC_CopyMDA = @TRUE 		begin 			/* write the mda code lines to NC_SY_DTA_Details */ 			insert into DYNAMICS..NCIC2000 ( 				DTASERIES, 				DTAREF, 				ACTINDX, 				SEQNUMBR, 				GROUPID, 				CODEID, 				DOCNUMBR, 				CMPANYID, 				RMDTYPAL, 				POSTDESC, 				DTAQNTY, 				CODEAMT, 				TRXDATE, 				NC_Copy_MDA_CB, 				NC_Reverse_MDA_CB) 			select 				DTASERIES, 				DTAREF, 				ACTINDX, 				SEQNUMBR, 				GROUPID, 				CODEID, 				DOCNUMBR, 				@sCompanyID, 				RMDTYPAL, 				POSTDESC, 				DTAQNTY, 				CODEAMT, 				TRXDATE, 				@tIC_CopyMDA, 				@tIC_ReverseMDA 			from 				DTA10200 			where 				(DTASERIES = @sKF_DTASeries) and 				(DTAREF = @cKF_DTAReference) and 				(ACTINDX = @iIC_TrigAccount) 		end 	end 	else 	begin 		select @IsICAccount = 0 /* *** 30/07/2001 PJB - re-written to test PM then GL always, as per dex code    ***                  this was because of a site entering transactions in CM, then    ***                  amending in GL - so a 'GL' transactions but OrigCtrlNum <> ''    ***                  so old code only checked PM (record not found) *		if @I_cOriginatingControlNumber = '' 	 *			begin *			if exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and  *							(SQNCLINE = @I_nSequenceLine) and  *							(NC_Src_IC_Account_Index = @I_iAccountIndex)) *				select @IsICAccount = 2 *			end *		else *			begin *			if exists(select 1 from NCIC3006 where (VCHRNMBR = @I_cOriginatingControlNumber) and  *						(DOCTYPE = @I_sOriginatingTrxType) and  *						(SQNCLINE = @I_nSequenceLine) and  *						(NC_Src_IC_Account_Index = @I_iAccountIndex)) *				select @IsICAccount = 1 *			end */ /* *** 14/05/2002 PJB - tidied up into a single block, consolidating various changes as detailed:    ***			from 07/05/02 - addition of 'and (JRNENTRY=0)' to locate non-financial records only    ***			from 14/05/02 - replace @I_nSequenceLine with @I_iOrigSequenceNumber to handle    ***					re-ordered PM distribs */ 		 		if exists(select 1 from NCIC3006 where (VCHRNMBR = @I_cOriginatingControlNumber) and  					(DOCTYPE = @I_sOriginatingTrxType) and  					(SQNCLINE = @I_iOrigSequenceNumber) and  					(NC_Src_IC_Account_Index = @I_iAccountIndex) and 					(JRNENTRY = 0)) 			select @IsICAccount = 1 		else 			if exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and  							(SQNCLINE = @I_nSequenceLine) and  							(NC_Src_IC_Account_Index = @I_iAccountIndex)) 				select @IsICAccount = 2 		if @IsICAccount <> 0 		BEGIN 			/* read the necessary values from the trx line */ 			if @I_sTransactionType = @NORMAL_TRX 			begin 				select 					@dExchangeDate = EXCHDATE, 					@dExchangeTime = TIME1, 					@cRateTypeID = RATETPID, 					@cExchangeTableID = EXGTBLID 				from 					GL10001 				where 					JRNENTRY = @I_iJournalEntry and 					SQNCLINE = @I_nSequenceLine 			end 			if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 			begin 				select 					@dExchangeDate = @DEFAULT_DATE, 					@dExchangeTime = @DEFAULT_DATE, 					@cRateTypeID = '', 					@cExchangeTableID = '' 			end 			/* get the decimal places for this line */ 			if @I_sAccountType = @UNIT_ACCT 				select 					@iDecimalPlaces = DECPLACS - 1 				from 					GL00100 				where 					ACTINDX = @I_iAccountIndex 			else 				select 					@iDecimalPlaces = DECPLCUR - 1 				from 					DYNAMICS..MC40200 				where 					CURNCYID = @I_cOrigCurrencyID 			if @iDecimalPlaces is NULL 				select @iDecimalPlaces = 2 			/* get the accounts and setup info from NC_IC_Alternate_Accounts_LINE */ 			if @IsICAccount = 1 /* PM */  			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 					/* End of modifications - 03/07/03 - pjsparrow */ 				from 					NCIC3006    				where 					(VCHRNMBR = @I_cOriginatingControlNumber) and  					(DOCTYPE = @I_sOriginatingTrxType) and  					/* Start of modifications - 24/06/02 - pjsparrow */ 					/*(SQNCLINE = @I_nSequenceLine) and */ 					(SQNCLINE = @I_iOrigSequenceNumber) and 					/* End of modifications - 24/06/02 - pjsparrow */ 					(NC_Src_IC_Account_Index = @I_iAccountIndex) 			end 			if @IsICAccount = 2 /* GL */ 			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					@cRemoteCompany = Remote_Company_ID, 					@cRemoteDestAcc = Remote_Destination_Accou, 					@cRemoteDestICAcc = Remote_Destination_IC_Ac, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 					/* End of modifications - 03/07/03 - pjsparrow */ 				from 					NCIC3006    				where 					(JRNENTRY = @I_iJournalEntry) and  					(SQNCLINE = @I_nSequenceLine) and  					(NC_Src_IC_Account_Index = @I_iAccountIndex)	 				 			end 			if @IsICAccount = 3 /* RM */  			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 					/* End of modifications - 03/07/03 - pjsparrow */ 				from 					NCIC3006    				where 					(RMDNUMWK = @I_cOriginatingControlNumber) and  					(DOCTYPE = @I_sOriginatingTrxType) and  					/* Start of modifications - 24/06/02 - pjsparrow */ 					/*(SQNCLINE = @I_nSequenceLine) and */ 					(SQNCLINE = @I_iOrigSequenceNumber) and 					/* End of modifications - 24/06/02 - pjsparrow */ 					(NC_Src_IC_Account_Index = @I_iAccountIndex) 			end 			 			/* Start of modifications - 03/07/03 - pjsparrow */ 			/*select */ 			/*	@tIC_CopyMDA = NC_Copy_MDA_CB, */ 			/*	@tIC_ReverseMDA = NC_Reverse_MDA_CB */ 			/*from */ 			/*	NCIC3005 */ 			/*where */ 			/*	(NC_Source_Company_ID = @sCompanyID) and */ 			/*	(NC_Src_IC_Account_Index = @I_iAccountIndex) */ 			/* End of modifications - 03/07/03 - pjsparrow */ 				 			/* get the next sequence number for our new interface record */ 			if @iIC_DestAccount = 1 			begin 				select 						@sIC_DestCompany = CMPANYID, 						@iIC_TrigAccount = '', 						@iIC_SrcAccount = '', 						@iIC_SrcICAccount = NC_Src_IC_Account_Index, 						@iIC_DestAccount = NC_Dest_Account_Index, 						@iIC_DestICAccount = NC_Dest_IC_Account_Index, 						@cRemoteCompany = Remote_Company_ID, 						@cRemoteDestAcc = Remote_Destination_Accou, 						@cRemoteDestICAcc = Remote_Destination_IC_Ac, 						/* Start of modifications - 03/07/03 - pjsparrow */ 						/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 						@tIC_CopyMDA = NC_Copy_MDA_CB, 						@tIC_ReverseMDA = NC_Reverse_MDA_CB 						/* End of modifications - 03/07/03 - pjsparrow */ 					from 						NCIC3006    					where 						(JRNENTRY = @I_iJournalEntry) and  						(SQNCLINE = @I_nSequenceLine) and  						(NC_Src_IC_Account_Index = @I_iAccountIndex)	 										 				end  			select 				@nIC_SequenceLine = (max(SQNCLINE) + 100) 			from 				DYNAMICS..NCIC1004 			where 				(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 			if @nIC_SequenceLine is NULL 				select @nIC_SequenceLine = 100 			/* get the dta series and dta reference for this GL line */ 			exec @iStatus = dtaGetGLKeyFields 				@I_sDTAGLStatus, 				@I_mRecurringTRXSequence, 				@I_nSequenceLine, 				@I_iOrigSequenceNumber, 				@I_cOriginatingDocNumber, 				@I_cOriginatingControlNumber, 				@I_sOriginatingTrxType, 				@I_cAuditTrailCode, 				@sHdrSeries, 				@I_sOrigDTASeries, 				1, 				@I_nDTAIndex, 				@sKF_DTASeries output, 				@cKF_DTAReference output, 				@iKF_SequenceLine output, 				@cKF_DTAGLReference output, 				@cKF_DocumentNumber output, 				@sKF_DocumentType output, 				@O_iErrorState output 			/* if the above stored proc failed, bail out */ 			select @iError = @@error 			if @iStatus = 0 and @iError <> 0 				select @iStatus = @iError 			if @iStatus <> 0 or @O_iErrorState <> 0 				break 			/* write the new line to the NC_IC_Interface_MSTR table */ 			insert into DYNAMICS..NCIC1004 ( 				CMPANYID, 				NC_Source_Company_ID, 				NC_Src_Account_Index, 				NC_Src_IC_Account_Index, 				NC_Dest_Account_Index, 				NC_Dest_IC_Account_Index, 				NC_Trigger_Account_Index, 				JRNENTRY, 				SQNCLINE, 				ACTINDX, 				DEBITAMT, 				CRDTAMNT, 				ORDBTAMT, 				ORCRDAMT, 				XCHGRATE, 				DSCRIPTN, 				GLLINMSG, 				GLLINMS2, 				CURRNIDX, 				DECPLACS, 				ORCTRNUM, 				ORDOCNUM, 				ORMSTRID, 				ORMSTRNM, 				ORTRXTYP, 				OrigSeqNum, 				OrigDTASeries, 				SEQNUMBR, 				DTA_GL_Status, 				DTAREF, 				DTA_Index, 				RATETPID, 				EXGTBLID, 				EXCHDATE, 				TIME1, 				RTCLCMTD, 				DENXRATE, 				MCTRXSTT, 				NC_Src_Batch_Created, 				NC_Dest_Batch_Created, 				NC_Copy_MDA_CB, 				NC_Reverse_MDA_CB, 				MKDTOPST, 				SOURCDOC, 				USERID, 				TRXDATE, 				CURRVAL, 				DATE1, 				String1, 				STRGA255, 				IntegerValue, 				NC_Source_Currency_Index, 				SERIES, 				Remote_Company_ID, 				Remote_Destination_Accou, 				Remote_Destination_IC_Ac, 				MCSTRUCT_1, 				MCSTRUCT_2, 				MCSTRUCT_3, 				MCSTRUCT_4, 				MCSTRUCT_5, 				MCSTRUCT_6, 				MCSTRUCT_7, 				MCSTRUCT_8, 				MCSTRUCT_9, 				MCSTRUCT_10, 				MCSTRUCT_11, 				MCSTRUCT_12, 				MCSTRUCT_13, 				MCSTRUCT_14, 				ORTRXDESC, 				NC_Spare_Int) 			values ( 				@sIC_DestCompany, 				@sCompanyID, 				@iIC_SrcAccount, 				@iIC_SrcICAccount, 				@iIC_DestAccount, 				@iIC_DestICAccount, 				@iIC_TrigAccount, 				@I_iJournalEntry, 				@nIC_SequenceLine, 				@I_iAccountIndex, 				@I_nDebit, 				@I_nCredit, 				@I_nOrigDebit, 				@I_nOrigCredit, 				@I_nExchangeRate, 				@I_cDescription, 				0x00000000, 				0x00000000, 				@I_sOrigCurrencyIndex, 				@iDecimalPlaces, 				@I_cOriginatingControlNumber, 				@I_cOriginatingDocNumber, 				@I_cOriginatingMasterID, 				@I_cOriginatingMasterName, 				@I_sOriginatingTrxType, 				@I_iOrigSequenceNumber, 				@sKF_DTASeries, 				@I_nSequenceLine, 				32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 				@cKF_DTAReference, 				@I_nDTAIndex, 				@cRateTypeID, 				@cExchangeTableID, 				@dExchangeDate, 				@dExchangeTime, 				@I_sRateCalculationMethod, 				@I_nDenomExchangeRate, 				@I_sMCTrxState, 				@TRUE, /* Alternate Account, dont want a source trx to be created */ 				@FALSE, 				@tIC_CopyMDA, 				@tIC_ReverseMDA, 				@TRUE, 				@cHdrSourceDocument, 				@I_cUserID, 				@dHdrTrxDate, 				0, 				'01 Jan 1900', 				'', 				'', 				0, 				@iFunctionalIndex, 				@iSeries, 				@cRemoteCompany, 				@cRemoteDestAcc, 				@cRemoteDestICAcc, 				'', 				0, 				'', 				'', 				0, 				'01 Jan 1900', 				0, 				'01 Jan 1900', 				0, 				0, 				0, 				'01 Jan 1900', 				0, 				0, 				@Reference, 				0) 			/* check if we need to copy any mda from this GL line as well */ 			if @tIC_CopyMDA = @TRUE 			begin 				/* write the mda code lines to NC_SY_DTA_Details */ 				insert into DYNAMICS..NCIC2000 ( 					DTASERIES, 					DTAREF, 					ACTINDX, 					SEQNUMBR, 					GROUPID, 					CODEID, 					DOCNUMBR, 					CMPANYID, 					RMDTYPAL, 					POSTDESC, 					DTAQNTY, 					CODEAMT, 					TRXDATE, 					NC_Copy_MDA_CB, 					NC_Reverse_MDA_CB) 				select 					DTASERIES, 					DTAREF, 					ACTINDX, 					SEQNUMBR, 					GROUPID, 					CODEID, 					DOCNUMBR, 					@sCompanyID, 					RMDTYPAL, 					POSTDESC, 					DTAQNTY, 					CODEAMT, 					TRXDATE, 					@tIC_CopyMDA, 					@tIC_ReverseMDA 				from 					DTA10200 				where 					(DTASERIES = @sKF_DTASeries) and 					(DTAREF = @cKF_DTAReference) and 					(ACTINDX = @iIC_SrcICAccount) 			end 		END 		/* Now we shall check the templates table to see if we have a match for templates */ 		else 			begin 				 			   select @iProcessTemplate = NC_Process_Templates from NCIC3000 			   if @iProcessTemplate = 1  			   begin 				exec @iStatus = dbo.ncMatchAccountToTemplate 					@I_iAccountIndex, 					@cSrcAccount output, 					@cSrcICAccount output, 					@cRemoteDestAcc output, 					@cRemoteDestICAcc output, 					@cRemoteCompany output, 					@tIC_CopyMDA output, 					@tIC_ReverseMDA output, 					@iFoundOne output, 					@iRemoteDest output, 					@O_iErrorState output 	 				/* if the above stored proc failed, bail out */ 				select @iError = @@error 				if @iStatus = 0 and @iError <> 0 					select @iStatus = @iError 				if @iStatus <> 0 or @O_iErrorState <> 0 					break 				if (@iFoundOne = 1) 				begin 					select @iIC_DestAccount = 0, @iIC_DestICAccount = 0, @sIC_DestCompany = ''  /* not NULL ! */ 					select @iIC_TrigAccount = @I_iAccountIndex 					select @iIC_SrcAccount = ACTINDX from GL00105  					where ACTNUMST = @cSrcAccount 					select @iIC_SrcICAccount = ACTINDX from GL00105  					where ACTNUMST = @cSrcICAccount 					if (@iRemoteDest = 0) 					begin 						select @sIC_DestCompany = CMPANYID from DYNAMICS..SY01500  						where INTERID = @cRemoteCompany 						create table #RemoteAccounts ( 							ACTINDX int, 							ACTNUMST char(129) 						) 						 						select @cStatement = 'insert into #RemoteAccounts select ACTINDX, ACTNUMST from ' 							+ RTRIM(@cRemoteCompany) + '..GL00105 where ACTNUMST = ''' 							+ RTRIM(@cRemoteDestAcc) +'''' 						exec( @cStatement ) 						select @cStatement =  'insert into #RemoteAccounts select ACTINDX, ACTNUMST from ' 							+ RTRIM(@cRemoteCompany) + '..GL00105 where ACTNUMST = ''' 							+ RTRIM(@cRemoteDestICAcc) + '''' 						exec( @cStatement ) 						select @iIC_DestAccount = ACTINDX from #RemoteAccounts  						where ACTNUMST = @cRemoteDestAcc 						select @iIC_DestICAccount = ACTINDX from #RemoteAccounts  						where ACTNUMST = @cRemoteDestICAcc 						drop table #RemoteAccounts 						select @cRemoteCompany = '' /* if not remote, need to clear this */ 					end 						/* read the necessary values from the trx line */ 					 					if @I_sTransactionType = @NORMAL_TRX 					begin 						select 							@dExchangeDate = EXCHDATE, 							@dExchangeTime = TIME1, 							@cRateTypeID = RATETPID, 							@cExchangeTableID = EXGTBLID 						from 							GL10001 						where 							JRNENTRY = @I_iJournalEntry and 							SQNCLINE = @I_nSequenceLine 					end 					if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 					begin 						select 							@dExchangeDate = @DEFAULT_DATE, 							@dExchangeTime = @DEFAULT_DATE, 							@cRateTypeID = '', 							@cExchangeTableID = '' 					end 					/* get the decimal places for this line */ 					if @I_sAccountType = @UNIT_ACCT 						select 							@iDecimalPlaces = DECPLACS - 1 						from 							GL00100 						where 							ACTINDX = @I_iAccountIndex 					else 						select 							@iDecimalPlaces = DECPLCUR - 1 						from 							DYNAMICS..MC40200 						where 							CURNCYID = @I_cOrigCurrencyID 					if @iDecimalPlaces is NULL 						select @iDecimalPlaces = 2 					/* get the next sequence number for our new interface record */ 					select 						@nIC_SequenceLine = (max(SQNCLINE) + 100) 					from 						DYNAMICS..NCIC1004 					where 						(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 					if @nIC_SequenceLine is NULL 						select @nIC_SequenceLine = 100 					/* get the dta series and dta reference for this GL line */ 					exec @iStatus = dtaGetGLKeyFields 						@I_sDTAGLStatus, 						@I_mRecurringTRXSequence, 						@I_nSequenceLine, 						@I_iOrigSequenceNumber, 						@I_cOriginatingDocNumber, 						@I_cOriginatingControlNumber, 						@I_sOriginatingTrxType, 						@I_cAuditTrailCode, 						@sHdrSeries, 						@I_sOrigDTASeries, 						1, 						@I_nDTAIndex, 						@sKF_DTASeries output, 						@cKF_DTAReference output, 						@iKF_SequenceLine output, 						@cKF_DTAGLReference output, 						@cKF_DocumentNumber output, 						@sKF_DocumentType output, 						@O_iErrorState output 					/* if the above stored proc failed, bail out */ 					select @iError = @@error 					if @iStatus = 0 and @iError <> 0 						select @iStatus = @iError 					if @iStatus <> 0 or @O_iErrorState <> 0 						break 					/* write the new line to the NC_IC_Interface_MSTR table */ 					insert into DYNAMICS..NCIC1004 ( 						CMPANYID, 						NC_Source_Company_ID, 						NC_Src_Account_Index, 						NC_Src_IC_Account_Index, 						NC_Dest_Account_Index, 						NC_Dest_IC_Account_Index, 						NC_Trigger_Account_Index, 						JRNENTRY, 						SQNCLINE, 						ACTINDX, 						DEBITAMT, 						CRDTAMNT, 						ORDBTAMT, 						ORCRDAMT, 						XCHGRATE, 						DSCRIPTN, 						GLLINMSG, 						GLLINMS2, 						CURRNIDX, 						DECPLACS, 						ORCTRNUM, 						ORDOCNUM, 						ORMSTRID, 						ORMSTRNM, 						ORTRXTYP, 						OrigSeqNum, 						OrigDTASeries, 						SEQNUMBR, 						DTA_GL_Status, 						DTAREF, 						DTA_Index, 						RATETPID, 						EXGTBLID, 						EXCHDATE, 						TIME1, 						RTCLCMTD, 						DENXRATE, 						MCTRXSTT, 						NC_Src_Batch_Created, 						NC_Dest_Batch_Created, 						NC_Copy_MDA_CB, 						NC_Reverse_MDA_CB, 						MKDTOPST, 						SOURCDOC, 						USERID, 						TRXDATE, 						CURRVAL, 						DATE1, 						String1, 						STRGA255, 						IntegerValue, 						NC_Source_Currency_Index, 						SERIES, 						Remote_Company_ID, 						Remote_Destination_Accou, 						Remote_Destination_IC_Ac, 						MCSTRUCT_1, 						MCSTRUCT_2, 						MCSTRUCT_3, 						MCSTRUCT_4, 						MCSTRUCT_5, 						MCSTRUCT_6, 						MCSTRUCT_7, 						MCSTRUCT_8, 						MCSTRUCT_9, 						MCSTRUCT_10, 						MCSTRUCT_11, 						MCSTRUCT_12, 						MCSTRUCT_13, 						MCSTRUCT_14, 						ORTRXDESC, 						NC_Spare_Int) 					values ( 						@sIC_DestCompany, 						@sCompanyID, 						@iIC_SrcAccount, 						@iIC_SrcICAccount, 						@iIC_DestAccount, 						@iIC_DestICAccount, 						@iIC_TrigAccount, 						@I_iJournalEntry, 						@nIC_SequenceLine, 						@I_iAccountIndex, 						@I_nDebit, 						@I_nCredit, 						@I_nOrigDebit, 						@I_nOrigCredit, 						@I_nExchangeRate, 						@I_cDescription, 						0x00000000, 						0x00000000, 						@I_sOrigCurrencyIndex, 						@iDecimalPlaces, 						@I_cOriginatingControlNumber, 						@I_cOriginatingDocNumber, 						@I_cOriginatingMasterID, 						@I_cOriginatingMasterName, 						@I_sOriginatingTrxType, 						@I_iOrigSequenceNumber, 						@sKF_DTASeries, 						@I_nSequenceLine, 						32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 						@cKF_DTAReference, 						@I_nDTAIndex, 						@cRateTypeID, 						@cExchangeTableID, 						@dExchangeDate, 						@dExchangeTime, 						@I_sRateCalculationMethod, 						@I_nDenomExchangeRate, 						@I_sMCTrxState, 						@FALSE, 						@FALSE, 						@tIC_CopyMDA, 						@tIC_ReverseMDA, 						@TRUE, 						@cHdrSourceDocument, 						@I_cUserID, 						@dHdrTrxDate, 						0, 						'01 Jan 1900', 						'', 						'', 						0, 						@iFunctionalIndex, 						@iSeries, 						@cRemoteCompany, 						@cRemoteDestAcc, 						@cRemoteDestICAcc, 						'', 						0, 						'', 						'', 						0, 						'01 Jan 1900', 						0, 						'01 Jan 1900', 						0, 						0, 						0, 						'01 Jan 1900', 						0, 						0, 						@Reference, 						0) 					/* check if we need to copy any mda from this GL line as well */ 					if @tIC_CopyMDA = @TRUE 					begin 						/* write the mda code lines to NC_SY_DTA_Details */ 						insert into DYNAMICS..NCIC2000 ( 							DTASERIES, 							DTAREF, 							ACTINDX, 							SEQNUMBR, 							GROUPID, 							CODEID, 							DOCNUMBR, 							CMPANYID, 							RMDTYPAL, 							POSTDESC, 							DTAQNTY, 							CODEAMT, 							TRXDATE, 							NC_Copy_MDA_CB, 							NC_Reverse_MDA_CB) 						select 							DTASERIES, 							DTAREF, 							ACTINDX, 							SEQNUMBR, 							GROUPID, 							CODEID, 							DOCNUMBR, 							@sCompanyID, 							RMDTYPAL, 							POSTDESC, 							DTAQNTY, 							CODEAMT, 							TRXDATE, 							@tIC_CopyMDA, 							@tIC_ReverseMDA 						from 							DTA10200 						where 							(DTASERIES = @sKF_DTASeries) and 							(DTAREF = @cKF_DTAReference) and 							(ACTINDX = @iIC_TrigAccount) 					end 				    end 				end 		 			end 	end	 end if @iStatus <> 0 or @O_iErrorState <> 0 begin 	if @tTransaction = 1 		rollback transaction end else if @tTransaction = 1 	commit transaction return (@iStatus)  
GO
GRANT EXECUTE ON  [dbo].[ncCreateHistoryInterfaceRec] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[ncCreateHistoryInterfaceRec] TO [public]
GO
