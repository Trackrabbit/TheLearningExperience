SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpProcessStdVoid]  @iJournalEntry int  = NULL,  @iRecurTrxSeq numeric(19,5) = NULL,  @iYear smallint = NULL,  @iFuncCurId char(15) = NULL,  @iFuncCurIdx smallint = NULL,  @iVoidHistTrx smallint = NULL as  declare  @lTrxStarted tinyint,  @lControlLoop tinyint,  @lReturnStatus int,  @lSqlError int,  @lError int,  @lAllocAcctIdx int,  @lLineMessages binary(4),  @lWorkCursorCreated tinyint,  @lAllocationCursorCreated tinyint,  @lCompanyID char(5),  @lRelationID int,  @lUserLevel smallint,  @lAccessAllAccounts int,  @lAlsRegistered tinyint,  @lSeqLine numeric(19,5),  @lAcctIdx int,  @lDesc char(31),  @lAcctType smallint,  @lOrigContNum char(21),  @lOrigDocNum char(21),  @lOrigMstrNum char(31),  @lOrigSeqNum int,  @lOrigMstrID char(31),  @lInterID           char(5),  @lSourceDocument       char(11),  @lReference            char(31),  @lTrxDate              datetime,  @lTrxSource            char(13),  @lLastUser             char(15),  @lLastDateEdited       datetime,  @lUserWhoPosted        char(15),  @lSeries               smallint,  @lOrigTrxType          smallint,  @lOrigPostedDate       datetime,  @lOrigTrxSource        char(13),  @lCurId                char(15),  @lCurIdx               smallint,  @lRateTypeID           char(15),  @lExchTblID            char(15),  @lExchRate             numeric(19,7),  @lExchDate             datetime,  @lTime                 datetime,  @lRateCalcMeth         smallint,  @lNoteIdx              numeric(19,5),  @lIcTrx                tinyint,  @lOrigCompID           char(5),  @lOrigJrnlEntry        int,  @lDenomExchRate        numeric(19,7),  @lMCTrxState           smallint,  @lCorrespUnit          char(5),  @lBatchSource char(15),  @lBatchNumber char(15),  @lTrxType smallint,  @nLedgerID int  select @lLineMessages = 0 select @lError = 0 select @lSqlError = 0 select @lReturnStatus = 0 select @lWorkCursorCreated = 0 select @lAllocationCursorCreated = 0 select @lCompanyID = db_name()  if @@trancount = 0 begin  select @lTrxStarted = 1  begin transaction end  while (@lControlLoop is NULL) begin  select @lControlLoop = 1   if @iJournalEntry is NULL or  @iYear is NULL or   @iRecurTrxSeq is NULL or  @iFuncCurId is NULL or  @iFuncCurIdx is NULL or  @iVoidHistTrx is NULL  begin  select @lReturnStatus = 1  break  end   select  @lSourceDocument = SOURCDOC,  @lReference = REFRENCE,  @lTrxDate = TRXDATE,  @lTrxSource = TRXSORCE,  @lLastUser = LASTUSER,  @lLastDateEdited = LSTDTEDT,  @lUserWhoPosted = USWHPSTD,  @lSeries = SERIES,  @lOrigPostedDate = ORPSTDDT,  @lOrigTrxSource = ORTRXSRC,  @lCurId = CURNCYID,  @lCurIdx = CURRNIDX,  @lRateTypeID = RATETPID,  @lExchTblID = EXGTBLID,  @lExchRate = XCHGRATE,  @lExchDate = EXCHDATE,  @lTime = TIME1,  @lRateCalcMeth = RTCLCMTD,  @lNoteIdx = NOTEINDX,  @lIcTrx = ICTRX,  @lOrigCompID = ORCOMID,  @lOrigJrnlEntry = ORIGINJE,  @lDenomExchRate = DENXRATE,  @lMCTrxState = MCTRXSTT,  @lBatchSource = BCHSOURC,  @lBatchNumber = BACHNUMB,  @lTrxType = TRXTYPE,  @nLedgerID = Ledger_ID  from  GL10000  where  JRNENTRY = @iJournalEntry  and  RCTRXSEQ = @iRecurTrxSeq   declare  WorkCursor  cursor for    select  SQNCLINE,  ACTINDX,  DSCRIPTN,  ACCTTYPE,  ORCTRNUM,  ORDOCNUM,  ORMSTRID,  ORMSTRNM,  OrigSeqNum,  ORTRXTYP,  CorrespondingUnit,  INTERID  from  GL10001  where  JRNENTRY = @iJournalEntry  order by  SQNCLINE   open WorkCursor  select @lWorkCursorCreated =1   if @@cursor_rows = 0begin  select @lReturnStatus = 1  break  end   fetch   next   from  WorkCursor  into   @lSeqLine,   @lAcctIdx,   @lDesc,   @lAcctType,   @lOrigContNum,   @lOrigDocNum,  @lOrigMstrID,  @lOrigMstrNum,   @lOrigSeqNum,  @lOrigTrxType,  @lCorrespUnit,  @lInterID   while @@fetch_status = 0  begin   if @lAcctType = 3   begin  declare  AllocationCursor  cursor for  select  DSTINDX  from  GL00103   where   ACTINDX = @lAcctIdx   open AllocationCursor  select @lAllocationCursorCreated = 1   if @@cursor_rows = 0  begin   select @lReturnStatus = 1  break  end  fetch  next  from  AllocationCursor  into  @lAllocAcctIdx  while @@fetch_status = 0  begin    exec @lReturnStatus = glpCreateVoidRecord  @iVoidHistTrx,  @iYear,  @iJournalEntry,  @iRecurTrxSeq,  @lSourceDocument,  @lReference,  @lDesc,  @lTrxDate,  @lTrxSource,  @lAllocAcctIdx,  @lLastUser,  @lLastDateEdited,  @lUserWhoPosted,  @lOrigTrxSource,  @lOrigTrxType,  @lSeries,  @lOrigContNum,  @lOrigMstrID,  @lOrigMstrNum,  @lOrigDocNum,  @lOrigPostedDate,  @lOrigSeqNum,  @lCurId,  @lCurIdx,  @lRateTypeID,  @lExchTblID,  @lExchRate,  @lExchDate,  @lTime,  @lRateCalcMeth,  @lNoteIdx,  @lIcTrx,  @lOrigCompID,  @lOrigJrnlEntry,  @lDenomExchRate,  @lMCTrxState,  @lCorrespUnit,  @lSeqLine,  @lTrxType,  '',  1,   @nLedgerID   fetch  next  from  AllocationCursor  into  @lAllocAcctIdx  end    end   else   begin  exec @lReturnStatus = glpCreateVoidRecord  @iVoidHistTrx,  @iYear,  @iJournalEntry,  @iRecurTrxSeq,  @lSourceDocument,  @lReference,  @lDesc,  @lTrxDate,  @lTrxSource,  @lAcctIdx,  @lLastUser,  @lLastDateEdited,  @lUserWhoPosted,  @lOrigTrxSource,  @lOrigTrxType,  @lSeries,  @lOrigContNum,  @lOrigMstrID,  @lOrigMstrNum,  @lOrigDocNum,  @lOrigPostedDate,  @lOrigSeqNum,  @lCurId,  @lCurIdx,  @lRateTypeID,  @lExchTblID,  @lExchRate,  @lExchDate,  @lTime,  @lRateCalcMeth,  @lNoteIdx,  @lIcTrx,  @lOrigCompID,  @lOrigJrnlEntry,  @lDenomExchRate,  @lMCTrxState,  @lCorrespUnit,  @lSeqLine,  @lTrxType,  '',  1,   @nLedgerID  end    exec @lReturnStatus = glpUpdateAllocationRegister  1,   @iJournalEntry,  @lBatchSource,  @lBatchNumber,  @lUserWhoPosted,  0,  @lAcctIdx,  @lAcctType,  0,  0,  @lTrxDate,  @lSeqLine,  @lDesc,  0,   0,   0,   @lLineMessages,  @iFuncCurId,  @iFuncCurIdx,  @lLineMessages,  0,  0,  @lCurId,  @lCurIdx,  @lInterID,  @lIcTrx,  @lOrigDocNum,  @lOrigContNum,  @lOrigMstrID,  @lOrigMstrNum,  @lOrigTrxType,  @lMCTrxState,  @lExchRate,  @lDenomExchRate,  @lError output   select @lSqlError = @@error  if @lSqlError <> 0  begin  select @lReturnStatus = @lSqlError  break  end   if @lError <> 0  begin  select @lReturnStatus = @lError  break  end   fetch   next   from  WorkCursor  into  @lSeqLine,   @lAcctIdx,   @lDesc,   @lAcctType,   @lOrigContNum,   @lOrigDocNum,  @lOrigMstrID,  @lOrigMstrNum,   @lOrigSeqNum,  @lOrigTrxType,  @lCorrespUnit,  @lInterID  end    select @lCompanyID = db_name()  exec @lReturnStatus = DYNAMICS..smGetAccountLevelSecurityInfo  @lCompanyID,  @lRelationID output,  @lUserLevel output,  @lAccessAllAccounts output,  @lAlsRegistered output   select @lSqlError = @@error  if @lSqlError <> 0  begin  select @lReturnStatus = @lSqlError  break  end  exec @lReturnStatus = glpGetAccountInfo  '',  0,  0,  @lUserWhoPosted,  @lRelationID,  @lUserLevel,  @lAccessAllAccounts,  @lAlsRegistered,  @lError output   select @lSqlError = @@error  if @lSqlError <> 0  begin  select @lReturnStatus = @lSqlError  break  end   if @lError <> 0  begin  select @lReturnStatus = @lError  break  end end   if @lWorkCursorCreated = 1  deallocate WorkCursor  if @lAllocationCursorCreated = 1  deallocate AllocationCursor  return(@lReturnStatus)   
GO
GRANT EXECUTE ON  [dbo].[glpProcessStdVoid] TO [DYNGRP]
GO
