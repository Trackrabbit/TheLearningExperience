SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create    procedure [dbo].[aagClosedYearTrxGetData] @I_nYearClosed smallint, @I_nNextYear smallint, @O_cTrxDimFields varchar(8000) output, @O_cTrxDimFieldsWithPrefix varchar(8000) output, @I_nAAFromOpen bit, @I_nCalledFromUtility bit, @I_cBBF varchar(255), @I_cPANDL varchar(255), @I_HdrID INT = 0, @I_aaTrxDimTempTable varchar(50), @IO_aBBFGetDataTempTable varchar(50)output as begin  set nocount on  Declare  @l_cmdExec varchar(8000),  @l_aaTrxDimID int,  @l_nIsNextYearOpen bit,  @l_naaOrder int,  @l_HdrId varchar(200),  @l_TrxCodeTableName varchar(50),  @l_PrimaryKey varchar(50),  @l_cFunc_Currency char(15)    if @I_HdrID <> 0  begin  set @l_HdrId = ' and aaGLHdrID = ' + ltrim(@I_HdrID) + ''  end   if (select HISTORYR from SY40101 where  YEAR1 = @I_nNextYear) = 0  begin  set @l_nIsNextYearOpen = 1  end  else  begin  set @l_nIsNextYearOpen = 0  end   select @IO_aBBFGetDataTempTable = replace('##aaBBFGetDataTemp' + REPLACE(system_user,'''','') + db_name(),' ','')  select @l_PrimaryKey = 'select ''PK'' + right(' + @IO_aBBFGetDataTempTable + ',len(' + @IO_aBBFGetDataTempTable + ')-2)'    select @l_cmdExec = ''   select @l_cmdExec = 'IF EXISTS (SELECT 1 FROM tempdb..sysobjects WHERE [name] = ''' + @IO_aBBFGetDataTempTable + ''' )   DROP TABLE [' + @IO_aBBFGetDataTempTable + ']'   exec (@l_cmdExec)    set @l_cmdExec = ''  set @O_cTrxDimFields = ''  set @O_cTrxDimFieldsWithPrefix = ''   select @l_cmdExec = 'create table [' + @IO_aBBFGetDataTempTable + '](  [aaGLHdrID] [int] NOT NULL default(0),  [aaGLDistID] [int] NOT NULL default(0),  [aaGLAssignID] [int] NOT NULL default(0),  [ACTINDX] [int] NOT NULL default(0),  [ACCTTYPE] [smallint] NOT NULL default(0),  [SEQNUMBR] [int] NOT NULL default(0),  [DEBITAMT] [numeric](19, 5) NOT NULL default(0),  [CRDTAMNT] [numeric](19, 5) NOT NULL default(0),  [ORDBTAMT] [numeric](19, 5) NOT NULL default(0),  [ORCRDAMT] [numeric](19, 5) NOT NULL default(0),  [CURNCYID] [char] (15) NOT NULL default(''''),  [Ledger_ID] [int] NOT NULL default(0), '   if exists(select * from AAG00700 where aaOption = 15 and aaIsOptionSet = 1)  begin  declare TrxDim cursor local fast_forward for  select code.aaTrxDimID, aaOrder  from AAG40003 code Inner join   (Select aaGLHdrID from AAG40000 where YEAR1 = @I_nYearClosed) hdr   on code.aaGLHdrID = hdr.aaGLHdrID  Inner join AAG00400 dim on code.aaTrxDimID = dim.aaTrxDimID  where dim.aaIncYEC = 1 and dim.aaDataType = 1  group by code.aaTrxDimID,  aaOrder   order by aaOrder  open TrxDim  fetch next from TrxDim into @l_aaTrxDimID, @l_naaOrder  while @@fetch_status = 0  begin  select @l_cmdExec = @l_cmdExec + '[' + ltrim(rtrim(@l_aaTrxDimID)) + '] [int] NULL , '  select @O_cTrxDimFields = @O_cTrxDimFields + '[' + ltrim(rtrim(@l_aaTrxDimID)) + '], '  select @O_cTrxDimFieldsWithPrefix =  @O_cTrxDimFieldsWithPrefix + 'assin.[' + ltrim(rtrim(@l_aaTrxDimID)) + '], '  execute('insert into [' + @I_aaTrxDimTempTable + ']  (aaTrxDimID, aaOrder) values (' + @l_aaTrxDimID + ', ' + @l_naaOrder + ')')   fetch next from TrxDim into @l_aaTrxDimID, @l_naaOrder  end   close TrxDim  deallocate TrxDim  end   select @O_cTrxDimFields = ltrim(rtrim(@O_cTrxDimFields))  select @O_cTrxDimFieldsWithPrefix = ltrim(rtrim(@O_cTrxDimFieldsWithPrefix))  if len(@O_cTrxDimFields) > 0  begin  select @O_cTrxDimFields = substring(@O_cTrxDimFields, 1,len(@O_cTrxDimFields) - 1)  select @O_cTrxDimFieldsWithPrefix = substring(@O_cTrxDimFieldsWithPrefix, 1,len(@O_cTrxDimFieldsWithPrefix) - 1)  end   select @l_cmdExec = @l_cmdExec + 'CONSTRAINT [' + @l_PrimaryKey + '] PRIMARY KEY  CLUSTERED   (  [aaGLHdrID],  [aaGLDistID],  [aaGLAssignID],  [ACTINDX]  )  ON [PRIMARY]   ) ON [PRIMARY]'  exec (@l_cmdExec)   if @I_nAAFromOpen = 1   begin  if @I_nCalledFromUtility = 0  begin  exec('insert into [' + @IO_aBBFGetDataTempTable + '] (aaGLHdrID,  aaGLDistID,  aaGLAssignID,  ACTINDX,  ACCTTYPE,  SEQNUMBR,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  Ledger_ID)  select Asign.aaGLHdrID,  Asign.aaGLDistID,  Asign.aaGLAssignID,  dist.ACTINDX,  dist.ACCTTYPE,  (dist.SEQNUMBR+10000000),  Asign.DEBITAMT,  Asign.CRDTAMNT,  Asign.ORDBTAMT,  Asign.ORCRDAMT,  dist.CURNCYID,  Ledger_ID   from (Select aaGLHdrID, Ledger_ID from AAG30000 where YEAR1 = ' + @I_nYearClosed + ' ' + @l_HdrId + ') hdr Inner join   AAG30002 Asign on Asign.aaGLHdrID = hdr.aaGLHdrID  inner join AAG30001 dist on dist.aaGLHdrID = Asign.aaGLHdrID and dist.aaGLDistID = Asign.aaGLDistID  order by Asign.aaGLHdrID, Asign.aaGLDistID, Asign.aaGLAssignID')  end  else  begin  if @l_nIsNextYearOpen = 1  begin  exec('insert into [' + @IO_aBBFGetDataTempTable + '] (aaGLHdrID,  aaGLDistID,  aaGLAssignID,  ACTINDX,  ACCTTYPE,  SEQNUMBR,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  Ledger_ID)  select Asign.aaGLHdrID,  Asign.aaGLDistID,  Asign.aaGLAssignID,  dist.ACTINDX,  dist.ACCTTYPE,  (dist.SEQNUMBR+10000000),  Asign.DEBITAMT,  Asign.CRDTAMNT,  Asign.ORDBTAMT,  Asign.ORCRDAMT,  dist.CURNCYID,  Ledger_ID   from (Select aaGLHdrID, Ledger_ID from AAG30000 where YEAR1 = ' + @I_nYearClosed  + ' ' + @l_HdrId + '   ) hdr Inner join   AAG30002 Asign on Asign.aaGLHdrID = hdr.aaGLHdrID  inner join AAG30001 dist on dist.aaGLHdrID = Asign.aaGLHdrID and dist.aaGLDistID = Asign.aaGLDistID  order by Asign.aaGLHdrID, Asign.aaGLDistID, Asign.aaGLAssignID')  end  else  begin  exec('insert into [' + @IO_aBBFGetDataTempTable + '] (aaGLHdrID,  aaGLDistID,  aaGLAssignID,  ACTINDX,  ACCTTYPE,  SEQNUMBR,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  Ledger_ID)  select Asign.aaGLHdrID,  Asign.aaGLDistID,  Asign.aaGLAssignID,  dist.ACTINDX,  dist.ACCTTYPE,  (dist.SEQNUMBR+10000000),  Asign.DEBITAMT,  Asign.CRDTAMNT,  Asign.ORDBTAMT,  Asign.ORCRDAMT,  dist.CURNCYID,  Ledger_ID   from (Select aaGLHdrID, Ledger_ID from AAG30000 where YEAR1 = ' + @I_nYearClosed + ' ' + @l_HdrId + '   ) hdr Inner join   AAG30002 Asign on Asign.aaGLHdrID = hdr.aaGLHdrID  inner join AAG30001 dist on dist.aaGLHdrID = Asign.aaGLHdrID and dist.aaGLDistID = Asign.aaGLDistID  order by Asign.aaGLHdrID, Asign.aaGLDistID, Asign.aaGLAssignID')  end   end   end  else  begin   if @l_nIsNextYearOpen = 1  begin  exec('insert into [' + @IO_aBBFGetDataTempTable + '] (aaGLHdrID,  aaGLDistID,  aaGLAssignID,  ACTINDX,  ACCTTYPE,  SEQNUMBR,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  Ledger_ID)  select Asign.aaGLHdrID,  Asign.aaGLDistID,  Asign.aaGLAssignID,  dist.ACTINDX,  dist.ACCTTYPE,  (dist.SEQNUMBR+10000000),  Asign.DEBITAMT,  Asign.CRDTAMNT,  Asign.ORDBTAMT,  Asign.ORCRDAMT,  dist.CURNCYID,  Ledger_ID   from (Select aaGLHdrID, Ledger_ID from AAG40000 where YEAR1 = ' + @I_nYearClosed + ' ' + @l_HdrId + ' ) hdr Inner join   AAG40002 Asign on Asign.aaGLHdrID = hdr.aaGLHdrID  inner join AAG40001 dist on dist.aaGLHdrID = Asign.aaGLHdrID and dist.aaGLDistID = Asign.aaGLDistID  order by Asign.aaGLHdrID, Asign.aaGLDistID, Asign.aaGLAssignID')  end  else  begin  exec('insert into [' + @IO_aBBFGetDataTempTable + '] (aaGLHdrID,  aaGLDistID,  aaGLAssignID,  ACTINDX,  ACCTTYPE,  SEQNUMBR,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  Ledger_ID)  select Asign.aaGLHdrID,  Asign.aaGLDistID,  Asign.aaGLAssignID,  dist.ACTINDX,  dist.ACCTTYPE,  (dist.SEQNUMBR+10000000),  Asign.DEBITAMT,  Asign.CRDTAMNT,  Asign.ORDBTAMT,  Asign.ORCRDAMT,  dist.CURNCYID,  Ledger_ID   from (Select aaGLHdrID, Ledger_ID from AAG40000 where YEAR1 = ' + @I_nYearClosed + ' ' + @l_HdrId + ' ) hdr Inner join   AAG40002 Asign on Asign.aaGLHdrID = hdr.aaGLHdrID  inner join AAG40001 dist on dist.aaGLHdrID = Asign.aaGLHdrID and dist.aaGLDistID = Asign.aaGLDistID  order by Asign.aaGLHdrID, Asign.aaGLDistID, Asign.aaGLAssignID')  end  end  if exists(select * from AAG00700 where aaOption = 15 and aaIsOptionSet = 1)  begin  begin  declare TrxDim cursor local fast_forward for  select code.aaTrxDimID, aaOrder   from AAG40003 code Inner join   (Select aaGLHdrID from AAG40000 where YEAR1 = @I_nYearClosed) hdr   on code.aaGLHdrID = hdr.aaGLHdrID  Inner join AAG00400 dim on code.aaTrxDimID = dim.aaTrxDimID  where dim.aaIncYEC = 1 and dim.aaDataType = 1  group by code.aaTrxDimID, aaOrder   order by aaOrder  set @l_TrxCodeTableName = ' AAG40003'  end    open TrxDim  fetch next from TrxDim into @l_aaTrxDimID, @l_naaOrder  while @@fetch_status = 0  begin  select @l_cmdExec = 'Update [' + @IO_aBBFGetDataTempTable + '] set '  select @l_cmdExec = @l_cmdExec + '[' + ltrim(rtrim(@l_aaTrxDimID)) + '] = aaTrxCodeID '  select @l_cmdExec = @l_cmdExec + 'from [' + @IO_aBBFGetDataTempTable + '] tmp inner join ' + @l_TrxCodeTableName + ' cod on '  select @l_cmdExec = @l_cmdExec + ' tmp.aaGLHdrID = cod.aaGLHdrID and  '  select @l_cmdExec = @l_cmdExec + ' tmp.aaGLDistID = cod.aaGLDistID and '  select @l_cmdExec = @l_cmdExec + ' tmp.aaGLAssignID = cod.aaGLAssignID '   select @l_cmdExec = @l_cmdExec + ' where cod.aaTrxDimID = ' + ltrim(rtrim(@l_aaTrxDimID))  exec (@l_cmdExec)  fetch next from TrxDim into @l_aaTrxDimID, @l_naaOrder  end   close TrxDim  deallocate TrxDim  end   set @l_cFunc_Currency = ''  select @l_cFunc_Currency = FUNLCURR from MC40000   exec('update [' + @IO_aBBFGetDataTempTable + '] set CURNCYID = ''' + @l_cFunc_Currency + ''' WHERE LTRIM(RTRIM(CURNCYID)) = '''' OR CURNCYID IS NULL')   set nocount off end    
GO
GRANT EXECUTE ON  [dbo].[aagClosedYearTrxGetData] TO [DYNGRP]
GO
