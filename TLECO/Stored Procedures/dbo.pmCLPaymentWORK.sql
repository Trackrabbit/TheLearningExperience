SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[pmCLPaymentWORK]  @I_cUserID char(15) = NULL,  @I_cUserDate char(12) = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @I_cFileName1 varchar(40) = NULL,  @I_cFileName2 varchar(40) = NULL,  @I_cFileName3 varchar(40) = NULL,  @I_cFileName4 varchar(40) = NULL,  @I_cSearchString1 char(2)  = NULL,  @I_tMCRegistered tinyint  = NULL,  @O_iErrorState int  = NULL output as  declare  @iError int,    @iStatus int,    @XPM_Cchecks varchar(50),  @cMessage1 varchar(50),  @ccheckbkid char(15),   @cDBName char(5),  @PAY_ALIGNMENT_CONTROL_TYPE  int,    @WORK int,  @tLoop tinyint,  @sDefaultDate char(12)  select  @O_iErrorState = 0,  @iStatus  = 0  while (@tLoop is NULL) begin  select @tLoop = 1   if @I_cUserID is NULL  or @I_cUserDate is NULL  or @I_cFunctionalCurrency is NULL  or @I_cFileName1 is NULL  or @I_cFileName2 is NULL  or @I_cFileName3 is NULL  or @I_cFileName4 is NULL  or @I_cSearchString1 is NULL  or @I_tMCRegistered is NULL  begin    select @O_iErrorState = 20844  break  end   exec @iStatus = smGetDefaultDate @sDefaultDate output   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'PAYMENT_ALIGNMENT_CONTROL_TYPE',   @PAY_ALIGNMENT_CONTROL_TYPE output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'WORK',   @WORK output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   select @cDBName = db_name()  exec @iStatus = DYNAMICS.dbo.smGetMsgString  871,  @cDBName,   @cMessage1 output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantString  'XPM_CCHECKS_STR',   @XPM_Cchecks output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   if @I_tMCRegistered = 1  begin  insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  PMNTNMBR,  0,  VENDORID  from  PM10300  where  PM10300.CURNCYID <> ''  and  PM10300.CURNCYID <> @I_cFunctionalCurrency  and PM10300.CNTRLTYP < @PAY_ALIGNMENT_CONTROL_TYPE  and  NOT EXISTS  (select  1  from  MC020103  where  PM10300.PMNTNMBR = MC020103.VCHRNMBR  and PM10300.DOCTYPE = MC020103.DOCTYPE )   if @@rowcount <> 0  begin  delete  PM10300  where  PM10300.CURNCYID <> ''  and  PM10300.CURNCYID <> @I_cFunctionalCurrency  and PM10300.CNTRLTYP < @PAY_ALIGNMENT_CONTROL_TYPE  and  NOT EXISTS  (select  1  from  MC020103  where  PM10300.PMNTNMBR = MC020103.VCHRNMBR  and PM10300.DOCTYPE = MC020103.DOCTYPE )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName3,  NULL,  17638,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end   end  else  begin  update  PM10300  set  PM10300.CURNCYID  = ''  from  PM10300  where  PM10300.CURNCYID <> ''  and  PM10300.CURNCYID <> @I_cFunctionalCurrency  and PM10300.CNTRLTYP < @PAY_ALIGNMENT_CONTROL_TYPE  and  NOT EXISTS  (select  1  from  MC020103  where  PM10300.PMNTNMBR = MC020103.VCHRNMBR  and PM10300.DOCTYPE = MC020103.DOCTYPE )  end   insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  A.PMNTNMBR,  0,  A.VENDORID  from  PM10300 A  JOIN MC020103 B ON (A.PMNTNMBR = B.VCHRNMBR and A.DOCTYPE = B.DOCTYPE)  LEFT OUTER JOIN SY00500 C ON (A.BACHNUMB = C.BACHNUMB and A.BCHSOURC = C.BCHSOURC and C.BCHSTTUS > 0)  where  A.CNTRLTYP < @PAY_ALIGNMENT_CONTROL_TYPE  and B.DCSTATUS <> @WORK  and C.BACHNUMB is NULL   if @@rowcount <> 0  begin  update  MC020103  set  DCSTATUS = @WORK  from  PM10300 A  JOIN MC020103 B ON (A.PMNTNMBR = B.VCHRNMBR and A.DOCTYPE = B.DOCTYPE)  LEFT OUTER JOIN SY00500 C ON (A.BACHNUMB = C.BACHNUMB and A.BCHSOURC = C.BCHSOURC and C.BCHSTTUS > 0)  where  A.CNTRLTYP < @PAY_ALIGNMENT_CONTROL_TYPE  and B.DCSTATUS <> @WORK  and C.BACHNUMB is NULL   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName4,  NULL,  18544,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  PMNTNMBR,  0,  VENDORID  from  PM10300  where  NOT EXISTS  (select  1  from  PM00400  where  PM10300.PMNTNMBR = PM00400.CNTRLNUM  and PM10300.CNTRLTYP = PM00400.CNTRLTYP )   if @@rowcount <> 0  begin  insert into   PM00400(  DOCNUMBR,  DCSTATUS,  DOCTYPE,  VENDORID,  DOCDATE,  BCHSOURC,  CHEKBKID,  CNTRLTYP,  CNTRLNUM )  select  DOCNUMBR,  1,  DOCTYPE,  VENDORID,  DOCDATE,  BCHSOURC,  CHEKBKID,  CNTRLTYP,  PMNTNMBR   from  PM10300  where  NOT EXISTS  (select  1  from  PM00400  where  PM10300.PMNTNMBR = PM00400.CNTRLNUM  and PM10300.CNTRLTYP = PM00400.CNTRLTYP )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName1,  @I_cSearchString1,  10350,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select distinct  BACHNUMB,  0,  ''  from  PM10300  where  PM10300.BCHSOURC + PM10300.BACHNUMB  NOT IN  (select BCHSOURC + BACHNUMB from SY00500)  and   PM10300.BCHSOURC = @XPM_Cchecks   if @@rowcount <> 0  begin  select @ccheckbkid =  (select   CHEKBKID   from   PM40100)   insert into  SY00500(  GLPOSTDT,  BCHSOURC,  BACHNUMB,  SERIES,   MKDTOPST,  NUMOFTRX,  BACHFREQ,  BCHCOMNT,  USERID,   CHEKBKID,   BCHTOTAL,   BACHDATE,  POSTTOGL,  CREATDDT,  BCHSTTUS,  ORIGIN )  select distinct  @I_cUserDate,  @XPM_Cchecks,  BACHNUMB,  4,  0,  1,  1,  @cMessage1,  @I_cUserID,  @ccheckbkid,  0.00,  @I_cUserDate,  0,  @sDefaultDate,  0,  2  from  PM10300  where  PM10300.BCHSOURC + PM10300.BACHNUMB  NOT IN  (select BCHSOURC + BACHNUMB from SY00500)  and  PM10300.BCHSOURC = @XPM_Cchecks   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName2,  @I_cSearchString1,  11506,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    update  SY00500  set  BCHTOTAL = ( select sum(PM10300.CHEKTOTL)  from  PM10300  where   SY00500.BACHNUMB = PM10300.BACHNUMB  and   SY00500.BCHSOURC = PM10300.BCHSOURC ),   NUMOFTRX = ( select count(PM10300.BACHNUMB)  from  PM10300  where   SY00500.BACHNUMB = PM10300.BACHNUMB  and   SY00500.BCHSOURC = PM10300.BCHSOURC )   from  SY00500,  PM10300  where  SY00500.BACHNUMB = PM10300.BACHNUMB  and   SY00500.BCHSOURC = PM10300.BCHSOURC  end   return(@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[pmCLPaymentWORK] TO [DYNGRP]
GO
