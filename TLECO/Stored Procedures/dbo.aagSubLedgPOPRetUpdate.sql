SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[aagSubLedgPOPRetUpdate] @iPOPRetHdrID INT, @iPOPPOHdrID INT, @I_nDECPLfunCUR int = 0, @oStatus INT OUT AS BEGIN   SET NOCOUNT ON  DECLARE @NoteIndex                        INT  DECLARE @aaSubLedgerHdrID           INT  DECLARE     @aaSubLedgerDistID            INT  DECLARE @DEBITAMT                   NUMERIC(19,5)  DECLARE @CRDTAMNT                   NUMERIC(19,5)  DECLARE @ORDBTAMT                   NUMERIC(19,5)  DECLARE @ORCRDAMT                   NUMERIC(19,5)  DECLARE @ActIndx                    INT  DECLARE @DistType                   INT  DECLARE @RetLine_PONumbr            VARCHAR(20)  DECLARE @RetLine_RecptNumbr         VARCHAR(20)  DECLARE @RetLine_RecptLine          INT  DECLARE @RetLine_ValMethod         SMALLINT  DECLARE @RetLine_UnitCost           NUMERIC(19,5)  DECLARE @RetLine_OrigUnitCost    NUMERIC(19,5)  DECLARE @RetLine_ExtCost            NUMERIC(19,5)  DECLARE @RetLine_OrigExtCost     NUMERIC(19,5)  DECLARE @RetLine_PurVarIdx          INT  DECLARE @RetLine_QtyReturned  NUMERIC(19,5)  DECLARE @RecptLine_Qty    NUMERIC(19,5)  DECLARE @RetLine_StdCost            NUMERIC(19,5)  DECLARE @RetLine_OrigStdCost  NUMERIC(19,5)  DECLARE @RetLine_InvActIndex  INT  DECLARE @ActualOrigExtCost          NUMERIC(19,5)   DECLARE @ActualAssignPercent        NUMERIC(19,5)  DECLARE @AccountAmnt                NUMERIC(19,5)  DECLARE @OrigAccountAmnt            NUMERIC(19,5)  DECLARE @RetLine_aaSubLedgHdrID  INT  DECLARE @RetLine_aaSubLedgDistID INT  DECLARE @TotExtdCost                NUMERIC(19,5)  DECLARE @OrigTotExtCost          NUMERIC(19,5)  DECLARE @AssignDEBITAMT   NUMERIC(19,5)  DECLARE @AssignCRDTAMNT   NUMERIC(19,5)  DECLARE @AssignORDBTAMT   NUMERIC(19,5)  DECLARE @AssignORCRDAMT   NUMERIC(19,5)  DECLARE @AssignDEBITAMTTemp   NUMERIC(19,5)  DECLARE @AssignCRDTAMNTTemp   NUMERIC(19,5)  DECLARE @AssignORDBTAMTTemp   NUMERIC(19,5)  DECLARE @AssignORCRDAMTTemp  NUMERIC(19,5)  DECLARE @AssignPercent NUMERIC(19,5)  DECLARE @TotAssignPercent NUMERIC(19,5)  DECLARE @TotAssignAmnt NUMERIC(19,5)  DECLARE @aaRecvSubLedgAssignID INT  DECLARE @aaNextSubLedgAssignID INT  DECLARE @TempVarianceCost NUMERIC(19,5)   DECLARE CURASSIGNUPDATE CURSOR STATIC FOR  SELECT [aaSubLedgerHdrID], [aaSubLedgerDistID],[ACTINDX],[DISTTYPE],[DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT] FROM AAG20001  WHERE aaSubLedgerHdrID = @iPOPRetHdrID AND aaBrowseType in (1,2) AND ACTINDX !=0  ORDER BY [aaSubLedgerHdrID], [aaSubLedgerDistID]   OPEN CURASSIGNUPDATE  FETCH NEXT FROM CURASSIGNUPDATE INTO @aaSubLedgerHdrID, @aaSubLedgerDistID, @ActIndx, @DistType, @DEBITAMT, @CRDTAMNT, @ORDBTAMT, @ORCRDAMT  WHILE @@FETCH_STATUS = 0  BEGIN  SELECT @TotExtdCost=SUM(EXTDCOST),@OrigTotExtCost=SUM(OREXTCST) FROM POP10310   WHERE POPRCTNM =(SELECT DOCNUMBR FROM AAG20000 WHERE aaSubLedgerHdrID=@iPOPRetHdrID)  DELETE FROM AAG20002 WHERE aaSubLedgerHdrID = @iPOPRetHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID   DELETE FROM AAG20003 WHERE aaSubLedgerHdrID = @iPOPRetHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID   DECLARE CURPORETURNLINE CURSOR STATIC FOR  SELECT PONUMBER,RCPTRETNUM,RCPTRETLNNUM,VCTNMTHD,UNITCOST,ORUNTCST,EXTDCOST,OREXTCST,INVINDX,PURPVIDX FROM POP10310   WHERE POPRCTNM=(SELECT DOCNUMBR FROM AAG20000 WHERE aaSubLedgerHdrID=@aaSubLedgerHdrID) ORDER BY RCPTLNNM   OPEN CURPORETURNLINE  FETCH NEXT FROM CURPORETURNLINE INTO @RetLine_PONumbr,@RetLine_RecptNumbr,@RetLine_RecptLine,@RetLine_ValMethod,@RetLine_UnitCost,@RetLine_OrigUnitCost,@RetLine_ExtCost,@RetLine_OrigExtCost,@RetLine_InvActIndex,@RetLine_PurVarIdx   WHILE @@FETCH_STATUS = 0  BEGIN  SET @RetLine_aaSubLedgHdrID =0   IF @DistType != 1 AND (SELECT COUNT(*) FROM POP10600 WHERE POPRCTNM = @RetLine_RecptNumbr) > 0   SELECT @RetLine_aaSubLedgHdrID=ISNULL(aaSubLedgerHdrID,0),@RetLine_aaSubLedgDistID=ISNULL(aaSubLedgerDistID,0) FROM AAG20001  WHERE aaSubLedgerHdrID=(SELECT aaSubLedgerHdrID FROM AAG20000 WHERE DOCNUMBR = (SELECT TOP 1 POPIVCNO FROM POP10600 WHERE POPRCTNM = @RetLine_RecptNumbr))   AND ACTINDX = @ActIndx AND aaBrowseType in (1,2)   ELSE   SELECT @RetLine_aaSubLedgHdrID=ISNULL(aaSubLedgerHdrID,0),@RetLine_aaSubLedgDistID=ISNULL(aaSubLedgerDistID,0) FROM AAG20001  WHERE aaSubLedgerHdrID=(SELECT aaSubLedgerHdrID FROM AAG20000 WHERE DOCNUMBR = @RetLine_RecptNumbr)   AND ACTINDX = @ActIndx AND aaBrowseType in (1,2)  IF @RetLine_aaSubLedgHdrID = 0  BEGIN  SET @TotExtdCost = @TotExtdCost - @RetLine_ExtCost  SET @OrigTotExtCost = @OrigTotExtCost - @RetLine_OrigExtCost  FETCH NEXT FROM CURPORETURNLINE INTO @RetLine_PONumbr,@RetLine_RecptNumbr,@RetLine_RecptLine,@RetLine_ValMethod,@RetLine_UnitCost,@RetLine_OrigUnitCost,@RetLine_ExtCost,@RetLine_OrigExtCost,@RetLine_InvActIndex,@RetLine_PurVarIdx   CONTINUE  END  SET @ActualOrigExtCost = 0  SET @TempVarianceCost  = 0  SET @RetLine_QtyReturned = @RetLine_OrigExtCost/@RetLine_OrigUnitCost    SELECT TOP 1 @RetLine_OrigStdCost =   (CASE WHEN (OSTDCOST = @RetLine_OrigUnitCost AND @RetLine_InvActIndex != @ActIndx) THEN ORCPTCOST ELSE OSTDCOST END)  ,@RecptLine_Qty = (CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END)  FROM POP10500   WHERE PONUMBER=@RetLine_PONumbr AND POPRCTNM= @RetLine_RecptNumbr AND RCPTLNNM=@RetLine_RecptLine   SET @RetLine_StdCost = ROUND((@RetLine_UnitCost/@RetLine_OrigUnitCost)* @RetLine_OrigStdCost,@I_nDECPLfunCUR)   IF @DistType = 1   BEGIN  IF (@RetLine_ValMethod = 4 or @RetLine_ValMethod = 5)  BEGIN  IF @RetLine_InvActIndex = @ActIndx  BEGIN  SET @RetLine_ExtCost =  ROUND(@RetLine_QtyReturned * @RetLine_StdCost,@I_nDECPLfunCUR)  SET @RetLine_OrigExtCost = @RetLine_QtyReturned * @RetLine_OrigStdCost  END  ELSE  BEGIN  SET @RetLine_ExtCost =  ABS(ROUND(@RetLine_QtyReturned * @RetLine_StdCost,@I_nDECPLfunCUR)- @RetLine_ExtCost)  SET @RetLine_OrigExtCost = ABS((@RetLine_QtyReturned * @RetLine_OrigStdCost)- @RetLine_OrigExtCost)  SET @TempVarianceCost = ROUND(@RecptLine_Qty*@RetLine_OrigStdCost,@I_nDECPLfunCUR)  END  END  ELSE IF @RetLine_InvActIndex != @ActIndx  BEGIN  FETCH NEXT FROM CURPORETURNLINE INTO @RetLine_PONumbr,@RetLine_RecptNumbr,@RetLine_RecptLine,@RetLine_ValMethod,@RetLine_UnitCost,@RetLine_OrigUnitCost,@RetLine_ExtCost,@RetLine_OrigExtCost,@RetLine_InvActIndex,@RetLine_PurVarIdx   CONTINUE  END   SELECT  @ActualOrigExtCost = ABS(ISNULL(SUM((CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END)*CASE WHEN UPPVIDX >0 THEN OSTDCOST ELSE ORCPTCOST END),@TempVarianceCost)-@TempVarianceCost) FROM POP10500   WHERE POPRCTNM = @RetLine_RecptNumbr AND INVINDX =@RetLine_InvActIndex AND RCPTLNNM = @RetLine_RecptLine  SELECT @ActualAssignPercent = @ActualOrigExtCost/(SELECT  ISNULL(SUM((CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END)*CASE WHEN UPPVIDX >0 THEN OSTDCOST ELSE ORCPTCOST END),1) FROM POP10500   WHERE POPRCTNM = @RetLine_RecptNumbr AND INVINDX =@RetLine_InvActIndex)  SET @ActualAssignPercent = ROUND(@ActualAssignPercent*100,@I_nDECPLfunCUR) * 100    SELECT * INTO ##AAG20002Temp  FROM (SELECT A.*,(SELECT SUM(B.ORDBTAMT+B.ORCRDAMT)FROM AAG20002 B   WHERE B.aaSubLedgerHdrID =A.aaSubLedgerHdrID and B.aaSubLedgerDistID =A.aaSubLedgerDistID and B.aaSubLedgerAssignID <=A.aaSubLedgerAssignID) as RUNSUM FROM AAG20002 A   WHERE A.aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  A.aaSubLedgerDistID = @RetLine_aaSubLedgDistID) C  WHERE C.RUNSUM > (SELECT ABS(ISNULL(SUM((CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END) * (CASE WHEN UPPVIDX >0 THEN OSTDCOST ELSE ORCPTCOST END)),0)-  CASE WHEN @TempVarianceCost>0 THEN ISNULL(SUM((CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END) * (CASE WHEN UPPVIDX >0 THEN ORCPTCOST ELSE OSTDCOST END)),0) ELSE 0 END) FROM POP10500   WHERE POPRCTNM = @RetLine_RecptNumbr AND INVINDX =@RetLine_InvActIndex AND RCPTLNNM < @RetLine_RecptLine) AND  C.RUNSUM <= (SELECT ABS(ISNULL(SUM((CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END)* CASE WHEN UPPVIDX >0 THEN OSTDCOST ELSE ORCPTCOST END),0) -   CASE WHEN @TempVarianceCost>0 THEN ISNULL(SUM((CASE WHEN POPTYPE = 1 THEN QTYSHPPD ELSE QTYINVCD END) * (CASE WHEN UPPVIDX >0 THEN ORCPTCOST ELSE OSTDCOST END)),0) ELSE 0 END)FROM POP10500   WHERE POPRCTNM = @RetLine_RecptNumbr AND INVINDX =@RetLine_InvActIndex AND RCPTLNNM <= @RetLine_RecptLine) ORDER BY  aaSubLedgerAssignID   IF EXISTS(SELECT * FROM ##AAG20002Temp) AND ((SELECT SUM(ORDBTAMT+ORCRDAMT) FROM ##AAG20002Temp)=@ActualOrigExtCost  OR (SELECT SUM(aaAssignedPercent) FROM ##AAG20002Temp)=@ActualAssignPercent)  BEGIN  SELECT @AccountAmnt=SUM(DEBITAMT+CRDTAMNT),@OrigAccountAmnt=SUM(ORDBTAMT+ORCRDAMT) FROM ##AAG20002Temp  DECLARE CUR_RECVDIST CURSOR FAST_FORWARD FOR  SELECT aaSubLedgerAssignID,DEBITAMT,CRDTAMNT,ORDBTAMT,ORCRDAMT  FROM ##AAG20002Temp   END  ELSE  BEGIN  SELECT @AccountAmnt=SUM(DEBITAMT+CRDTAMNT),@OrigAccountAmnt=SUM(ORDBTAMT+ORCRDAMT) FROM AAG20002   WHERE aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  aaSubLedgerDistID = @RetLine_aaSubLedgDistID  DECLARE CUR_RECVDIST CURSOR FAST_FORWARD FOR  SELECT aaSubLedgerAssignID,DEBITAMT,CRDTAMNT,ORDBTAMT,ORCRDAMT FROM AAG20002   WHERE aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  aaSubLedgerDistID = @RetLine_aaSubLedgDistID   END   END  ELSE  BEGIN  SELECT @AccountAmnt=SUM(DEBITAMT+CRDTAMNT),@OrigAccountAmnt=SUM(ORDBTAMT+ORCRDAMT) FROM AAG20002   WHERE aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  aaSubLedgerDistID = @RetLine_aaSubLedgDistID  DECLARE CUR_RECVDIST CURSOR FAST_FORWARD FOR  SELECT aaSubLedgerAssignID,DEBITAMT,CRDTAMNT,ORDBTAMT,ORCRDAMT FROM AAG20002   WHERE aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  aaSubLedgerDistID = @RetLine_aaSubLedgDistID  SELECT @RetLine_ExtCost     =  (@DEBITAMT+@CRDTAMNT) * (@RetLine_ExtCost/@TotExtdCost)  SELECT @RetLine_OrigExtCost =  (@ORDBTAMT+@ORCRDAMT) * (@RetLine_OrigExtCost/@OrigTotExtCost)  END  OPEN CUR_RECVDIST  FETCH NEXT FROM CUR_RECVDIST INTO  @aaRecvSubLedgAssignID,@AssignDEBITAMTTemp,@AssignCRDTAMNTTemp,@AssignORDBTAMTTemp,@AssignORCRDAMTTemp  WHILE @@FETCH_STATUS =0  BEGIN  SELECT @AssignDEBITAMT= @RetLine_ExtCost * (@AssignCRDTAMNTTemp/@AccountAmnt)  SELECT @AssignCRDTAMNT= @RetLine_ExtCost * (@AssignDEBITAMTTemp/@AccountAmnt)  SELECT @AssignORDBTAMT= @RetLine_OrigExtCost * (@AssignORCRDAMTTemp/@OrigAccountAmnt)  SELECT @AssignORCRDAMT= @RetLine_OrigExtCost * (@AssignORDBTAMTTemp/@OrigAccountAmnt)  SELECT @AssignPercent = (@AssignORDBTAMT+@AssignORCRDAMT)/(@ORDBTAMT+@ORCRDAMT)  SELECT @AssignPercent = ROUND(@AssignPercent*100,@I_nDECPLfunCUR) * 100    SELECT @aaNextSubLedgAssignID=ISNULL(MAX(aaSubLedgerAssignID),0)+1 FROM AAG20002 WHERE aaSubLedgerHdrID=@aaSubLedgerHdrID AND aaSubLedgerDistID=@aaSubLedgerDistID   INSERT INTO AAG20002 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID])   SELECT @aaSubLedgerHdrID,@aaSubLedgerDistID,@aaNextSubLedgAssignID,@AssignDEBITAMT,@AssignCRDTAMNT,@AssignORDBTAMT,@AssignORCRDAMT,@AssignPercent,[DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID] FROM AAG20002  WHERE  aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  aaSubLedgerDistID = @RetLine_aaSubLedgDistID AND aaSubLedgerAssignID =@aaRecvSubLedgAssignID   INSERT INTO AAG20003 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [aaTrxDimID], [aaTrxCodeID], [aaCodeErrors])  SELECT @aaSubLedgerHdrID,@aaSubLedgerDistID,@aaNextSubLedgAssignID, [aaTrxDimID], [aaTrxCodeID], [aaCodeErrors]  FROM AAG20003 WHERE  aaSubLedgerHdrID = @RetLine_aaSubLedgHdrID  AND  aaSubLedgerDistID = @RetLine_aaSubLedgDistID AND aaSubLedgerAssignID =@aaRecvSubLedgAssignID    FETCH NEXT FROM CUR_RECVDIST INTO  @aaRecvSubLedgAssignID,@AssignDEBITAMTTemp,@AssignCRDTAMNTTemp,@AssignORDBTAMTTemp,@AssignORCRDAMTTemp   END  if exists(select name from tempdb..sysobjects where name = '##AAG20002Temp' and type = 'U')  DROP TABLE ##AAG20002Temp  CLOSE CUR_RECVDIST  DEALLOCATE CUR_RECVDIST  FETCH NEXT FROM CURPORETURNLINE INTO @RetLine_PONumbr,@RetLine_RecptNumbr,@RetLine_RecptLine,@RetLine_ValMethod,@RetLine_UnitCost,@RetLine_OrigUnitCost,@RetLine_ExtCost,@RetLine_OrigExtCost,@RetLine_InvActIndex,@RetLine_PurVarIdx   END   CLOSE CURPORETURNLINE  DEALLOCATE CURPORETURNLINE   SELECT @TotAssignPercent = SUM([aaAssignedPercent]) FROM AAG20002 WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID  SELECT @TotAssignAmnt = SUM([ORDBTAMT]+[ORCRDAMT]) FROM AAG20002 WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID   IF @TotAssignAmnt = @ORDBTAMT+@ORCRDAMT AND @TotAssignPercent != 10000   UPDATE AAG20002 SET aaAssignedPercent = aaAssignedPercent + (10000-@TotAssignPercent)  WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID AND  aaSubLedgerAssignID = (SELECT MAX(aaSubLedgerAssignID) FROM AAG20002 WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID)   IF @TotAssignAmnt != @ORDBTAMT AND @TotAssignPercent = 10000 AND @ORDBTAMT > 0 AND @CRDTAMNT =0  UPDATE AAG20002 SET [ORDBTAMT] = [ORDBTAMT] + (@ORDBTAMT-@TotAssignAmnt)  WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID AND  aaSubLedgerAssignID = (SELECT MAX(aaSubLedgerAssignID) FROM AAG20002 WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID)   IF @TotAssignAmnt != @ORCRDAMT AND @TotAssignPercent = 10000 AND @ORCRDAMT > 0 AND @ORDBTAMT =0  UPDATE AAG20002 SET [ORCRDAMT] = [ORCRDAMT] + (@ORCRDAMT-@TotAssignAmnt)  WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID AND  aaSubLedgerAssignID = (SELECT MAX(aaSubLedgerAssignID) FROM AAG20002 WHERE aaSubLedgerHdrID =@aaSubLedgerHdrID AND aaSubLedgerDistID = @aaSubLedgerDistID)  FETCH NEXT FROM CURASSIGNUPDATE INTO @aaSubLedgerHdrID, @aaSubLedgerDistID, @ActIndx, @DistType, @DEBITAMT, @CRDTAMNT, @ORDBTAMT, @ORCRDAMT  END  CLOSE CURASSIGNUPDATE  DEALLOCATE CURASSIGNUPDATE  SET NOCOUNT OFF END    
GO
GRANT EXECUTE ON  [dbo].[aagSubLedgPOPRetUpdate] TO [DYNGRP]
GO
