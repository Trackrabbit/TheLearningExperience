SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[SVC_Calc_Escalation_Sched2] (  @CallNumber char(11),  @WaitTime int,  @TIMEZONEDIFF numeric(17,5),  @WhenToSchedule datetime output ) as declare @ContractNumber char(11),  @ContractLine numeric(19,5),  @Now datetime,  @CustNumber char(15),  @Address varchar(15),  @OfficeID char(11),  @TechID char(11),  @CONTRACTTESTDATE datetime,  @OFFICETIMEZONEDIFF numeric(17,5),  @TIMEZONE char(3),  @CallTimeZoneValue smallint,  @CallTimeZoneMinute smallint,  @TimeZoneValue smallint,  @TimeZoneMinute smallint,  @DayAvail smallint,  @CheckStartTime datetime,  @CheckEndTime datetime,  @StartTime datetime,  @Skips integer,  @TimeToAllocate integer,   @TimeNeedToAdd integer,  @vEndDateTime datetime,  @OffsetUsed numeric(17,5),  @HStartDate datetime,  @HStartTime datetime,  @HEndDate datetime,  @HEndTime datetime,  @HStartDateTime datetime,  @HEndDateTime datetime,  @FromTime datetime,  @ToTime datetime,  @TimeOff integer,  @OnContract tinyint,  @ContFlag tinyint,  @msg varchar(255),  @Done tinyint,  @DayLoop smallint,  @MinDate datetime  exec smGetMinDate  @MinDate output  select  @TimeZoneValue = @TIMEZONEDIFF,  @TimeZoneMinute = 60 *(@TIMEZONEDIFF - @TimeZoneValue),  @CallTimeZoneValue = @TIMEZONEDIFF,  @CallTimeZoneMinute = 60 *(@TIMEZONEDIFF - @CallTimeZoneValue)  select @Now = DATEADD(hh,@TimeZoneValue,GETDATE()),  @Now = DATEADD(ss,@TimeZoneMinute * 60, @Now)  select @ContractNumber = CONTNBR,   @ContractLine = SVC_Contract_Line_SEQ,   @CustNumber = CUSTNMBR,   @Address = ADRSCODE,   @OfficeID = OFFID,  @TechID = TECHID  from SVC00200   where SRVRECTYPE = 2 and CALLNBR = @CallNumber  if @ContractNumber =''  select @OnContract = 0 else  select @OnContract = 1  select  @Skips = 0,   @Done = 0,   @StartTime = @Now,   @DayLoop =0,   @OffsetUsed = @TIMEZONEDIFF  select @TimeToAllocate = @WaitTime  while @DayLoop < 10 and @Done = 0 begin  while @TimeToAllocate > 0 and @Skips < 10 and @OnContract = 1  begin  exec SVC_Get_Contract_Work_Hours   @ContractNumber,  @ContractLine,  @StartTime,   1,  @DayAvail OUTPUT,  @CheckStartTime OUTPUT,  @CheckEndTime OUTPUT   if @DayAvail = 0 or (@StartTime >= @CheckEndTime)  begin  select @Skips = @Skips + 1   exec SVC_Inc_Time_To_Midnight   @StartTime Output  continue  end  else  begin  if (@StartTime is not null and @StartTime <> @MinDate)  begin  select  @StartTime = DATEADD(hh, (-1) * @CallTimeZoneValue, @StartTime),  @StartTime = DATEADD(ss, (-1) * @CallTimeZoneMinute * 60, @StartTime)  end   if @StartTime < @CheckStartTime   select @StartTime = @CheckStartTime   exec SVC_Allocate_Time   @StartTime,   @CheckEndTime,   @TimeToAllocate output,   @vEndDateTime output   select @StartTime = @vEndDateTime  end  end   if rtrim(@CustNumber) <> ''  begin   if exists(select 1 from SVC00950 where CUSTNMBR = @CustNumber and ADRSCODE= @Address  and WORKDYS_1 = 0 and WORKDYS_2 = 0 and WORKDYS_3 = 0 and WORKDYS_4 = 0 and WORKDYS_5 = 0 and WORKDYS_6 = 0 and WORKDYS_7 = 0)  begin  return(99)  end   while (@TimeToAllocate > 0 or not(@WaitTime <> 0)) and @Skips < 10  begin  exec SVC_Get_Customer_Work_Hours   @CustNumber,  @Address,  @StartTime,   @DayAvail OUTPUT,  @CheckStartTime OUTPUT,  @CheckEndTime OUTPUT   if @DayAvail = 0 or (@StartTime >= @CheckEndTime)  begin  select @Skips = @Skips + 1  exec SVC_Inc_Time_To_Midnight   @StartTime Output   if @OfficeID = ''  select @DayLoop = @DayLoop + 1  continue  end  else  begin  select  @StartTime = DATEADD(hh, (-1) * @CallTimeZoneValue, @StartTime),  @StartTime = DATEADD(ss, (-1) * @CallTimeZoneMinute * 60, @StartTime)   if @StartTime < @CheckStartTime   select @StartTime = @CheckStartTime   exec SVC_Allocate_Time   @StartTime,   @CheckEndTime,   @TimeToAllocate output,   @vEndDateTime output   exec SVC_Inc_Time_To_Midnight   @StartTime Output   select @Skips = 0  end  if not (@WaitTime <> 0) and @TimeToAllocate <= 0  break  end  select @StartTime = @vEndDateTime  end   if rtrim(@OfficeID) <> ''   begin   select @TIMEZONE = TIMEZONE from SVC00902 where OFFID = @OfficeID  if @TIMEZONE <> ''  begin  select  @TimeZoneValue = TIMEZONEVALUE,   @TimeZoneMinute = TimeZoneMinute   from SVC00900   where TIMEZONE = @TIMEZONE  if @TimeZoneValue > 0   select @OFFICETIMEZONEDIFF = @TimeZoneValue + @TimeZoneMinute * 60.0  else  select @OFFICETIMEZONEDIFF = @TimeZoneValue - @TimeZoneMinute * 60.0  if @OFFICETIMEZONEDIFF is null  select @OFFICETIMEZONEDIFF = 0  if @TIMEZONEDIFF > @OFFICETIMEZONEDIFF  select @OFFICETIMEZONEDIFF = @OFFICETIMEZONEDIFF - @TIMEZONEDIFF  else  select @OFFICETIMEZONEDIFF = 0  select  @TimeZoneValue = @OFFICETIMEZONEDIFF,  @TimeZoneMinute = 60 *(@OFFICETIMEZONEDIFF - @TimeZoneValue),  @vEndDateTime = isnull(@vEndDateTime, GETDATE())   select  @Now = DATEADD(hh,@TimeZoneValue,GETDATE()),  @Now = DATEADD(ss,@TimeZoneMinute * 60,@Now)   exec SVC_Get_Office_Work_Hours   @OfficeID,  @StartTime,  @DayAvail OUTPUT,  @CheckStartTime OUTPUT,  @CheckEndTime OUTPUT   if @DayAvail = 0 or (@StartTime >= @CheckEndTime)  begin  exec SVC_Inc_Time_To_Midnight   @StartTime Output  select @DayLoop = @DayLoop + 1  continue  end  else  begin  if (@StartTime is not null and @StartTime <> @MinDate)  begin  if (@TimeZoneValue > @CallTimeZoneValue)  or (@TimeZoneValue = @CallTimeZoneValue and @TimeZoneMinute > @CallTimeZoneMinute)  begin  select  @StartTime = DATEADD(hh, (-1) * @TimeZoneValue, @StartTime),  @StartTime = DATEADD(ss, (-1) * @TimeZoneMinute * 60, @StartTime)  end  end   if @StartTime < @CheckStartTime   select @StartTime = @CheckStartTime    select  @FromTime = @StartTime,   @TimeNeedToAdd =  @TimeToAllocate,   @ToTime = dateadd(minute,@TimeToAllocate,@StartTime)  if @ToTime < @CheckEndTime   select @ToTime = @CheckEndTime  declare HolidayCursor cursor   for   select STRTDATE, STRTTIME, ENDDATE, ENDTME, CONTFLAG from SVC00903 where OFFID = @OfficeID and Service_Flag = 0  open HolidayCursor  fetch next from HolidayCursor into @HStartDate,@HStartTime,@HEndDate,@HEndTime,@ContFlag  while @@FETCH_STATUS = 0  begin  exec SVC_util_combine_date_time   @HStartDate,  @HStartTime,  @HStartDateTime output  exec SVC_util_combine_date_time   @HEndDate,  @HEndTime,  @HEndDateTime output  if @HStartDateTime < @FromTime   select @HStartDateTime = @FromTime  if @HEndDateTime > @ToTime   select @HEndDateTime = @ToTime  select @TimeOff = datediff(minute,@HStartDateTime,@HEndDateTime)  if @TimeOff > 0 and (@ContFlag = 0 or @OnContract = 0)   select @TimeToAllocate=@TimeNeedToAdd+@TimeOff  fetch next from HolidayCursor into @HStartDate,@HStartTime,@HEndDate,@HEndTime,@ContFlag  end  close HolidayCursor  deallocate HolidayCursor  exec SVC_Allocate_Time   @StartTime,   @CheckEndTime,   @TimeToAllocate output,   @vEndDateTime output  if @TimeToAllocate > 0   begin  exec SVC_Inc_Time_To_Midnight   @StartTime Output  select @vEndDateTime = @StartTime  continue  end  else   begin  select @StartTime = @vEndDateTime  if @TechID > ''   begin  select @vEndDateTime = isnull(@vEndDateTime, GETDATE())     exec SVC_Get_Tech_Work_Hours   @TechID,  @StartTime,   @DayAvail OUTPUT,  @CheckStartTime OUTPUT,  @CheckEndTime OUTPUT   if @DayAvail = 0 or (@StartTime >= @CheckEndTime)  begin  exec SVC_Inc_Time_To_Midnight   @StartTime Output  select @vEndDateTime = @StartTime  continue  end  else  begin  if (@StartTime is not null and @StartTime <> @MinDate)  begin  select  @StartTime = DATEADD(hh, (-1) * @TimeZoneValue, @StartTime),  @StartTime = DATEADD(ss, (-1) * @TimeZoneMinute * 60, @StartTime)  end  if @StartTime < @CheckStartTime   select @StartTime = @CheckStartTime   exec SVC_Allocate_Time @StartTime,   @CheckEndTime,   @TimeToAllocate output,   @vEndDateTime output  if @TimeToAllocate = 0  select @Done = 1  else   exec SVC_Inc_Time_To_Midnight   @StartTime Output  end  end  else  begin  if @TimeToAllocate = 0  select @Done = 1  end  end  end  end  else if @TimeToAllocate = 0  select @Done = 1  end  else if @TimeToAllocate = 0  select @Done = 1  select @DayLoop = @DayLoop + 1 end  select @WhenToSchedule = isnull(@vEndDateTime , getdate())  if @TimeToAllocate > 0 begin  select @WhenToSchedule = dateadd(minute,@WaitTime,@WhenToSchedule) end  select @WhenToSchedule = DATEADD(hh, -1 * @OffsetUsed, @WhenToSchedule)  return   
GO
GRANT EXECUTE ON  [dbo].[SVC_Calc_Escalation_Sched2] TO [DYNGRP]
GO
