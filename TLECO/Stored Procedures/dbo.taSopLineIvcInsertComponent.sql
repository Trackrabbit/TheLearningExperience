SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopLineIvcInsertComponent]  @I_vSOPTYPE smallint,     @I_vSOPNUMBE char(21),      @I_vUSERDATE datetime = '',    @I_vLOCNCODE char(10) = '',    @I_vLNITMSEQ int,      @I_vITEMNMBR char(30),     @I_vAutoAssignBin smallint = 1,    @I_vITEMDESC char(100) = '',   @I_vQUANTITY numeric(19,5),    @I_vQTYTBAOR numeric(19,5) = 0,   @I_vQTYCANCE numeric(19,5) = 0,   @I_vQTYFULFI numeric(19,5) = null,  @I_vQUOTEQTYTOINV numeric(19,5) = 0, @I_vQTYONHND numeric(19,5) = 0,   @I_vQTYRTRND numeric(19,5) = 0,   @I_vQTYINUSE numeric(19,5) = 0,   @I_vQTYINSVC numeric(19,5) = 0,   @I_vQTYDMGED numeric(19,5) = 0,   @I_vCUSTNMBR char(15),      @I_vDOCID char(15) = '',    @I_vUNITCOST numeric (19,5) = null,  @I_vNONINVEN smallint = 0,    @I_vAUTOALLOCATESERIAL int = 0,   @I_vAUTOALLOCATELOT int = 0,   @I_vCMPNTSEQ int = 0,     @I_vCMPITUOM char(9) = '',    @I_vCURNCYID char(15) = '',    @I_vUpdateIfExists smallint = 0,  @I_vRecreateDist smallint = 0,   @I_vRequesterTrx smallint = 0,   @I_vQtyShrtOpt smallint = 2,   @I_vRECREATECOMM smallint = 0,   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',   @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output, @oErrString char(255) output  with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @tCURNCYID char(15),  @RNDGAMNT numeric(19,5),  @ROUNDTO smallint,  @ROUNDHOW smallint,  @LOFSGMNTALL int,  @NEW_ACCNT_STRING varchar(100),  @MAXSEG int,  @ACTINDX int,  @LOFSGMNTEND int,  @LOFSGMNT int,  @ACSEGSEP char(1),  @ACSGFLOC smallint,  @ACCNT_STRING char(100),  @Location_Segment char(67),  @ITMTRKOP smallint,  @DECPLQTY smallint,  @DECPLCUR smallint,  @ITEMTYPE int,  @EXTQTYAL numeric(19,5),  @PriceGroup char(11),  @QTYDMGED numeric(19,5),  @ATYALLOC numeric(19,5),  @INVINDX int,  @CSLSINDX int,  @SLSINDX int,  @MKDNINDX int,  @RTNSINDX int,  @INUSINDX int,  @INSRINDX int,  @DMGDINDX int,  @RMSLSACC int,  @RMCOSACC int,  @UNITCOST numeric(19,5),  @KITUOFM char(8),  @QTYBSUOM numeric(19,5),  @KITQTYBSUOM numeric(19,5),  @UOMSCHDL char(10),  @KITUOMSCHDL char(10),  @KITUOFMBASE char(8),  @ITEMDESC char(100),  @dtDEFAULT datetime,  @MSTRNUMB int,  @BCHSOURC char(15),  @DOCID char(15),  @USDOCID1 char(15),  @USDOCID2 char(15),  @DOCAMNT numeric(19,5),  @iStatus int,  @iError int,  @O_oErrorState int,  @iUpdDstLine4ErrState int,  @iCustomStatePre int,  @iCustomErrStringPre char(255),  @iCustomStatePost int,  @iCustomErrStringPost char(255),  @USEACFRM smallint,  @ALLOCABY smallint,  @USPFULPR smallint,  @KITITEMNMBR char(30),  @iCustomState int,  @ALLOCATED numeric(19,5),  @KITITEMTYPE int,  @IVSLRNIX int,  @QTTYALLOC numeric(19,5),  @QTYAVL numeric(19,5),  @QTYTOBO numeric(19,5),  @LotsToAllocate numeric(19,5),  @serialstoallocate numeric(19,5),  @SERIALQUANTITY numeric(19,5),  @LOTQUANTITY numeric(19,5),  @LOTQTY numeric(19,5),  @SERIALQTY numeric(19,5),  @SOP10201COUNTSERIAL smallint,  @LineCount int,  @ENABLEMULTIBIN smallint,    @BinFulfillQty numeric(19,5),    @BinQtyAvail numeric(19,5),    @BIN char(15),      @BinQtyType smallint,     @taSopLineDeleteErrState int,  @taSopLineDeleteErrString char(255),  @EXTDCOST numeric(19,5),  @TOTALQTY numeric(19,5),  @KITEXTDCOST numeric(19,5),  @KITQUANTITY numeric(19,5),  @CURRNIDX smallint,  @CMPITQTY numeric(19,5),  @serialsallocated numeric(19,5),  @VCTNMTHD smallint,  @SERLTNUM char(20),  @QTYTYPE smallint,  @DTSEQNUM smallint,  @DATERECD datetime,  @iCustomErrString char(255),  @SOP10201COUNT smallint,  @DROPSHIP smallint,  @count int,  @ReqShipDate datetime,  @SOPHdrTbl char(18),  @DexRowID int,  @oExists int,  @OInsStatus int,  @mylock tinyint,  @DexLockErrorState int,  @currdate datetime,  @LOCNCODE char(10),  @ISMCTRX int,  @FUNCRIDX int,  @lock char(30),  @exists tinyint,  @hdrexists tinyint,  @cmpexists tinyint,   @DeleteType int,  @PRICMTHD smallint,  @CALCKITC tinyint,  @UOMPRICE numeric(19,5),  @UNITPRCE numeric(19,5),  @PRCLEVEL char(10),  @fieldupdate tinyint,  @XTNDPRCE numeric(19,5),  @KITDECPLCUR int,  @FUNLCURR char(15),  @ITEMFUNCTDEC int,  @KITITEMFUNCTDEC int,  @FUNDECPLCUR int,  @EDITDECPLCUR int,  @KITUNITCOST numeric(19,5),  @ORTDISAM numeric(19,5),  @TRDISPCT numeric(19,5),  @PYMTRMID char(20),  @DUEDATE datetime,  @DISCDATE datetime,  @DSCPCTAM numeric(19,5),   @SopHdrUpdateState int,  @SopHdrUpdateErrString char(255),  @CHGAMNT numeric(19,5),  @ISMCREG tinyint,  @SOP10201QTYONHND numeric(19,5),  @SOP10201QTYRTRND numeric(19,5),  @SOP10201QTYINUSE numeric(19,5),  @SOP10201QTYINSVC numeric(19,5),  @SOP10201QTYDMGED numeric(19,5),  @LOCNCODEPassed smallint,  @LOCNCODELINE char(10),  @PRSTADCD char(15),  @ADDRESS1 char(30),  @ADDRESS2 char(30),  @ADDRESS3 char(30),  @CNTCPRSN char(30),  @FAXNUMBR char(21),  @CITY char(30),  @STATE char(29),  @ZIPCODE char(10),  @COUNTRY char(20),  @PHNUMBR1 char(21),  @PHNUMBR2 char(21),  @PHNUMBR3 char(21),  @SHIPMTHD char(15),  @SALSTERR char(15),  @SLPRSNID char(15),  @UPSZONE char(3),  @TAXEXMT1 char(25),  @TAXEXMT2 char(25),  @TXRGNNUM char(25),  @KTACCTSR tinyint,  @KITIVCOGSIX int,  @STOP int,  @RECALCBTCHTOT int,  @QTYCANCE numeric(19,5),  @OLDKITXTNDPRCE numeric(19,5),  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select  @tCURNCYID = '',  @ROUNDTO = 0,  @ROUNDHOW = 0,  @RNDGAMNT = 0,  @O_iErrorState = 0,  @LOFSGMNTALL = 0,  @NEW_ACCNT_STRING = '',  @MAXSEG = 0,  @ACTINDX = 0,  @LOFSGMNTEND = 0,  @LOFSGMNT = 0,  @ACSEGSEP = '',  @ACSGFLOC = 0,  @ACCNT_STRING = '',  @Location_Segment = '',  @ITMTRKOP = 0,  @DECPLQTY = 0,  @DECPLCUR = 0,  @ITEMTYPE = 0,  @EXTQTYAL = 0,  @PriceGroup = '',  @INVINDX = 0,  @CSLSINDX = 0,  @SLSINDX = 0,  @MKDNINDX = 0,  @RTNSINDX = 0,  @INUSINDX = 0,  @INSRINDX = 0,  @DMGDINDX = 0,  @RMSLSACC = 0,  @RMCOSACC = 0,  @UNITCOST = 0,  @KITUOFM = '',  @QTYBSUOM = 1,  @KITQTYBSUOM = 0,  @UOMSCHDL = '',  @KITUOMSCHDL = '',  @KITUOFMBASE = '',  @ITEMDESC = '',  @dtDEFAULT = '',  @MSTRNUMB = 0,  @BCHSOURC = '',  @DOCID = '',  @USDOCID1 = '',  @USDOCID2 = '',  @DOCAMNT = 0,  @iStatus = 0,  @iError = 0,  @O_oErrorState = 0,  @iUpdDstLine4ErrState = 0,  @iCustomStatePre = 0,  @iCustomErrStringPre = '',  @iCustomStatePost = 0,  @iCustomErrStringPost = '',  @USEACFRM = 0,  @ALLOCABY = 0,  @USPFULPR = 0,  @KITITEMNMBR = '',  @iCustomState = 0,  @ALLOCATED = 0,  @KITITEMTYPE = 0,  @IVSLRNIX = 0,  @QTTYALLOC = 0,  @QTYAVL = 0,  @QTYTOBO = 0,  @LotsToAllocate = 0,  @serialstoallocate = 0,  @SERIALQUANTITY = 0,  @LOTQUANTITY = 0,  @LOTQTY = 0,  @SERIALQTY = 0,  @SOP10201COUNTSERIAL = 0,  @LineCount = 0,  @ENABLEMULTIBIN = 0,  @BinFulfillQty = 0,  @BinQtyAvail = 0,  @BIN = '',  @BinQtyType = 1,  @taSopLineDeleteErrState = 0,  @taSopLineDeleteErrString = '',  @EXTDCOST = 0,  @TOTALQTY = 0,  @KITEXTDCOST = 0,  @KITQUANTITY = 0,  @CURRNIDX = 0,  @CMPITQTY = 0,  @serialsallocated = 0,  @VCTNMTHD = 0,  @SERLTNUM = '',  @QTYTYPE = 1,  @DTSEQNUM = 0,  @DATERECD = '',  @iCustomErrString = '',  @SOP10201COUNT = 0,  @DROPSHIP = 0,  @count = 0,  @ReqShipDate = '',  @SOPHdrTbl = '',  @DexRowID = 0,  @oExists = 0,  @OInsStatus = 0,  @mylock = 0,  @DexLockErrorState = 0,  @currdate = convert(varchar(12),getdate()),  @LOCNCODE = '',  @ISMCTRX = 0,  @FUNCRIDX = 0,  @lock = '',  @exists = 0,  @hdrexists = 0,  @cmpexists = 0,  @DeleteType = 0,  @PRICMTHD = 0,  @CALCKITC = 0,  @UOMPRICE = 0,  @UNITPRCE = 0,  @PRCLEVEL = '',  @fieldupdate = 0,  @XTNDPRCE = 0,  @KITDECPLCUR = 0,  @FUNLCURR = '',  @ITEMFUNCTDEC = 0,  @KITITEMFUNCTDEC = 0,  @FUNDECPLCUR = 0,  @EDITDECPLCUR = 2,  @KITUNITCOST = 0,  @DSCPCTAM = 0,   @SopHdrUpdateState = 0,  @SopHdrUpdateErrString = '',  @CHGAMNT = 0,  @ISMCREG = 1,  @SOP10201QTYONHND = 0,  @SOP10201QTYRTRND = 0,  @SOP10201QTYINUSE = 0,  @SOP10201QTYINSVC = 0,  @SOP10201QTYDMGED = 0,  @LOCNCODEPassed = 1,  @LOCNCODELINE = '',  @PRSTADCD = '',  @ADDRESS1 = '',  @ADDRESS2 = '',  @ADDRESS3 = '',  @CNTCPRSN = '',  @FAXNUMBR = '',  @CITY = '',  @STATE = '',  @ZIPCODE = '',  @COUNTRY = '',  @PHNUMBR1 = '',  @PHNUMBR2 = '',  @PHNUMBR3 = '',  @SHIPMTHD = '',  @SALSTERR = '',  @SLPRSNID = '',  @UPSZONE = '',  @TAXEXMT1 = '',  @TAXEXMT2 = '',  @TXRGNNUM = '',  @KTACCTSR = 0,  @KITIVCOGSIX = 0,  @STOP = 0,  @RECALCBTCHTOT = 2,    @QTYCANCE = 0,  @OLDKITXTNDPRCE = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is null) begin  select @oErrString = '' end  exec @iStatus = taSopLineIvcInsertComponentPre  @I_vSOPTYPE output,  @I_vSOPNUMBE output,  @I_vUSERDATE output,  @I_vLOCNCODE output,  @I_vLNITMSEQ output,  @I_vITEMNMBR output,  @I_vAutoAssignBin output,  @I_vITEMDESC output,  @I_vQUANTITY output,  @I_vQTYTBAOR output,  @I_vQTYCANCE output,  @I_vQTYFULFI output,  @I_vQUOTEQTYTOINV output,  @I_vQTYONHND output,  @I_vQTYRTRND output,  @I_vQTYINUSE output,  @I_vQTYINSVC output,  @I_vQTYDMGED output,  @I_vCUSTNMBR output,  @I_vDOCID output,  @I_vUNITCOST output,  @I_vNONINVEN output,  @I_vAUTOALLOCATESERIAL output,  @I_vAUTOALLOCATELOT output,  @I_vCMPNTSEQ output,  @I_vCMPITUOM output,  @I_vCURNCYID output,  @I_vUpdateIfExists output,  @I_vRecreateDist output,  @I_vRequesterTrx output,  @I_vQtyShrtOpt output,  @I_vRECREATECOMM output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomStatePre output,  @oErrString = @iCustomErrStringPre output select @iError = @@error if ((@iStatus <> 0) or (@iCustomStatePre <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrStringPre  select @O_iErrorState = 3424    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if ( (@I_vSOPTYPE is null) or  (@I_vSOPNUMBE is null) or  (@I_vLOCNCODE is null) or  (@I_vLNITMSEQ is null) or  (@I_vITEMNMBR is null) or  (@I_vITEMDESC is null) or  (@I_vQUANTITY is null) or  (@I_vQTYTBAOR is null) or  (@I_vQTYCANCE is null) or  (@I_vQUOTEQTYTOINV is null) or  (@I_vQTYONHND is null) or  (@I_vQTYRTRND is null) or  (@I_vQTYINUSE is null) or  (@I_vQTYINSVC is null) or  (@I_vQTYDMGED is null) or  (@I_vCUSTNMBR is null) or  (@I_vDOCID is null) or  (@I_vNONINVEN is null) or  (@I_vAUTOALLOCATESERIAL is null) or  (@I_vAUTOALLOCATELOT is null) or  (@I_vCMPNTSEQ is null) or  (@I_vCMPITUOM is null) or  (@I_vCURNCYID is null) or  (@I_vUpdateIfExists is null) or  (@I_vRecreateDist is null) or  (@I_vRequesterTrx is null) or  (@I_vQtyShrtOpt is null)) begin  select @O_iErrorState = 191    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if ( (@I_vQTYTBAOR < 0) or  (@I_vQTYCANCE < 0) or  (@I_vQTYFULFI < 0) or  (@I_vQUOTEQTYTOINV < 0) or  (@I_vQTYONHND < 0) or  (@I_vQTYRTRND < 0) or  (@I_vQTYINUSE < 0) or  (@I_vQTYINSVC < 0) or  (@I_vQTYDMGED < 0) or  (@I_vUNITCOST < 0)) begin  select @O_iErrorState = 452    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @I_vSOPNUMBE = UPPER(@I_vSOPNUMBE),  @I_vLOCNCODE = UPPER(@I_vLOCNCODE),  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vCUSTNMBR = UPPER(@I_vCUSTNMBR),  @I_vDOCID = UPPER(@I_vDOCID),  @I_vCURNCYID = UPPER(@I_vCURNCYID)  if (not exists (select 1 from tempdb..sysobjects where id = (select object_id('tempdb..#eConnectCalledFromSopLine')))) begin  if (not exists(select 1 from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = 0))  begin  select @O_iErrorState = 193     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  else  begin   select @exists = 1  end end  if exists (select SOPNUMBE from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE) begin  select @hdrexists = 1 end  if ((@I_vSOPNUMBE = '') or (@I_vITEMNMBR = '') or (@I_vLNITMSEQ = 0) or (@I_vCUSTNMBR = '')) begin  select @O_iErrorState = 192     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE < 1) or (@I_vSOPTYPE > 6))  begin  select @O_iErrorState = 194     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSOPTYPE <> 3) and (@I_vQUANTITY < 0) begin  select @O_iErrorState = 7469     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vNONINVEN < 0) or (@I_vNONINVEN > 1)) begin  select @O_iErrorState = 3905     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vAUTOALLOCATESERIAL < 0) or (@I_vAUTOALLOCATESERIAL > 2)) begin  select @O_iErrorState = 3907     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vAUTOALLOCATELOT < 0) or (@I_vAUTOALLOCATELOT > 2)) begin  select @O_iErrorState = 3909     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vUpdateIfExists < 0) or (@I_vUpdateIfExists > 1)) begin  select @O_iErrorState = 4059     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRecreateDist < 0) or (@I_vRecreateDist > 1)) begin  select @O_iErrorState = 8129     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRequesterTrx < 0) or (@I_vRequesterTrx > 1)) begin  select @O_iErrorState = 6258     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vQtyShrtOpt not in (1,2,3,4,5,6)) begin  select @O_iErrorState = 6259     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vQtyShrtOpt in (1,3,4,5,6)) and (@I_vSOPTYPE = 3)) begin  select @O_iErrorState = 6261     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vRECREATECOMM not in (0,1)) begin  select @O_iErrorState = 12002     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vUpdateIfExists = 0 ) and (@I_vRECREATECOMM = 1 ) begin  select @O_iErrorState = 12008     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (not exists (select 1 from tempdb..sysobjects where id = (select object_id('tempdb..#eConnectCalledFromSopLine')))) begin  select @KITITEMNMBR = ITEMNMBR,  @ALLOCATED = ATYALLOC,  @CURRNIDX = CURRNIDX,  @DROPSHIP = DROPSHIP,  @ReqShipDate = ReqShipDate,  @PRCLEVEL = PRCLEVEL,  @LOCNCODELINE = LOCNCODE  from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = 0 end else begin  select @KITITEMNMBR = KITITEMNMBR,  @ALLOCATED = ALLOCATED,  @CURRNIDX = CURRNIDX,  @DROPSHIP = DROPSHIP,  @ReqShipDate = ReqShipDate  from #eConnectCalledFromSopLine end  select @KITITEMTYPE = ITEMTYPE,  @PRICMTHD = PRICMTHD,  @KTACCTSR = KTACCTSR,  @KITIVCOGSIX = IVCOGSIX  from IV00101 (nolock) where ITEMNMBR = @KITITEMNMBR  if ( (not exists(select top 1 CURNCYID from IV00105 (nolock) where CURNCYID <> '')) and  (not exists(select top 1 CURNCYID from CM00100 (nolock) where CURNCYID <> ''))) begin  select @ISMCREG = 0 end  if (@hdrexists = 0) begin  if (@I_vCURNCYID = '')  begin  select @I_vCURNCYID = isnull(CURNCYID, '') from RM00101 (nolock) where CUSTNMBR = @I_vCUSTNMBR   if (@I_vCURNCYID = '')  begin  select @I_vCURNCYID = isnull(FUNLCURR, '') from MC40000 (nolock)  end  end end else begin  if (@ISMCREG = 0)  begin  select @I_vCURNCYID = isnull(FUNLCURR, '') from MC40000 (nolock)  end  else  begin  select @I_vCURNCYID = CURNCYID from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  end end  select @FUNLCURR = FUNLCURR from MC40000 (nolock)  if ((@I_vCURNCYID <> '') and (@I_vCURNCYID <> @FUNLCURR)) begin  select @ISMCTRX = 1 end  if (@I_vCURNCYID = '') begin  select @O_iErrorState = 8119     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @FUNCRIDX = FUNCRIDX from MC40000 (nolock)  if (@CURRNIDX <> @FUNCRIDX) begin  select @ISMCTRX = 1 end  if (@ALLOCATED > 0)  select @ALLOCABY = 1 else  select @ALLOCABY = 0  if (@I_vDOCID <> '')  begin  if (@I_vSOPTYPE <> 6)  begin  select @USPFULPR = USPFULPR from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = @I_vSOPTYPE  end  else  begin  select @USPFULPR = USPFULPR from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = 3  end end  else begin  select @USPFULPR = 0 end  if (@KITITEMTYPE <> 3) begin  select @O_iErrorState = 831     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vLOCNCODE = '') begin   select @LOCNCODEPassed = 0 end  if (@LOCNCODEPassed = 0) begin  select @I_vLOCNCODE = @LOCNCODELINE end  if (@I_vNONINVEN = 0) begin  select @EXTQTYAL =  case  when QTYONHND - ATYALLOC > 0   then QTYONHND - ATYALLOC  when @I_vQUANTITY < 0  then 0  else 0  end  from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE    select @UOMSCHDL = UOMSCHDL,  @VCTNMTHD = VCTNMTHD  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   if (@I_vCMPITUOM = '')  begin  select @I_vCMPITUOM = CMPITUOM from IV00104 (nolock) where ITEMNMBR = @KITITEMNMBR and CMPTITNM = @I_vITEMNMBR  select @count = @@rowcount   if (@count = 0)  begin  select @O_iErrorState = 3906     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@count > 1)  begin  select @O_iErrorState = 8117     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   select @CMPITQTY = CMPITQTY from IV00104 (nolock) where ITEMNMBR = @KITITEMNMBR and CMPTITNM = @I_vITEMNMBR and CMPITUOM = @I_vCMPITUOM  select @QTYBSUOM = QTYBSUOM from IV40202 (nolock) where UOMSCHDL = @UOMSCHDL and UOFM = @I_vCMPITUOM   select @KITUOFM = SELNGUOM, @KITUOMSCHDL = UOMSCHDL from IV00101 (nolock) where ITEMNMBR = @KITITEMNMBR  select @KITUOFMBASE = UOFM from IV40202 (nolock) where UOMSCHDL = @KITUOMSCHDL and QTYBSUOM = 1.00000  select @KITQTYBSUOM = QTYBSUOM from IV40202 (nolock) where UOMSCHDL = @KITUOMSCHDL and EQUIVUOM = @KITUOFMBASE and UOFM = @KITUOFM end else begin  if (@I_vCMPITUOM = '')  begin  select @I_vCMPITUOM = 'Each'  end end  select @TOTALQTY = @I_vQUANTITY + @I_vQTYCANCE + @I_vQTYTBAOR + @I_vQUOTEQTYTOINV  if ((@I_vNONINVEN = 0) and (@I_vCMPITUOM <> '') and (not exists(select 1 from IV40202 (nolock) where UOMSCHDL = @UOMSCHDL and UOFM = @I_vCMPITUOM))) begin  select @O_iErrorState = 3915     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vUpdateIfExists = 1) begin  if (not exists(select 1 from SOP10200  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ and ITEMNMBR = @I_vITEMNMBR))  begin  select @O_iErrorState = 4065     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  else  begin  select @cmpexists = 1  select @EXTQTYAL  = EXTQTYAL, @QTYCANCE = QTYCANCE from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  end end  if (@I_vCMPNTSEQ = 0) begin  select @I_vCMPNTSEQ = isnull(max(CMPNTSEQ), 0) + 16384 from SOP10200 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ end else begin  if ((@I_vUpdateIfExists = 0) and (exists(select 1 from SOP10200 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ)))  begin  select @O_iErrorState = 3910     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if ((@I_vDOCID <> '' and @I_vSOPTYPE <> 6) and (not exists(select 1 from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = @I_vSOPTYPE)))  begin  select @O_iErrorState = 3467     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vDOCID <> '' and @I_vSOPTYPE = 6) and (not exists(select 1 from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = 3 and WORKFLOWENABLED = 1)))  begin  select @O_iErrorState = 7742     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vQTYFULFI > 0) and (@ALLOCABY = 0)) begin  select @O_iErrorState = 3546     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vQTYFULFI > 0) and ((@I_vSOPTYPE = 1) or (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 5))) begin  select @O_iErrorState = 3547     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vQTYCANCE > 0) and (@I_vSOPTYPE = 4)) begin  select @O_iErrorState = 3548     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@ALLOCABY = 3) and (@I_vQTYFULFI > 0)) begin  select @O_iErrorState = 3549     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vQTYFULFI > @I_vQUANTITY) and (@I_vQUANTITY > 0)  begin  select @O_iErrorState = 3550     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vQUANTITY <> @I_vQTYINSVC + @I_vQTYINUSE + @I_vQTYDMGED + @I_vQTYRTRND + @I_vQTYONHND) and (@I_vSOPTYPE = 4)) begin  select @O_iErrorState = 3912     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vLOCNCODE = '') begin   select @I_vLOCNCODE = LOCNCODE from SOP40100 (nolock) end  select top 1 @LOCNCODE = LOCNCODE from IV40700 (nolock) where LOCNCODE <> ''  if (@I_vLOCNCODE = '') begin  if (@LOCNCODE <> '')  begin  select @O_iErrorState = 195     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if (not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE))  begin  select @O_iErrorState = 196     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((@I_vNONINVEN = 0) and (not exists(select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)))  begin  select @O_iErrorState = 197     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  if (@I_vLOCNCODE <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11811     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vLOCNCODE <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11812     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (((@LOCNCODE = '') and (@I_vLOCNCODE = '')) and (@I_vQtyShrtOpt in (1,3,4,5,6))) begin  select @O_iErrorState = 2097     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vNONINVEN = 0) and (not exists(select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR))) begin  select @O_iErrorState = 198     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vUNITCOST >= 0) and (@I_vSOPTYPE <> 4) and (@I_vNONINVEN = 0)) begin  select @O_iErrorState = 3553     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (((@I_vQTYINSVC <> 0) or (@I_vQTYINUSE <> 0) or (@I_vQTYDMGED <> 0) or (@I_vQTYRTRND <> 0) or (@I_vQTYONHND <> 0)) and (@I_vSOPTYPE in (1,2,5) or (@I_vSOPTYPE = 3 and @I_vQUANTITY > 0))) begin  select @O_iErrorState = 8502     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE <> 2) and (@I_vSOPTYPE <> 3) and (@I_vSOPTYPE <> 6) and (@I_vQTYTBAOR <> 0))  begin  select @O_iErrorState = 830     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vNONINVEN = 0) begin  select @ITEMDESC = ITEMDESC,   @PriceGroup = PriceGroup,  @UNITCOST =  case  when @VCTNMTHD in(4,5)  then STNDCOST  else CURRCOST  end,  @INVINDX = IVIVINDX,  @CSLSINDX = IVCOGSIX,  @SLSINDX =  case  when (@I_vSOPTYPE <> 4 and @I_vQUANTITY >= 0)  then IVSLSIDX  else IVSLRNIX  end,  @MKDNINDX = IVSLDSIX,  @RTNSINDX = IVRETIDX,  @INUSINDX = IVINUSIX,  @INSRINDX = IVINSVIX,  @DMGDINDX = IVDMGIDX,  @ITEMTYPE = ITEMTYPE,  @DECPLQTY = DECPLQTY,  @ITMTRKOP = ITMTRKOP  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   if (@RTNSINDX = 0)  select @RTNSINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 1300   if (@INUSINDX = 0)  select @INUSINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 700   if (@INSRINDX = 0)  select @INSRINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 800   if (@DMGDINDX = 0)  select @DMGDINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 900   if (@MKDNINDX = 0)  select @MKDNINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 500 end else begin  select  @ITEMDESC = @I_vITEMDESC   select @INVINDX = ACTINDX,  @MKDNINDX = 0,  @RTNSINDX = ACTINDX,  @INUSINDX = ACTINDX,  @INSRINDX = ACTINDX,  @IVSLRNIX = ACTINDX,  @DMGDINDX = ACTINDX  from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 2400   select @DECPLQTY = DECPLQTY,  @DECPLCUR = DECPLCUR  from SOP40100 (nolock) where SETUPKEY = 1   select @SLSINDX = 0, @CSLSINDX = 0 end  if (@I_vNONINVEN = 0) begin  if (@ISMCTRX = 1)  begin  select @DECPLCUR = DECPLCUR from IV00105 (nolock)  where ITEMNMBR = @I_vITEMNMBR and CURNCYID = @I_vCURNCYID   select @KITDECPLCUR = DECPLCUR - 1 from IV00105 (nolock)  where ITEMNMBR = @KITITEMNMBR and CURNCYID = @I_vCURNCYID   select @ITEMFUNCTDEC = DECPLCUR - 1  from IV00105 (nolock) where ITEMNMBR = @I_vITEMNMBR and CURNCYID = @FUNLCURR   select @KITITEMFUNCTDEC = DECPLCUR - 1  from IV00105 (nolock) where ITEMNMBR = @KITITEMNMBR and CURNCYID = @FUNLCURR  end  else  begin  select @DECPLCUR = DECPLCUR from IV00105 (nolock)  where ITEMNMBR = @I_vITEMNMBR and (CURNCYID = '' or CURNCYID = @I_vCURNCYID)   select @KITDECPLCUR = DECPLCUR - 1 from IV00105 (nolock)  where ITEMNMBR = @KITITEMNMBR and (CURNCYID = '' or CURNCYID = @I_vCURNCYID)   select @ITEMFUNCTDEC = DECPLCUR - 1  from IV00105 (nolock) where ITEMNMBR = @I_vITEMNMBR and (CURNCYID = '' or CURNCYID = @FUNLCURR)   select @KITITEMFUNCTDEC = DECPLCUR - 1  from IV00105 (nolock) where ITEMNMBR = @KITITEMNMBR and (CURNCYID = '' or CURNCYID = @FUNLCURR)  end end else begin  select @ITEMFUNCTDEC = DECPLCUR - 1  from SOP40600 (nolock) where CURNCYID = @FUNLCURR  if (@ISMCTRX = 1)  begin  select @KITDECPLCUR = DECPLCUR - 1 from IV00105 (nolock) where ITEMNMBR = @KITITEMNMBR and CURNCYID = @I_vCURNCYID  select @KITITEMFUNCTDEC = DECPLCUR - 1 from IV00105 (nolock) where ITEMNMBR = @KITITEMNMBR and CURNCYID = @FUNLCURR  end  else  begin  select @KITDECPLCUR = DECPLCUR - 1 from IV00105 (nolock) where ITEMNMBR = @KITITEMNMBR and (CURNCYID = '' or CURNCYID = @I_vCURNCYID)  select @KITITEMFUNCTDEC = DECPLCUR - 1 from IV00105 (nolock) where ITEMNMBR = @KITITEMNMBR and (CURNCYID = '' or CURNCYID = @FUNLCURR)  end end  select @FUNDECPLCUR = DECPLCUR from MC40000 a (nolock), DYNAMICS..MC40200 b (nolock)  where a.FUNCRIDX = b.CURRNIDX and a.FUNLCURR = b.CURNCYID  if (@ISMCTRX = 1) begin  select @EDITDECPLCUR = DECPLCUR-1 from DYNAMICS..MC40200 (nolock)  where CURNCYID = @I_vCURNCYID end else begin  select @EDITDECPLCUR = @FUNDECPLCUR - 1 end  if ((@I_vNONINVEN = 1) and exists(select 1 from SOP40600 (nolock) where CURNCYID = @I_vCURNCYID)) begin  select @DECPLCUR = DECPLCUR from SOP40600 (nolock) where CURNCYID = @I_vCURNCYID end  if ((@ITEMTYPE in (4,5,6)) or (@I_vSOPTYPE = 1)) begin  select @I_vQtyShrtOpt = 2 end  if (@MKDNINDX = 0)  select @MKDNINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 500  select @USEACFRM = USEACFRM,  @CALCKITC = CALCKITC from SOP40100 (nolock)  if (@USEACFRM = 1) begin  select  @SLSINDX =   case  when @I_vSOPTYPE <> 4 and (@I_vSOPTYPE in (3,6) and @I_vQUANTITY >= 0)   then RMSLSACC  else 0  end,  @CSLSINDX = RMCOSACC  from RM00101 (nolock) where CUSTNMBR = @I_vCUSTNMBR   if (@I_vSOPTYPE <> 4) and (@I_vSOPTYPE = 3 and @I_vQUANTITY < 0)   begin  if (@SLSINDX = 0)   begin  select @SLSINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 1100  end  end  else  begin  select @SLSINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 1200  end   if (@CSLSINDX = 0)  begin  select @CSLSINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 200  end   if (@INVINDX = 0)  begin  select @INVINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 900  end end else begin  if (@INVINDX = 0)  begin  select @INVINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 100  end   if (@SLSINDX = 0)  begin  if @I_vSOPTYPE = 4 or (@I_vSOPTYPE = 3 and @I_vQUANTITY < 0)   begin  select @SLSINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 600  end  else  begin  select @SLSINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 400  end  end   if (@KTACCTSR = 1)  begin  select @CSLSINDX = @KITIVCOGSIX  end   if (@CSLSINDX = 0)  begin  select @CSLSINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 300  end end  select @MAXSEG = max(SGMTNUMB) from SY00300 (nolock) select @Location_Segment = isnull(Location_Segment,'') from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ACSGFLOC = ACSGFLOC, @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock) where SETUPKEY = 1  if ((@INVINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select   @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @INVINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC   select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC   end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))   end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +   substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @INVINDX = @ACTINDX  end end  if ((@MKDNINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''  select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @MKDNINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @MKDNINDX = @ACTINDX  end end  if ((@RTNSINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @RTNSINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +   substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @RTNSINDX = @ACTINDX  end end  if ((@INUSINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @INUSINDX  if @ACSGFLOC < @MAXSEG  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @INUSINDX = @ACTINDX  end end  if ((@INSRINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select  @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @INSRINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @INSRINDX = @ACTINDX  end end  if ((@DMGDINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @DMGDINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @DMGDINDX = @ACTINDX  end end  if ((@CSLSINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @CSLSINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @CSLSINDX = @ACTINDX  end end  if ((@SLSINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0)) begin  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @SLSINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT)+( @MAXSEG - @ACSGFLOC ) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT)+( @MAXSEG - 1 ) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT ) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING,@LOFSGMNTALL - @LOFSGMNTEND +1,@LOFSGMNTALL )  end   select @ACTINDX = isnull(ACTINDX,0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  begin  select @SLSINDX = @ACTINDX  end end  if (((@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 3 and @I_vQUANTITY < 0)) and (@ITMTRKOP in(2,3))) begin  select @SOP10201QTYONHND = sum(SERLTQTY) from SOP10201 (nolock)  where QTYTYPE = 1 and SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  select @SOP10201QTYRTRND = sum(SERLTQTY) from SOP10201 (nolock)  where QTYTYPE = 2 and SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  select @SOP10201QTYINUSE = sum(SERLTQTY) from SOP10201 (nolock)  where QTYTYPE = 3 and SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  select @SOP10201QTYINSVC = sum(SERLTQTY) from SOP10201 (nolock)  where QTYTYPE = 4 and SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  select @SOP10201QTYDMGED = sum(SERLTQTY) from SOP10201 (nolock)  where QTYTYPE = 5 and SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ   if ((@SOP10201QTYONHND <> @I_vQTYONHND * @QTYBSUOM) or  (@SOP10201QTYRTRND <> @I_vQTYRTRND * @QTYBSUOM) or  (@SOP10201QTYINUSE <> @I_vQTYINUSE * @QTYBSUOM) or  (@SOP10201QTYINSVC <> @I_vQTYINSVC * @QTYBSUOM) or  (@SOP10201QTYDMGED <> @I_vQTYDMGED * @QTYBSUOM))  begin  select @O_iErrorState = 8243     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='Sales_Transaction',  @I_vINDEX1=@I_vSOPNUMBE,  @I_vINDEX2=@I_vSOPTYPE,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomState  select @O_iErrorState = 4061    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  while (1=1) begin   if (@exists = 1)  begin  select @SOPHdrTbl = rtrim(db_name()) + '.dbo.SOP10100'   select @DexRowID = DEX_ROW_ID from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (not exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @SOPHdrTbl and row_id = @DexRowID and session_id = @@spid))  begin  select @mylock = 1   exec DYNAMICS..taDEXLOCKS  @I_vOperation = 1,  @I_vtable_path_name = @SOPHdrTbl,   @I_vrow_id = @DexRowID,     @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@DexLockErrorState <> 0) or (@iError <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 4060    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   if (@I_vUpdateIfExists = 1)  begin  if ((@I_vAUTOALLOCATESERIAL in(1,2) and @ITMTRKOP = 2) or (@I_vAUTOALLOCATELOT in(1,2) and @ITMTRKOP = 3))  begin  select @DeleteType = 998  end  else  begin  select @DeleteType = 2  end   exec @iStatus = taSopLineDelete  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vLNITMSEQ = @I_vLNITMSEQ,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vCMPNTSEQ = @I_vCMPNTSEQ,  @I_vDeleteType = @DeleteType,  @I_vRequesterTrx = 1,  @O_iErrorState = @taSopLineDeleteErrState output,  @oErrString = @taSopLineDeleteErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@taSopLineDeleteErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @taSopLineDeleteErrString  select @O_iErrorState = 4064    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   select @lock = ITEMNMBR from IV00102 with (updlock index(PKIV00102)) where ITEMNMBR = @I_vITEMNMBR and (LOCNCODE = @I_vLOCNCODE or LOCNCODE = '')   if ((@ITEMTYPE not in(3,4,5,6)) and (@I_vQtyShrtOpt <> 2))   begin  select @QTTYALLOC = ATYALLOC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE   if (@QTTYALLOC >= 0)  begin  select @QTYAVL = QTYONHND - ATYALLOC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  end  else  begin  select @QTYAVL = QTYONHND + ATYALLOC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  end   if (@QTYAVL < 0)  begin  select @QTYAVL = 0  end   if ((@I_vNONINVEN = 0) and ((@I_vSOPTYPE = 2) or (@I_vSOPTYPE = 3) or (@I_vSOPTYPE = 6)) and ((@I_vQUANTITY * @QTYBSUOM) > @QTYAVL))   begin  if ((@I_vQtyShrtOpt in (1,3,4,5,6)) and (@I_vQTYFULFI <> 0))  begin  select @O_iErrorState = 3545     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vQtyShrtOpt = 1)  begin  select @I_vQUANTITY = round(@QTYAVL / @QTYBSUOM, @DECPLQTY - 1,1)   select @TOTALQTY = round(@QTYAVL / @QTYBSUOM, @DECPLQTY - 1,1) + @I_vQTYCANCE + @I_vQTYTBAOR  end  else  begin  if (@I_vQtyShrtOpt = 3)  begin  select @QTYTOBO = @I_vQUANTITY,  @I_vQUANTITY = 0   select @TOTALQTY = @QTYTOBO + @I_vQTYCANCE + @I_vQTYTBAOR  end  else  begin  if (@I_vQtyShrtOpt = 4)  begin  select @QTYTOBO = @I_vQUANTITY - round(@QTYAVL / @QTYBSUOM, @DECPLQTY - 1,1)  select @I_vQUANTITY = @I_vQUANTITY - @QTYTOBO   select @TOTALQTY = @I_vQUANTITY + @QTYTOBO + @I_vQTYCANCE + @I_vQTYTBAOR  end  else  begin  if (@I_vQtyShrtOpt = 5)  begin  select @I_vQTYCANCE = @I_vQTYCANCE + @I_vQUANTITY,  @I_vQUANTITY = 0   select @TOTALQTY = @I_vQTYCANCE + @I_vQTYTBAOR  end  else  begin  if (@I_vQtyShrtOpt = 6)  begin  select @I_vQTYCANCE = @I_vQTYCANCE + (@I_vQUANTITY - round(@QTYAVL / @QTYBSUOM, @DECPLQTY - 1,1))  select @I_vQUANTITY = @I_vQUANTITY - @I_vQTYCANCE   select @TOTALQTY = @I_vQUANTITY + @I_vQTYCANCE + @I_vQTYTBAOR  end  end  end  end  end  end  end   if (@I_vQTYFULFI is null)  begin  if ((@ALLOCABY = 1) and (@USPFULPR = 0) and ((@I_vSOPTYPE = 2) or (@I_vSOPTYPE = 3) or (@I_vSOPTYPE = 6)))   begin  select @I_vQTYFULFI = @I_vQUANTITY  end  else  begin  select @I_vQTYFULFI = 0  end  end   if ((@ITMTRKOP = 3) and (@ITEMTYPE in (1,2)) and (@I_vNONINVEN = 0) and (@I_vSOPTYPE in (2,3,6)) and (@LOCNCODE <> ''))   begin  select @LOTQUANTITY = @I_vQTYFULFI * @QTYBSUOM   select @LotsToAllocate = @LOTQUANTITY - isnull(sum(SERLTQTY),0) from SOP10201 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  if (@LotsToAllocate < 0)  begin   select @O_iErrorState = 3916     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if ((@ITMTRKOP = 2) and (@ITEMTYPE = 1) and (@I_vNONINVEN = 0) and (@I_vSOPTYPE in (2,3,6)) and (@LOCNCODE <> '' and @I_vQUANTITY >= 0))  begin  select @SERIALQUANTITY = @I_vQTYFULFI * @QTYBSUOM   select @serialstoallocate = @SERIALQUANTITY - isnull(count(SERLTQTY), 0) from SOP10201 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ   if (@serialstoallocate < 0)  begin  select @O_iErrorState = 3457     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   select @SOP10201COUNTSERIAL = count(*) from SOP10201 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ   if ((@SOP10201COUNTSERIAL = 0) and ((@I_vAUTOALLOCATESERIAL = 1) or (@I_vAUTOALLOCATESERIAL = 2)) and (@ITMTRKOP = 2)  and ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and ((@I_vQTYFULFI <> 0) or (@I_vQTYFULFI is null)))  begin  select @O_iErrorState = 3466     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if ((@ITMTRKOP = 3) and (@I_vNONINVEN = 0) and ((@I_vAUTOALLOCATELOT = 0) or (@I_vAUTOALLOCATELOT = 2)) and (@I_vSOPTYPE in (2,3,6))   and ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vQTYFULFI <> 0) and (@LOCNCODE <> ''))  begin  select @LOTQTY = isnull(sum(QTYRECVD),0) from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and LTNUMSLD = 0 and QTYTYPE = 1   if ((@LOTQTY < @LotsToAllocate) and (@I_vQtyShrtOpt = 2))  begin  select @O_iErrorState = 3468     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if ((@ITMTRKOP = 2) and (@I_vNONINVEN = 0) and ((@I_vAUTOALLOCATESERIAL = 0) or (@I_vAUTOALLOCATESERIAL = 2))  and (@I_vSOPTYPE in (2,3,6)) and (@LOCNCODE <> ''))  begin  select @SERIALQTY = count(*) from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and SERLNSLD = 0 and QTYTYPE = 1   if ((@SERIALQTY < @serialstoallocate) and (@I_vQtyShrtOpt = 2))  begin  select @O_iErrorState = 3469     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if (@I_vNONINVEN = 1)  begin  if (@I_vUNITCOST is not null)  begin  select @UNITCOST = @I_vUNITCOST  end  else  begin  select @UNITCOST = 0  end  end   if (@I_vSOPTYPE = 4)  begin  if (@I_vNONINVEN = 1)  begin  if (@I_vUNITCOST is not null)  begin  select @UNITCOST = @I_vUNITCOST  end  else  begin  select @UNITCOST = 0  end  end  end  if ((@ITMTRKOP = 2) and (@ITEMTYPE = 1) and (@I_vNONINVEN = 0) and (@I_vSOPTYPE in (2,3,6))  and ((@I_vAUTOALLOCATESERIAL = 0) or (@I_vAUTOALLOCATESERIAL = 2)) and (@LOCNCODE <> ''))  begin  while (@serialsallocated < @serialstoallocate )  begin   if ((@VCTNMTHD = 1) or (@VCTNMTHD = 3) or (@VCTNMTHD = 4))  select TOP 1  @SERLTNUM = SERLNMBR,  @QTYTYPE = QTYTYPE,  @DTSEQNUM = DTSEQNUM,  @DATERECD = DATERECD  from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and SERLNSLD = 0 and QTYTYPE = 1  order by DATERECD, DTSEQNUM  else  select TOP 1  @SERLTNUM = SERLNMBR,  @QTYTYPE = QTYTYPE,  @DTSEQNUM = DTSEQNUM,  @DATERECD = DATERECD  from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and SERLNSLD = 0 and QTYTYPE = 1  order by DATERECD desc, DTSEQNUM desc   if (@SERLTNUM = '')  begin  select @O_iErrorState = 3911    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  else  begin  exec @iStatus = taSopSerial  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vLNITMSEQ = @I_vLNITMSEQ,   @I_vCMPNTSEQ = @I_vCMPNTSEQ,   @I_vQTYTYPE = 1,      @I_vITEMNMBR = @I_vITEMNMBR,  @I_vLOCNCODE = @I_vLOCNCODE,  @I_vQUANTITY = 1,     @I_vSERLNMBR = @SERLTNUM,  @I_vAUTOCREATESERIAL = 0,  @I_vDOCID = @I_vDOCID,  @I_vRequesterTrx = 1,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  if (@iCustomState not in (0, 1526))   begin  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3461    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  select @SERLTNUM = ''  select @serialsallocated = @serialsallocated + 1   end  end  end   if ((@ITMTRKOP = 2) and (@ITEMTYPE = 1) and (@I_vNONINVEN = 0) and ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vQTYFULFI <> 0)  and (@I_vSOPTYPE in (2,3,6)) and (@LOCNCODE <> ''))  begin  select @ALLOCATED = isnull(count(SERLTQTY), 0) from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  ITEMNMBR = @I_vITEMNMBR and  LNITMSEQ = @I_vLNITMSEQ and  CMPNTSEQ = @I_vCMPNTSEQ   if (@SERIALQUANTITY <> @ALLOCATED)  begin  select @O_iErrorState = 3914    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@ITMTRKOP = 3) and (@LOCNCODE <> ''))  begin  select @SOP10201COUNT = count(*) from SOP10201 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ   if ((@SOP10201COUNT = 0) and ((@I_vAUTOALLOCATELOT = 1) or (@I_vAUTOALLOCATELOT = 2)) and (@ITMTRKOP = 3) and  ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vQTYFULFI <> 0))  begin  select @O_iErrorState = 3462     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((@SOP10201COUNT > 0) and (@I_vAUTOALLOCATELOT = 0) and (@ITMTRKOP = 3))  begin  select @O_iErrorState = 3463     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((@I_vSOPTYPE in (2,3,6)) and (@ITMTRKOP = 3) and (@ITEMTYPE = 1) and (@I_vNONINVEN = 0) and   ((@I_vAUTOALLOCATELOT = 0) or (@I_vAUTOALLOCATELOT = 2)) and (@LotsToAllocate > 0) and  ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vQTYFULFI <> 0) and (@ALLOCABY = 1))  begin  if (@I_vUSERDATE = '')  begin  select @I_vUSERDATE = convert(varchar(12),getdate())  end   exec @iStatus = taSopLot  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vUSERDATE = @I_vUSERDATE,  @I_vLNITMSEQ = @I_vLNITMSEQ,  @I_vCMPNTSEQ = @I_vCMPNTSEQ,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vLOCNCODE = @I_vLOCNCODE,  @I_vQUANTITY = @LotsToAllocate,  @I_vDOCID = @I_vDOCID,  @I_vDROPSHIP = @DROPSHIP,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 3464    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   if (@I_vSOPTYPE = 3 and @I_vQTYTBAOR > 0)   begin  select @EXTDCOST = round((@I_vQTYTBAOR * @UNITCOST) * @QTYBSUOM, @FUNDECPLCUR - 1)  end   else  begin  select @EXTDCOST = round((@I_vQUANTITY * @UNITCOST) * @QTYBSUOM, @FUNDECPLCUR - 1)  end   insert SOP10200  (  UOFM,  SOPTYPE,  SOPNUMBE,  LNITMSEQ,  CMPNTSEQ,  ITEMNMBR,  ITEMDESC,  NONINVEN,  LOCNCODE,  UNITCOST,  ORUNTCST,  UNITPRCE,  ORUNTPRC,  XTNDPRCE,  OXTNDPRC,  REMPRICE,  OREPRICE,  EXTDCOST,  OREXTCST,  MRKDNAMT,  ORMRKDAM,  MRKDNTYP,  INVINDX,  CSLSINDX,  SLSINDX,  MKDNINDX,  RTNSINDX,  INUSINDX,  INSRINDX,  DMGDINDX,  QUANTITY,  ATYALLOC,  QTYONHND,  QTYCANCE,  QTYRTRND,  QTYINUSE,  QTYINSVC,  QTYDMGED,  QTYREMAI,  QTYTOINV,  QTYTORDR,  QTYFULFI,  QTYSLCTD,  QTYBSUOM,  EXTQTYAL,  EXTQTYSEL,  ReqShipDate,  FUFILDAT,  ACTLSHIP,  CURRNIDX,  PURCHSTAT,  QTYONPO,  QTYRECVD,  QTYPRVRECVD,  QTYORDER,  QTYTBAOR,  ITEMCODE,  DECPLQTY,  DECPLCUR,  ODECPLCU  )  select  @I_vCMPITUOM,    @I_vSOPTYPE,  @I_vSOPNUMBE,  @I_vLNITMSEQ,    @I_vCMPNTSEQ,  @I_vITEMNMBR,  case     when @I_vITEMDESC = ''  then @ITEMDESC  else @I_vITEMDESC  end,  @I_vNONINVEN,    @I_vLOCNCODE,    case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is null))  then @UNITCOST * @QTYBSUOM  else 0  end,  case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is not null))  then @UNITCOST * @QTYBSUOM  else 0  end,  0,     0,     0,     0,     0,     0,     case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is null))  then @EXTDCOST  else 0  end,  case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is not null))  then @EXTDCOST  else 0  end,  0,     0,     0,     @INVINDX,  @CSLSINDX,  @SLSINDX,  @MKDNINDX,  @RTNSINDX,  @INUSINDX,  @INSRINDX,  @DMGDINDX,  @TOTALQTY,    case     when ((@I_vNONINVEN = 0) and (@DROPSHIP = 0) and (@I_vSOPTYPE in (2,3,6)) and (@ALLOCABY = 1) and (@ITEMTYPE in (1,2,3)))   then @TOTALQTY - @I_vQTYCANCE - @I_vQTYTBAOR - @QTYTOBO  else 0  end,  case     when ((@I_vSOPTYPE = 4) and (@I_vQTYONHND > 0))   then @I_vQTYONHND   when (@I_vSOPTYPE = 3 and @I_vQUANTITY < 0) and (@ITEMTYPE in(1,2,3))   then @I_vQUANTITY * -1   else 0  end,  @I_vQTYCANCE,    case     when ((@I_vSOPTYPE = 4) and (@I_vQTYRTRND > 0))  then @I_vQTYRTRND   else 0  end,  case     when ((@I_vSOPTYPE = 4) and (@I_vQTYINUSE > 0))  then @I_vQTYINUSE   else 0  end,  case     when ((@I_vSOPTYPE = 4) and (@I_vQTYINSVC > 0))  then @I_vQTYINSVC   else 0  end,  case     when ((@I_vSOPTYPE = 4) and (@I_vQTYDMGED > 0))  then @I_vQTYDMGED   else 0  end,  case      when (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 3 and @I_vQUANTITY < 0)   then 0   else @TOTALQTY - @I_vQTYCANCE   end,   case     when ((@I_vSOPTYPE = 2) or ((@I_vSOPTYPE = 3) and (@I_vQUANTITY >=0)) or (@I_vSOPTYPE = 5) or (@I_vSOPTYPE = 6))   then @I_vQUANTITY  when (@I_vSOPTYPE = 1) then @I_vQUOTEQTYTOINV  else 0  end,  case     when (@I_vSOPTYPE = 1)  then @I_vQUANTITY  else 0  end,  case      when (@I_vSOPTYPE in (2,3,6))   then @I_vQTYFULFI  else 0  end,  case      when (@I_vSOPTYPE in (2,3,6))   then @I_vQTYFULFI * @QTYBSUOM  else 0  end,  @QTYBSUOM,     case     when ((@I_vSOPTYPE not in (1,4,5)) and (@ALLOCABY = 1) and (@I_vQUANTITY > 0))   then @EXTQTYAL  when ((@I_vSOPTYPE = 3) and (@I_vQTYTBAOR > 0)) or   ((@cmpexists =1)and((@I_vSOPTYPE not in (1,4,5)) and (@ALLOCABY = 1) and (@I_vQUANTITY >= 0)))   then @EXTQTYAL  else 0  end,  case     when ((@I_vSOPTYPE in (2,3,6)) and ((@ITMTRKOP = 2) or (@ITMTRKOP = 3)) and (@USPFULPR = 0))   then @I_vQTYFULFI * @QTYBSUOM  else 0  end,  @ReqShipDate,  case     when ((@I_vUpdateIfExists = 1) and (@I_vSOPTYPE in (2,3,6)) and (@I_vQTYFULFI > 0))   then @currdate  else @dtDEFAULT  end,  case     when ((@I_vUpdateIfExists = 1) and (@I_vSOPTYPE in (2,3,6)) and (@I_vQTYFULFI > 0))   then @currdate  else @dtDEFAULT  end,  0,     case     when ((@I_vNONINVEN = 1) or (@I_vQTYTBAOR > 0) or (@QTYTOBO > 0) or ((@I_vSOPTYPE = 5) and (@I_vQUANTITY > 0)) or @DROPSHIP = 1) or @ITEMTYPE in (3,4,5,6) and (@I_vSOPTYPE not in (1,3,4))   then 2  else 1  end,  0,     0,     0,     case     when (@I_vSOPTYPE = 3 or @I_vSOPTYPE = 6) and (@I_vQUANTITY > 0)    then @I_vQUANTITY  when (@I_vSOPTYPE = 3 and @I_vQTYTBAOR > 0)   then @I_vQTYTBAOR  else 0  end,  (@QTYTOBO + @I_vQTYTBAOR),   '',     @DECPLQTY,    @ITEMFUNCTDEC + 1,   @DECPLCUR    if (@@error <> 0)  begin  select @O_iErrorState = 182    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if ((@ITEMTYPE in (1,2,4,5,6)) and (@I_vSOPTYPE <> 1) and (@I_vSOPTYPE <> 4) and (@I_vSOPTYPE <> 5) and (@DROPSHIP = 0) and (@LOCNCODE <> ''))  begin  if (@ALLOCABY = 1) and (@ITEMTYPE in (1,2))  begin  update IV00102 set  ATYALLOC = ATYALLOC + (@I_vQUANTITY * @QTYBSUOM),  QTYBKORD = QTYBKORD + ((@I_vQTYTBAOR + @QTYTOBO) * (@QTYBSUOM))  from IV00102 with (updlock index(PKIV00102))  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE   end  else  begin  update IV00102 set  QTYBKORD = QTYBKORD + ((@I_vQTYTBAOR + @QTYTOBO) * (@QTYBSUOM))  from IV00102 with (updlock index(PKIV00102))  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  end  if (@@error <> 0)  begin  select @O_iErrorState = 470     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@ALLOCABY = 1) and (@ITEMTYPE in (1,2))  begin  update IV00102 set  ATYALLOC = ATYALLOC + (@I_vQUANTITY * @QTYBSUOM),  QTYBKORD = QTYBKORD + ((@I_vQTYTBAOR + @QTYTOBO) * (@QTYBSUOM))  from IV00102 with (updlock index(PKIV00102))  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''   end  else  begin  update IV00102 set  QTYBKORD = QTYBKORD + ((@I_vQTYTBAOR + @QTYTOBO) * (@QTYBSUOM))  from IV00102 with (updlock index(PKIV00102))  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  end  if (@@error <> 0)  begin  select @O_iErrorState = 587     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@I_vSOPTYPE = 5) and (@ITEMTYPE in (1,2,3,5)) and (@LOCNCODE <> ''))  begin  update IV00102 set  QTYBKORD = QTYBKORD + (@I_vQUANTITY * @QTYBSUOM)  from IV00102 with (updlock index(PKIV00102))  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE   if (@@error <> 0)  begin  select @O_iErrorState = 521     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set   QTYBKORD = QTYBKORD + (@I_vQUANTITY * @QTYBSUOM)  from IV00102 with (updlock index(PKIV00102))  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 3472     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (not exists (select 1 from tempdb..sysobjects where id = (select object_id('tempdb..#eConnectCalledFromSopLine'))))  begin  select @KITEXTDCOST = round(sum(EXTDCOST), @FUNDECPLCUR - 1)  from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ > 0   select @KITQUANTITY = QUANTITY,  @OLDKITXTNDPRCE = XTNDPRCE  from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = 0   if (@KITQUANTITY = 0)  begin  select @KITUNITCOST = 0  end  else  begin  select @KITUNITCOST =  abs(isnull(round(sum(UNITCOST * (QUANTITY - QTYCANCE))/@KITQUANTITY, @KITITEMFUNCTDEC),0))  from SOP10200 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ <> 0  end   if (@CALCKITC = 1)  begin  if (@PRICMTHD in(3,4,5,6))  begin  select @fieldupdate = 1     select @UOMPRICE = UOMPRICE/100 from IV00108 (nolock)  where ITEMNMBR = @KITITEMNMBR and  CURNCYID = @FUNLCURR and  PRCLEVEL = @PRCLEVEL and  UOFM = @KITUOFM and  FROMQTY <= @KITQUANTITY and  TOQTY >= @KITQUANTITY   if (@PRICMTHD = 3)  begin  select @UNITPRCE = round(round((sum(b.CURRCOST * (a.QUANTITY - a.QTYCANCE))/@KITQUANTITY), @KITITEMFUNCTDEC) *  isnull(round(1 + @UOMPRICE, @KITITEMFUNCTDEC), 0), @KITITEMFUNCTDEC)  from SOP10200 a, IV00101 b, IV40202 c  where a.ITEMNMBR = b.ITEMNMBR and  a.LNITMSEQ = @I_vLNITMSEQ and  a.SOPTYPE = @I_vSOPTYPE and  a.SOPNUMBE = @I_vSOPNUMBE and  a.CMPNTSEQ > 0 and  c.UOMSCHDL = b.UOMSCHDL and  c.UOFM = a.UOFM  end  else  begin  if (@PRICMTHD = 4)  begin  select @UNITPRCE = round(round((sum(b.STNDCOST * (a.QUANTITY - a.QTYCANCE))/@KITQUANTITY), @KITITEMFUNCTDEC) *  isnull(round(1 + @UOMPRICE, @KITITEMFUNCTDEC), 0), @KITITEMFUNCTDEC)  from SOP10200 a, IV00101 b, IV40202 c  where a.ITEMNMBR = b.ITEMNMBR and  a.LNITMSEQ = @I_vLNITMSEQ and  a.SOPTYPE = @I_vSOPTYPE and  a.SOPNUMBE = @I_vSOPNUMBE and  a.CMPNTSEQ > 0 and  c.UOMSCHDL = b.UOMSCHDL and  c.UOFM = a.UOFM  end  else  begin  if (@PRICMTHD = 5)  begin  select @UNITPRCE = round(round((sum(b.CURRCOST * (a.QUANTITY - a.QTYCANCE))/@KITQUANTITY), @KITITEMFUNCTDEC) /  isnull(1 - @UOMPRICE, 0), @KITITEMFUNCTDEC)  from SOP10200 a, IV00101 b, IV40202 c  where a.ITEMNMBR = b.ITEMNMBR and  a.LNITMSEQ = @I_vLNITMSEQ and  a.SOPTYPE = @I_vSOPTYPE and  a.SOPNUMBE = @I_vSOPNUMBE and  a.CMPNTSEQ > 0 and  c.UOMSCHDL = b.UOMSCHDL and  c.UOFM = a.UOFM  end  else  begin  if (@PRICMTHD = 6)  begin  select @UNITPRCE = round(round((sum(b.STNDCOST * (a.QUANTITY - a.QTYCANCE))/@KITQUANTITY), @KITITEMFUNCTDEC) /  isnull(1 - @UOMPRICE, 0), @KITITEMFUNCTDEC)  from SOP10200 a, IV00101 b, IV40202 c  where a.ITEMNMBR = b.ITEMNMBR and  a.LNITMSEQ = @I_vLNITMSEQ and  a.SOPTYPE = @I_vSOPTYPE and  a.SOPNUMBE = @I_vSOPNUMBE and  a.CMPNTSEQ > 0 and  c.UOMSCHDL = b.UOMSCHDL and  c.UOFM = a.UOFM  end  end  end  end   if exists(select top 1 1 from IV00108 (nolock) where ITEMNMBR = @I_vITEMNMBR and CURNCYID <> '')  begin  select @tCURNCYID = @I_vCURNCYID  end  else  begin  select @tCURNCYID = ''  end   select  @RNDGAMNT = isnull(RNDGAMNT,0),  @ROUNDHOW = isnull(ROUNDHOW,0),  @ROUNDTO = isnull(ROUNDTO,0)  from IV00107 (nolock) where  ITEMNMBR = @KITITEMNMBR and  CURNCYID = @I_vCURNCYID and  PRCLEVEL = @PRCLEVEL and  UOFM = @KITUOFM and  QTYBSUOM = @QTYBSUOM   if @ROUNDTO > 1 and @ROUNDTO < 5  begin  exec @iStatus = taPricingGetRoundPrice  @ROUNDTO,  @ROUNDHOW,  @RNDGAMNT,  @UNITPRCE OUTPUT  select @iError = @@error   if (@iError <> 0) or (@iStatus <> 0)  begin  if (@iStatus <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iStatus  end  select @O_iErrorState = 8183    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if (@UNITPRCE is null)  begin  select @UNITPRCE = 0  end  end   select @XTNDPRCE = isnull(round(QUANTITY * (@UNITPRCE - MRKDNAMT), @EDITDECPLCUR), 0)  from SOP10200 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = 0  end   update SOP10200 set  UNITCOST =  case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is null))  then @KITUNITCOST  else 0  end,  ORUNTCST =  case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is not null))  then @KITUNITCOST  else 0  end,  EXTDCOST =  case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is null))  then @KITEXTDCOST  else 0  end,  OREXTCST =  case     when ((@ISMCTRX = 0) or (@I_vUNITCOST is not null))  then @KITEXTDCOST  else 0  end,  UNITPRCE =  case     when @fieldupdate = 1  then @UNITPRCE  else UNITPRCE  end,  ORUNTPRC = case     when @fieldupdate = 1 and @ISMCTRX = 1  then 0  when @fieldupdate = 1 and @ISMCTRX = 0  then @UNITPRCE  else ORUNTPRC  end,  XTNDPRCE =  case     when @fieldupdate = 1  then @XTNDPRCE  else XTNDPRCE  end,  OXTNDPRC =  case     when @fieldupdate = 1 and @ISMCTRX = 1  then 0  when @fieldupdate = 1 and @ISMCTRX = 0  then @XTNDPRCE  else OXTNDPRC  end,  REMPRICE =  case     when @fieldupdate = 1  then @XTNDPRCE  else REMPRICE  end,  OREPRICE =  case     when @fieldupdate = 1  then @XTNDPRCE  else OREPRICE  end  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = 0  if (@@error <> 0)  begin  select @O_iErrorState = 522    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@ENABLEMULTIBIN = 1) and (@ITMTRKOP = 1))   begin  if (@I_vSOPTYPE = 4)  begin  select @I_vAutoAssignBin = 1  end   if ((@ITEMTYPE in (1,2)) and (@I_vNONINVEN = 0) and (@I_vSOPTYPE in (2,3,6)))   begin  if (@I_vQTYFULFI > 0)  begin  select @BinFulfillQty = @I_vQTYFULFI * @QTYBSUOM  end  else  begin  if ((((@ALLOCABY = 3) or (@ALLOCABY = 2)) or ((@ALLOCABY = 1) and (@USPFULPR = 1))) or (@I_vQTYFULFI = 0))  begin  select @BinFulfillQty = 0  end  else  begin  select @BinFulfillQty =  case  when @ITMTRKOP = 1  then @I_vQUANTITY * @QTYBSUOM  when @ITMTRKOP = 2  then @serialstoallocate  when @ITMTRKOP = 3  then @LotsToAllocate  else 0  end  end  end  end   if (@I_vAutoAssignBin = 1)  begin  if exists(select 1 from SOP10203 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ)  begin  select @O_iErrorState = 7192     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   while (@BinQtyType < 6)  begin  if (@I_vSOPTYPE = 4)  begin  select @BinFulfillQty =  case @BinQtyType  when 1 then @I_vQTYONHND  when 2 then @I_vQTYRTRND  when 3 then @I_vQTYINUSE  when 4 then @I_vQTYINSVC  when 5 then @I_vQTYDMGED  else @BinFulfillQty  end  end   if (@BinFulfillQty > 0)  begin  exec @iStatus = taSopMultiBin  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vITEMNMBR = @I_vITEMNMBR,  @I_vLNITMSEQ = @I_vLNITMSEQ,  @I_vCMPNTSEQ = @I_vCMPNTSEQ,  @I_vBIN = '',  @I_vQTYTYPE = @BinQtyType,  @I_vUOFM = @KITQTYBSUOM,  @I_vQUANTITY = @BinFulfillQty,  @I_vCreateBin = 0,  @I_vOverrideBin = 1,  @I_vRequesterTrx = 1,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 7191    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE = 4)  begin  select @BinQtyType = @BinQtyType + 1  end  else  begin  select @BinQtyType = 6  end  end  end  end  break end  if (@I_vUpdateIfExists = 1) and (@I_vSOPTYPE = 2) and (@PRICMTHD in(3,4,5,6)) begin  select @CHGAMNT = @OLDKITXTNDPRCE  select @STOP = 1, @RECALCBTCHTOT = 4 end  if (@mylock = 1) begin  if (@hdrexists = 1)  begin   select @ORTDISAM = ORTDISAM,  @TRDISPCT = TRDISPCT,  @PYMTRMID = PYMTRMID,  @DUEDATE = DUEDATE,  @DISCDATE = DISCDATE,  @CHGAMNT =  case   when @STOP = 1  then @CHGAMNT  else ORSUBTOT  end,  @PRSTADCD = PRSTADCD,  @DSCPCTAM = DSCPCTAM / 100,  @ADDRESS1 = ADDRESS1,  @ADDRESS2 = ADDRESS2,  @ADDRESS3 = ADDRESS3,  @CNTCPRSN = CNTCPRSN,  @FAXNUMBR = FAXNUMBR,  @CITY = CITY,  @STATE = STATE,  @ZIPCODE = ZIPCODE,  @COUNTRY = COUNTRY,  @PHNUMBR1 = PHNUMBR1,  @PHNUMBR2 = PHNUMBR2,  @PHNUMBR3 = PHONE3,  @SHIPMTHD = SHIPMTHD,  @SALSTERR = SALSTERR,  @SLPRSNID = SLPRSNID,  @UPSZONE = UPSZONE,  @TAXEXMT1 = TAXEXMT1,  @TAXEXMT2 = TAXEXMT2,  @TXRGNNUM = TXRGNNUM  from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (@TRDISPCT > 0)  begin  select @TRDISPCT = @TRDISPCT / 100.00,  @ORTDISAM = null  end   if (@TRDISPCT = 0)  begin  select @ORTDISAM = @ORTDISAM,  @TRDISPCT = null  end   exec @iStatus = taSopHdrRecalc  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vSHIPMTHD = @SHIPMTHD,  @I_vPYMTRMID = @PYMTRMID,  @I_vPRSTADCD = @PRSTADCD,  @I_vADDRESS1 = @ADDRESS1,  @I_vADDRESS2 = @ADDRESS2,  @I_vADDRESS3 = @ADDRESS3,  @I_vCNTCPRSN = @CNTCPRSN,  @I_vFAXNUMBR = @FAXNUMBR,  @I_vCITY = @CITY,  @I_vSTATE = @STATE,  @I_vZIPCODE = @ZIPCODE,  @I_vCOUNTRY = @COUNTRY,  @I_vPHNUMBR1 = @PHNUMBR1,  @I_vPHNUMBR2 = @PHNUMBR2,  @I_vPHNUMBR3 = @PHNUMBR3,  @I_vDUEDATE = @DUEDATE,  @I_vDISCDATE = @DISCDATE,  @I_vTRDISAMT = @ORTDISAM,  @I_vTRADEPCT = @TRDISPCT,  @I_vSALSTERR = @SALSTERR,  @I_vSLPRSNID = @SLPRSNID,  @I_vUPSZONE = @UPSZONE,  @I_vTAXEXMT1 = @TAXEXMT1,  @I_vTAXEXMT2 = @TAXEXMT2,  @I_vTXRGNNUM = @TXRGNNUM,  @I_vRECREATEDIST = @I_vRecreateDist,  @I_vRECREATECOMM = @I_vRECREATECOMM,  @I_vRECREATETAXES = 0,     @I_vRECALCBTCHTOT = @RECALCBTCHTOT,  @I_vDSCPCTAM = @DSCPCTAM,  @I_vCHGAMNT = @CHGAMNT,    @I_vUSRDEFND1 = @I_vLNITMSEQ,   @O_iErrorState = @SopHdrUpdateState output,  @oErrString = @SopHdrUpdateErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@SopHdrUpdateState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @SopHdrUpdateErrString  select @O_iErrorState = 8130     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 3,   @I_vtable_path_name = @SOPHdrTbl,   @I_vrow_id = @DexRowID,     @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 4063    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  exec @iStatus = taSopLineIvcInsertComponentPost  @I_vSOPTYPE,  @I_vSOPNUMBE,  @I_vUSERDATE,  @I_vLOCNCODE,  @I_vLNITMSEQ,  @I_vITEMNMBR,  @I_vAutoAssignBin,  @I_vITEMDESC,  @I_vQUANTITY,  @I_vQTYTBAOR,  @I_vQTYCANCE,  @I_vQTYFULFI,  @I_vQUOTEQTYTOINV,  @I_vQTYONHND,  @I_vQTYRTRND,  @I_vQTYINUSE,  @I_vQTYINSVC,  @I_vQTYDMGED,  @I_vCUSTNMBR,  @I_vDOCID,  @I_vUNITCOST,  @I_vNONINVEN,  @I_vAUTOALLOCATESERIAL,  @I_vAUTOALLOCATELOT,  @I_vCMPNTSEQ,  @I_vCMPITUOM,  @I_vCURNCYID,  @I_vUpdateIfExists,  @I_vRecreateDist,  @I_vRequesterTrx,  @I_vQtyShrtOpt,  @I_vRECREATECOMM,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomStatePost output,  @oErrString = @iCustomErrStringPost output select @iError = @@error if ((@iStatus <> 0) or (@iCustomStatePost <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrStringPost  select @O_iErrorState = 3423    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='Sales_Transaction',  @I_vINDEX1=@I_vSOPNUMBE,  @I_vINDEX2=@I_vSOPTYPE,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomState  select @O_iErrorState = 4062    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopLineIvcInsertComponent] TO [DYNGRP]
GO
