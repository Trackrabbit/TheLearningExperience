SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopVoidDocument]  @I_vSOPTYPE smallint,    @I_vSOPNUMBE char(21),     @I_vBACHNUMB char(15) = '',   @I_vRemovePayments smallint = 1,  @I_vVOIDDATE datetime = '',   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',   @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output, @oErrString varchar(255) output  with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @CMPANYID smallint,  @aaSubLedgerHdrID int,  @DTAREF char(25),  @BACHNMBRFROM char(21),  @iCursorRows int,  @CUSTNMBR char(15),  @dtDEFAULT datetime,  @BCHSOURC char(15),  @TRXSORCE char(13),  @iStatus int,  @ORDOCAMT numeric(19,5),  @OREMSUBT numeric(19,5),  @QTYTBAOR numeric(19,5),  @ATYALLOC numeric(19,5),  @LOCNCODE char(10),  @ITEMNMBR char(30),  @DOCDATE datetime,  @iError int,  @O_oErrorState int,  @iTrxSorceErrState int,  @iUpdtBthErrState int,  @iCreateBatchErrString varchar(255),  @iPaymentErrState int,  @vPaymentErrString varchar(255),  @INTERID char(5),  @SEQNUMBR int,  @SOPHdrTbl char(18),  @DexRowID int,  @oExists int,  @OInsStatus int,  @QUANTITY numeric(19,5),  @ITMTRKOP smallint,  @LNITMSEQ integer,  @ORPMTRVD numeric(19,5),  @DOCNUMBR char(21),  @DexLockErrorState int,  @CHEKNMBR char(21),  @PYMTTYPE int,  @CARDNAME char(15),  @iCustomState int,  @iCustomErrString varchar(255),  @ENABLEMULTIBIN smallint,  @SEROVQTY numeric(19,5),  @LOTOVQTY numeric(19,5),  @DOCAMNT numeric(19,5),       @UOFM varchar(10),    @QTYBSUOM numeric(19,5) select  @aaSubLedgerHdrID = '',  @DTAREF = '',  @DOCDATE = '',  @ITEMNMBR = '',  @LOCNCODE = '',  @QTYTBAOR = 0,  @ATYALLOC = 0,  @iCursorRows = 0,  @CUSTNMBR = '',  @ORDOCAMT = 0,  @OREMSUBT = 0,  @O_oErrorState = 0,  @O_iErrorState = 0,  @iStatus = 0,  @dtDEFAULT = '',  @BCHSOURC = 'Sales Void',  @TRXSORCE = '',  @oErrString = '',  @iUpdtBthErrState = 0,  @iCreateBatchErrString = '',  @iPaymentErrState = 0,  @vPaymentErrString = '',  @iTrxSorceErrState = 0,  @SEQNUMBR = 0,  @SOPHdrTbl = '',  @INTERID = '',  @DexRowID = 0,  @oExists = 0,  @OInsStatus = 0,  @QUANTITY = 0,  @ITMTRKOP = 0,  @LNITMSEQ = 0,  @ORPMTRVD = 0,  @DexLockErrorState = 0,  @CHEKNMBR = '',  @iCustomState = 0,  @iCustomErrString = '',  @ENABLEMULTIBIN = 0,  @SEROVQTY = 0,  @LOTOVQTY = 0,  @DOCAMNT = 0 ,         @UOFM = '',  @QTYBSUOM = 0  exec @iStatus = taSopVoidDocumentPre  @I_vSOPTYPE output,  @I_vSOPNUMBE output,  @I_vBACHNUMB output,  @I_vRemovePayments output,  @I_vVOIDDATE output,     @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 3804    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @CMPANYID = CMPANYID, @INTERID = INTERID from DYNAMICS..SY01500 c (nolock) where c.INTERID = db_name() select @DexRowID = DEX_ROW_ID from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE select @SOPHdrTbl = rtrim(@INTERID) + '.dbo.SOP10100'  if (@I_vSOPTYPE is null or  @I_vSOPNUMBE is null or  @I_vVOIDDATE is null or   @I_vBACHNUMB is null) begin  select @O_iErrorState = 7000    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPNUMBE = '') or (@I_vSOPTYPE = 0)) begin  select @O_iErrorState = 7001    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRemovePayments <> 0) and (@I_vRemovePayments <> 1)) begin  select @O_iErrorState = 1588     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE < 1) or (@I_vSOPTYPE > 6))  begin  select @O_iErrorState = 7003     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (exists(select 1 from SOP30200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE)) begin  select @O_iErrorState = 7004     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (not exists(select 1 from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE)) begin  select @O_iErrorState = 2939     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (exists(select 1 from SOP60100 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE)) begin  select @O_iErrorState = 3422     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select  @DOCDATE = DOCDATE,   @ORDOCAMT = ORDOCAMT,  @DOCAMNT = DOCAMNT,       @OREMSUBT = OREMSUBT,  @CUSTNMBR = CUSTNMBR,  @BACHNMBRFROM = BACHNUMB,  @ORPMTRVD = ORPMTRVD,  @I_vBACHNUMB =  case  when @I_vBACHNUMB = '' then BACHNUMB  else @I_vBACHNUMB  end  from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  select @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock)  if (@O_iErrorState <> 0)  return (@O_iErrorState)  while (1=1) begin  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation  = 1,  @I_vtable_path_name = @SOPHdrTbl,    @I_vrow_id  = @DexRowID,    @O_oExists  = @oExists output,   @O_oInsertStatus = @OInsStatus output,   @O_iErrorState  = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7134     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  else  begin  if (@I_vRemovePayments = 1)  begin   declare Payments insensitive cursor for  select  p.DOCNUMBR,  h.CUSTNMBR,  p.CHEKNMBR,  p.SEQNUMBR,  p.PYMTTYPE,  p.CARDNAME  from SOP10103 p (nolock), SOP10100 h (nolock)  where p.SOPNUMBE = @I_vSOPNUMBE and  p.SOPTYPE = @I_vSOPTYPE and  p.OAMNTREM > 0 and  (@I_vSOPTYPE = 2 or @I_vSOPTYPE = 5) and  p.SOPTYPE = h.SOPTYPE and  p.SOPNUMBE = h.SOPNUMBE and   p.PYMTTYPE in (1,2,3,6)   open Payments  select @iCursorRows = @@cursor_rows  if @iCursorRows = 0  begin  deallocate Payments  end  else  begin  fetch next from Payments into @DOCNUMBR, @CUSTNMBR, @CHEKNMBR, @SEQNUMBR, @PYMTTYPE, @CARDNAME  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 3429    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   exec @iStatus = taCreateSopPaymentInsertRecord  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vDOCNUMBR = @DOCNUMBR,  @I_vCUSTNMBR = @CUSTNMBR,  @I_vCHEKNMBR = @CHEKNMBR,  @I_vSEQNUMBR = @SEQNUMBR,  @I_vPYMTTYPE = @PYMTTYPE,  @I_vCARDNAME = @CARDNAME,  @I_vVOIDDATE    = @I_vVOIDDATE,     @I_vAction = 9,      @O_iErrorState = @iPaymentErrState output,  @oErrString = @vPaymentErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iPaymentErrState <> 0) or (@iError <> 0))  begin  if (@vPaymentErrString <> '')  begin  select @oErrString = rtrim(@oErrString) + ' ' + @vPaymentErrString  end  select @O_iErrorState = 1589    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   fetch next from Payments into @DOCNUMBR, @CUSTNMBR, @CHEKNMBR, @SEQNUMBR, @PYMTTYPE, @CARDNAME  end  deallocate Payments  end  end   delete a   from SOP10103 p (nolock), SOP10100 h (nolock), RM00401 a   where p.SOPNUMBE = @I_vSOPNUMBE and  p.SOPTYPE = @I_vSOPTYPE and   (@I_vSOPTYPE = 3 or @I_vSOPTYPE = 4 or @I_vSOPTYPE = 6) and   p.SOPTYPE = h.SOPTYPE and  p.SOPNUMBE = h.SOPNUMBE and   a.DOCNUMBR = p.DOCNUMBR and   a.RMDTYPAL = p.RMDTYPAL  if @@error <> 0  begin  select @O_iErrorState = 9493    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if ((((@I_vSOPTYPE = 2) or (@I_vSOPTYPE = 5)) and (exists(select 1 from SOP10103 (nolock) where SOPNUMBE = @I_vSOPNUMBE and  SOPTYPE = @I_vSOPTYPE and OAMNTREM > 0 and PYMTTYPE <> 6))) or  (((@I_vSOPTYPE = 3) or (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 6)) and (exists(select 1 from SOP10103 (nolock) where SOPNUMBE = @I_vSOPNUMBE and   SOPTYPE = @I_vSOPTYPE and TRXSORCE <> '' and DEPSTATS <> 2))))  begin  select @O_iErrorState = 7002    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vSOPTYPE = 3) or (@I_vSOPTYPE = 6)   begin  update RM00103 set  UNPSTOSA = UNPSTOSA - @ORDOCAMT,  UNPSTOCA = UNPSTOCA - @ORPMTRVD  from RM00103 (updlock)  where CUSTNMBR = @CUSTNMBR  if (@@error <> 0)  begin  select @O_iErrorState = 3380    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE = 4)  begin  update RM00103 set  UNPSTOSA = UNPSTOSA + @ORDOCAMT,  UNPSTOCA = UNPSTOCA + @ORPMTRVD  from RM00103 (updlock)  where CUSTNMBR = @CUSTNMBR  if (@@error <> 0)  begin  select @O_iErrorState = 3381    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE in(2,3,5,6))   begin  declare  ItemLines INSENSITIVE  cursor for select  a.QTYTBAOR,  a.ATYALLOC,  a.ITEMNMBR,  a.LOCNCODE,  a.QUANTITY,  b.ITMTRKOP,  a.LNITMSEQ,  a.UOFM   from SOP10200 a (nolock), IV00101 b (nolock) where   a.SOPTYPE = @I_vSOPTYPE and a.SOPNUMBE = @I_vSOPNUMBE and a.ITEMNMBR = b.ITEMNMBR and b.ITEMTYPE <> 3  open ItemLines  select @iCursorRows = @@cursor_rows  if @iCursorRows = 0  begin  deallocate ItemLines  end  else   begin  fetch next from ItemLines into @QTYTBAOR, @ATYALLOC, @ITEMNMBR, @LOCNCODE, @QUANTITY, @ITMTRKOP, @LNITMSEQ,@UOFM  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 7006    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@I_vSOPTYPE = 5)  begin  select @QTYTBAOR = @QUANTITY  end   select @QTYBSUOM = QTYBSUOM from IV00106 (nolock) where ITEMNMBR = @ITEMNMBR and UOFM = @UOFM   update IV00102 set  ATYALLOC = ATYALLOC - (@ATYALLOC * @QTYBSUOM),  QTYBKORD = QTYBKORD - @QTYTBAOR  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and LOCNCODE = @LOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 7007    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set  ATYALLOC = ATYALLOC - (@ATYALLOC * @QTYBSUOM),  QTYBKORD = QTYBKORD - @QTYTBAOR  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 7008    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if ((@ITMTRKOP = 1) and (@ENABLEMULTIBIN = 1))  begin  update a set a.ATYALLOC = a.ATYALLOC - b.QUANTITY  from IV00112 a (updlock), SOP10203 b (nolock)  where a.ITEMNMBR = b.ITEMNMBR and  a.LOCNCODE = b.LOCNCODE and  a.BIN = b.BIN and  a.QTYTYPE = b.QTYTYPE and  b.SOPTYPE = @I_vSOPTYPE and  b.SOPNUMBE = @I_vSOPNUMBE and  b.LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 5992    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10203 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 5993    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@ITMTRKOP in (2,3)) and (@ENABLEMULTIBIN = 1))  begin  update a set a.ATYALLOC = a.ATYALLOC - g.SERLTQTY,  a.QUANTITY = a.QUANTITY -  g.SERLTQTY   from   IV00112 a (updlock),   (select a.ITEMNMBR as ITEMNMBR, a.BIN, a.QTYTYPE,b.SOPTYPE, b.SOPNUMBE,b.LNITMSEQ,   sum(b.SERLTQTY) as SERLTQTY  from IV00112 a (updlock),   SOP10201 b (nolock) where  a.ITEMNMBR = b.ITEMNMBR and  a.LOCNCODE = @LOCNCODE and  a.BIN = b.BIN and  a.QTYTYPE = b.QTYTYPE and  b.SOPTYPE = 2 and  b.SOPNUMBE = @I_vSOPNUMBE  and  b.LNITMSEQ = @LNITMSEQ  group by a.ITEMNMBR, a.BIN, a.QTYTYPE, b.SOPTYPE,b.SOPNUMBE,b.LNITMSEQ   ) g   where  a.ITEMNMBR = g.ITEMNMBR and  a.LOCNCODE = @LOCNCODE and  a.BIN = g.BIN and  a.QTYTYPE = g.QTYTYPE and  g.SOPTYPE = @I_vSOPTYPE and  g.SOPNUMBE = @I_vSOPNUMBE and  g.LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 20201    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@ITMTRKOP = 2)  begin  update IV00200 set SERLNSLD = 0 from IV00200 (updlock) where ITEMNMBR = @ITEMNMBR and SERLNMBR in   (select SERLTNUM from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ)  if (@@error <> 0)  begin  select @O_iErrorState = 2300    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if exists(select 1 from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  begin  delete IV00200 where SERLNMBR in  (select SERLTNUM from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  if (@@error <> 0)  begin  select @O_iErrorState = 6517    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @SEROVQTY = 0   select @SEROVQTY = sum(SERLTQTY)  from SOP10201  where SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1   update IV00102 set  QTYONHND = QTYONHND - @SEROVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = @LOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 6518    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set  QTYONHND = QTYONHND - @SEROVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 6519    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   delete SOP10201 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 2301    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@ITMTRKOP = 3)  begin  update a set a.ATYALLOC = a.ATYALLOC - b.SERLTQTY, a.LTNUMSLD = 0  from IV00300 a (updlock), SOP10201 b (nolock)  where b.SOPTYPE = @I_vSOPTYPE and  b.SOPNUMBE = @I_vSOPNUMBE and  b.LNITMSEQ = @LNITMSEQ and  a.DTSEQNUM = b.DTSEQNUM and  a.DATERECD = b.DATERECD and  a.LOTNUMBR = b.SERLTNUM and  a.LOCNCODE = @LOCNCODE and  a.ITEMNMBR = b.ITEMNMBR and  a.QTYTYPE = b.QTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 2302    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if exists(select 1 from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  begin  delete IV00300 where LOTNUMBR in  (select SERLTNUM from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  if (@@error <> 0)  begin  select @O_iErrorState = 6520    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @LOTOVQTY = 0   select @LOTOVQTY = sum(SERLTQTY)  from SOP10201  where SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1   update IV00102 set  QTYONHND = QTYONHND - @LOTOVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = @LOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 6521    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set  QTYONHND = QTYONHND - @LOTOVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 6522    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   delete SOP10201 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 2303    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  fetch next from ItemLines into @QTYTBAOR, @ATYALLOC, @ITEMNMBR, @LOCNCODE, @QUANTITY, @ITMTRKOP, @LNITMSEQ, @UOFM  end  deallocate ItemLines  end  end   if (@oErrString <> '')  begin  break  end   select @DOCAMNT = @DOCAMNT * -1        exec @iStatus = taCreateUpdateBatchHeaderRcd  @I_vBACHNUMB = @BACHNMBRFROM,  @I_vSERIES = 3,  @I_vGLPOSTDT = @DOCDATE,  @I_vBCHSOURC = 'Sales Entry',  @I_vDOCAMT = @DOCAMNT,       @I_vORIGIN = 1,  @I_vNUMOFTRX = -1,  @I_vCHEKBKID = '',  @I_vRequesterTrx = 1,  @I_vEFTFileFormat = 1,  @O_iErrorState = @iUpdtBthErrState output,  @oErrString = @iCreateBatchErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iUpdtBthErrState <> 0) or (@iError <> 0))  begin  if (@iCreateBatchErrString <> '')  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCreateBatchErrString  end  select @O_iErrorState = 7009    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   exec @iStatus = taGetTrxSourceNumber  3,  'SLSVT',  1,  @TRXSORCE output,  @iTrxSorceErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iTrxSorceErrState <> 0 or @TRXSORCE = ''))  begin  if (@iTrxSorceErrState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iTrxSorceErrState  end  select @O_iErrorState = 7010    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update SOP10101 set TRXSORCE = @TRXSORCE where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (@@error <> 0)  begin  select @O_iErrorState = 7011    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update SOP10104 set TRXSORCE = @TRXSORCE where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (@@error <> 0)  begin  select @O_iErrorState = 7012    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update SOP10105 set TRXSORCE = @TRXSORCE where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (@@error <> 0)  begin  select @O_iErrorState = 7013    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update SOP10202 set TRXSORCE = @TRXSORCE where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (@@error <> 0)  begin  select @O_iErrorState = 597    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@I_vSOPTYPE in (3,4,6))   begin  delete SOP10102 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 3382    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  select @DTAREF = rtrim(@I_vSOPNUMBE) + space(20 - len(@I_vSOPNUMBE)) + cast(@I_vSOPTYPE as char(1))  if (exists (select 1 from DTA10100 (nolock) where DTASERIES = 11 and DTAREF = @DTAREF))  begin  delete DTA10100 where DTASERIES = 11 and DTAREF = @DTAREF  if (@@error <> 0)  begin  select @O_iErrorState = 3728    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  if (exists (select 1 from DTA10200 (nolock) where DTASERIES = 11 and DTAREF = @DTAREF))  begin  delete DTA10200 where DTASERIES = 11 and DTAREF = @DTAREF  if (@@error <> 0)  begin  select @O_iErrorState = 3729    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   update SOP10103 set AMNTREMA = 0, OAMNTREM = 0, DEPSTATS = 2, TRXSORCE = @TRXSORCE where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 7005    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   insert SOP30200 (  ACCTAMNT,  ACTLSHIP,  ADDRESS1,  ADDRESS2,  ADDRESS3,  ALLOCABY,  APLYWITH,  BACHNUMB,  BACKDATE,  BCHSOURC,  BCKTXAMT,  BKTFRTAM,  BKTMSCAM,  BSIVCTTL,  CITY,  CMMSLAMT,  CNTCPRSN,  CODAMNT,  COMAPPTO,  COMMAMNT,  COMMNTID,  CORRCTN,  COUNTRY,  CREATDDT,  CSTPONBR,  CURNCYID,  CURRNIDX,  CUSTNAME,  CUSTNMBR,  DENXRATE,  DEPRECVD,  DISAVAMT,  DISAVTKN,  DISCDATE,  DISCFRGT,  DISCMISC,  DISCRTND,  DISTKNAM,  DOCAMNT,  DOCDATE,  DOCID,  DOCNCORR,  DSCDLRAM,  DSCPCTAM,  DSTBTCH1,  DSTBTCH2,  DTLSTREP,  DUEDATE,  DYSTINCR,  ECTRX,  EXCHDATE,  EXGTBLID,  EXTDCOST,  FAXNUMBR,  FRGTTXBL,  FRTAMNT,  FRTSCHID,  FRTTXAMT,  FUFILDAT,  GLPOSTDT,  INVODATE,  LOCNCODE,  MCTRXSTT,  MISCAMNT,  MISCTXBL,  MODIFDT,  MRKDNAMT,  MSCSCHID,  MSCTXAMT,  MSTRNUMB,  NCOMAMNT,  NOTEINDX,  OBTAXAMT,  OCOMMAMT,  ORACTAMT,  ORBKTFRT,  ORBKTMSC,  ORCODAMT,  ORCOSAMT,  ORDATKN,  ORDAVAMT,  ORDAVFRT,  ORDAVMSC,  ORDDLRAT,  ORDEPRVD,  ORDISRTD,  ORDISTKN,  ORDOCAMT,  ORDRDATE,  OREMSUBT,  OREXTCST,  ORFRTAMT,  ORFRTTAX,  ORIGNUMB,  ORIGTYPE,  ORMISCAMT,  ORMRKDAM,  ORMSCTAX,  ORNCMAMT,  ORPMTRVD,  ORSUBTOT,  ORTAXAMT,  ORTDISAM,  OTAXTAMT,  PCKSLPNO,  PHNUMBR1,  PHNUMBR2,  PHONE3,  PICTICNU,  POSTEDDT,  PRBTADCD,  PRCLEVEL,  PROSPECT,  PRSTADCD,  PSTGSTUS,  PTDUSRID,  PYMTRCVD,  PYMTRMID,  QUOEXPDA,  QUOTEDAT,  RATETPID,  REFRENCE,  REMSUBTO,  REPTING,  ReqShipDate,  RETUDATE,  RTCLCMTD,  SALEDATE,  SALSTERR,  SEQNCORR,  SHIPMTHD,  ShipToName,  SHPPGDOC,  SIMPLIFD,  SLPRSNID,  SOPHDRE1,  SOPHDRE2,  SOPHDRFL,  SOPLNERR,  SOPNUMBE,  SOPTYPE,  STATE,  SUBTOTAL,  Tax_Date,  TAXAMNT,  TAXEXMT1,  TAXEXMT2,  TAXSCHID,  TIME1,  TIMEREPD,  TIMESPRT,  TIMETREP,  TRDISAMT,  TRDISPCT,  TRXFREQU,  TRXSORCE,  TXBTXAMT,  TXENGCLD,  TXRGNNUM,  TXSCHSRC,  UPSZONE,  USDOCID1,  USDOCID2,  USER2ENT,  VOIDSTTS,  WITHHAMT,  XCHGRATE,  ZIPCODE,  CCode,  SOPSTATUS,  SHIPCOMPLETE,  DIRECTDEBIT,  WorkflowApprStatCreditLm,  WorkflowPriorityCreditLm,  WorkflowApprStatusQuote,  WorkflowPriorityQuote  )  select  case     when (@I_vRemovePayments = 1) and (@I_vSOPTYPE in(2,5))  then DOCAMNT  else ACCTAMNT  end,  ACTLSHIP,  ADDRESS1,  ADDRESS2,  ADDRESS3,  ALLOCABY,  APLYWITH,  @I_vBACHNUMB,  BACKDATE,  'Sales Void',  BCKTXAMT,  BKTFRTAM,  BKTMSCAM,  BSIVCTTL,  CITY,  CMMSLAMT,  CNTCPRSN,  CODAMNT,  COMAPPTO,  COMMAMNT,  COMMNTID,  CORRCTN,  COUNTRY,  CREATDDT,  CSTPONBR,  CURNCYID,  CURRNIDX,  CUSTNAME,  CUSTNMBR,  DENXRATE,  case     when (@I_vRemovePayments = 1) and (@I_vSOPTYPE in(2,5))   then 0  else DEPRECVD  end,  DISAVAMT,  DISAVTKN,  DISCDATE,  DISCFRGT,  DISCMISC,  DISCRTND,  DISTKNAM,  DOCAMNT,  DOCDATE,  DOCID,  DOCNCORR,  DSCDLRAM,  DSCPCTAM,  DSTBTCH1,  DSTBTCH2,  DTLSTREP,  DUEDATE,  DYSTINCR,  ECTRX,  EXCHDATE,  EXGTBLID,  EXTDCOST,  FAXNUMBR,  FRGTTXBL,  FRTAMNT,  FRTSCHID,  FRTTXAMT,  FUFILDAT,  convert(varchar(12),getdate()),  INVODATE,  LOCNCODE,  MCTRXSTT,  MISCAMNT,  MISCTXBL,  convert(varchar(12),getdate()),  MRKDNAMT,  MSCSCHID,  MSCTXAMT,  MSTRNUMB,  NCOMAMNT,  NOTEINDX,  OBTAXAMT,  OCOMMAMT,  case     when (@I_vRemovePayments = 1) and (@I_vSOPTYPE in(2,5))  then ORDOCAMT  else ORACTAMT  end,  ORBKTFRT,  ORBKTMSC,  ORCODAMT,  ORCOSAMT,  ORDATKN,  ORDAVAMT,  ORDAVFRT,  ORDAVMSC,  ORDDLRAT,  case     when (@I_vRemovePayments = 1) and (@I_vSOPTYPE in(2,5))  then 0   else ORDEPRVD  end,  ORDISRTD,  ORDISTKN,  ORDOCAMT,  ORDRDATE,  OREMSUBT,  OREXTCST,  ORFRTAMT,  ORFRTTAX,  ORIGNUMB,  ORIGTYPE,  ORMISCAMT,  ORMRKDAM,  ORMSCTAX,  ORNCMAMT,  ORPMTRVD,    ORSUBTOT,  ORTAXAMT,  ORTDISAM,  OTAXTAMT,  PCKSLPNO,  PHNUMBR1,  PHNUMBR2,  PHONE3,  PICTICNU,  convert(varchar(12),getdate()),  PRBTADCD,  PRCLEVEL,  PROSPECT,  PRSTADCD,  PSTGSTUS,  PTDUSRID,    PYMTRCVD,    PYMTRMID,  QUOEXPDA,  QUOTEDAT,  RATETPID,  REFRENCE,  REMSUBTO,  REPTING,  ReqShipDate,  RETUDATE,  RTCLCMTD,  SALEDATE,  SALSTERR,  SEQNCORR,  SHIPMTHD,  ShipToName,  SHPPGDOC,  SIMPLIFD,  SLPRSNID,  SOPHDRE1,  SOPHDRE2,  SOPHDRFL,  SOPLNERR,  SOPNUMBE,  SOPTYPE,  STATE,  SUBTOTAL,  Tax_Date,  TAXAMNT,  TAXEXMT1,  TAXEXMT2,  TAXSCHID,  TIME1,  TIMEREPD,  TIMESPRT,  TIMETREP,  TRDISAMT,  TRDISPCT,  TRXFREQU,  @TRXSORCE,  TXBTXAMT,  TXENGCLD,  TXRGNNUM,  TXSCHSRC,  UPSZONE,  USDOCID1,  USDOCID2,  USER2ENT,  1,  WITHHAMT,  XCHGRATE,  ZIPCODE,  CCode,  case  when SOPTYPE = 2 then 9  else 0  end,  SHIPCOMPLETE,  DIRECTDEBIT,  WorkflowApprStatCreditLm,  WorkflowPriorityCreditLm,  WorkflowApprStatusQuote,  WorkflowPriorityQuote  from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 7014    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   insert SOP30300  (  ACTLSHIP,  ADDRESS1,  ADDRESS2,  ADDRESS3,  ATYALLOC,  BKTSLSAM,  BRKFLD1,  BRKFLD2,  BRKFLD3,  BSIVCTTL,  CITY,  CMPNTSEQ,  CNTCPRSN,  COMMNTID,  COUNTRY,  CSLSINDX,  CURRNIDX,  DECPLCUR,  DECPLQTY,  DISCSALE,  DMGDINDX,  DOCNCORR,  DROPSHIP,  EXTDCOST,  EXTQTYAL,  EXTQTYSEL,  FAXNUMBR,  FUFILDAT,  INSRINDX,  INUSINDX,  INVINDX,  ITEMCODE,  ITEMDESC,  ITEMNMBR,  ITMTSHID,  IVITMTXB,  LNITMSEQ,  LOCNCODE,  MKDNINDX,  MRKDNAMT,  MRKDNPCT,  MRKDNTYP,  NONINVEN,  ODECPLCU,  ORBKTSLS,  ORDAVSLS,  OREPRICE,  OREXTCST,  ORGSEQNM,  ORMRKDAM,  ORTAXAMT,  ORTDISAM,  ORUNTCST,  ORUNTPRC,  OTAXTAMT,  OXTNDPRC,  PHONE1,  PHONE2,  PHONE3,  PRCLEVEL,  PRSTADCD,  PURCHSTAT,  QTYBSUOM,  QTYCANCE,  QTYCANOT,  QTYDMGED,  QTYFULFI,  QTYINSVC,  QTYINUSE,  QTYONHND,  QTYORDER,  QTYPRBAC,  QTYPRBOO,  QTYPRINV,  QTYPRORD,  QTYPRVRECVD,  QTYRECVD,  QTYREMAI,  QTYREMBO,  QTYRTRND,  QTYSLCTD,  QTYTBAOR,  QTYTOINV,  QTYTORDR,  QUANTITY,  REMPRICE,  ReqShipDate,  RTNSINDX,  SALSTERR,  SHIPMTHD,  ShipToName,  SLPRSNID,  SLSINDX,  SOPLNERR,  SOPNUMBE,  SOPTYPE,  STATE,  TAXAMNT,  TAXSCHID,  TRDISAMT,  TRXSORCE,  TXBTXAMT,  TXSCHSRC,  UNITCOST,  UNITPRCE,  UOFM,  XTNDPRCE,  ZIPCODE,  CCode,  ISLINEINTRA,  Flags     )  select  ACTLSHIP,  ADDRESS1,  ADDRESS2,  ADDRESS3,  ATYALLOC,  BKTSLSAM,  BRKFLD1,  BRKFLD2,  BRKFLD3,  BSIVCTTL,  CITY,  CMPNTSEQ,  CNTCPRSN,  COMMNTID,  COUNTRY,  CSLSINDX,  CURRNIDX,  DECPLCUR,  DECPLQTY,  DISCSALE,  DMGDINDX,  '',  DROPSHIP,  EXTDCOST,  EXTQTYAL,  EXTQTYSEL,  FAXNUMBR,  FUFILDAT,  INSRINDX,  INUSINDX,  INVINDX,  ITEMCODE,  ITEMDESC,  ITEMNMBR,  ITMTSHID,  IVITMTXB,  LNITMSEQ,  LOCNCODE,  MKDNINDX,  MRKDNAMT,  MRKDNPCT,  MRKDNTYP,  NONINVEN,  ODECPLCU,  ORBKTSLS,  ORDAVSLS,  OREPRICE,  OREXTCST,  ORGSEQNM,  ORMRKDAM,  ORTAXAMT,  ORTDISAM,  ORUNTCST,  ORUNTPRC,  OTAXTAMT,  OXTNDPRC,  PHONE1,  PHONE2,  PHONE3,  PRCLEVEL,  PRSTADCD,  PURCHSTAT,  QTYBSUOM,  QTYCANCE,  QTYCANOT,  QTYDMGED,  QTYFULFI,  QTYINSVC,  QTYINUSE,  QTYONHND,  QTYORDER,  QTYPRBAC,  QTYPRBOO,  QTYPRINV,  QTYPRORD,  QTYPRVRECVD,  QTYRECVD,  QTYREMAI,  QTYREMBO,  QTYRTRND,  QTYSLCTD,  QTYTBAOR,  QTYTOINV,  QTYTORDR,  QUANTITY,  REMPRICE,  ReqShipDate,  RTNSINDX,  SALSTERR,  SHIPMTHD,  ShipToName,  SLPRSNID,  SLSINDX,  SOPLNERR,  SOPNUMBE,  SOPTYPE,  STATE,  TAXAMNT,  TAXSCHID,  TRDISAMT,  @TRXSORCE,  TXBTXAMT,  TXSCHSRC,  UNITCOST,  UNITPRCE,  UOFM,  XTNDPRCE,  ZIPCODE,  CCode,  ISLINEINTRA,  2     from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 7015    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10200 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 7022    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10100 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 7021    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   insert SOP30100  (  APPROVL,  APPRVLDT,  APRVLUSERID,  BACHNUMB,  BCHCOMNT,  BCHSOURC,  BCHTOTAL,  CHEKBKID,  CNTRLTOT,  CNTRLTRX,  GLPOSTDT,  NOTEINDX,  NUMOFTRX,  REPRNTNT,  TRXMISNG,  TRXSORCE,  USERID  )  select  0,  @dtDEFAULT,  '',  @I_vBACHNUMB,  '',  @BCHSOURC,  0,  '',  0,  0,  @dtDEFAULT,  0,  0,  0,  0,  @TRXSORCE,  @I_vBACHNUMB  if (@@error <> 0)  begin  select @O_iErrorState = 7016    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if exists(select 1 from DYNAMICS..sysobjects (nolock) where name  = 'AAG00102')  begin  if exists(select 1 from DYNAMICS..AAG00102 (nolock) where CMPANYID = @CMPANYID)  begin   select @aaSubLedgerHdrID = aaSubLedgerHdrID from AAG20000 (nolock)  where DOCNUMBR = @I_vSOPNUMBE  exec @iStatus = aagDeleteAABMHdr  @aaSubLedgerHdrID = @aaSubLedgerHdrID  select @iError = @@error  if ((@iStatus <> 0) or (@iError <> 0))  begin  select @O_iErrorState = 8247    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end  end   if (@I_vSOPTYPE = 2)  begin  update RM00103 set  ONORDAMT = ONORDAMT - @OREMSUBT  from RM00103 (updlock)  where CUSTNMBR = @CUSTNMBR  if (@@error <> 0)  begin  select @O_iErrorState = 3379    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   break end  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation  = 3,   @I_vtable_path_name = @SOPHdrTbl,    @I_vrow_id  = @DexRowID,    @O_oExists  = @oExists output,   @O_oInsertStatus = @OInsStatus output,   @O_iErrorState  = @DexLockErrorState output select @iError = @@error if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0)) begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 2938    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  exec @iStatus = taSopVoidDocumentPost  @I_vSOPTYPE,  @I_vSOPNUMBE,  @I_vBACHNUMB,  @I_vRemovePayments,  @I_vVOIDDATE,     @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 3805    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopVoidDocument] TO [DYNGRP]
GO
