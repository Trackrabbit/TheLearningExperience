SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopTaxEngine]  @I_vMSTRTAXSLID char(15)='',   @I_vFREITAXDSLID char(15)='',   @I_vMISCAMTTAXSLID char(15)='',   @I_vDOCTYPE smallint=0,    @I_vDOCNUMBE char(30)='',   @I_vCUSTNMBR char(15)='',   @I_vTRADEPCT numeric(19,5)=0,   @I_vFRTAMT numeric(19,5)=0,   @I_vMISCAMTAMT numeric(19,5)=0,   @I_vINVOICETOTAL numeric(19,5)=0,  @I_vINVOICETOTTAXABLE numeric(19,5)=0,  @I_vDAFRTAMT numeric(19,5)=0,   @I_vDAMISCAMT numeric(19,5)=0,   @I_vSLAMDUNK int=0,    @I_vDECIMALPLACES int,    @I_vRTCLCMTD  smallint = -1,   @I_vXCHGRATE numeric(19,7) = 0,   @I_vVATENABLED int,    @I_vBACKOSALES numeric(19,5)=0 output,  @I_vBACKOFREHT numeric(19,5)=0 output,  @I_vBACKOMISC numeric(19,5)=0 output,  @I_vRECALC int =0 output,   @I_vTAXAMNT numeric(19,5)=0 output,  @I_vFUTOTAMT numeric(19,5)=0 output,  @I_vFRTTXAMT numeric(19,5)=0 output,  @I_vMSCTXAMT numeric(19,5)=0 output,  @O_iErrorState int = NULL output, @oErrString varchar(255) output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare @STAXAMNTMIN numeric(19,5),  @FRTTXAMTMIN numeric(19,5),  @MSCTXAMTMIN numeric(19,5),  @IVITMTXB smallint,  @TAXSCHID char (15),  @oErrorDesc char(255),  @O_oErrorState int,   @iStatus int,  @MASKTAXSLID char(15),     @DISCSALE numeric(19,5),    @TRXSOURCE char(5),  @DETAILTYPE int,  @LINENUMBR numeric(19,5),    @COST numeric(19,5),     @SALES numeric(19,5),     @TRADE numeric(19,5),     @TRADEPCT numeric(19,5),    @TRDISAMT numeric(19,5),  @FRTAMT numeric(19,5),     @MISCAMTAMT numeric(19,5),    @QUANTITY numeric(19,5),    @ITEMNMBR char(30),     @SLAMDUNK int,      @LineTAXAMNT numeric(19,5),    @BKTSLSAM numeric(19,5),  @BackoutTradeDisc numeric(19,5),  @TAXDTLID char(15),  @TDTAXMAX numeric(19,5),  @taxPotential numeric(19,5),  @lineSum numeric(19,5),  @newTax numeric(19,5),  @STAXAMNT numeric(19,5),  @FRTTXAMT numeric(19,5),  @MSCTXAMT numeric(19,5),  @TXDTOTTX  numeric(19,5),  @DEX_ROW_ID int,  @lastLine int,  @lastLine1 int,  @USEADVTX tinyint  select  @STAXAMNTMIN = 0,  @FRTTXAMTMIN = 0,  @MSCTXAMTMIN = 0,  @IVITMTXB = 0,  @TAXSCHID = '',  @oErrorDesc = '',  @O_oErrorState = 0,  @MASKTAXSLID = '',  @DISCSALE = 0,  @DETAILTYPE = 0,  @LINENUMBR = 0,  @COST = 0,  @SALES = 0,  @TRADE = 0,  @TRADEPCT = 0,  @FRTAMT = 0,  @MISCAMTAMT = 0,  @QUANTITY = 0,  @DISCSALE = 0,  @ITEMNMBR = '',  @SLAMDUNK = 0,  @O_iErrorState = 0,  @iStatus = 0,  @DETAILTYPE = 1,  @TRXSOURCE = 'SLSTE',  @LineTAXAMNT = 0,  @BKTSLSAM = 0,  @BackoutTradeDisc = 0,  @TAXDTLID = '',  @TDTAXMAX = 0,  @taxPotential = 0,  @lineSum = 0,  @newTax = 0,  @STAXAMNT = 0,  @FRTTXAMT = 0,  @MSCTXAMT = 0,  @TXDTOTTX  = 0,  @DEX_ROW_ID = 0,  @lastLine = 0,  @lastLine1 = 0,  @USEADVTX = 0  if ( @I_vMSTRTAXSLID is NULL or  @I_vFREITAXDSLID is NULL or  @I_vMISCAMTTAXSLID is NULL or  @I_vDOCTYPE is NULL or  @I_vDOCNUMBE is NULL or  @I_vCUSTNMBR is NULL or  @I_vRECALC is NULL or  @I_vTRADEPCT is NULL or  @I_vFRTAMT is NULL or  @I_vMISCAMTAMT is NULL or  @I_vTAXAMNT is NULL or  @I_vFUTOTAMT is NULL or  @I_vINVOICETOTAL is NULL or  @I_vINVOICETOTTAXABLE is NULL or  @I_vBACKOSALES is NULL or  @I_vBACKOFREHT is NULL or  @I_vBACKOMISC is NULL or  @I_vDAFRTAMT is NULL or  @I_vDAMISCAMT is NULL or  @I_vDECIMALPLACES is NULL or  @I_vVATENABLED is NULL or  @I_vSLAMDUNK is NULL) begin  select @O_iErrorState = 850    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@oErrString is NULL) begin  select @oErrString = '' end  if (exists(select 1 from SOP10105 (nolock) where SOPNUMBE = @I_vDOCNUMBE and SOPTYPE = @I_vDOCTYPE)) begin  delete SOP10105 where SOPNUMBE = @I_vDOCNUMBE and SOPTYPE = @I_vDOCTYPE  if @@error <> 0  begin  select @O_iErrorState = 823    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  select @USEADVTX = USEADVTX from SOP40100 (nolock)  create table #minmax ( TAXDTLID char(15), TAXSUM numeric(19,5), TDTAXMAX numeric(19,5), TDTAXMIN numeric(19,5), LINESUM numeric(19,5) )  declare taxlines insensitive cursor for select  LNITMSEQ,  OXTNDPRC,  ORUNTCST,  QUANTITY,  ITMTSHID,  IVITMTXB,  TAXSCHID,  ORTDISAM,  ITEMNMBR  from SOP10200 (nolock) where SOPNUMBE = @I_vDOCNUMBE and SOPTYPE = @I_vDOCTYPE and CMPNTSEQ = 0  open taxlines if @@cursor_rows > 0 begin  fetch next from taxlines into  @LINENUMBR,  @SALES,  @COST,  @QUANTITY,  @MASKTAXSLID,  @IVITMTXB,  @TAXSCHID,  @TRADE,  @ITEMNMBR   while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 851    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  break  end   select @SALES = @SALES - @TRADE    if (@IVITMTXB in(0,3))  begin  select @MASKTAXSLID = @TAXSCHID  end   if (@IVITMTXB <> 2)  begin  exec @iStatus = taTaxEngine  @I_vMSTRTAXSLID = @TAXSCHID,     @I_vMASKTAXSLID = @MASKTAXSLID,     @I_vDETAILTYPE = @DETAILTYPE,     @I_vTRXSOURCE = @TRXSOURCE,      @I_vDOCTYPE = @I_vDOCTYPE,     @I_vDOCNUMBE = @I_vDOCNUMBE,     @I_vCUSTNMBR = @I_vCUSTNMBR,     @I_vLINENUMBR = @LINENUMBR,     @I_vCOST = @COST,      @I_vTRADE = @TRADE,      @I_vTRADEPCT = @TRADEPCT,     @I_vNUMUNITS = @QUANTITY,     @I_vINVOICETOTAL = @I_vINVOICETOTAL,    @I_vINVOICETOTTAXABLE = @I_vINVOICETOTTAXABLE,   @I_vDAVSALES = @DISCSALE,     @I_vITEMNMBR = @ITEMNMBR,     @I_vSLAMDUNK = @SLAMDUNK,     @I_vVATENABLED = @I_vVATENABLED,    @I_vDECIMALPLACES = @I_vDECIMALPLACES,    @I_vRTCLCMTD = @I_vRTCLCMTD,     @I_vXCHGRATE = @I_vXCHGRATE,     @I_vSALES = @SALES output,     @I_vBackoutTradeDisc = @BackoutTradeDisc output,  @I_vBACKOSALES = @I_vBACKOSALES output,    @I_vBACKOFREHT = @I_vBACKOFREHT output,    @I_vBACKOMISC = @I_vBACKOMISC output,    @I_vRECALC = @I_vRECALC output,     @I_vTAXAMNT = @LineTAXAMNT output,    @I_vFUTOTAMT = @I_vFUTOTAMT output,    @I_vFRTTXAMT = @I_vFRTTXAMT output,    @I_vMSCTXAMT = @I_vMSCTXAMT output,    @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if @O_iErrorState <> 0 or @@error <> 0 or @iStatus <> 0  begin  select @O_iErrorState = 825    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  break  end  end   select @BKTSLSAM = @SALES + @BackoutTradeDisc   update SOP10200  set  BKTSLSAM = @BKTSLSAM,  ORBKTSLS = @BKTSLSAM,  BackoutTradeDisc = @BackoutTradeDisc,  OrigBackoutTradeDisc = @BackoutTradeDisc  where  SOPTYPE = @I_vDOCTYPE  and SOPNUMBE = @I_vDOCNUMBE  and LNITMSEQ = @LINENUMBR  and CMPNTSEQ = 0  if (@@error <> 0)  begin  select @O_iErrorState = 754    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   select @I_vTAXAMNT = @I_vTAXAMNT + @LineTAXAMNT  select @LineTAXAMNT = 0  fetch next from taxlines into  @LINENUMBR,  @SALES,  @COST,  @QUANTITY,  @MASKTAXSLID,  @IVITMTXB,  @TAXSCHID,  @TRADE,  @ITEMNMBR  end end  deallocate taxlines  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  if (@I_vMISCAMTAMT <> 0)  begin  exec @iStatus = taTaxEngine  @I_vMSTRTAXSLID = @I_vMSTRTAXSLID,    @I_vMISCAMTTAXSLID = @I_vMISCAMTTAXSLID,   @I_vDETAILTYPE = @DETAILTYPE,     @I_vTRXSOURCE = @TRXSOURCE,      @I_vDOCTYPE = @I_vDOCTYPE,     @I_vDOCNUMBE = @I_vDOCNUMBE,     @I_vCUSTNMBR = @I_vCUSTNMBR,     @I_vLINENUMBR = @LINENUMBR,     @I_vCOST = @COST,      @I_vMISCAMTAMT = @I_vMISCAMTAMT,  @I_vSALES = @SALES,      @I_vTRADE = @TRADE,      @I_vTRADEPCT = @TRADEPCT,     @I_vNUMUNITS = @QUANTITY,     @I_vINVOICETOTAL = @I_vINVOICETOTAL,    @I_vINVOICETOTTAXABLE = @I_vINVOICETOTTAXABLE,   @I_vDAMISCAMT = @I_vDAMISCAMT,  @I_vDAVSALES = @DISCSALE,     @I_vITEMNMBR = @ITEMNMBR,     @I_vSLAMDUNK = @SLAMDUNK,     @I_vVATENABLED = @I_vVATENABLED,    @I_vDECIMALPLACES = @I_vDECIMALPLACES,    @I_vRTCLCMTD = @I_vRTCLCMTD,     @I_vXCHGRATE = @I_vXCHGRATE,      @I_vBackoutTradeDisc = @BackoutTradeDisc output,  @I_vBACKOSALES = @I_vBACKOSALES output,    @I_vBACKOFREHT = @I_vBACKOFREHT output,    @I_vBACKOMISC = @I_vBACKOMISC output,    @I_vRECALC = @I_vRECALC output,     @I_vTAXAMNT = @LineTAXAMNT output,    @I_vFUTOTAMT = @I_vFUTOTAMT output,    @I_vFRTTXAMT = @I_vFRTTXAMT output,    @I_vMSCTXAMT = @I_vMSCTXAMT output,    @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output   if ((@O_iErrorState <> 0) or (@@error <> 0) or (@iStatus <> 0))  begin  select @O_iErrorState = 853    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  return (@O_iErrorState)  end end  select @LineTAXAMNT = 0  if (@I_vFRTAMT <> 0)  begin  exec @iStatus = taTaxEngine  @I_vMSTRTAXSLID = @I_vMSTRTAXSLID,    @I_vFREITAXDSLID = @I_vFREITAXDSLID,    @I_vDETAILTYPE = @DETAILTYPE,     @I_vTRXSOURCE = @TRXSOURCE,      @I_vDOCTYPE = @I_vDOCTYPE,     @I_vDOCNUMBE = @I_vDOCNUMBE,     @I_vCUSTNMBR = @I_vCUSTNMBR,     @I_vLINENUMBR = @LINENUMBR,     @I_vCOST = @COST,       @I_vFRTAMT = @I_vFRTAMT,     @I_vSALES = @SALES,      @I_vTRADE = @TRADE,      @I_vTRADEPCT = @TRADEPCT,     @I_vNUMUNITS = @QUANTITY,     @I_vINVOICETOTAL = @I_vINVOICETOTAL,    @I_vINVOICETOTTAXABLE = @I_vINVOICETOTTAXABLE,   @I_vDAFRTAMT = @I_vDAFRTAMT,      @I_vDAVSALES = @DISCSALE,     @I_vITEMNMBR = @ITEMNMBR,     @I_vSLAMDUNK = @SLAMDUNK,     @I_vVATENABLED = @I_vVATENABLED,    @I_vDECIMALPLACES = @I_vDECIMALPLACES,    @I_vRTCLCMTD = @I_vRTCLCMTD,     @I_vXCHGRATE = @I_vXCHGRATE,     @I_vBackoutTradeDisc = @BackoutTradeDisc output,  @I_vBACKOSALES = @I_vBACKOSALES output,    @I_vBACKOFREHT = @I_vBACKOFREHT output,    @I_vBACKOMISC = @I_vBACKOMISC output,    @I_vRECALC = @I_vRECALC output,     @I_vTAXAMNT = @LineTAXAMNT output,    @I_vFUTOTAMT = @I_vFUTOTAMT output,    @I_vFRTTXAMT = @I_vFRTTXAMT output,    @I_vMSCTXAMT = @I_vMSCTXAMT output,    @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@O_iErrorState <> 0) or (@@error <> 0) or (@iStatus <> 0))  begin  select @O_iErrorState = 854    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  return (@O_iErrorState)  end end  if exists(select 1 from #minmax(nolock) where TDTAXMIN <> 0) begin   select  @STAXAMNTMIN = isnull(sum(STAXAMNT),0),  @FRTTXAMTMIN = isnull(sum(FRTTXAMT),0),  @MSCTXAMTMIN = isnull(sum(MSCTXAMT),0)  from SOP10105 a (nolock), #minmax b (nolock)  where a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.TAXDTLID = b.TAXDTLID and  a.LNITMSEQ = 0 and  b.TDTAXMIN > 0 and  abs(b.TAXSUM) < b.TDTAXMIN   select  @I_vTAXAMNT = @I_vTAXAMNT - @STAXAMNTMIN,  @I_vFRTTXAMT = @I_vFRTTXAMT - @FRTTXAMTMIN,  @I_vMSCTXAMT = @I_vMSCTXAMT - @MSCTXAMTMIN   update a set  STAXAMNT = 0,  ORSLSTAX = 0,  FRTTXAMT = 0,  ORFRTTAX = 0,  MSCTXAMT = 0,  ORMSCTAX = 0 from SOP10105 a, #minmax b (nolock)  where a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.TAXDTLID = b.TAXDTLID and  b.TDTAXMIN > 0 and  abs(b.TAXSUM) < b.TDTAXMIN   if (@@error <> 0)  begin  select @O_iErrorState = 5405    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if exists(select 1 from #minmax(nolock) where TDTAXMAX <> 0) begin  create table #ordering  (  TAXDTLID char(15),  STAXAMNT numeric(19,5),  FRTTXAMT numeric(19,5),  MSCTXAMT numeric(19,5),  TXDTOTTX numeric(19,5),   DEX_ROW_ID int  )   select  @I_vTAXAMNT = 0,  @I_vFRTTXAMT = 0,  @I_vMSCTXAMT = 0   declare taxes_to_recalc insensitive cursor for select  TAXDTLID,  TDTAXMAX  from #minmax (nolock)  where TDTAXMAX <> 0   open taxes_to_recalc  if (@@cursor_rows > 0)  begin  fetch next from taxes_to_recalc into  @TAXDTLID,  @TDTAXMAX  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 9352    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  deallocate taxes_to_recalc  break  end   truncate table #ordering   select @taxPotential = OTTAXPON from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and LNITMSEQ = 0   if (@taxPotential > 0) and exists(select 1 from SOP10105(nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and TAXDTLID = @TAXDTLID and   OTTAXPON < 0 and LNITMSEQ <> 0)  begin  insert #ordering  (  TAXDTLID,  STAXAMNT,  FRTTXAMT,  MSCTXAMT,  TXDTOTTX,   DEX_ROW_ID  )  select   TAXDTLID,  ORSLSTAX,   ORFRTTAX,   ORMSCTAX,   OTTAXPON,   DEX_ROW_ID  from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID  and LNITMSEQ <> 0 and (STAXAMNT < 0 or FRTTXAMT < 0 or MSCTXAMT < 0)  order by LNITMSEQ   insert #ordering  (  TAXDTLID,  STAXAMNT,  FRTTXAMT,  MSCTXAMT,  TXDTOTTX,   DEX_ROW_ID  )  select   TAXDTLID,  ORSLSTAX,   ORFRTTAX,   ORMSCTAX,   OTTAXPON,    DEX_ROW_ID  from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID  and LNITMSEQ <> 0 and (STAXAMNT > 0 or FRTTXAMT > 0 or MSCTXAMT > 0)  order by LNITMSEQ   declare lines_to_recalc insensitive cursor for select  STAXAMNT,  FRTTXAMT,  MSCTXAMT,  TXDTOTTX,  DEX_ROW_ID  from #ordering (nolock) where TAXDTLID = @TAXDTLID   open lines_to_recalc  if (@@cursor_rows > 0)  begin  fetch next from lines_to_recalc into  @STAXAMNT,  @FRTTXAMT,  @MSCTXAMT,  @TXDTOTTX,  @DEX_ROW_ID  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 9353    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  deallocate lines_to_recalc  break  end   if (@STAXAMNT < 0 or @FRTTXAMT < 0 or @MSCTXAMT < 0)  begin  update SOP10105 set  STAXAMNT = 0,  ORSLSTAX = 0,  FRTTXAMT = 0,  ORFRTTAX = 0,  MSCTXAMT = 0,  ORMSCTAX = 0  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and DEX_ROW_ID = @DEX_ROW_ID  if (@@error <> 0)  begin  select @O_iErrorState = 9354    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end  end   if (@STAXAMNT > 0 or @FRTTXAMT > 0 or @MSCTXAMT > 0)  begin  select @lineSum = @lineSum + @STAXAMNT + @FRTTXAMT + @MSCTXAMT   if (@TDTAXMAX > @taxPotential)  begin  if (@taxPotential > @lineSum)  begin  select @newTax = @taxPotential - @lineSum  end  else  begin  select @newTax = @taxPotential - (@lineSum - (@STAXAMNT + @FRTTXAMT + @MSCTXAMT))  end  end  else  begin  select @newTax = (@TDTAXMAX - (@lineSum - (@STAXAMNT + @FRTTXAMT + @MSCTXAMT)))  end   if (((@lineSum >= @TDTAXMAX) or (@lineSum >= @taxPotential)) and (@lastLine = 0))  begin  select @lastLine = @DEX_ROW_ID, @lastLine1 = 1  end   if (@lineSum > @taxPotential) and (@lastLine1 = 1)  begin  select @lastLine1 = 1  update SOP10105 set  STAXAMNT =  case  when STAXAMNT > 0  then @newTax  else 0  end,  ORSLSTAX =  case  when ORSLSTAX > 0  then @newTax  else 0  end,  FRTTXAMT =  case  when FRTTXAMT > 0  then @newTax  else 0  end,  ORFRTTAX =  case  when ORFRTTAX > 0  then @newTax  else 0  end,  MSCTXAMT =  case  when MSCTXAMT > 0  then @newTax  else 0  end,  ORMSCTAX =  case  when ORMSCTAX > 0  then @newTax  else 0  end  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and DEX_ROW_ID = @DEX_ROW_ID  if (@@error <> 0)  begin  select @O_iErrorState = 9355    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end  end   if (@DEX_ROW_ID > @lastLine) and @lastLine <> 0  begin  update SOP10105 set  STAXAMNT = 0,  ORSLSTAX = 0,  FRTTXAMT = 0,  ORFRTTAX = 0,  MSCTXAMT = 0,  ORMSCTAX = 0  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and DEX_ROW_ID = @DEX_ROW_ID  if (@@error <> 0)  begin  select @O_iErrorState = 9356    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end   end  end   select @newTax = 0, @STAXAMNT = 0, @FRTTXAMT = 0, @MSCTXAMT = 0, @DEX_ROW_ID = 0   fetch next from lines_to_recalc into  @STAXAMNT,  @FRTTXAMT,  @MSCTXAMT,  @TXDTOTTX,  @DEX_ROW_ID  end   select @STAXAMNT = isnull(sum(STAXAMNT),0),  @FRTTXAMT = isnull(sum(FRTTXAMT),0),  @MSCTXAMT = isnull(sum(MSCTXAMT),0)  from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and LNITMSEQ <> 0   update SOP10105 set  STAXAMNT = @STAXAMNT,  ORSLSTAX = @STAXAMNT,  FRTTXAMT = @FRTTXAMT,  ORFRTTAX = @FRTTXAMT,  MSCTXAMT = @MSCTXAMT,  ORMSCTAX = @MSCTXAMT  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and LNITMSEQ = 0  if (@@error <> 0)  begin  select @O_iErrorState = 9357    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end  end   select @lastLine = 0, @lineSum = 0  deallocate lines_to_recalc   end   if (@taxPotential < 0) and exists(select 1 from SOP10105(nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and TAXDTLID = @TAXDTLID and   OTTAXPON > 0 and LNITMSEQ <> 0)  begin   insert #ordering  (  TAXDTLID,  STAXAMNT,  FRTTXAMT,  MSCTXAMT,  TXDTOTTX,   DEX_ROW_ID  )  select   TAXDTLID,  ORSLSTAX,   ORFRTTAX,   ORMSCTAX,   OTTAXPON,   DEX_ROW_ID  from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID  and LNITMSEQ <> 0 and (STAXAMNT > 0 or FRTTXAMT > 0 or MSCTXAMT > 0)  order by LNITMSEQ   insert #ordering  (  TAXDTLID,  STAXAMNT,  FRTTXAMT,  MSCTXAMT,  TXDTOTTX,   DEX_ROW_ID  )  select   TAXDTLID,  ORSLSTAX,   ORFRTTAX,   ORMSCTAX,   OTTAXPON,    DEX_ROW_ID  from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID  and LNITMSEQ <> 0 and (STAXAMNT < 0 or FRTTXAMT < 0 or MSCTXAMT < 0)  order by LNITMSEQ   declare lines_to_recalc insensitive cursor for select  STAXAMNT,  FRTTXAMT,  MSCTXAMT,  TXDTOTTX,  DEX_ROW_ID  from #ordering (nolock) where TAXDTLID = @TAXDTLID   open lines_to_recalc  if (@@cursor_rows > 0)  begin  fetch next from lines_to_recalc into  @STAXAMNT,  @FRTTXAMT,  @MSCTXAMT,  @TXDTOTTX,  @DEX_ROW_ID  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 9358    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  deallocate lines_to_recalc  break  end   if (@STAXAMNT > 0 or @FRTTXAMT > 0 or @MSCTXAMT > 0)  begin  update SOP10105 set  STAXAMNT = 0,  ORSLSTAX = 0,  FRTTXAMT = 0,  ORFRTTAX = 0,  MSCTXAMT = 0,  ORMSCTAX = 0  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and DEX_ROW_ID = @DEX_ROW_ID  if (@@error <> 0)  begin  select @O_iErrorState = 9359    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end  end   if (@STAXAMNT < 0 or @FRTTXAMT < 0 or @MSCTXAMT < 0)  begin  select @lineSum = @lineSum + @STAXAMNT + @FRTTXAMT + @MSCTXAMT   if (abs(@taxPotential) < @TDTAXMAX)  begin  if (@taxPotential < @lineSum)  begin  select @newTax = @lineSum - @taxPotential  end  else  begin  select @newTax = (@lineSum - (@STAXAMNT + @FRTTXAMT + @MSCTXAMT)) - @taxPotential  select @lastLine = @DEX_ROW_ID, @lastLine1 = 1  end  end  else  begin  select @newTax = (@TDTAXMAX - abs((@lineSum - (@STAXAMNT + @FRTTXAMT + @MSCTXAMT))))  end   if (((abs(@lineSum) >= @TDTAXMAX) or (abs(@lineSum) >= abs(@taxPotential))) and (@lastLine = 0))  begin  select @lastLine = @DEX_ROW_ID, @lastLine1 = 1  end   if ((@lineSum < @taxPotential) or (abs(@lineSum) >= @TDTAXMAX)) and (@lastLine1 = 1)  begin  select @lastLine1 = 1  update SOP10105 set  STAXAMNT =  case  when STAXAMNT < 0  then @newTax * -1  else 0  end,  ORSLSTAX =  case  when ORSLSTAX < 0  then @newTax * -1  else 0  end,  FRTTXAMT =  case  when FRTTXAMT < 0  then @newTax * -1  else 0  end,  ORFRTTAX =  case  when ORFRTTAX < 0  then @newTax * -1  else 0  end,  MSCTXAMT =  case  when MSCTXAMT < 0  then @newTax * -1  else 0  end,  ORMSCTAX =  case  when ORMSCTAX < 0  then @newTax * -1  else 0  end  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and DEX_ROW_ID = @DEX_ROW_ID  if (@@error <> 0)  begin  select @O_iErrorState = 9360    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end  end   if (@DEX_ROW_ID > @lastLine) and @lastLine <> 0  begin  update SOP10105 set  STAXAMNT = 0,  ORSLSTAX = 0,  FRTTXAMT = 0,  ORFRTTAX = 0,  MSCTXAMT = 0,  ORMSCTAX = 0  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and DEX_ROW_ID = @DEX_ROW_ID  if (@@error <> 0)  begin  select @O_iErrorState = 9361    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end   end  end   select @newTax = 0, @STAXAMNT = 0, @FRTTXAMT = 0, @MSCTXAMT = 0, @DEX_ROW_ID = 0   fetch next from lines_to_recalc into  @STAXAMNT,  @FRTTXAMT,  @MSCTXAMT,  @TXDTOTTX,  @DEX_ROW_ID  end   select @STAXAMNT = isnull(sum(STAXAMNT),0),  @FRTTXAMT = isnull(sum(FRTTXAMT),0),  @MSCTXAMT = isnull(sum(MSCTXAMT),0)  from SOP10105 (nolock)  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and LNITMSEQ <> 0  update SOP10105 set  STAXAMNT = @STAXAMNT,  ORSLSTAX = @STAXAMNT,  FRTTXAMT = @FRTTXAMT,  ORFRTTAX = @FRTTXAMT,  MSCTXAMT = @MSCTXAMT,  ORMSCTAX = @MSCTXAMT  where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and  TAXDTLID = @TAXDTLID and LNITMSEQ = 0  if (@@error <> 0)  begin  select @O_iErrorState = 9362    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate lines_to_recalc  break  end   select  @I_vTAXAMNT = @I_vTAXAMNT + @STAXAMNT,  @I_vFRTTXAMT = @FRTTXAMT,  @I_vMSCTXAMT = @MSCTXAMT  end   select @lastLine = 0, @lineSum = 0  deallocate lines_to_recalc  end   if (@O_iErrorState <> 0)  begin  deallocate taxes_to_recalc  return (@O_iErrorState)  end   fetch next from taxes_to_recalc into  @TAXDTLID,  @TDTAXMAX  end  deallocate taxes_to_recalc  end   select  @I_vTAXAMNT = isnull(sum(STAXAMNT),0),  @I_vFRTTXAMT = isnull(sum(FRTTXAMT),0),  @I_vMSCTXAMT = isnull(sum(MSCTXAMT),0)  from SOP10105 (nolock) where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and LNITMSEQ <> 0 and BKOUTTAX = 0 end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  if exists (select 1 from SOP10105 (nolock)   where SOPTYPE = @I_vDOCTYPE and SOPNUMBE = @I_vDOCNUMBE and   TAXDTLID in(select TAXDTLID from TX00201 (nolock) where ((TXDTQUAL = 3) or (TXDTLBSE = 6))  and TDTABMIN > 0)) begin  select  @I_vTAXAMNT = @I_vTAXAMNT - isnull(sum(STAXAMNT),0),  @I_vFRTTXAMT = @I_vFRTTXAMT - isnull(sum(FRTTXAMT),0),  @I_vMSCTXAMT = @I_vMSCTXAMT - isnull(sum(MSCTXAMT),0)  from SOP10105 a (nolock),  (select a.TDTTXSLS TDTTXSLS, a.TAXDTLID TAXDTLID,b.TDTABMIN TDTABMIN from SOP10105 a (nolock), TX00201 b (nolock)  where   a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.LNITMSEQ = 0 and  a.TAXDTLID = b.TAXDTLID and  a.TAXDTLID in(select TAXDTLID from TX00201 (nolock) where ((TXDTQUAL = 3) or (TXDTLBSE = 6))  and TDTABMIN > 0)  group by a.TDTTXSLS,a.TAXDTLID,b.TDTABMIN) t1  where a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.LNITMSEQ = 0 and  a.TAXDTLID = t1.TAXDTLID and  abs(t1.TDTTXSLS) < t1.TDTABMIN  update a set  TDTTXSLS = 0,  ORTXSLS = 0,  TXDTOTTX = 0,  OTTAXPON = 0,  STAXAMNT = 0,  ORSLSTAX = 0,  FRTTXAMT = 0,  ORFRTTAX = 0,  MSCTXAMT = 0,  ORMSCTAX = 0  from SOP10105 a,  (select a.TDTTXSLS TDTTXSLS, a.TAXDTLID TAXDTLID,b.TDTABMIN TDTABMIN from SOP10105 a (nolock), TX00201 b (nolock)  where   a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.LNITMSEQ = 0 and  a.TAXDTLID = b.TAXDTLID and  a.TAXDTLID in(select TAXDTLID from TX00201 (nolock) where ((TXDTQUAL = 3) or (TXDTLBSE = 6))  and TDTABMIN > 0)  group by a.TDTTXSLS,a.TAXDTLID,b.TDTABMIN) t1  where a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.TAXDTLID = t1.TAXDTLID and  abs(t1.TDTTXSLS) < t1.TDTABMIN  if (@@error <> 0)  begin  select @O_iErrorState = 5476    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  update a set  a.TAXAMNT = t1.STAXAMNT, a.ORTAXAMT = t1.STAXAMNT  from SOP10200 a,  (select isnull(sum(c.STAXAMNT),0) as STAXAMNT, c.LNITMSEQ as LNITMSEQ  from SOP10105 c (nolock), SOP10200 a (nolock)  where c.SOPTYPE = @I_vDOCTYPE and  c.SOPNUMBE = @I_vDOCNUMBE and  c.LNITMSEQ = a.LNITMSEQ and  c.LNITMSEQ <> 0 and  a.CMPNTSEQ = 0 and   c.SOPTYPE = a.SOPTYPE and  c.SOPNUMBE = a.SOPNUMBE and  c.BKOUTTAX <> 1 group by c.LNITMSEQ  ) t1  where a.SOPTYPE = @I_vDOCTYPE and  a.SOPNUMBE = @I_vDOCNUMBE and  a.LNITMSEQ = t1.LNITMSEQ and   a.CMPNTSEQ = 0  if (@@error <> 0) begin  select @O_iErrorState = 5404    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopTaxEngine] TO [DYNGRP]
GO
