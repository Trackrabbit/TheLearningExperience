SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpAdjustOverage]  @I_iSQLSessionID        int             = NULL,  @I_iAccountIndex        int             = NULL,  @I_mDebit               numeric(19,5)    = NULL,  @I_mCredit              numeric(19,5)    = NULL,  @I_sAllocationType      smallint        = NULL,  @I_mOrigDebit           numeric(19,5)    = NULL,  @I_mOrigCredit          numeric(19,5)    = NULL,  @O_iErrorState          int             = NULL  output as  declare  @mDeltaDebit                    numeric(19,5),  @mDeltaCredit                   numeric(19,5),  @mTotalD                        numeric(19,5),   @mTotalC                        numeric(19,5),   @mOrigDeltaDebit                numeric(19,5),  @mOrigDeltaCredit               numeric(19,5),  @mOrigTotalD                    numeric(19,5),  @mOrigTotalC                    numeric(19,5),  @iDistributionIndex             int,  @tTransaction                   tinyint,  @tLoop                          tinyint,  @iTempRowCount int  select @O_iErrorState = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if      @I_iSQLSessionID        is NULL or  @I_iAccountIndex        is NULL or  @I_mDebit               is NULL or  @I_mCredit              is NULL or  @I_sAllocationType      is NULL or  @I_mOrigDebit           is NULL or  @I_mOrigCredit          is NULL  begin  select @O_iErrorState = 20145  break  end    select   @mDeltaDebit = 0.0,   @mDeltaCredit = 0.0,   @mOrigDeltaCredit = 0.0,   @mOrigDeltaDebit = 0.0    select   @mTotalD = sum(Debit),  @mTotalC = sum(Credit),  @mOrigTotalD = sum(OriginatingDebit),  @mOrigTotalC = sum(OriginatingCredit)  from   #Distributions   where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and     AllocationType = @I_sAllocationType   if @mTotalD is NULL or @mTotalC is NULL or @mOrigTotalD is NULL or @mOrigTotalC is NULL  begin  select @O_iErrorState = 20107  break  end    if (@mTotalD - @mTotalC) <> (@I_mDebit - @I_mCredit)  begin  if      ((@I_mDebit - @I_mCredit) < 0 and (@mTotalD - @mTotalC) > 0) or  ((@I_mDebit - @I_mCredit) > 0 and (@mTotalD - @mTotalC) < 0)  begin  select @O_iErrorState = 20288  break  end    select @mDeltaDebit = @I_mDebit - @mTotalD  select @mDeltaCredit = @I_mCredit - @mTotalC  end    if (@mOrigTotalD - @mOrigTotalC) <> (@I_mOrigDebit - @I_mOrigCredit)  begin  if      ((@I_mOrigDebit - @I_mOrigCredit) < 0 and (@mOrigTotalD - @mOrigTotalC) > 0) or  ((@I_mOrigDebit - @I_mOrigCredit) > 0 and (@mOrigTotalD - @mOrigTotalC) < 0)  begin  select @O_iErrorState = 20785  break  end    select @mOrigDeltaDebit = @I_mOrigDebit - @mOrigTotalD  select @mOrigDeltaCredit = @I_mOrigCredit - @mOrigTotalC   end    if @mDeltaDebit <> 0.0 or @mDeltaCredit <> 0.0 or @mOrigDeltaDebit <> 0.0 or @mOrigDeltaCredit <> 0.0  begin   if (@mTotalD - @mTotalC) = 0.0 or   (@mOrigTotalD - @mOrigTotalC) = 0.0  begin     update #Distributions   set   Debit = Debit + @mDeltaDebit,  Credit = Credit + @mDeltaCredit,  OriginatingDebit = OriginatingDebit + @mOrigDeltaDebit,  OriginatingCredit = OriginatingCredit + @mOrigDeltaCredit  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and     AllocationType = @I_sAllocationType  and     DistributionIndex =   (       select   max (DistributionIndex)  from  #Distributions   where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex )  select @iTempRowCount= @@rowcount  end   else  begin     update #Distributions   set   Debit = Debit + @mDeltaDebit,  Credit = Credit + @mDeltaCredit,  OriginatingDebit = OriginatingDebit + @mOrigDeltaDebit,  OriginatingCredit = OriginatingCredit + @mOrigDeltaCredit  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and     AllocationType = @I_sAllocationType  and     DistributionIndex =   (       select   max (DistributionIndex)  from  #Distributions   where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and     (Debit <> 0.0 or Credit <> 0.0)  and     abs(Debit - Credit) >= abs(@mDeltaDebit - @mDeltaCredit) )   select @iTempRowCount= @@rowcount   if @iTempRowCount<> 1  begin   update #Distributions   set   Debit = Debit + @mDeltaDebit,  Credit = Credit + @mDeltaCredit,  OriginatingDebit = OriginatingDebit + @mOrigDeltaDebit,  OriginatingCredit = OriginatingCredit + @mOrigDeltaCredit  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and     AllocationType = @I_sAllocationType  and     DistributionIndex =   (       select   max (DistributionIndex)  from  #Distributions   where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and     (Debit <> 0.0 or Credit <> 0.0))  select @iTempRowCount= @@rowcount  end   end   if @iTempRowCount <> 1  begin  select @O_iErrorState = 20108  break  end    end   end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return     
GO
GRANT EXECUTE ON  [dbo].[glpAdjustOverage] TO [DYNGRP]
GO
