SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ncCreateInterfaceRec] 	@I_iSQLSessionID int = NULL, 	@I_sTransactionType smallint = NULL, 	@I_iJournalEntry int = NULL, 	@I_cUserID char(15) = NULL, 	@I_iAccountIndex int = NULL, 	@I_sAccountType smallint = NULL, 	@I_nDebit numeric(19,5) = NULL, 	@I_nCredit numeric(19,5) = NULL, 	@I_cAuditTrailCode char(13) = NULL, 	@I_cDescription char(30) = NULL, 	@I_mRecurringTRXSequence numeric(19,5) = NULL, 	@I_nExchangeRate numeric(15,7) = NULL, 	@I_cExchangeTableID char(15) = NULL, 	@I_cFuncCurrencyID char(15) = NULL, 	@I_sFuncCurrencyIndex smallint = NULL, 	@I_tMCRegistered tinyint = NULL, 	@I_sMCTransaction smallint = NULL, 	@I_nOrigDebit numeric(19,5) = NULL, 	@I_nOrigCredit numeric(19,5) = NULL, 	@I_cOrigCurrencyID char(15) = NULL, 	@I_sOrigCurrencyIndex smallint = NULL, 	@I_sRateCalculationMethod smallint = NULL, 	@I_cRateTypeID char(15) = NULL, 	@I_cOriginatingDocNumber char(21) = NULL, 	@I_cOriginatingControlNumber char(21) = NULL, 	@I_cOriginatingMasterID char(21) = NULL, 	@I_cOriginatingMasterName char(65) = NULL, 	@I_sOriginatingTrxType smallint = NULL, 	@I_sOrigDTASeries smallint = NULL, 	@I_iOrigSequenceNumber int = NULL, 	@I_nSequenceLine numeric(19,5) = NULL, 	@I_sDTAGLStatus smallint = NULL, 	@I_nDTAIndex numeric(19,5) = NULL, 	@I_nDenomExchangeRate numeric(15,7) = NULL, 	@I_sMCTrxState smallint = NULL, 	@I_dDocumentDate datetime = NULL, 	/* --- NCL, 06/02/06, NJP, New Params to replace use of the temp table #TrxHeader ---*/ 	@I_sHdrSeries smallint, 	@I_cHdrSourceDocument char(11), 	@I_cHdrOrigTrxSource char(13), 	@I_tHdrICTransaction tinyint, 	@I_sHdrReference char(31), 	@I_dHdrTrxDate datetime, 	@I_dHdrReversingDate datetime, 	@I_sKF_DTASeries smallint, 	@I_cKF_DTAReference char(25), 	/* ----------------------------------------------------------------------------------*/ 	@O_iErrorState int = NULL output as declare 	@TRXSource CHAR(13), 	@TRUE tinyint, 	@FALSE tinyint, 	@BUSINESS_FORM smallint, 	@CLEARING_TRX smallint,	/* modifications, 14/05/04, pboniface */ 	@NORMAL_TRX smallint, 	/* Start of modifications - 13/11/00 - pjsparrow */ 	@AUTO_REV_TRX smallint, 	/* End of modifications - 13/11/00 - pjsparrow */ 	@UNIT_ACCT smallint, 	@DEFAULT_DATE datetime, 	@iError int, 	@iStatus int, 	@tLoop tinyint, 	@tTransaction tinyint, 	@sCompanyID smallint, 	@iDecimalPlaces int, 	@dExchangeDate datetime, 	@dExchangeTime datetime, 	@cRateTypeID char(15), 	@cExchangeTableID char(15), 	@sIC_DestCompany smallint, 	@iIC_TrigAccount int, 	@iIC_SrcAccount int, 	@iIC_SrcICAccount int, 	@iIC_DestAccount int, 	@iIC_DestICAccount int, 	@tIC_CopyMDA tinyint, 	@tIC_ReverseMDA tinyint, 	@nIC_SequenceLine numeric(19,5), /*	@sKF_DTASeries smallint, */ /*	@cKF_DTAReference char(25), */ /* 	@iKF_SequenceLine Numeric(19,5), */ /*	@cKF_DTAGLReference char(25), */ /*	@cKF_DocumentNumber char(21), */ /*	@sKF_DocumentType smallint, */ /*	@sHdrSeries smallint, */ /*	@cHdrSourceDocument char(11),*/ /*	@cHdrOrigTrxSource char(13),*/ /*	@tHdrICTransaction tinyint, */ 	@dHdrTrxDate datetime, 	@dMinDate datetime, 	@IsICAccount int, 	@iSeries int, 	@cLogMsg char(255), 	@cTemp char(255), 	@cRemoteCompany char (6), 	@cRemoteDestAcc char(129), 	@cRemoteDestICAcc char(129), 	@iFunctionalIndex smallint, 	@iProcessTemplate smallint, 	@cSrcAccount char(129), 	@cSrcICAccount char(129), 	@cDestAccount char(129), 	@cDestICAccount char(129), 	@cStatement char(255), 	@iFoundOne int, 	@iRemoteDest int, 	@sMessage varchar(255), 	@nPMCreditAmt numeric(19,5), 	@nPMDebitAmt numeric(19,5), 	@nPMOrigCredtAmt numeric(19,5), 	@nPMOrigDebitAmt numeric(19,5), /*	@Reference char(31),*/ 	/* Start of modifications - 09/10/03 - pjsparrow */ 	@mRecTrxSeq numeric(19,5),  	/* End of modifications - 09/10/03 - pjsparrow */ 	/* Start of modifications - 03/08/04 - pjsparrow */ 	@SUMMARY_CHECKED smallint, 	/* End of modifications - 03/08/04 - pjsparrow */ 	@DaisyChain int, 	@iReject tinyint, 	/*Mike South 15/04/2006*/ 	@CMvoidTRX int, 	@nCMLinkRecordNumber numeric(19,5), 	@nXfr_Record_Number numeric(19,5), 	@sBankCurrencyId char(15), 	@iMCFunctionalOriginating tinyint, 	/**/ 		/*Mike South 29.08.2006*/ 	@CREDIT smallint, 	@DEBIT smallint, 	@sCreditOrDebit smallint, /*credit =1 / Debit =2*/ 	/**/ 	@cORTRXTYP int,  /* KDP 99 */ 	@cORDOCNUM char(31) set nocount on select 	@O_iErrorState = 0, 	@iStatus = 0 exec @iStatus = smGetMinDate @dMinDate output /* IB - 20/06/06, Added Intercompany Log table */ select @cLogMsg = 'ncCreateInterfaceRec started. JE: '+str(@I_iJournalEntry)+' OrigDocNumber: '+@I_cOriginatingDocNumber+' ActIndex: '+str(@I_iAccountIndex) +' SeqLine: '+ str(@I_nSequenceLine) exec dbo.ncWriteInterLog @cLogMsg if @@trancount = 0 begin 	select @tTransaction = 1 	begin transaction end while (@tLoop is NULL) begin 	select @tLoop = 1 	if @I_iSQLSessionID is NULL or 		@I_sTransactionType is NULL or 		@I_iJournalEntry is NULL or 		@I_cUserID is NULL or 		@I_iAccountIndex is NULL or 		@I_sAccountType is NULL or 		@I_nDebit is NULL or 		@I_nCredit is NULL or 		@I_cAuditTrailCode is NULL or 		@I_cDescription is NULL or 		@I_mRecurringTRXSequence is NULL or 		@I_nExchangeRate is NULL or 		@I_cExchangeTableID is NULL or 		@I_cFuncCurrencyID is NULL or 		@I_sFuncCurrencyIndex is NULL or 		@I_tMCRegistered is NULL or 		@I_sMCTransaction is NULL or 		@I_nOrigDebit is NULL or 		@I_nOrigCredit is NULL or 		@I_cOrigCurrencyID is NULL or 		@I_sOrigCurrencyIndex is NULL or 		@I_sRateCalculationMethod is NULL or 		@I_cRateTypeID is NULL or 		@I_cOriginatingDocNumber is NULL or 		@I_cOriginatingControlNumber is NULL or 		@I_cOriginatingMasterID is NULL or 		@I_cOriginatingMasterName is NULL or 		@I_sOriginatingTrxType is NULL or 		@I_sOrigDTASeries is NULL or 		@I_iOrigSequenceNumber is NULL or 		@I_nSequenceLine is NULL or 		@I_sDTAGLStatus is NULL or 		@I_nDTAIndex is NULL or 		@I_nDenomExchangeRate is NULL or 		@I_sMCTrxState is NULL or 		@I_dDocumentDate is NULL or 		/* --- NCL, 06/02/06, NJP, Check these too ----------- */ 		@I_sHdrSeries is NULL or 		@I_cHdrSourceDocument is NULL or 		@I_cHdrOrigTrxSource is NULL or 		@I_tHdrICTransaction is NULL or 		@I_sHdrReference is NULL or 		@I_dHdrTrxDate is NULL or 		@I_dHdrReversingDate is NULL  		/* --------------------------------------------------- */ 	begin 		select @O_iErrorState = 20030 		break 	end 	select 		@BUSINESS_FORM = 5, 		@CLEARING_TRX = 2, /* modifications, 14/05/04, pboniface */ 		@NORMAL_TRX = 1, 		/* Start of modifications - 13/11/00 - pjsparrow */ 		@AUTO_REV_TRX = 4, 		/* End of modifications - 13/11/00 - pjsparrow */ 		@UNIT_ACCT = 2, 		@TRUE = 1, 		@FALSE = 0, 		@DEFAULT_DATE = @dMinDate, 		/* Start of modifications - 03/08/04 - pjsparrow */ 		@SUMMARY_CHECKED = 1, 		/* End of modifications - 03/08/04 - pjsparrow */ 		/*Mike South 15/04/2006*/ 		@sBankCurrencyId='', 		/**/ 		/*Mike South 29.08.2006*/ 		@CREDIT = 1, 		@DEBIT = 2 		/**/ 	/*vilasw date:10/24/2010 added for not to processing 'NCICP' transactions*/ 	 if @I_cHdrSourceDocument = 'NCICP' return 	/*vilasw date:10/24/2010 added for not to processing 'NCICP' transactions*/ 	/* KDP 10/09/2014 add back in source document control */ 	if exists(select 1 from NCIC1009 where (SOURCDOC = @I_cHdrSourceDocument) and (NC_Trigger_Account_Index = @I_iAccountIndex))  		return; 	/* END KDP 10/09/2014 add back in source document control */ 	  	/*Mike South 29.08.2006*/ 	if @I_nCredit>0 		select @sCreditOrDebit = @CREDIT  	else	 		select @sCreditOrDebit = @DEBIT  	/**/ 	/*Mike South 15/04/2006*/ 	select @iMCFunctionalOriginating=NC_FunctionalOriginating 	from NCIC3000 	/**/ 	select @cTemp='Transaction Type='+str(@I_sTransactionType) 	exec dbo.ncWriteInterLog @cTemp 	/* only do our intercompany for normal and quick transactions */ 	/* Start of modifications - 13/11/00 - pjsparrow */ 	if (@I_sTransactionType <> @NORMAL_TRX) and (@I_sTransactionType <> @BUSINESS_FORM) and (@I_sTransactionType <> @AUTO_REV_TRX) 	and (@I_sTransactionType <> @CLEARING_TRX) /* modifications, 14/05/04, pboniface */ 	begin 		/* IB - 20/06/06, Added Intercompany Log table */ 		exec dbo.ncWriteInterLog 'ncCreateInterfaceRec break.  Not normal or quick transaction' 		break 	end 	/* End of modifications - 13/11/00 - pjsparrow */ 	/* --- NCL, 06/02/06, NJP, Remove the requirement for the Temp table, these values are now passed in  	-- read necessary values from the trx header  	select 		@sHdrSeries = Series, 		@cHdrSourceDocument = SourceDocument, 		@cHdrOrigTrxSource = OrigTransactionSource, 		@tHdrICTransaction = ICTransaction, 		@Reference = Reference 		-- Start of modifications - 13/11/00 - pjsparrow  		-- @dHdrTrxDate = TransactionDate  		-- End of modifications - 13/11/00 - pjsparrow  	from 		#TRXHeader 	where 		JournalEntry = @I_iJournalEntry 	*/ 	/* --- 06/02/06, NJP, Remove the need for the #TRXHeader table, replaced with Params ------ 	-- Start of modifications - 13/11/00 - pjsparrow  	-- Get the Transaction or Reversing Date depending on the Transaction Type  	if @I_sTransactionType = @AUTO_REV_TRX 	begin 		select 			@dHdrTrxDate = ReversingDate 		from 			#TRXHeader 		where 			JournalEntry = @I_iJournalEntry 	end 	else begin 		select 			@dHdrTrxDate = TransactionDate 		from 			#TRXHeader 		where 			JournalEntry = @I_iJournalEntry 	end 	-- End of modifications - 13/11/00 - pjsparrow  	*/ 	if @I_sTransactionType = @AUTO_REV_TRX 		select @dHdrTrxDate = @I_dHdrReversingDate 	else 		select @dHdrTrxDate = @I_dHdrTrxDate 	/* --------------------------------------------------------------------------------------- */ 	 	/* if this is a GPS intercompany transaction, quit now */ 	if @I_tHdrICTransaction = @TRUE			/* NCL, 06/02/06, NJP, Use IN Param */ 		begin 			/* IB - 20/06/06, Added Intercompany Log table */ 			exec dbo.ncWriteInterLog 'ncCreateInterfaceRec.  Great Plains IC transaction' 			/* KDP 08/01/2014 allow GP Intercompany and Nolan on same transaction */ 			/* break */ 			 		end 	/* NCL, 25/06/04, NJP, If Intercompany DaisyChaining is off then don't process records we created */ 	select @DaisyChain=NC_SpareInts_1 from NCIC3000 	if @DaisyChain is NULL 		select @DaisyChain=0 	if @I_cHdrOrigTrxSource = 'IC'			/* NCL, 06/02/06, NJP, Use IN Param */ 	begin 		if @DaisyChain=0 		begin 			/* if this is a NCL intercompany reversing transaction, quit now too */ 			/* IB - 20/06/06, Added Intercompany Log table */ 			exec dbo.ncWriteInterLog 'ncCreateInterfaceRec break.  Daisy chaining is off, dont process records we created.' 			break 		end 		/* If DaisyChain is ON, still quit if this is a not a Destination Company TRX */ 		if SUBSTRING(@I_sHdrReference,1,2)<>'IC'			/* NCL, 06/02/06, NJP, Use IN Param */ 			begin 				/* IB - 20/06/06, Added Intercompany Log table */ 				exec dbo.ncWriteInterLog 'ncCreateInterfaceRec break.  If DaisyChain is ON, still quit if this is a not a Destination Company TRX'		 				break 			end 	end 	/* ----------------- */ 	/* If this is a Quick Journal, we need to set the Recurring TRX Sequence implicitly to 1.00000, */ 	/* and ignore the passed in value, as this is what Great Plains does when posting Quick Journals */ 	/* Start of modifications - 09/10/03 - pjsparrow */ 	if @I_sTransactionType = @BUSINESS_FORM 		select @mRecTrxSeq = 1.00000 	else 		select @mRecTrxSeq = @I_mRecurringTRXSequence 	SELECT @TRXSource = SOURCDOC  	FROM GL20000  	where JRNENTRY = @I_iJournalEntry and RCTRXSEQ = @mRecTrxSeq 	/* End of modifications - 09/10/03 - pjsparrow */ 	if @TRXSource = 'BBF'   		begin 			/* IB - 20/06/06, Added Intercompany Log table */ 			exec dbo.ncWriteInterLog 'ncCreateInterfaceRec break.  TRXSource = BBF'		 			break 		end 	/* get the company id for the current company */ 	select 		@sCompanyID = CMPANYID 	from 		DYNAMICS..SY01500 	where 		INTERID = db_name() 	 	/* get the functional currency index */ 	select @iFunctionalIndex = FUNCRIDX from MC40000 	if @iFunctionalIndex = NULL  		select @iFunctionalIndex = 2999 /* the value set in Set_System_Variables in Dynamics as the default */ 	 	/* set the series */ 	select @iSeries = @I_sHdrSeries /*  SERIES from GL10000  */		/* NCL, 06/02/06, NJP, Use IN Param */ 	/*if series = gl then set */ 	if @iSeries=2 	begin 		select @I_cOriginatingDocNumber=@I_iJournalEntry 		select @I_cOriginatingMasterID=@TRXSource 		select @I_cOriginatingMasterName=@I_sHdrReference		/* NCL, 06/02/06, NJP, Use IN Param */ 	end 	/* just default these to blank at the moment til we get it all working */ 	select 	@cRemoteCompany = '', 		@cRemoteDestAcc = '', 		@cRemoteDestICAcc = '' 				 	/* check if this line is a trigger line for intercompany */ 	if exists(select 1 from NCIC0003 where (NC_Source_Company_ID = @sCompanyID) and (NC_Trigger_Account_Index = @I_iAccountIndex))  	begin /* 18/11/05 IB -  Run suns modifications - it passes by default, it rejects if suns critiea are met and there mods are turned on */ 		exec ncCheckSunModsSegments 				@I_iAccountIndex, 				@I_nSequenceLine, 				@I_iJournalEntry, 				/* Mike South 28.02.2006*/ 				@I_sTransactionType, 				@sCreditOrDebit, 				/**/ 				@iReject output 		/* IB - 20/06/06, Added Intercompany Log table */ 		if @iReject = 1 		begin			 			select @cLogMsg = 'ncCreateInterfaceRec break.  Sun mods rejected this line. JE: '+ 				str(@I_iJournalEntry)+' SeqLine: '+str(@I_nSequenceLine)+' ActIndex: '+str(@I_iAccountIndex) 			exec dbo.ncWriteInterLog @cLogMsg 			return /* to return when both the accounts used*/	 		end 	/* IB End */ 		if @iReject = 0  		begin			 			/* read the necessary values from the trx line */ 			if (@I_sTransactionType = @NORMAL_TRX) or (@I_sTransactionType = @CLEARING_TRX) /* modifications, 14/05/04, pboniface */ 			begin 				select 					@dExchangeDate = EXCHDATE, 					@dExchangeTime = TIME1, 					@cRateTypeID = RATETPID, 					@cExchangeTableID = EXGTBLID, 					@cORTRXTYP = ORTRXTYP, /* KDP 99 */ 					@cORDOCNUM = ORDOCNUM 				from 					GL10001 				where 					JRNENTRY = @I_iJournalEntry and 					SQNCLINE = @I_nSequenceLine 	 				/* KDP 99  */ 				if @cORTRXTYP = 7  				begin 					select 					@cRateTypeID = RATETPID, 					@cExchangeTableID = EXGTBLID 				   from 					CM20200 				   where 				 	CMTrxType  = @cORTRXTYP and 					CMTrxNUM   = @cORDOCNUM  				end 				 				/** ACW 19/05/04 Clearing Trx need to get Rate Type and Exch Table **/ 				if @I_sTransactionType = @CLEARING_TRX 				begin 					exec ncMCVerifyForClearingTrx 						@I_cOrigCurrencyID, 						@I_sMCTrxState, 						@cRateTypeID output, 						@cExchangeTableID output, 						@O_iErrorState output 					select @dExchangeDate = @DEFAULT_DATE, @dExchangeTime = @DEFAULT_DATE 				end 				/*- -*/ 			end 			if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 			begin 				select 					@dExchangeDate = @DEFAULT_DATE, 					@dExchangeTime = @DEFAULT_DATE, 					@cRateTypeID = '', 					@cExchangeTableID = '' 			end 	 			/* get the decimal places for this line */ 			if @I_sAccountType = @UNIT_ACCT 				select 					@iDecimalPlaces = DECPLACS - 1 				from 					GL00100 				where 					ACTINDX = @I_iAccountIndex 			else 				select 					@iDecimalPlaces = DECPLCUR - 1 				from 					DYNAMICS..MC40200 				where 					CURNCYID = @I_cOrigCurrencyID 			if @iDecimalPlaces is NULL 				select @iDecimalPlaces = 2 	 			/* get the accounts and setup info from NC_IC_Accounts_MSTR */ 			select 				@sIC_DestCompany = CMPANYID, 				@iIC_TrigAccount = NC_Trigger_Account_Index, 				@iIC_SrcAccount = NC_Src_Account_Index, 				@iIC_SrcICAccount = NC_Src_IC_Account_Index, 				@iIC_DestAccount = NC_Dest_Account_Index, 				@iIC_DestICAccount = NC_Dest_IC_Account_Index, 				@tIC_CopyMDA = NC_Copy_MDA_CB, 				@tIC_ReverseMDA = NC_Reverse_MDA_CB, 				@cRemoteCompany = Remote_Company_ID, 				@cRemoteDestAcc = Remote_Destination_Accou, 				@cRemoteDestICAcc = Remote_Destination_IC_Ac 	 			from 				NCIC0003 			where 				(NC_Source_Company_ID = @sCompanyID) and 				(NC_Trigger_Account_Index = @I_iAccountIndex) 	 			/* get the next sequence number for our new interface record */ 			select 				@nIC_SequenceLine = (max(SQNCLINE) + 100) 			from 				DYNAMICS..NCIC1004 			where 				(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 	 			if @nIC_SequenceLine is NULL 				select @nIC_SequenceLine = 100 	 			/* get the dta series and dta reference for this GL line */ /*			exec @iStatus = dtaGetGLKeyFields 				@I_sDTAGLStatus, 				@I_mRecurringTRXSequence, 				@I_nSequenceLine, 				@I_iOrigSequenceNumber, 				@I_cOriginatingDocNumber, 				@I_cOriginatingControlNumber, 				@I_sOriginatingTrxType, 				@I_cAuditTrailCode, 				@I_sHdrSeries,				 				@I_sOrigDTASeries, 				1, 				@I_nDTAIndex, 				@sKF_DTASeries output, 				@cKF_DTAReference output, 				@iKF_SequenceLine output, 				@cKF_DTAGLReference output, 				@cKF_DocumentNumber output, 				@sKF_DocumentType output, 				@O_iErrorState output */	 			/* if the above stored proc failed, bail out */ 			select @iError = @@error 			if @iStatus = 0 and @iError <> 0 				select @iStatus = @iError 			if @iStatus <> 0 or @O_iErrorState <> 0 			begin 				/* IB - 20/06/06, Added Intercompany Log table */ 				select @cLogMsg = 'ncCreateInterfaceRec break. dtaGetGLKeyFields failed.  Status = '+ str(@iStatus) + ' ErrorState: '+str(@O_iErrorState) 				exec dbo.ncWriteInterLog @cLogMsg 				break 			end 	 			/* IB - 20/06/06, Added Intercompany Log table */ 			exec dbo.ncWriteInterLog 'ncCreateInterfaceRec inserting into NC_IC_Interface_MSTR' 			/*25/04/2006 Mike South read the destination companies mc setting*/ 			exec ncGetDestMCSetting 				@sIC_DestCompany, 				@iMCFunctionalOriginating output 			/**/ 	 			/* write the new line to the NC_IC_Interface_MSTR table */ 			insert into DYNAMICS..NCIC1004 ( 				CMPANYID, 				NC_Source_Company_ID, 				NC_Src_Account_Index, 				NC_Src_IC_Account_Index, 				NC_Dest_Account_Index, 				NC_Dest_IC_Account_Index, 				NC_Trigger_Account_Index, 				JRNENTRY, 				SQNCLINE, 				ACTINDX, 				DEBITAMT, 				CRDTAMNT, 				ORDBTAMT, 				ORCRDAMT, 				XCHGRATE, 				DSCRIPTN, 				GLLINMSG, 				GLLINMS2, 				CURRNIDX, 				DECPLACS, 				ORCTRNUM, 				ORDOCNUM, 				ORMSTRID, 				ORMSTRNM, 				ORTRXTYP, 				OrigSeqNum, 				OrigDTASeries, 				SEQNUMBR, 				DTA_GL_Status, 				DTAREF, 				DTA_Index, 				RATETPID, 				EXGTBLID, 				EXCHDATE, 				TIME1, 				RTCLCMTD, 				DENXRATE, 				MCTRXSTT, 				NC_Src_Batch_Created, 				NC_Dest_Batch_Created, 				NC_Copy_MDA_CB, 				NC_Reverse_MDA_CB, 				MKDTOPST, 				SOURCDOC, 				USERID, 				TRXDATE, 				CURRVAL, 				DATE1, 				String1, 				STRGA255, 				IntegerValue, 				NC_Source_Currency_Index, 				SERIES, 				Remote_Company_ID, 				Remote_Destination_Accou, 				Remote_Destination_IC_Ac, 				MCSTRUCT_1, 				MCSTRUCT_2, 				MCSTRUCT_3, 				MCSTRUCT_4, 				MCSTRUCT_5, 				MCSTRUCT_6, 				MCSTRUCT_7, 				MCSTRUCT_8, 				MCSTRUCT_9, 				MCSTRUCT_10, 				MCSTRUCT_11, 				MCSTRUCT_12, 				MCSTRUCT_13, 				MCSTRUCT_14, 				ORTRXDESC, 				NC_Spare_Int, 				NC_Bank_Currency_ID, 				NC_FunctionalOriginating) 			values ( 				@sIC_DestCompany, 				@sCompanyID, 				@iIC_SrcAccount, 				@iIC_SrcICAccount, 				@iIC_DestAccount, 				@iIC_DestICAccount, 				@iIC_TrigAccount, 				@I_iJournalEntry, 				@nIC_SequenceLine, 				@I_iAccountIndex, 				@I_nDebit, 				@I_nCredit, 				@I_nOrigDebit, 				@I_nOrigCredit, 				@I_nExchangeRate, 				@I_cDescription, 				0x00000000, 				0x00000000, 				@I_sOrigCurrencyIndex, 				@iDecimalPlaces, 				@I_cOriginatingControlNumber, 				@I_cOriginatingDocNumber, 				@I_cOriginatingMasterID, 				@I_cOriginatingMasterName, 				@I_sOriginatingTrxType, 				@I_iOrigSequenceNumber, 				@I_sKF_DTASeries,		/* 28/02/06, NJP, Use passed in values */ 				@I_nSequenceLine, 				32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 				@I_cKF_DTAReference,		/* 28/02/06, NJP, Use passed in values */ 				@I_nDTAIndex, 				@cRateTypeID, 				@cExchangeTableID, 				@dExchangeDate, 				@dExchangeTime, 				@I_sRateCalculationMethod, 				@I_nDenomExchangeRate, 				@I_sMCTrxState, 				@FALSE, 				@FALSE, 				@tIC_CopyMDA, 				@tIC_ReverseMDA, 				@TRUE,					 				@I_cHdrSourceDocument,			/* NCL, 06/02/06, NJP, Use IN Param */ 				@I_cUserID, 				@dHdrTrxDate, 				0, 				'01 Jan 1900', 				'', 				'', 				0, 				@iFunctionalIndex, 				@iSeries, 				@cRemoteCompany, 				@cRemoteDestAcc, 				@cRemoteDestICAcc, 				'', 				0, 				'', 				'', 				0, 				'01 Jan 1900', 				0, 				'01 Jan 1900', 				0, 				0, 				0, 				'01 Jan 1900', 				0, 				0, 				@I_sHdrReference,			/* NCL, 06/02/06, NJP, Use IN Param */ 				0, 				/* MS 24/04/2006 */ @sBankCurrencyId, 				@iMCFunctionalOriginating)/**/ 	 			/* check if we need to copy any mda from this GL line as well */ 			if @tIC_CopyMDA = @TRUE 			begin 				/* due to recurring trx, we can now have dupicate MDA details, delete any old ones to stop duplicate conflicts */ 				/* 28/02/06, NJP, Use passed in values */ 				delete from DYNAMICS..NCIC2000 where (DTASERIES = @I_sKF_DTASeries) and 								(DTAREF = @I_cKF_DTAReference) and 								(ACTINDX = @iIC_TrigAccount)  				/* write the mda code lines to NC_SY_DTA_Details */ 				insert into DYNAMICS..NCIC2000 ( 					DTASERIES, 					DTAREF, 					ACTINDX, 					SEQNUMBR, 					GROUPID, 					CODEID, 					DOCNUMBR, 					CMPANYID, 					RMDTYPAL, 					POSTDESC, 					DTAQNTY, 					CODEAMT, 					TRXDATE, 					NC_Copy_MDA_CB, 					NC_Reverse_MDA_CB) 				select 					DTASERIES, 					DTAREF, 					ACTINDX, 					SEQNUMBR, 					GROUPID, 					CODEID, 					DOCNUMBR, 					@sCompanyID, 					RMDTYPAL, 					POSTDESC, 					DTAQNTY, 					CODEAMT, 					TRXDATE, 					@tIC_CopyMDA, 					@tIC_ReverseMDA 				from 					DTA10200 				where 					(DTASERIES = @I_sKF_DTASeries) and	/* 28/02/06, NJP, Use passed in values */ 					(DTAREF = @I_cKF_DTAReference) and 					(ACTINDX = @iIC_TrigAccount) 			end 		end 	end 	else 	begin 		select @IsICAccount = 0 /* *** 30/07/2001 PJB - re-written to test PM then GL always, as per dex code    ***                  this was because of a site entering transactions in CM, then    ***                  amending in GL - so a 'GL' transactions but OrigCtrlNum <> ''    ***                  so old code only checked PM (record not found) *		if @I_cOriginatingControlNumber = '' 	 *			begin *			if exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and  *							(SQNCLINE = @I_nSequenceLine) and  *							(NC_Src_IC_Account_Index = @I_iAccountIndex)) *				select @IsICAccount = 2 *			end *		else *			begin *			if exists(select 1 from NCIC3006 where (VCHRNMBR = @I_cOriginatingControlNumber) and  *						(DOCTYPE = @I_sOriginatingTrxType) and  *						(SQNCLINE = @I_nSequenceLine) and  *						(NC_Src_IC_Account_Index = @I_iAccountIndex)) *				select @IsICAccount = 1 *			end */ 		 /* *** 14/05/2002 PJB - tidied up into a single block, consolidating various changes as detailed:    ***			from 07/05/02 - addition of 'and (JRNENTRY=0)' to locate non-financial records only    ***			from 14/05/02 - replace @I_nSequenceLine with @I_iOrigSequenceNumber to handle    ***					re-ordered PM distribs */ 		/*20.04.2006 Mike South  */ 		/*Check the series so you don't need to check the alternate account table for each type*/ /*		if @iSeries = 4 /*purchasing*/ 		begin 			if exists(select 1 from NCIC3006 where (VCHRNMBR = @I_cOriginatingControlNumber) and  						(DOCTYPE = @I_sOriginatingTrxType) and  						(SQNCLINE = @I_iOrigSequenceNumber) and  						(NC_Src_IC_Account_Index = @I_iAccountIndex) and 						(JRNENTRY = 0)) 				select @IsICAccount = 1 		end 		if @iSeries =3 /*sales*/ 		begin 			/* check RM */ 			if exists(select 1 from NCIC3006 where (RMDNUMWK = @I_cOriginatingControlNumber) and  					(DOCTYPE = @I_sOriginatingTrxType) and  					(SQNCLINE = @I_iOrigSequenceNumber) and  					(NC_Src_IC_Account_Index = @I_iAccountIndex) and 					(JRNENTRY = 0)) 					select @IsICAccount = 3 		end*/ /*vilasw date : 13-May-2008*/ 	 		if @iSeries = 4 /*purchasing*/ 		begin 			if not exists(select 1 from NCIC3006 where (VCHRNMBR = @I_cOriginatingControlNumber) and  			  (DOCTYPE = @I_sOriginatingTrxType) and  			  (SQNCLINE = @I_iOrigSequenceNumber) and  			  (NC_Src_IC_Account_Index = @I_iAccountIndex) and 			  (JRNENTRY = 0)) 			begin     				if exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and                                                      (SQNCLINE = @I_nSequenceLine) and                                                      (NC_Src_IC_Account_Index = @I_iAccountIndex)) 					select @IsICAccount = 2 				end  			else  				select @IsICAccount = 1 		end 		if @iSeries =3 /*sales*/ 		begin 		   /* check RM */ 		   if not exists(select 1 from NCIC3006 where (RMDNUMWK = @I_cOriginatingControlNumber) and  			 (DOCTYPE = @I_sOriginatingTrxType) and  			 (SQNCLINE = @I_iOrigSequenceNumber) and  			 (NC_Src_IC_Account_Index = @I_iAccountIndex) and 			 (JRNENTRY = 0)) 		   begin     			if exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and                                                      (SQNCLINE = @I_nSequenceLine) and                                                      (NC_Src_IC_Account_Index = @I_iAccountIndex)) 				select @IsICAccount = 2 		   end  	   else 		select @IsICAccount = 3      	   end 		if @iSeries =2 /*financial*/ 		begin 			if @I_sOriginatingTrxType in (1,2,3,4,5,6)/*bank transaction*/ 			begin 				/*NCL Mike South 13/01/2006*/ 				/* check CM */ 				if @I_cDescription='IC Void Bank Transaction' 				begin 					select @CMvoidTRX=1 				end 				else 				begin 					select @CMvoidTRX=0 				end 		 				if (isnumeric(@I_cOriginatingControlNumber)=1) 				begin 					select @nCMLinkRecordNumber=Cast(@I_cOriginatingControlNumber as numeric) 				end 				else 				begin 					/*set to a number it will never find*/ 					select @nCMLinkRecordNumber=-1 				end 		 				if exists(select 1 from NCIC3006 where (CMDNUMWK = @nCMLinkRecordNumber) and  						(VOIDED = @CMvoidTRX) and  						(SQNCLINE = @I_iOrigSequenceNumber) and  						(NC_Src_IC_Account_Index = @I_iAccountIndex) and 						(JRNENTRY = 0)) 		 						select @IsICAccount = 4 			end 			if @I_sOriginatingTrxType=7/*cm transfer*/ 			begin 				if (isnumeric(@I_cOriginatingControlNumber)=1) 				begin 					select @nXfr_Record_Number=Cast(@I_cOriginatingControlNumber as numeric) 				end 				else 				begin 					/*set to a number it will never find*/ 					select @nXfr_Record_Number=-1 				end 				if exists(select 1 from NCIC3006 where  								(Xfr_Record_Number = @nXfr_Record_Number) and  								(NC_Src_IC_Account_Index = @I_iAccountIndex)) 							select @IsICAccount = 5 			end 			if @I_sOriginatingTrxType=0/*gl journal*/ 			begin 				if exists(select 1 from NCIC3006 where  								(JRNENTRY = @I_iJournalEntry) and  								(SQNCLINE = @I_nSequenceLine) and  								(NC_Src_IC_Account_Index = @I_iAccountIndex)) 							select @IsICAccount = 2 			end 		end 		/**/ 		if @IsICAccount <> 0 		BEGIN 			/* read the necessary values from the trx line */ 			if (@I_sTransactionType = @NORMAL_TRX) or (@I_sTransactionType = @CLEARING_TRX) /* modifications, 14/05/04, pboniface */ 			begin 				select 					@dExchangeDate = EXCHDATE, 					@dExchangeTime = TIME1, 					@cRateTypeID = RATETPID, 					@cExchangeTableID = EXGTBLID 				from 					GL10001 				where 					JRNENTRY = @I_iJournalEntry and 					SQNCLINE = @I_nSequenceLine 				/** ACW 19/05/04 Clearing Trx need to get Rate Type and Exch Table **/ 				if @I_sTransactionType = @CLEARING_TRX 				begin 					exec ncMCVerifyForClearingTrx 						@I_cOrigCurrencyID, 						@I_sMCTrxState, 						@cRateTypeID output, 						@cExchangeTableID output, 						@O_iErrorState output 					select @dExchangeDate = @DEFAULT_DATE, @dExchangeTime = @DEFAULT_DATE 				end 				/*- -*/ 			end 			if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 			begin 				select 					@dExchangeDate = @DEFAULT_DATE, 					@dExchangeTime = @DEFAULT_DATE, 					@cRateTypeID = '', 					@cExchangeTableID = '' 			end 			/* get the decimal places for this line */ 			if @I_sAccountType = @UNIT_ACCT 				select 					@iDecimalPlaces = DECPLACS - 1 				from 					GL00100 				where 					ACTINDX = @I_iAccountIndex 			else 				select 					@iDecimalPlaces = DECPLCUR - 1 				from 					DYNAMICS..MC40200 				where 					CURNCYID = @I_cOrigCurrencyID 			if @iDecimalPlaces is NULL 				select @iDecimalPlaces = 2 			/* get the accounts and setup info from NC_IC_Alternate_Accounts_LINE */ 			if @IsICAccount = 1 /* PM */  			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 					/* End of modifications - 03/07/03 - pjsparrow */ 				from 					NCIC3006    				where 					(VCHRNMBR = @I_cOriginatingControlNumber) and  					(DOCTYPE = @I_sOriginatingTrxType) and  					/* Start of modifications - 24/06/02 - pjsparrow */ 					/*(SQNCLINE = @I_nSequenceLine) and */ 					(SQNCLINE = @I_iOrigSequenceNumber) and 					/* End of modifications - 24/06/02 - pjsparrow */ 					(NC_Src_IC_Account_Index = @I_iAccountIndex) 			end 			if @IsICAccount = 2 /* GL */ 			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					@cRemoteCompany = Remote_Company_ID, 					@cRemoteDestAcc = Remote_Destination_Accou, 					@cRemoteDestICAcc = Remote_Destination_IC_Ac, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 					/* End of modifications - 03/07/03 - pjsparrow */ 				from 					NCIC3006    				where 					(JRNENTRY = @I_iJournalEntry) and  					(SQNCLINE = @I_nSequenceLine) and  					(NC_Src_IC_Account_Index = @I_iAccountIndex)	 			end 			if @IsICAccount = 3 /* RM */  			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					/* Get MDA checkbox values from NCIC3006 rather than NCIC3005 */ 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 					/* End of modifications - 03/07/03 - pjsparrow */ 				from 					NCIC3006    				where 					(RMDNUMWK = @I_cOriginatingControlNumber) and  					(DOCTYPE = @I_sOriginatingTrxType) and  					/* Start of modifications - 24/06/02 - pjsparrow */ 					/*(SQNCLINE = @I_nSequenceLine) and */ 					(SQNCLINE = @I_iOrigSequenceNumber) and 					/* End of modifications - 24/06/02 - pjsparrow */ 					(NC_Src_IC_Account_Index = @I_iAccountIndex) 			end 			/*NCL 13/01/2006 Mike South */ 			if @IsICAccount = 4 /* CM */  			begin 				if @I_cDescription='IC Void Bank Transaction' 				begin 					select @CMvoidTRX=1 				end 				else 				begin 					select @CMvoidTRX=0 				end 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 				from 					NCIC3006    				where 					(CMDNUMWK =@nCMLinkRecordNumber) and  					(VOIDED = @CMvoidTRX) and  					(SQNCLINE = @I_iOrigSequenceNumber) and 					(NC_Src_IC_Account_Index = @I_iAccountIndex) 			end 			/**/ 			 			/*NCL 10/04/2006 Mike South */ 			if @IsICAccount = 5 /* CM transfer*/  			begin 				select 					@sIC_DestCompany = CMPANYID, 					@iIC_TrigAccount = '', 					@iIC_SrcAccount = '', 					@iIC_SrcICAccount = NC_Src_IC_Account_Index, 					@iIC_DestAccount = NC_Dest_Account_Index, 					@iIC_DestICAccount = NC_Dest_IC_Account_Index, 					@tIC_CopyMDA = NC_Copy_MDA_CB, 					@tIC_ReverseMDA = NC_Reverse_MDA_CB 				from 					NCIC3006    				where 					(Xfr_Record_Number =@nXfr_Record_Number) and  					(NC_Src_IC_Account_Index = @I_iAccountIndex) 				/* Clear the exhange rate information */ 				/*select  @I_nExchangeRate=0, 					@cRateTypeID='', 					@cExchangeTableID='', 					@dExchangeDate='', 					@dExchangeTime='', 					@I_sRateCalculationMethod=0, 					@I_nDenomExchangeRate=0*/ 				/* Get the currency of the to bank from the transfer record  				   because it's validated with the seeting as it was on transfer entry*/ 				select  @sBankCurrencyId=NC_Currency_ID, 					@iMCFunctionalOriginating=NC_FunctionalOriginating 				from   	NCIC5004  				where 	Xfr_Record_Number=@nXfr_Record_Number 			end 			/*25/04/2006 Mike South read the destination companies mc setting*/ 			if @IsICAccount <> 5 /* not for CM transfer as we get that off the transaction*/  			begin 				exec ncGetDestMCSetting 					@sIC_DestCompany, 					@iMCFunctionalOriginating output 			end 			/**/ 			/* Start of modifications - 03/07/03 - pjsparrow */ 			/*select */ 			/*	@tIC_CopyMDA = NC_Copy_MDA_CB, */ 			/*	@tIC_ReverseMDA = NC_Reverse_MDA_CB */ 			/*from */ 			/*	NCIC3005 */ 			/*where */ 			/*	(NC_Source_Company_ID = @sCompanyID) and */ 			/*	(NC_Src_IC_Account_Index = @I_iAccountIndex) */ 			/* End of modifications - 03/07/03 - pjsparrow */ 			/* get the next sequence number for our new interface record */ 			select 				@nIC_SequenceLine = (max(SQNCLINE) + 100) 			from 				DYNAMICS..NCIC1004 			where 				(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 			if @nIC_SequenceLine is NULL 				select @nIC_SequenceLine = 100 			/* get the dta series and dta reference for this GL line */ 			/* 28/02/06, NJP, Use passed in DTA values */ /*			exec @iStatus = dtaGetGLKeyFields 				@I_sDTAGLStatus, 				@I_mRecurringTRXSequence, 				@I_nSequenceLine, 				@I_iOrigSequenceNumber, 				@I_cOriginatingDocNumber, 				@I_cOriginatingControlNumber, 				@I_sOriginatingTrxType, 				@I_cAuditTrailCode, 				@I_sHdrSeries,			 				@I_sOrigDTASeries, 				1, 				@I_nDTAIndex, 				@sKF_DTASeries output, 				@cKF_DTAReference output, 				@iKF_SequenceLine output, 				@cKF_DTAGLReference output, 				@cKF_DocumentNumber output, 				@sKF_DocumentType output, 				@O_iErrorState output */ 			/* if the above stored proc failed, bail out */ 			select @iError = @@error 			if @iStatus = 0 and @iError <> 0 				select @iStatus = @iError 			if @iStatus <> 0 or @O_iErrorState <> 0 			begin 				/* IB - 20/06/06, Added Intercompany Log table */ 				select @cLogMsg = 'ncCreateInterfaceRec break. dtaGetGLKeyFields failed'+ 					'Status: '+str(@iStatus)+' ErrorState: '+str(@O_iErrorState) 				exec dbo.ncWriteInterLog  				break 			end 			/* IB - 20/06/06, Added Intercompany Log table */ 			exec dbo.ncWriteInterLog 'ncCreateInterfaceRec inserting into NC_IC_Interface_MSTR' 			/* write the new line to the NC_IC_Interface_MSTR table */ 			insert into DYNAMICS..NCIC1004 ( 				CMPANYID, 				NC_Source_Company_ID, 				NC_Src_Account_Index, 				NC_Src_IC_Account_Index, 				NC_Dest_Account_Index, 				NC_Dest_IC_Account_Index, 				NC_Trigger_Account_Index, 				JRNENTRY, 				SQNCLINE, 				ACTINDX, 				DEBITAMT, 				CRDTAMNT, 				ORDBTAMT, 				ORCRDAMT, 				XCHGRATE, 				DSCRIPTN, 				GLLINMSG, 				GLLINMS2, 				CURRNIDX, 				DECPLACS, 				ORCTRNUM, 				ORDOCNUM, 				ORMSTRID, 				ORMSTRNM, 				ORTRXTYP, 				OrigSeqNum, 				OrigDTASeries, 				SEQNUMBR, 				DTA_GL_Status, 				DTAREF, 				DTA_Index, 				RATETPID, 				EXGTBLID, 				EXCHDATE, 				TIME1, 				RTCLCMTD, 				DENXRATE, 				MCTRXSTT, 				NC_Src_Batch_Created, 				NC_Dest_Batch_Created, 				NC_Copy_MDA_CB, 				NC_Reverse_MDA_CB, 				MKDTOPST, 				SOURCDOC, 				USERID, 				TRXDATE, 				CURRVAL, 				DATE1, 				String1, 				STRGA255, 				IntegerValue, 				NC_Source_Currency_Index, 				SERIES, 				Remote_Company_ID, 				Remote_Destination_Accou, 				Remote_Destination_IC_Ac, 				MCSTRUCT_1, 				MCSTRUCT_2, 				MCSTRUCT_3, 				MCSTRUCT_4, 				MCSTRUCT_5, 				MCSTRUCT_6, 				MCSTRUCT_7, 				MCSTRUCT_8, 				MCSTRUCT_9, 				MCSTRUCT_10, 				MCSTRUCT_11, 				MCSTRUCT_12, 				MCSTRUCT_13, 				MCSTRUCT_14, 				ORTRXDESC, 				NC_Spare_Int, 				NC_Bank_Currency_ID, 				NC_FunctionalOriginating) 			values ( 				@sIC_DestCompany, 				@sCompanyID, 				@iIC_SrcAccount, 				@iIC_SrcICAccount, 				@iIC_DestAccount, 				@iIC_DestICAccount, 				@iIC_TrigAccount, 				@I_iJournalEntry, 				@nIC_SequenceLine, 				@I_iAccountIndex, 				@I_nDebit, 				@I_nCredit, 				@I_nOrigDebit, 				@I_nOrigCredit, 				@I_nExchangeRate, 				@I_cDescription, 				0x00000000, 				0x00000000, 				@I_sOrigCurrencyIndex, 				@iDecimalPlaces, 				@I_cOriginatingControlNumber, 				@I_cOriginatingDocNumber, 				@I_cOriginatingMasterID, 				@I_cOriginatingMasterName, 				@I_sOriginatingTrxType, 				@I_iOrigSequenceNumber, 				@I_sKF_DTASeries,		/* 28/02/06, NJP, Use passed in values */ 				@I_nSequenceLine, 				32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 				@I_cKF_DTAReference,		/* 28/02/06, NJP, Use passed in values */ 				@I_nDTAIndex, 				@cRateTypeID, 				@cExchangeTableID, 				@dExchangeDate, 				@dExchangeTime, 				@I_sRateCalculationMethod, 				@I_nDenomExchangeRate, 				@I_sMCTrxState, 				@TRUE, /* Alternate Account, dont want a source trx to be created */ 				@FALSE, 				@tIC_CopyMDA, 				@tIC_ReverseMDA, 				@TRUE, 				@I_cHdrSourceDocument,			/* NCL, 06/02/06, NJP, Use IN Param */ 				@I_cUserID, 				@dHdrTrxDate, 				0, 				'01 Jan 1900', 				'', 				'', 				0, 				@iFunctionalIndex, 				@iSeries, 				@cRemoteCompany, 				@cRemoteDestAcc, 				@cRemoteDestICAcc, 				'', 				0, 				'', 				'', 				0, 				'01 Jan 1900', 				0, 				'01 Jan 1900', 				0, 				0, 				0, 				'01 Jan 1900', 				0, 				0, 				@I_sHdrReference,		/* NCL, 06/02/06, NJP, Use IN Param */ 				0, 				/* MS 24/04/2006 */ @sBankCurrencyId, 				@iMCFunctionalOriginating)/**/ 			/* check if we need to copy any mda from this GL line as well */ 			if @tIC_CopyMDA = @TRUE 			begin 				/* due to recurring trx, we can now have dupicate MDA details, delete any old ones to stop duplicate conflicts */ 				/* 28/02/06, NJP, Use passed in DTA values */ 				delete from DYNAMICS..NCIC2000 where (DTASERIES = @I_sKF_DTASeries) and 							(DTAREF = @I_cKF_DTAReference) and 							/* Start of modifications - 04/07/03 - pjsparrow */ 							/* Modified to use @iIC_SrcICAccount as @iIC_TrigAccount is not set here */ 							/*(ACTINDX = @iIC_TrigAccount) */ 							(ACTINDX = @iIC_SrcICAccount)  							/* End of modifications - 04/07/03 - pjsparrow */ 				/* write the mda code lines to NC_SY_DTA_Details */ 				insert into DYNAMICS..NCIC2000 ( 					DTASERIES, 					DTAREF, 					ACTINDX, 					SEQNUMBR, 					GROUPID, 					CODEID, 					DOCNUMBR, 					CMPANYID, 					RMDTYPAL, 					POSTDESC, 					DTAQNTY, 					CODEAMT, 					TRXDATE, 					NC_Copy_MDA_CB, 					NC_Reverse_MDA_CB) 				select 					DTASERIES, 					DTAREF, 					ACTINDX, 					SEQNUMBR, 					GROUPID, 					CODEID, 					DOCNUMBR, 					@sCompanyID, 					RMDTYPAL, 					POSTDESC, 					DTAQNTY, 					CODEAMT, 					TRXDATE, 					@tIC_CopyMDA, 					@tIC_ReverseMDA 				from 					DTA10200 				where 					(DTASERIES = @I_sKF_DTASeries) and		/* 28/02/06, NJP, Use passed in DTA values */ 					(DTAREF = @I_cKF_DTAReference) and 					(ACTINDX = @iIC_SrcICAccount) 			end 		END 		/* Now we shall check the templates table to see if we have a match for templates */ 		else 			begin 				 			   select @iProcessTemplate = NC_Process_Templates from NCIC3000 			   if @iProcessTemplate = 1  			   begin 				exec @iStatus = dbo.ncMatchAccountToTemplate 					@I_iAccountIndex, 					@cSrcAccount output, 					@cSrcICAccount output, 					@cRemoteDestAcc output, 					@cRemoteDestICAcc output, 					@cRemoteCompany output, 					@tIC_CopyMDA output, 					@tIC_ReverseMDA output, 					@iFoundOne output, 					@iRemoteDest output, 					@O_iErrorState output 	 				/* if the above stored proc failed, bail out */ 				select @iError = @@error 				if @iStatus = 0 and @iError <> 0 					select @iStatus = @iError 				if @iStatus <> 0 or @O_iErrorState <> 0 				begin 					/* IB - 20/06/06, Added Intercompany Log table */ 					select @cLogMsg = 'ncCreateInterfaceRec break. ncMatchAccountToTemplate failed'+ 						'AccIndex: '+str(@I_iAccountIndex)+'Status: '+str(@iStatus)+' ErrorState: '+str(@O_iErrorState) 					exec dbo.ncWriteInterLog @cLogMsg 					break 				end 				if (@iFoundOne = 1) 				begin 					/*Added by Vilasw date:09/21/2011 for verifying account segment filter*/ 					exec ncCheckSunModsSegments 						@I_iAccountIndex, 						@I_nSequenceLine, 						@I_iJournalEntry, 						/* Mike South 28.02.2006*/ 						@I_sTransactionType, 						@sCreditOrDebit, 						/**/ 						@iReject output 						/* IB - 20/06/06, Added Intercompany Log table */ 						if @iReject = 1 						begin			 							select @cLogMsg = 'ncCreateInterfaceRec break.  Sun mods rejected this line. JE: '+ 								str(@I_iJournalEntry)+' SeqLine: '+str(@I_nSequenceLine)+' ActIndex: '+str(@I_iAccountIndex) 							exec dbo.ncWriteInterLog @cLogMsg 							return /* to return when both the accounts used*/	 						end					 					/*Added by Vilasw date:09/21/2011 for verifying account segment filter*/ 					select @iIC_DestAccount = 0, @iIC_DestICAccount = 0, @sIC_DestCompany = ''  /* not NULL ! */ 					select @iIC_TrigAccount = @I_iAccountIndex 					select @iIC_SrcAccount = ACTINDX from GL00105  					where ACTNUMST = @cSrcAccount 					select @iIC_SrcICAccount = ACTINDX from GL00105  					where ACTNUMST = @cSrcICAccount 					if (@iRemoteDest = 0) 					begin 						select @sIC_DestCompany = CMPANYID from DYNAMICS..SY01500  						where INTERID = @cRemoteCompany 						create table #RemoteAccounts ( 							ACTINDX int, 							ACTNUMST char(129) 						) 						 						select @cStatement = 'insert into #RemoteAccounts select ACTINDX, ACTNUMST from ' 							+ RTRIM(@cRemoteCompany) + '..GL00105 where ACTNUMST = ''' 							+ RTRIM(@cRemoteDestAcc) +'''' 						exec( @cStatement ) 						select @cStatement =  'insert into #RemoteAccounts select ACTINDX, ACTNUMST from ' 							+ RTRIM(@cRemoteCompany) + '..GL00105 where ACTNUMST = ''' 							+ RTRIM(@cRemoteDestICAcc) + '''' 						exec( @cStatement ) 						select @iIC_DestAccount = ACTINDX from #RemoteAccounts  						where ACTNUMST = @cRemoteDestAcc 						select @iIC_DestICAccount = ACTINDX from #RemoteAccounts  						where ACTNUMST = @cRemoteDestICAcc 						drop table #RemoteAccounts 						select @cRemoteCompany = '' /* if not remote, need to clear this */ 					end 						/* read the necessary values from the trx line */ 					 					if (@I_sTransactionType = @NORMAL_TRX) or (@I_sTransactionType = @CLEARING_TRX) /* modifications, 14/05/04, pboniface */ 					begin 						select 							@dExchangeDate = EXCHDATE, 							@dExchangeTime = TIME1, 							@cRateTypeID = RATETPID, 							@cExchangeTableID = EXGTBLID 						from 							GL10001 						where 							JRNENTRY = @I_iJournalEntry and 							SQNCLINE = @I_nSequenceLine 						/** ACW 19/05/04 Clearing Trx need to get Rate Type and Exch Table **/ 						if @I_sTransactionType = @CLEARING_TRX 						begin 							exec ncMCVerifyForClearingTrx 								@I_cOrigCurrencyID, 								@I_sMCTrxState, 								@cRateTypeID output, 								@cExchangeTableID output, 								@O_iErrorState output 							select @dExchangeDate = @DEFAULT_DATE, @dExchangeTime = @DEFAULT_DATE 						end 						/*- -*/ 					end 					if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 					begin 						select 							@dExchangeDate = @DEFAULT_DATE, 							@dExchangeTime = @DEFAULT_DATE, 							@cRateTypeID = '', 							@cExchangeTableID = '' 					end 					/* get the decimal places for this line */ 					if @I_sAccountType = @UNIT_ACCT 						select 							@iDecimalPlaces = DECPLACS - 1 						from 							GL00100 						where 							ACTINDX = @I_iAccountIndex 					else 						select 							@iDecimalPlaces = DECPLCUR - 1 						from 							DYNAMICS..MC40200 						where 							CURNCYID = @I_cOrigCurrencyID 					if @iDecimalPlaces is NULL 						select @iDecimalPlaces = 2 					/* get the next sequence number for our new interface record */ 					select 						@nIC_SequenceLine = (max(SQNCLINE) + 100) 					from 						DYNAMICS..NCIC1004 					where 						(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 					if @nIC_SequenceLine is NULL 						select @nIC_SequenceLine = 100 					/* get the dta series and dta reference for this GL line */ 					/* 28/02/06, NJP, Use passed in DTA values */ /*					exec @iStatus = dtaGetGLKeyFields 						@I_sDTAGLStatus, 						@I_mRecurringTRXSequence, 						@I_nSequenceLine, 						@I_iOrigSequenceNumber, 						@I_cOriginatingDocNumber, 						@I_cOriginatingControlNumber, 						@I_sOriginatingTrxType, 						@I_cAuditTrailCode, 						@I_sHdrSeries,			 						@I_sOrigDTASeries, 						1, 						@I_nDTAIndex, 						@sKF_DTASeries output, 						@cKF_DTAReference output, 						@iKF_SequenceLine output, 						@cKF_DTAGLReference output, 						@cKF_DocumentNumber output, 						@sKF_DocumentType output, 						@O_iErrorState output */ 					/* if the above stored proc failed, bail out */ 					select @iError = @@error 					if @iStatus = 0 and @iError <> 0 						select @iStatus = @iError 					if @iStatus <> 0 or @O_iErrorState <> 0 					begin 						/* IB - 20/06/06, Added Intercompany Log table */ 						select @cLogMsg = 'ncCreateInterfaceRec break. dtaGetGLKeyFields failed'+ 							'AccIndex: '+str(@I_iAccountIndex)+'Status: '+str(@iStatus)+' ErrorState: '+str(@O_iErrorState) 						exec dbo.ncWriteInterLog @cLogMsg  						break 					end 					/* IB - 20/06/06, Added Intercompany Log table */ 					exec dbo.ncWriteInterLog 'ncCreateInterfaceRec inserting into NC_IC_Interface_MSTR' 					/*25/04/2006 Mike South read the destination companies mc setting*/ 					exec ncGetDestMCSetting 						@sIC_DestCompany, 						@iMCFunctionalOriginating output 					/**/ 	 					/* write the new line to the NC_IC_Interface_MSTR table */ 					insert into DYNAMICS..NCIC1004 ( 						CMPANYID, 						NC_Source_Company_ID, 						NC_Src_Account_Index, 						NC_Src_IC_Account_Index, 						NC_Dest_Account_Index, 						NC_Dest_IC_Account_Index, 						NC_Trigger_Account_Index, 						JRNENTRY, 						SQNCLINE, 						ACTINDX, 						DEBITAMT, 						CRDTAMNT, 						ORDBTAMT, 						ORCRDAMT, 						XCHGRATE, 						DSCRIPTN, 						GLLINMSG, 						GLLINMS2, 						CURRNIDX, 						DECPLACS, 						ORCTRNUM, 						ORDOCNUM, 						ORMSTRID, 						ORMSTRNM, 						ORTRXTYP, 						OrigSeqNum, 						OrigDTASeries, 						SEQNUMBR, 						DTA_GL_Status, 						DTAREF, 						DTA_Index, 						RATETPID, 						EXGTBLID, 						EXCHDATE, 						TIME1, 						RTCLCMTD, 						DENXRATE, 						MCTRXSTT, 						NC_Src_Batch_Created, 						NC_Dest_Batch_Created, 						NC_Copy_MDA_CB, 						NC_Reverse_MDA_CB, 						MKDTOPST, 						SOURCDOC, 						USERID, 						TRXDATE, 						CURRVAL, 						DATE1, 						String1, 						STRGA255, 						IntegerValue, 						NC_Source_Currency_Index, 						SERIES, 						Remote_Company_ID, 						Remote_Destination_Accou, 						Remote_Destination_IC_Ac, 						MCSTRUCT_1, 						MCSTRUCT_2, 						MCSTRUCT_3, 						MCSTRUCT_4, 						MCSTRUCT_5, 						MCSTRUCT_6, 						MCSTRUCT_7, 						MCSTRUCT_8, 						MCSTRUCT_9, 						MCSTRUCT_10, 						MCSTRUCT_11, 						MCSTRUCT_12, 						MCSTRUCT_13, 						MCSTRUCT_14, 						ORTRXDESC, 						NC_Spare_Int, 						NC_Bank_Currency_ID, 						NC_FunctionalOriginating) 					values ( 						@sIC_DestCompany, 						@sCompanyID, 						@iIC_SrcAccount, 						@iIC_SrcICAccount, 						@iIC_DestAccount, 						@iIC_DestICAccount, 						@iIC_TrigAccount, 						@I_iJournalEntry, 						@nIC_SequenceLine, 						@I_iAccountIndex, 						@I_nDebit, 						@I_nCredit, 						@I_nOrigDebit, 						@I_nOrigCredit, 						@I_nExchangeRate, 						@I_cDescription, 						0x00000000, 						0x00000000, 						@I_sOrigCurrencyIndex, 						@iDecimalPlaces, 						@I_cOriginatingControlNumber, 						@I_cOriginatingDocNumber, 						@I_cOriginatingMasterID, 						@I_cOriginatingMasterName, 						@I_sOriginatingTrxType, 						@I_iOrigSequenceNumber, 						@I_sKF_DTASeries,		/* 28/02/06, NJP, Use passed in DTA values */ 						@I_nSequenceLine, 						32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 						@I_cKF_DTAReference,		/* 28/02/06, NJP, Use passed in DTA values */ 						@I_nDTAIndex, 						@cRateTypeID, 						@cExchangeTableID, 						@dExchangeDate, 						@dExchangeTime, 						@I_sRateCalculationMethod, 						@I_nDenomExchangeRate, 						@I_sMCTrxState, 						@FALSE, 						@FALSE, 						@tIC_CopyMDA, 						@tIC_ReverseMDA, 						@TRUE, 						@I_cHdrSourceDocument,		/* NCL, 06/02/06, NJP, Use IN Param */ 						@I_cUserID, 						@dHdrTrxDate, 						0, 						'01 Jan 1900', 						'', 						'', 						0, 						@iFunctionalIndex, 						@iSeries, 						@cRemoteCompany, 						@cRemoteDestAcc, 						@cRemoteDestICAcc, 						'', 						0, 						'', 						'', 						0, 						'01 Jan 1900', 						0, 						'01 Jan 1900', 						0, 						0, 						0, 						'01 Jan 1900', 						0, 						0, 						@I_sHdrReference,		/* NCL, 06/02/06, NJP, Use IN Param */ 						0, 						/* MS 24/04/2006 */ @sBankCurrencyId, 						@iMCFunctionalOriginating)/**/ 					/* due to recurring trx, we can now have dupicate MDA details, delete any old ones to stop duplicate conflicts */ 					/* 28/02/06, NJP, Use passed in DTA values */ 					delete from DYNAMICS..NCIC2000 where (DTASERIES = @I_sKF_DTASeries) and 							(DTAREF = @I_cKF_DTAReference) and 							(ACTINDX = @iIC_TrigAccount)  					/* check if we need to copy any mda from this GL line as well */ 					if @tIC_CopyMDA = @TRUE 					begin 						/* write the mda code lines to NC_SY_DTA_Details */ 						insert into DYNAMICS..NCIC2000 ( 							DTASERIES, 							DTAREF, 							ACTINDX, 							SEQNUMBR, 							GROUPID, 							CODEID, 							DOCNUMBR, 							CMPANYID, 							RMDTYPAL, 							POSTDESC, 							DTAQNTY, 							CODEAMT, 							TRXDATE, 							NC_Copy_MDA_CB, 							NC_Reverse_MDA_CB) 						select 							DTASERIES, 							DTAREF, 							ACTINDX, 							SEQNUMBR, 							GROUPID, 							CODEID, 							DOCNUMBR, 							@sCompanyID, 							RMDTYPAL, 							POSTDESC, 							DTAQNTY, 							CODEAMT, 							TRXDATE, 							@tIC_CopyMDA, 							@tIC_ReverseMDA 						from 							DTA10200 						where 							(DTASERIES = @I_sKF_DTASeries) and		/* 28/02/06, NJP, Use passed in DTA values */ 							(DTAREF = @I_cKF_DTAReference) and 							(ACTINDX = @iIC_TrigAccount) 				end /* @tIC_CopyMDA = @TRUE */ 			end /* @iProcessTemplate = 1 */ 		end /* Not an Alternate Account */ 		/* IB 10/04/03 - Check for PM batch */ 		/* Modified to only check for GL transactions posted in summary from PM if Originating TRX Source is not blank */ 		/* Start of modfications - 02/07/03 - pjsparrow */ 		/* Start of modfications - 03/08/04 - pjsparrow */ 		/* Use the DTA Status to check for summary transactions, not the Originating TRX Source */ 		if (@I_sDTAGLStatus & @SUMMARY_CHECKED) = @SUMMARY_CHECKED 		/*if (@cHdrOrigTrxSource <> '') and (@cHdrOrigTrxSource <> 'IC')*/ 		/* End of modfications - 03/08/04 - pjsparrow */ 		begin 		/* End of modfications - 02/07/03 - pjsparrow */ 			/* Start of modfications - 04/05/04 - pjsparrow */ 			if @iSeries = 4 				declare DistCursor CURSOR for  					select NCIC3006.CMPANYID, 						'', 						'', 						NCIC3006.NC_Src_IC_Account_Index, 						NCIC3006.NC_Dest_Account_Index, 						NCIC3006.NC_Dest_IC_Account_Index, 						/* Start of modifications - 03/07/03 - pjsparrow */ 						NCIC3006.NC_Copy_MDA_CB, 						NCIC3006.NC_Reverse_MDA_CB, 						/* End of modifications - 03/07/03 - pjsparrow */ 						PM10100.CRDTAMNT, 						PM10100.DEBITAMT, 						PM10100.ORCRDAMT, 						PM10100.ORDBTAMT 					from PM10100 					join PM00400 on PM00400.CNTRLTYP = PM10100.CNTRLTYP and PM00400.CNTRLNUM = PM10100.VCHRNMBR 					join NCIC3006 on NCIC3006.VCHRNMBR = PM10100.VCHRNMBR and NCIC3006.DOCTYPE = PM00400.DOCTYPE and 						NCIC3006.SQNCLINE = PM10100.DSTSQNUM and NCIC3006.NC_Src_IC_Account_Index = PM10100.DSTINDX  					where PM10100.TRXSORCE = @I_cHdrOrigTrxSource and PM10100.DSTINDX = @I_iAccountIndex		/* NCL, 06/02/06, NJP, Use IN Param */ 			 			if @iSeries = 3 /*sales*/ 				declare DistCursor CURSOR for  					select NCIC3006.CMPANYID, 					'', 					'', 					NCIC3006.NC_Src_IC_Account_Index, 					NCIC3006.NC_Dest_Account_Index, 					NCIC3006.NC_Dest_IC_Account_Index, 					NCIC3006.NC_Copy_MDA_CB, 					NCIC3006.NC_Reverse_MDA_CB, 					RM10101.CRDTAMNT, 					RM10101.DEBITAMT, 					RM10101.ORCRDAMT, 					RM10101.ORDBTAMT 				from RM10101 				join RM00401 on RM00401.RMDTYPAL = RM10101.RMDTYPAL and RM00401.DOCNUMBR = RM10101.DOCNUMBR 				join NCIC3006 on NCIC3006.RMDNUMWK = RM10101.DOCNUMBR and NCIC3006.DOCTYPE = RM00401.RMDTYPAL and 					NCIC3006.SQNCLINE = RM10101.SEQNUMBR and NCIC3006.NC_Src_IC_Account_Index = RM10101.DSTINDX  				where RM10101.TRXSORCE = @I_cHdrOrigTrxSource and RM10101.DSTINDX = @I_iAccountIndex 			/* Start of modfications - 04/05/04 - pjsparrow */ 			 			/* MS 09/04/06*/ 			if @iSeries = 2 /*CM*/ 			begin 				if @I_cDescription='IC Void Bank Transaction' 				begin 					select @CMvoidTRX=1 				end 				else 				begin 					select @CMvoidTRX=0 				end 				if (isnumeric(@I_cOriginatingControlNumber)=1) 				begin 					select @nCMLinkRecordNumber=Cast(@I_cOriginatingControlNumber as numeric) 				end 				else 				begin 					/*set to a number it will never find*/ 					select @nCMLinkRecordNumber=-1 				end 				declare DistCursor CURSOR for  					select NCIC3006.CMPANYID, 					'', 					'', 					NCIC3006.NC_Src_IC_Account_Index, 					NCIC3006.NC_Dest_Account_Index, 					NCIC3006.NC_Dest_IC_Account_Index, 					NCIC3006.NC_Copy_MDA_CB, 					NCIC3006.NC_Reverse_MDA_CB, 					CM20400.CRDTAMNT, 					CM20400.DEBITAMT, 					CM20400.ORCRDAMT, 					CM20400.ORDBTAMT 				from CM20400 				join NCIC3006 on NCIC3006.CMDNUMWK = CM20400.CMDNUMWK  and NCIC3006.VOIDED=@CMvoidTRX and 					NCIC3006.SQNCLINE = CM20400.DSTSQNUM and NCIC3006.NC_Src_IC_Account_Index = CM20400.ACTINDX  				where CM20400.CMDNUMWK = @nCMLinkRecordNumber and CM20400.ACTINDX = @I_iAccountIndex 			end 			/**/ 			/* MS 10/12/07*/ 			if @iSeries not in(4,3,2) /*Other vilasw*/ 			begin			 				declare DistCursor CURSOR for  					select NCIC3006.CMPANYID, 					'', 					'', 					NCIC3006.NC_Src_IC_Account_Index, 					NCIC3006.NC_Dest_Account_Index, 					NCIC3006.NC_Dest_IC_Account_Index, 					NCIC3006.NC_Copy_MDA_CB, 					NCIC3006.NC_Reverse_MDA_CB, 					GL10001.CRDTAMNT, 					GL10001.DEBITAMT, 					GL10001.ORCRDAMT, 					GL10001.ORDBTAMT 				from GL10001 					join NCIC3006 on NCIC3006.JRNENTRY = GL10001.JRNENTRY  and  					NCIC3006.SQNCLINE = GL10001.SQNCLINE and  					NCIC3006.NC_Src_IC_Account_Index = GL10001.ACTINDX  				where GL10001.JRNENTRY = @I_iJournalEntry and 					GL10001.ACTINDX = @I_iAccountIndex 			end 			/**/ 			open DistCursor 			fetch next from DistCursor into  					@sIC_DestCompany, 					@iIC_TrigAccount, 					@iIC_SrcAccount, 					@iIC_SrcICAccount, 					@iIC_DestAccount, 					@iIC_DestICAccount, 					/* Start of modifications - 03/07/03 - pjsparrow */ 					@tIC_CopyMDA, 					@tIC_ReverseMDA, 					/* End of modifications - 03/07/03 - pjsparrow */ 					@nPMCreditAmt, 					@nPMDebitAmt, 					@nPMOrigCredtAmt, 					@nPMOrigDebitAmt 			while (@@fetch_status = 0)  			begin 				/* READ THE NECESSARY VALUES FROM THE TRX LINE */ 						if (@I_sTransactionType = @NORMAL_TRX) or (@I_sTransactionType = @CLEARING_TRX) /* modifications, 14/05/04, pboniface */ 						begin 							select 								@dExchangeDate = EXCHDATE, 								@dExchangeTime = TIME1, 								@cRateTypeID = RATETPID, 								@cExchangeTableID = EXGTBLID 							from 								GL10001 							where 								JRNENTRY = @I_iJournalEntry and 								SQNCLINE = @I_nSequenceLine 							/** ACW 19/05/04 Clearing Trx need to get Rate Type and Exch Table **/ 							if @I_sTransactionType = @CLEARING_TRX 							begin 								exec ncMCVerifyForClearingTrx 									@I_cOrigCurrencyID, 									@I_sMCTrxState, 									@cRateTypeID output, 									@cExchangeTableID output, 									@O_iErrorState output 								select @dExchangeDate = @DEFAULT_DATE, @dExchangeTime = @DEFAULT_DATE 							end 							/*- -*/ 						end 						if @dExchangeDate is NULL and @dExchangeTime is NULL and @cRateTypeID is NULL and @cExchangeTableID is NULL 						begin 							select 								@dExchangeDate = @DEFAULT_DATE, 								@dExchangeTime = @DEFAULT_DATE, 								@cRateTypeID = '', 								@cExchangeTableID = '' 						end 						/* GET THE DECIMAL PLACES FOR THIS LINE */ 						if @I_sAccountType = @UNIT_ACCT 							select 								@iDecimalPlaces = DECPLACS - 1 							from 								GL00100 							where 								ACTINDX = @I_iAccountIndex 						else 							select 								@iDecimalPlaces = DECPLCUR - 1 							from 								DYNAMICS..MC40200 							where 								CURNCYID = @I_cOrigCurrencyID 						if @iDecimalPlaces is NULL 							select @iDecimalPlaces = 2 						/* Start of modifications - 03/07/03 - pjsparrow */ 						/*SELECT */ 						/*	@TIC_COPYMDA = NC_COPY_MDA_CB, */ 						/*	@TIC_REVERSEMDA = NC_REVERSE_MDA_CB */ 						/*FROM */ 						/*	NCIC3005 */ 						/*WHERE */ 						/*	(NC_SOURCE_COMPANY_ID = @SCOMPANYID) AND */ 						/*	(NC_SRC_IC_ACCOUNT_INDEX = @I_IACCOUNTINDEX) */ 						/* End of modifications - 03/07/03 - pjsparrow */ 						/* get the next sequence number for our new interface record */ 						select 							@nIC_SequenceLine = (max(SQNCLINE) + 100) 						from 							DYNAMICS..NCIC1004 						where 							(CMPANYID = @sIC_DestCompany) and (JRNENTRY = @I_iJournalEntry) 						if @nIC_SequenceLine is NULL 							select @nIC_SequenceLine = 100 						/* GET THE DTA SERIES AND DTA REFERENCE FOR THIS GL LINE */ 						/* 28/02/06, NJP, Use passed in DTA values */ /*						exec @iStatus = dtaGetGLKeyFields 							@I_sDTAGLStatus, 							@I_mRecurringTRXSequence, 							@I_nSequenceLine, 							@I_iOrigSequenceNumber, 							@I_cOriginatingDocNumber, 							@I_cOriginatingControlNumber, 							@I_sOriginatingTrxType, 							@I_cAuditTrailCode, 							@I_sHdrSeries,		 							@I_sOrigDTASeries, 							1, 							@I_nDTAIndex, 							@sKF_DTASeries output, 							@cKF_DTAReference output, 							@iKF_SequenceLine output, 							@cKF_DTAGLReference output, 							@cKF_DocumentNumber output, 							@sKF_DocumentType output, 							@O_iErrorState output */ 						/* if the above stored proc failed, bail out */ 						select @iError = @@error 						if @iStatus = 0 and @iError <> 0 							select @iStatus = @iError 						if @iStatus <> 0 or @O_iErrorState <> 0 						begin 							/* IB - 20/06/06, Added Intercompany Log table */ 							select @cLogMsg = 'ncCreateInterfaceRec break. dtaGetGLKeyFields failed'+ 								'Status: '+str(@iStatus)+' ErrorState: '+str(@O_iErrorState) 							exec dbo.ncWriteInterLog @cLogMsg 							break 						end 						/* IB - 20/06/06, Added Intercompany Log table */ 						exec dbo.ncWriteInterLog 'ncCreateInterfaceRec inserting into NC_IC_INTERFACE_MSTR (PM Dists)' 						/*25/04/2006 Mike South read the destination companies mc setting*/ 						exec ncGetDestMCSetting 							@sIC_DestCompany, 							@iMCFunctionalOriginating output 						/**/ 	 						/* WRITE THE NEW LINE TO THE NC_IC_INTERFACE_MSTR TABLE */ 						insert into DYNAMICS..NCIC1004 ( 							CMPANYID, 							NC_Source_Company_ID, 							NC_Src_Account_Index, 							NC_Src_IC_Account_Index, 							NC_Dest_Account_Index, 							NC_Dest_IC_Account_Index, 							NC_Trigger_Account_Index, 							JRNENTRY, 							SQNCLINE, 							ACTINDX, 							DEBITAMT, 							CRDTAMNT, 							ORDBTAMT, 							ORCRDAMT, 							XCHGRATE, 							DSCRIPTN, 							GLLINMSG, 							GLLINMS2, 							CURRNIDX, 							DECPLACS, 							ORCTRNUM, 							ORDOCNUM, 							ORMSTRID, 							ORMSTRNM, 							ORTRXTYP, 							OrigSeqNum, 							OrigDTASeries, 							SEQNUMBR, 							DTA_GL_Status, 							DTAREF, 							DTA_Index, 							RATETPID, 							EXGTBLID, 							EXCHDATE, 							TIME1, 							RTCLCMTD, 							DENXRATE, 							MCTRXSTT, 							NC_Src_Batch_Created, 							NC_Dest_Batch_Created, 							NC_Copy_MDA_CB, 							NC_Reverse_MDA_CB, 							MKDTOPST, 							SOURCDOC, 							USERID, 							TRXDATE, 							CURRVAL, 							DATE1, 							String1, 							STRGA255, 							IntegerValue, 							NC_Source_Currency_Index, 							SERIES, 							Remote_Company_ID, 							Remote_Destination_Accou, 							Remote_Destination_IC_Ac, 							MCSTRUCT_1, 							MCSTRUCT_2, 							MCSTRUCT_3, 							MCSTRUCT_4, 							MCSTRUCT_5, 							MCSTRUCT_6, 							MCSTRUCT_7, 							MCSTRUCT_8, 							MCSTRUCT_9, 							MCSTRUCT_10, 							MCSTRUCT_11, 							MCSTRUCT_12, 							MCSTRUCT_13, 							MCSTRUCT_14, 							ORTRXDESC, 							NC_Spare_Int, 							NC_Bank_Currency_ID, 							NC_FunctionalOriginating) 						VALUES ( 							@sIC_DestCompany, 							@sCompanyID, 							@iIC_SrcAccount, 							@iIC_SrcICAccount, 							@iIC_DestAccount, 							@iIC_DestICAccount, 							@iIC_TrigAccount, 							@I_iJournalEntry, 							@nIC_SequenceLine, 							@I_iAccountIndex, 							@nPMDebitAmt, 							@nPMCreditAmt, 							@nPMOrigDebitAmt, 							@nPMOrigCredtAmt, 							@I_nExchangeRate, 							@I_cDescription, 							0x00000000, 							0x00000000, 							@I_sOrigCurrencyIndex, 							@iDecimalPlaces, 							@I_cOriginatingControlNumber, 							@I_cOriginatingDocNumber, 							@I_cOriginatingMasterID, 							@I_cOriginatingMasterName, 							@I_sOriginatingTrxType, 							@I_iOrigSequenceNumber, 							@I_sKF_DTASeries,		/* 28/02/06, NJP, Use passed in DTA values */ 							@I_nSequenceLine, 							32, /* @I_sDTAGLStatus, - changed so we dont get errors on reccuring trx's */ 							@I_cKF_DTAReference,		/* 28/02/06, NJP, Use passed in DTA values */ 							@I_nDTAIndex, 							@cRateTypeID, 							@cExchangeTableID, 							@dExchangeDate, 							@dExchangeTime, 							@I_sRateCalculationMethod, 							@I_nDenomExchangeRate, 							@I_sMCTrxState, 							@TRUE, /* Alternate Account, dont want a source trx to be created */ 							@FALSE, 							@tIC_CopyMDA, 							@tIC_ReverseMDA, 							@TRUE, 							@I_cHdrSourceDocument,		/* NCL, 06/02/06, NJP, Use IN Param */ 							@I_cUserID, 							@dHdrTrxDate, 							0, 							'01 Jan 1900', 							'', 							'', 							0, 							@iFunctionalIndex, 							@iSeries, 							@cRemoteCompany, 							@cRemoteDestAcc, 							@cRemoteDestICAcc, 							'', 							0, 							'', 							'', 							0, 							'01 Jan 1900', 							0, 							'01 Jan 1900', 							0, 							0, 							0, 							'01 Jan 1900', 							0, 							0, 							@I_sHdrReference,		/* NCL, 06/02/06, NJP, Use IN Param */ 							0, 							/* MS 24/04/2006 */ @sBankCurrencyId, 							@iMCFunctionalOriginating)/**/ 						/* CHECK IF WE NEED TO COPY ANY MDA FROM THIS GL LINE AS WELL */ 						if @tIC_CopyMDA = @TRUE 						BEGIN 							/* DUE TO RECURRING TRX, WE CAN NOW HAVE DUPICATE MDA DETAILS, DELETE ANY OLD ONES TO STOP DUPLICATE CONFLICTS */ 							/* 28/02/06, NJP, Use passed in DTA values */ 							delete from DYNAMICS..NCIC2000 where (DTASERIES = @I_sKF_DTASeries) and 										(DTAREF = @I_cKF_DTAReference) and 										/* Start of modifications - 04/07/03 - pjsparrow */ 										/* Modified to use @iIC_SrcICAccount as @iIC_TrigAccount is not set here */ 										/*(ACTINDX = @iIC_TrigAccount) */ 										(ACTINDX = @iIC_SrcICAccount)  										/* End of modifications - 04/07/03 - pjsparrow */ 							/* WRITE THE MDA CODE LINES TO NC_SY_DTA_DETAILS */ 							INSERT INTO DYNAMICS..NCIC2000 ( 								DTASERIES, 								DTAREF, 								ACTINDX, 								SEQNUMBR, 								GROUPID, 								CODEID, 								DOCNUMBR, 								CMPANYID, 								RMDTYPAL, 								POSTDESC, 								DTAQNTY, 								CODEAMT, 								TRXDATE, 								NC_Copy_MDA_CB, 								NC_Reverse_MDA_CB) 							SELECT 								DTASERIES, 								DTAREF, 								ACTINDX, 								SEQNUMBR, 								GROUPID, 								CODEID, 								DOCNUMBR, 								@sCompanyID, 								RMDTYPAL, 								POSTDESC, 								DTAQNTY, 								CODEAMT, 								TRXDATE, 								@tIC_CopyMDA, 								@tIC_ReverseMDA 							from 								DTA10200 							where 								(DTASERIES = @I_sKF_DTASeries) and		/* 28/02/06, NJP, Use passed in DTA values */ 								(DTAREF = @I_cKF_DTAReference) and 								(ACTINDX = @iIC_SrcICAccount) 						END	 					fetch next from DistCursor into  							@sIC_DestCompany, 							@iIC_TrigAccount, 							@iIC_SrcAccount, 							@iIC_SrcICAccount, 							@iIC_DestAccount, 							@iIC_DestICAccount, 							/* Start of modifications - 03/07/03 - pjsparrow */ 							@tIC_CopyMDA, 							@tIC_ReverseMDA, 							/* End of modifications - 03/07/03 - pjsparrow */ 							@nPMCreditAmt, 							@nPMDebitAmt, 							@nPMOrigCredtAmt, 							@nPMOrigDebitAmt 					end 					close DistCursor 					deallocate DistCursor		 				end 		end 	end	 end if @iStatus <> 0 or @O_iErrorState <> 0 begin 	if @tTransaction = 1 		rollback transaction end else if @tTransaction = 1 	commit transaction return (@iStatus)  
GO
GRANT EXECUTE ON  [dbo].[ncCreateInterfaceRec] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[ncCreateInterfaceRec] TO [public]
GO
