SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE     PROCEDURE [dbo].[aagAdjustRollDownFractionsAcc] (  @aaBudgetID INTEGER ,  @aaCodeSequence INTEGER ,  @PercenTotal NUMERIC(19,5) ,  @aaActualPriliminary INTEGER ,  @ACTINDX INTEGER ,  @aaAcctType INTEGER ,  @IncOB INTEGER ) AS BEGIN  DECLARE @NodeValue NUMERIC(19,5)  DECLARE @NodeValueAcc NUMERIC(19,5)  DECLARE @SumValueAcc NUMERIC(19,5)  DECLARE @SumValue NUMERIC(19,5)  DECLARE @Tolerance NUMERIC(19,5)   DECLARE @temp_FiscalPeriod TABLE  (  PERIODDT DATETIME,  aaFiscalPeriod INTEGER  )  DECLARE @aaFiscalPeriod INTEGER  DECLARE @nCount   INTEGER  DECLARE @aaParCodeSequence  INTEGER  DECLARE @aaBudgetTreeID INTEGER  DECLARE @aaMaxCodeSequence INTEGER   DECLARE @PeriodDate DATETIME  SELECT @aaBudgetTreeID = aaBudgetTreeID   FROM AAG00903   WHERE aaBudgetID = @aaBudgetID  SELECT TOP 1 @aaParCodeSequence = aaCodeSequence   FROM AAG00902   WHERE aaTrxDimCodeID =   (SELECT DISTINCT aaTrxDimParCodeID   FROM AAG00902   WHERE aaCodeSequence = @aaCodeSequence AND   aaBudgetTreeID = @aaBudgetTreeID)AND  aaBudgetTreeID = @aaBudgetTreeID AND   aaCodeSequence < @aaCodeSequence   ORDER BY aaCodeSequence DESC   SELECT @aaMaxCodeSequence = MAX (aaCodeSequence)   FROM dbo.aagGetChildNodes(@aaBudgetTreeID, @aaParCodeSequence)   INSERT INTO @temp_FiscalPeriod  SELECT DISTINCT PERIODDT, aaFiscalPeriod   FROM AAG00904   WHERE aaBudgetID = @aaBudgetID   ORDER BY PERIODDT   WHILE ( 1 = 1 )  BEGIN  SELECT @nCount = COUNT (*) FROM @temp_FiscalPeriod  IF @nCount = 0 BREAK  SELECT TOP 1 @PeriodDate = PERIODDT, @aaFiscalPeriod = aaFiscalPeriod FROM @temp_FiscalPeriod  SELECT @NodeValue = CASE @aaAcctType   WHEN 1 THEN ( Balance * ( @PercenTotal / 100 ) )   WHEN 2 THEN ( QUANTITY  * ( @PercenTotal / 100 ) )END   FROM AAG00904   WHERE aaBudgetID = @aaBudgetID AND   aaCodeSequence = @aaCodeSequence AND   aaActualPriliminary = @aaActualPriliminary AND   aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate  SELECT @SumValue = SUM(Balance)   FROM AAG00905   WHERE aaBudgetID = @aaBudgetID AND   aaCodeSequence = @aaCodeSequence AND   aaActualPriliminary = @aaActualPriliminary AND  ACTINDX IN ( SELECT ACTINDX FROM #temp_ACTINDX) AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate  SET @Tolerance = ( @NodeValue - @SumValue )   UPDATE AAG00905   SET Balance =  ( Balance + @Tolerance )  WHERE aaBudgetID = @aaBudgetID AND   ACTINDX = @ACTINDX AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND   aaCodeSequence = @aaCodeSequence AND   PERIODDT = @PeriodDate  IF @aaMaxCodeSequence = @aaCodeSequence  BEGIN  SELECT @NodeValueAcc = Balance   FROM AAG00905   WHERE aaCodeSequence = @aaParCodeSequence AND  aaBudgetID = @aaBudgetID AND   aaActualPriliminary = @aaActualPriliminary AND   ACTINDX = @ACTINDX  AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate  SELECT @SumValueAcc = SUM(Balance)   FROM AAG00905   WHERE aaBudgetID = @aaBudgetID AND   aaActualPriliminary = @aaActualPriliminary AND   ACTINDX = @ACTINDX AND  aaFiscalPeriod = @aaFiscalPeriod AND  PERIODDT = @PeriodDate AND  aaCodeSequence in  (SELECT aaCodeSequence FROM dbo.aagGetChildNodes(@aaBudgetTreeID, @aaParCodeSequence))   IF @NodeValueAcc < @SumValueAcc  BEGIN  SET @Tolerance = ( @NodeValueAcc - @SumValueAcc )    UPDATE AAG00905   SET Balance =  ( Balance + @Tolerance )  WHERE aaBudgetID = @aaBudgetID AND   ACTINDX = @ACTINDX AND   aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  aaCodeSequence = @aaCodeSequence AND   PERIODDT = @PeriodDate  END  END   IF ( @aaFiscalPeriod = 0 ) AND ( @IncOB = 0 )  UPDATE AAG00905   SET Balance =  0.00  WHERE aaBudgetID = @aaBudgetID AND   ACTINDX = @ACTINDX AND   aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  aaCodeSequence = @aaCodeSequence AND   PERIODDT = @PeriodDate  DELETE FROM @temp_FiscalPeriod WHERE PERIODDT = @PeriodDate AND aaFiscalPeriod = @aaFiscalPeriod  END END    
GO
GRANT EXECUTE ON  [dbo].[aagAdjustRollDownFractionsAcc] TO [DYNGRP]
GO
