SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[icpmUpdateDistributionAmounts]  @I_cVoucherNumber char(21) = NULL,  @I_sControlType smallint = NULL,  @I_cIntercompanyID char(5)  = NULL,   @O_nTotalDebits numeric(19,5) = NULL output,  @O_nTotalCredits numeric(19,5) = NULL output,  @O_iErrorState           int             = NULL  output  as   declare  @TRUE              tinyint,   @FALSE    tinyint,  @sMULTIPLY smallint,  @sDIVIDE smallint,  @tTransaction          tinyint,  @tLoop       tinyint,  @sUNIT    smallint,  @iStatus int,  @iError int,  @mCredit numeric(19,5),  @mDebit numeric(19,5),  @sORIGINATING smallint,  @sRateCalcMethod smallint,  @nXRate   numeric(19,7),  @nDenomXRate numeric(19,7),  @cCurrencyID char(15),  @sMCTrxState smallint,  @sDecimalPlaces smallint,  @mDAmount numeric(19,5),   @mCAmount numeric(19,5),  @iSeqNum int select  @O_nTotalDebits  = 0.0,  @O_nTotalCredits = 0.0,  @O_iErrorState   = 0,  @iStatus   = 0,  @iError   = 0,  @mCredit   = 0.0,  @mDebit   = 0.0  if @@trancount = 0  begin  select @tTransaction = 1  begin transaction end    while (@tLoop is NULL) begin      select @tLoop = 1   if  @I_cVoucherNumber is NULL or  @I_sControlType is NULL or   @I_cIntercompanyID is NULL  begin  select @O_iErrorState = 21010  break   end    select  @TRUE           = 1,  @FALSE          = 0,  @sMULTIPLY = 0,  @sDIVIDE = 1,  @sUNIT   = 15,  @sORIGINATING = 4   declare linecursor  INSENSITIVE  cursor for   select distinct   isnull(DSTSQNUM,0),  isnull(RTCLCMTD,0),  isnull(XCHGRATE,0.0),   isnull(DENXRATE,0.0),  '',  isnull(MCTRXSTT,0),  isnull(DECPLACS,0),   isnull(ORCRDAMT,0.0),   isnull(ORDBTAMT,0.0)   from  PM10100  where   VCHRNMBR  = @I_cVoucherNumber  and CNTRLTYP  = @I_sControlType  and INTERID   = @I_cIntercompanyID   and XCHGRATE <> 0.0   and DISTTYPE <> @sUNIT    open linecursor    if @@cursor_rows <>  0  begin   fetch next from  linecursor   into  @iSeqNum,  @sRateCalcMethod,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  @mCAmount,  @mDAmount   while (@@fetch_status <> -1)  begin    exec @iStatus = mcCalculateAmount  @sRateCalcMethod,  @sORIGINATING,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  '',    @mDAmount,   @mDebit output,   @O_iErrorState output   select @iError = @@error  if @iStatus  = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0   break   exec @iStatus = mcCalculateAmount  @sRateCalcMethod,  @sORIGINATING,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  '',    @mCAmount,  @mCredit output,   @O_iErrorState output    select @iError = @@error  if @iStatus  = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0   break    update  PM10100  set  CRDTAMNT = @mCredit,  DEBITAMT = @mDebit  where   VCHRNMBR  = @I_cVoucherNumber  and CNTRLTYP  = @I_sControlType  and INTERID   = @I_cIntercompanyID  and XCHGRATE <> 0.0   and DISTTYPE <> @sUNIT   and DSTSQNUM  = @iSeqNum   fetch next from  linecursor   into  @iSeqNum,  @sRateCalcMethod,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  @mCAmount,  @mDAmount  end    end    deallocate linecursor    select  @O_nTotalDebits = isnull(sum(DEBITAMT), 0.0),  @O_nTotalCredits = isnull(sum(CRDTAMNT), 0.0)  from  PM10100   where  VCHRNMBR  = @I_cVoucherNumber  and CNTRLTYP  = @I_sControlType  and DISTTYPE <> @sUNIT  end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[icpmUpdateDistributionAmounts] TO [DYNGRP]
GO
