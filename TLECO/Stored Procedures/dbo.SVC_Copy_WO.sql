SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Copy_WO]  (@WORECTYPE smallint,@WORKORDNUM char(11) OUTPUT, @NEWWORECTYPE smallint, @NEWTYPE integer) AS declare @NEWWORKORDNUM char(11) declare @OldNoteIndex numeric(19,5) declare @NewNoteIndex numeric(19,5) declare @LineItemType char(3) declare @LineItemSeq int declare @LocationCode char(11) declare @ItemNumber char(31) declare @QtyOrder numeric(19,5) declare @QtyAlloc numeric(19,5) declare @QtyBO numeric(19,5) declare @Sequence numeric(19,5) declare @ItemDesc char(51) declare @UofM char(9) declare @StationID char(11) declare @OfficeID char(11) declare @TodayDate datetime declare @TodayTime datetime declare @TodayDateTime datetime declare @Status char(3) declare @Status1 char(3) declare @BOStatus char(3) declare @MinDate datetime declare @CMPNTSEQ int  exec smGetMinDate @MinDate output select @Status = WOENTSTA, @BOStatus = WOBOSTAT from SVC00998 select  @TodayDateTime = getdate() exec SVC_util_split_datetime @TodayDateTime,@TodayDate output,@TodayTime output BEGIN  BEGIN TRANSACTION  if @NEWTYPE = 1   BEGIN  exec SVC_New_Depot_Number 'WRK', @NEWWORKORDNUM  OUTPUT  INSERT INTO SVC06100 with (rowlock)  select   @NEWWORECTYPE,  @NEWWORKORDNUM,  @Status,  WOTYPE,  SVC_Depot_Priority,  @WORECTYPE,  @WORKORDNUM,  ORIGIN,  REFRENCE,TIMEZONE,  @TodayDate,  @TodayTime,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  BIN,  USERID,  OFFID,  CUSTNMBR,  ADRSCODE,  ADDRESS1,  ADDRESS2,  CITY,  STATE,  ZIPCODE,  '',0,  SRVRECTYPE,  CALLNBR,  SERVLITEMSEQ,  IBITEMNUM,  IBSERIAL,  IBEQUIPID,  OBITEMNUM,  OBSERIAL,  OBEQUIPID,  QUANTITY,  STATIONID,  ROUTEID,  SEQUENCE1,  LOCNCODE,  IBANALCODE,  OBANALCODE,  CUSTOWN,  ORDDOCID,  TRANSLINESEQ,  NOTEINDX,  FACTSEAL,  0,  0,  0,  PRICELVL,  0,  @MinDate,  @MinDate,   USERDEF1,  USERDEF2,  USRDEF03,  USRDEF04,  USRDEF05,  ADDRESS3,  COUNTRY,  SVC_RMA_Reason_Code,  SVC_RMA_Reason_Code_Desc,0,  0, QTYTYPE  from SVC06100   where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM  select @OldNoteIndex = NOTEINDX  from SVC06100  where WORECTYPE = @NEWWORECTYPE and WORKORDNUM = @NEWWORKORDNUM  if @OldNoteIndex > 0  BEGIN  exec SVC_Copy_Note @OldNoteIndex, @NewNoteIndex output  update SVC06100  set NOTEINDX = @NewNoteIndex  where WORECTYPE = @NEWWORECTYPE and WORKORDNUM = @NEWWORKORDNUM  END  insert SVC06101 with (rowlock)  select   @NEWWORECTYPE,  @NEWWORKORDNUM,  @Status,  LINITMTYP,  LNITMSEQ,  ITEMNMBR,  ITEMUSETYPE,  ITEMDESC,  STATIONID,  LOCNCODE,  UOFM,  TECHID,  QTYORDER,  0,  0,  0,  UNITCOST,  UNITPRCE,  EXTDCOST,  XTNDPRCE,  STRTDATE,  STRTTIME,  ENDDATE,  ENDTIME,  TRANSTME,  BILLABLTIM,  NOTEINDX,  SEQUENCE1,  '',  0,  '',  0, @MinDate, CMPNTSEQ, CMPITQTY  from SVC06101  where WORECTYPE = @WORECTYPE and   WORKORDNUM = @WORKORDNUM and  LINITMTYP = 'P'  declare NI_Cursor cursor for select LINITMTYP,  LNITMSEQ,  NOTEINDX,  LOCNCODE,  ITEMNMBR,  QTYORDER,  ITEMDESC,  UOFM,  STATIONID,CMPNTSEQ  from SVC06101  where WORECTYPE = @NEWWORECTYPE and   WORKORDNUM = @NEWWORKORDNUM  open NI_Cursor  fetch next from NI_Cursor into @LineItemType,  @LineItemSeq,  @OldNoteIndex,  @LocationCode,  @ItemNumber,  @QtyOrder,  @ItemDesc,  @UofM,  @StationID, @CMPNTSEQ  while @@FETCH_STATUS = 0  BEGIN  if @OldNoteIndex > 0  BEGIN  exec SVC_Copy_Note @OldNoteIndex, @NewNoteIndex output  update SVC06101  set NOTEINDX = @NewNoteIndex  where WORECTYPE = @NEWWORECTYPE and WORKORDNUM = @NEWWORKORDNUM and  LINITMTYP = @LineItemType and LNITMSEQ = @LineItemSeq and CMPNTSEQ = @CMPNTSEQ  END  select @OfficeID = OFFID   from SVC06100  where WORECTYPE = @NEWWORECTYPE and   WORKORDNUM = @NEWWORKORDNUM  if @NEWWORECTYPE = 2 and exists(select * from IV00101 where ITEMNMBR = @ItemNumber)  BEGIN  exec SVC_Allocate_and_Backorder @ItemNumber,  @LocationCode,  @QtyOrder,  @NEWWORKORDNUM,  2,  @LineItemSeq,  @ItemDesc,  @UofM,  @StationID,  @OfficeID,  @QtyAlloc output,  @QtyBO output,  @CMPNTSEQ  select @QtyAlloc = isnull(@QtyAlloc,0),  @QtyBO = isnull(@QtyBO,0)  update SVC06101 set ATYALLOC = @QtyAlloc,  QTYBACKO = @QtyBO  where WORECTYPE = @NEWWORECTYPE and WORKORDNUM = @NEWWORKORDNUM and  LINITMTYP = @LineItemType and LNITMSEQ = @LineItemSeq and CMPNTSEQ = @CMPNTSEQ  END  fetch next from NI_Cursor into @LineItemType,  @LineItemSeq,  @OldNoteIndex,  @LocationCode,  @ItemNumber,  @QtyOrder,  @ItemDesc,  @UofM,  @StationID, @CMPNTSEQ  END  deallocate NI_Cursor  insert SVC06105  select  @NEWWORECTYPE,  @NEWWORKORDNUM,  0,  SEQUENCE1,  DSCRIPTN,  DEPSTATGRP,  STATIONID,  TECHID,  ETTR,  ROUTEPROC,  SERVICEBOM,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  @MinDate,  NOTEINDX  from SVC06105  where WORECTYPE = @WORECTYPE and   WORKORDNUM = @WORKORDNUM  declare NI_Cursor cursor for select SEQUENCE1,NOTEINDX  from SVC06105  where WORECTYPE = @NEWWORECTYPE and   WORKORDNUM = @NEWWORKORDNUM  open NI_Cursor  fetch next from NI_Cursor into @Sequence, @OldNoteIndex  while @@FETCH_STATUS = 0  BEGIN  if @OldNoteIndex > 0   BEGIN  exec SVC_Copy_Note @OldNoteIndex, @NewNoteIndex output  update SVC06105  set NOTEINDX = @NewNoteIndex  where WORECTYPE = @NEWWORECTYPE and WORKORDNUM = @NEWWORKORDNUM and  SEQUENCE1 = @Sequence  END  fetch next from NI_Cursor into @Sequence, @OldNoteIndex  END  deallocate NI_Cursor  END   ELSE  BEGIN  select @NEWWORKORDNUM = @WORKORDNUM  update SVC06300   set WORECTYPE = @NEWWORECTYPE  where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM  update SVC06130   set WORECTYPE = @NEWWORECTYPE  where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM  update SVC06131   set WORECTYPE = @NEWWORECTYPE  where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM  update SVC06100   set WORECTYPE = @NEWWORECTYPE  where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM  update SVC06101   set WORECTYPE = @NEWWORECTYPE  where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM  update SVC06105   set WORECTYPE = @NEWWORECTYPE  where WORECTYPE = @WORECTYPE and WORKORDNUM = @WORKORDNUM   declare NI_Cursor cursor for select LINITMTYP,  LNITMSEQ,  NOTEINDX,  LOCNCODE,  ITEMNMBR,  QTYORDER,  ITEMDESC,  UOFM,  STATIONID, CMPNTSEQ  from SVC06101 where WORECTYPE = @NEWWORECTYPE and   WORKORDNUM = @NEWWORKORDNUM  open NI_Cursor  fetch next from NI_Cursor into @LineItemType,  @LineItemSeq,  @OldNoteIndex,  @LocationCode,  @ItemNumber,  @QtyOrder,  @ItemDesc,  @UofM,  @StationID, @CMPNTSEQ  while @@FETCH_STATUS = 0  BEGIN  select @OfficeID = OFFID   from SVC06100  where WORECTYPE = @NEWWORECTYPE and   WORKORDNUM = @NEWWORKORDNUM  if @NEWWORECTYPE = 2 and exists(select * from IV00101 where ITEMNMBR = @ItemNumber)  BEGIN  exec SVC_Allocate_and_Backorder @ItemNumber,  @LocationCode,  @QtyOrder,  @NEWWORKORDNUM,  2,  @LineItemSeq,  @ItemDesc,  @UofM,  @StationID,  @OfficeID,  @QtyAlloc output,  @QtyBO output,  @CMPNTSEQ  select @QtyAlloc = isnull(@QtyAlloc,0),  @QtyBO = isnull(@QtyBO,0)  if @QtyBO > 0  select @Status1 = @BOStatus  else   select @Status1 = @Status  update SVC06101 set ATYALLOC = @QtyAlloc,  QTYBACKO = @QtyBO,  WOSTAT = @Status1  where WORECTYPE = @NEWWORECTYPE and WORKORDNUM = @NEWWORKORDNUM and  LINITMTYP = @LineItemType and LNITMSEQ = @LineItemSeq and CMPNTSEQ = @CMPNTSEQ  END  fetch next from NI_Cursor into @LineItemType,  @LineItemSeq,  @OldNoteIndex,  @LocationCode,  @ItemNumber,  @QtyOrder,  @ItemDesc,  @UofM,  @StationID, @CMPNTSEQ  END  deallocate NI_Cursor  END  exec SVC_Set_Depot_Totals @NEWWORECTYPE, @NEWWORKORDNUM  select @WORKORDNUM = @NEWWORKORDNUM  if @@error <> 0 goto badentry  COMMIT TRANSACTION  return  badentry:  ROLLBACK TRANSACTION  return END    
GO
GRANT EXECUTE ON  [dbo].[SVC_Copy_WO] TO [DYNGRP]
GO
