SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[SVC_METER_Process_Meter_Overage] (  @ContractNumber char(11),  @LineNumber numeric(19,5),  @MeterToCheck integer,  @MeterReading integer,  @PrevMeterReading integer,  @MeterBase integer,  @OverageLevel1 integer,  @OverageLevel2 integer,  @OverageLevel3 integer,  @OverageLevel4 integer,  @Charge1 numeric(19,5),  @Charge2 numeric(19,5),  @Charge3 numeric(19,5),  @Charge4 numeric(19,5),  @Expire tinyint,  @Date datetime )  AS declare @Invoice numeric(19,5) declare @OrigInvoice numeric(19,5) declare @Zone1 integer declare @Zone2 integer declare @Zone3 integer declare @Zone4 integer declare @InvoiceDate datetime declare @message varchar(255) declare @LIABTYPE integer declare @BILLAMOUNT numeric(19,5) declare @TOTALREDUCED numeric(19,5) declare @ORIGBILLAMOUNT numeric(19,5) declare @ORIGTOTALREDUCED numeric(19,5) declare @LIABILITY integer declare @LIABDATE datetime declare @I_sRateCalcMethod  smallint ,           @I_sViewMode   smallint,            @I_nExchangeRate  numeric(15,7),       @I_nDenomExchangeRate numeric(15,7),       @I_sMCTrxState   smallint,            @I_sDecimalPlaces  smallint,            @O_iErrorState          int declare @CurrentUsage integer, @UsageAtLevel integer  declare @PrevOverageLevel integer, @PrevChargeLevel numeric(19,5) declare @MeterDone tinyint, @Internal integer declare @MinDate datetime  if @MeterReading <= @MeterBase return   if @OverageLevel2 < @OverageLevel1 or @OverageLevel3 < @OverageLevel2 or @OverageLevel4 < @OverageLevel3  return exec smGetMinDate @MinDate output  select @I_sViewMode = 3  ,  @I_sRateCalcMethod = S.RATECALC,   @I_nExchangeRate = S.XCHGRATE,   @I_nDenomExchangeRate = S.DENXRATE,   @I_sMCTrxState = S.MCTRXSTT,  @I_sDecimalPlaces = S.DECPLACS from SVC00601 S WITH (NOLOCK) where S.CONSTS = 2 and S.CONTNBR = @ContractNumber and S.LNSEQNBR = @LineNumber   if exists(select * from SVC00200 where CONSTS = 2 and CONTNBR = @ContractNumber and SVC_Contract_Line_SEQ = @LineNumber)  Begin  if @MeterToCheck = 1  select @Internal = Meter_Internal_Uses_1 from SVC00200  where CONSTS = 2 and CONTNBR = @ContractNumber and SVC_Contract_Line_SEQ = @LineNumber and Meters_1 = @MeterReading  else if @MeterToCheck = 2 select @Internal = Meter_Internal_Uses_2  from SVC00200  where CONSTS = 2 and CONTNBR = @ContractNumber and SVC_Contract_Line_SEQ = @LineNumber and Meters_2 = @MeterReading  else if @MeterToCheck = 3 select @Internal = Meter_Internal_Uses_3  from SVC00200  where CONSTS = 2 and CONTNBR = @ContractNumber and SVC_Contract_Line_SEQ = @LineNumber and Meters_3 = @MeterReading  else if @MeterToCheck = 4 select @Internal = Meter_Internal_Uses_4  from SVC00200  where CONSTS = 2 and CONTNBR = @ContractNumber and SVC_Contract_Line_SEQ = @LineNumber and Meters_4 = @MeterReading  else if @MeterToCheck = 5 select @Internal = Meter_Internal_Uses_5 from SVC00200  where CONSTS = 2 and CONTNBR = @ContractNumber and SVC_Contract_Line_SEQ = @LineNumber and Meters_5 = @MeterReading  ELSE select @Internal = 0  End  select @CurrentUsage = @MeterReading - @PrevMeterReading - isnull(@Internal,0) if @PrevMeterReading < @MeterBase  select @CurrentUsage = @MeterReading - @MeterBase  if @CurrentUsage < 0   select @CurrentUsage = 0 select @Invoice = 0  select @MeterDone = 0 while @MeterReading > 0  BEGIN if @PrevMeterReading = 0 and (@CurrentUsage > @OverageLevel1)   Begin  select @Invoice = @Invoice + @OverageLevel1 * @Charge1  if @CurrentUsage > @OverageLevel2  begin  select @Invoice = @Invoice + (@OverageLevel2- @OverageLevel1) * @Charge2  if @CurrentUsage > @OverageLevel3  begin  select @Invoice = @Invoice + (@OverageLevel3- @OverageLevel2) * @Charge3  select @Invoice = @Invoice + (@CurrentUsage - @OverageLevel3) * @Charge4  end  else  select @Invoice = @Invoice + (@CurrentUsage - @OverageLevel2) * @Charge3  end  else  select @Invoice = @Invoice + (@CurrentUsage - @OverageLevel1) * @Charge2  select @MeterDone = 1 End  else  Begin  if (@PrevMeterReading - @MeterBase < @OverageLevel1)  select @PrevOverageLevel = @OverageLevel1, @PrevChargeLevel = @Charge1  else  begin  if @PrevMeterReading - @MeterBase < @OverageLevel2  select @PrevOverageLevel = @OverageLevel2, @PrevChargeLevel = @Charge2  else  begin  if @PrevMeterReading - @MeterBase < @OverageLevel3  select @PrevOverageLevel = @OverageLevel3, @PrevChargeLevel = @Charge3  else  begin  select @PrevOverageLevel = @OverageLevel4, @PrevChargeLevel = @Charge4  select @UsageAtLevel = @CurrentUsage  select @MeterDone = 1  end  end  end  if @MeterDone = 0   Begin  if @CurrentUsage > (@PrevOverageLevel - (@PrevMeterReading - @MeterBase))  begin  if @PrevMeterReading < @MeterBase  select @UsageAtLevel = @PrevOverageLevel, @PrevMeterReading = @MeterBase  else  select @UsageAtLevel = @PrevOverageLevel - (@PrevMeterReading - @MeterBase)  end   else  begin  select @UsageAtLevel = @CurrentUsage  select @MeterDone = 1  end  End  select @PrevMeterReading = @PrevMeterReading + @UsageAtLevel  select @CurrentUsage = @CurrentUsage - @UsageAtLevel  select @Invoice = @Invoice + @UsageAtLevel * @PrevChargeLevel End   if @MeterDone = 0  CONTINUE  else  BREAK END  select @InvoiceDate = @Date IF @InvoiceDate = @MinDate BEGIN  select @InvoiceDate = min(INVODATE)   from SVC00603   where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber and POSTED = 0 END  exec SVC_Convert_Amount @I_sRateCalcMethod, @I_sViewMode,@I_nExchangeRate,  @I_nDenomExchangeRate,@I_sMCTrxState,@I_sDecimalPlaces,  @Invoice,@OrigInvoice OUTPUT, @O_iErrorState OUTPUT  select @InvoiceDate = isnull(@InvoiceDate,@Date) select @InvoiceDate = isnull(@InvoiceDate,getdate())  update SVC00607 set Amount_To_Invoice = Amount_To_Invoice + @Invoice,   Orig_Amount_To_Invoice = Orig_Amount_To_Invoice + @OrigInvoice,  INVODATE = @InvoiceDate where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber  IF @Expire <> 0 and exists(select * from SVC00603 where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber and POSTED = 0) BEGIN  select @InvoiceDate = min(INVODATE), @Invoice = sum(DOCAMNT),@OrigInvoice = sum(ORDOCAMT)   from SVC00603   where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber and POSTED = 0   update SVC00603 set DOCAMNT = @Invoice,ORDOCAMT = @OrigInvoice  where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber and POSTED = 0 and INVODATE = @InvoiceDate   delete from SVC00603  where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber and POSTED = 0 and INVODATE > @InvoiceDate END  IF @Expire <> 0  BEGIN  update SVC00601 set Contract_Line_Status = 'E'   where CONSTS=2 and CONTNBR=@ContractNumber and LNSEQNBR=@LineNumber  END  return 0    
GO
GRANT EXECUTE ON  [dbo].[SVC_METER_Process_Meter_Overage] TO [DYNGRP]
GO
