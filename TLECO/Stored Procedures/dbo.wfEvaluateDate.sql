SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[wfEvaluateDate]   @EvaluateDate datetime,  @CalculatedDate datetime = NULL output AS begin  SET nocount on   DECLARE  @dateToCheck datetime,  @day int,   @month int,   @year int,  @hour int,  @minute int,  @second int,  @DayOfWeek int,  @Done tinyint,  @tempDate datetime,  @UseNextStartTime tinyint,  @StartTime datetime,  @EndTime datetime   set @Done = 0  set @tempDate = @EvaluateDate  set @UseNextStartTime = 0  set @CalculatedDate = @EvaluateDate   while (@Done = 0)  begin  select  @day = DATEPART (dd , @tempDate ),   @month = DATEPART (mm , @tempDate ),   @year = DATEPART (yyyy , @tempDate ),   @hour = DATEPART (hh , @tempDate ),   @minute = DATEPART (mi , @tempDate ),   @second = DATEPART (ss , @tempDate )   select @dateToCheck = dateadd(mm, (@year - 1900) * 12 + @month - 1 , @day - 1)   if ((select count(*) from WF40310 where DATE1 = @dateToCheck) = 0)  begin  select @DayOfWeek = DATEPART(dw, @dateToCheck)  if (select count(*) from WF40300 where [DayOfWeek] = @DayOfWeek and IsWorkDay = 1) > 0  begin  select @StartTime = @dateToCheck + STRTTIME, @EndTime = @dateToCheck + ENDTIME  from WF40300  where [DayOfWeek] = @DayOfWeek    if (@EvaluateDate != @tempDate and @UseNextStartTime = 0)  begin  set @CalculatedDate = @StartTime  break  end  if (@UseNextStartTime = 1)  begin  set @CalculatedDate = @StartTime  break   end   if (@tempDate >= @StartTime and @tempDate <= @EndTime)  begin  set @CalculatedDate = @tempDate  break  end   if (@tempDate < @StartTime)  begin  set @CalculatedDate = @StartTime  break  end  set @UseNextStartTime = 1  end  end  Select @tempDate = DATEADD (dd , 1, @tempDate )  end  set nocount off end   
GO
GRANT EXECUTE ON  [dbo].[wfEvaluateDate] TO [DYNGRP]
GO
