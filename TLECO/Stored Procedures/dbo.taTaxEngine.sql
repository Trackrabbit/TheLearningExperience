SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[taTaxEngine]  @I_vMSTRTAXSLID char(15) = '',    @I_vMASKTAXSLID char(15) = '',    @I_vFREITAXDSLID char(15) = '',    @I_vMISCAMTTAXSLID char(15) = '',   @I_vDETAILTYPE int = 0,     @I_vTRXSOURCE char(5) = '',     @I_vDOCTYPE smallint = 0,    @I_vDOCNUMBE char(30) = '',    @I_vCUSTNMBR char(15) = '',    @I_vLINENUMBR numeric(19,5) = 0,   @I_vCOST numeric(19,5) = 0,    @I_vSALES numeric(19,5) = 0 output,   @I_vTRADE numeric(19,9) = 0,    @I_vTRADEPCT numeric(19,5) = 0,    @I_vFRTAMT numeric(19,5) = 0,    @I_vMISCAMTAMT numeric(19,5) = 0,   @I_vNUMUNITS numeric(19,5) = 0,    @I_vINVOICETOTAL numeric(19,5) = 0,   @I_vINVOICETOTTAXABLE numeric(19,5) = 0,  @I_vDAVSALES numeric(19,5) = 0,    @I_vDAFRTAMT numeric(19,5) = 0,    @I_vDAMISCAMT numeric(19,5) = 0,   @I_vITEMNMBR char(30) = '',    @I_vSLAMDUNK int = 0,     @I_vVATENABLED int = 0,     @I_vDECIMALPLACES int = 2,    @I_vRTCLCMTD  smallint = -1,    @I_vXCHGRATE numeric(19,7) = 0,    @I_vBACKOSALES numeric(19,5) = 0 output,  @I_vBACKOFREHT numeric(19,5) = 0 output,  @I_vBACKOMISC numeric(19,5) = 0 output,   @I_vBackoutTradeDisc numeric(19,5) = 0 output,   @I_vRECALC int = 0 output,    @I_vTAXAMNT numeric(19,5) = 0 output,   @I_vFUTOTAMT numeric(19,5) = 0 output,   @I_vFRTTXAMT numeric(19,5) = 0 output,   @I_vMSCTXAMT numeric(19,5) = 0 output,   @O_iErrorState int = NULL output, @oErrString varchar(255) output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @TAXSUM numeric(19,5),  @TAXAMNT numeric(19,7),  @SALES numeric(19,7),  @iStatus int,  @oErrorDesc char(255),  @O_oErrorState int,  @TAXDTLID char(15),  @ACTINDX int,  @TXDTLBSE smallint,  @TXDTLPCT numeric(19,5),  @TXDTLAMT numeric(19,7),  @TDTLRNDG smallint,  @TXDBODTL char(15),  @TDTABMIN numeric(21,7),  @TDTABMAX numeric(21,7),  @TDTAXMIN numeric(21,7),  @TDTAXMAX numeric(21,7),  @TDRNGTYP smallint,  @TXDTQUAL smallint,  @TDTAXTAX tinyint,  @TDTABPCT numeric(19,5),  @TradeTax numeric(19,7),  @TaxableTotal numeric (19,7),  @BKTSLSAM numeric(19,7),  @rnd numeric(19,6),  @pow smallint,  @dec smallint,  @fun tinyint,  @TaxableBase numeric(19,7),  @TaxableBaseTemp numeric(19,7),  @FINDBOTAX numeric(19,7),  @TXDTOTTX numeric(19,7),  @unitAmt numeric(19,5),  @TaxableSum numeric(19,7),  @COST numeric(19,7),  @TaxableBaseNeg numeric(19,7),      @TaxableBaseTempBO numeric(19,7),  @unitAmtTotal numeric(19,7)  select  @TAXSUM = 0,  @TAXAMNT = 0,  @SALES = 0,  @iStatus = 0,  @O_oErrorState = 0,  @TAXDTLID = '',  @ACTINDX = 0,  @TXDTLBSE = 0,  @TXDTLPCT = 0,  @TXDTLAMT = 0,  @TDTLRNDG = 0,  @TXDBODTL = '',  @TDTABMIN = 0,  @TDTABMAX = 0,  @TDTAXMIN = 0,  @TDTAXMAX = 0,  @TDRNGTYP = 0,  @TXDTQUAL = 0,  @TDTAXTAX = 0,  @TDTABPCT = 0,  @TradeTax = 0,  @TaxableTotal = 0,  @BKTSLSAM = 0,  @rnd = 0,  @pow = 0,  @dec = 0,  @fun = 0,  @TaxableBase = 0,  @TaxableBaseTemp = 0,  @FINDBOTAX = 0,  @TXDTOTTX = 0,  @unitAmt = 0,  @TaxableSum = 0,  @COST = 0,  @TaxableBaseNeg = 0,      @TaxableBaseTempBO = 0,  @unitAmtTotal = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  if ( @I_vMSTRTAXSLID is NULL or  @I_vMASKTAXSLID is NULL or  @I_vFREITAXDSLID is NULL or  @I_vMISCAMTTAXSLID is NULL or  @I_vDETAILTYPE is NULL or  @I_vTRXSOURCE is NULL or  @I_vDOCTYPE is NULL or  @I_vDOCNUMBE is NULL or  @I_vCUSTNMBR is NULL or  @I_vLINENUMBR is NULL or  @I_vRECALC is NULL or  @I_vCOST is NULL or  @I_vSALES is NULL or  @I_vTRADE is NULL or  @I_vTRADEPCT is NULL or  @I_vFRTAMT is NULL or  @I_vMISCAMTAMT is NULL or  @I_vTAXAMNT is NULL or  @I_vFUTOTAMT is NULL or  @I_vNUMUNITS is NULL or  @I_vINVOICETOTAL is NULL or  @I_vINVOICETOTTAXABLE is NULL or  @I_vBACKOSALES is NULL or  @I_vBACKOFREHT is NULL or  @I_vBACKOMISC is NULL or  @I_vBackoutTradeDisc is NULL or  @I_vDAVSALES is NULL or  @I_vDAFRTAMT is NULL or  @I_vDAMISCAMT is NULL or  @I_vITEMNMBR is NULL or  @I_vDECIMALPLACES is NULL or  @I_vVATENABLED is NULL or  @I_vSLAMDUNK is NULL) begin  select @O_iErrorState = 800    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vMSTRTAXSLID = '' and  @I_vMASKTAXSLID = '' and  @I_vFREITAXDSLID = '' and  @I_vMISCAMTTAXSLID = '') begin  return (@O_iErrorState) end  if (@oErrorDesc is NULL)  select @oErrorDesc = ''  select  @I_vDOCNUMBE = UPPER(@I_vDOCNUMBE),  @I_vCUSTNMBR = UPPER(@I_vCUSTNMBR),  @I_vMSTRTAXSLID = UPPER(@I_vMSTRTAXSLID),  @I_vMASKTAXSLID = UPPER(@I_vMASKTAXSLID),  @I_vFREITAXDSLID = UPPER(@I_vFREITAXDSLID),  @I_vMISCAMTTAXSLID = UPPER(@I_vMISCAMTTAXSLID),  @I_vITEMNMBR = UPPER(@I_vITEMNMBR)  if (@I_vMASKTAXSLID <> '') begin  declare Line_Taxes INSENSITIVE cursor for select  a.TAXDTLID,  a.ACTINDX,  a.TXDTLBSE,  a.TXDTLPCT,  a.TXDTLAMT,  a.TDTLRNDG,  a.TXDBODTL,  a.TDTABMIN,  a.TDTABMAX,  a.TDTAXMIN,  a.TDTAXMAX,  a.TDRNGTYP,  a.TXDTQUAL,  a.TDTAXTAX,  a.TDTABPCT  from TX00102 b (nolock),TX00201 a (nolock), TX00201 c (nolock), TX00102 d (nolock)  where  b.TAXSCHID = @I_vMASKTAXSLID  and b.TAXDTLID = a.TAXDTLID  and a.TXDTLTYP = @I_vDETAILTYPE  and d.TAXSCHID = @I_vMSTRTAXSLID  and d.TAXDTLID = c.TAXDTLID  and a.TAXDTLID = c.TAXDTLID  order by a.TXDTLBSE, a.TDTAXTAX,a.TAXDTLID   open Line_Taxes  if (@@cursor_rows > 0)  begin  fetch next from Line_Taxes into  @TAXDTLID,  @ACTINDX,  @TXDTLBSE,  @TXDTLPCT,  @TXDTLAMT,  @TDTLRNDG,  @TXDBODTL,  @TDTABMIN,  @TDTABMAX,  @TDTAXMIN,  @TDTAXMAX,  @TDRNGTYP,  @TXDTQUAL,  @TDTAXTAX,  @TDTABPCT  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 810    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  break  end   select @rnd =  case @TDTLRNDG  when 1 then .5  when 2 then 0  when 3 then -.5  when 4 then 1  when 5 then 1  when 6 then -.000001  else 1  end  select @pow =  case @TDTLRNDG  when 1 then @I_vDECIMALPLACES  when 2 then @I_vDECIMALPLACES  when 3 then @I_vDECIMALPLACES  when 4 then 0  when 5 then 1  when 6 then 0  else 0  end  select @dec =  case @TDTLRNDG  when 1 then @I_vDECIMALPLACES  when 2 then @I_vDECIMALPLACES  when 3 then @I_vDECIMALPLACES  when 4 then 0  when 5 then 0  when 6 then 0  else @I_vDECIMALPLACES  end  select @fun =  case @TDTLRNDG  when 1 then 0  when 2 then 0  when 3 then 0  when 4 then 1  when 5 then 0  when 6 then 1  else 0  end   if ((@I_vXCHGRATE <> 0) and (@I_vRTCLCMTD <> -1))  begin   if (@I_vRTCLCMTD = 1)   begin  select @TDTABMIN = case when @TDTABMIN > 0 then round(@TDTABMIN * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTABMAX = case when @TDTABMAX > 0 then round(@TDTABMAX * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMIN = case when @TDTAXMIN > 0 then round(@TDTAXMIN * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMAX = case when @TDTAXMAX > 0 then round(@TDTAXMAX * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TXDTLAMT = case when @TXDTLAMT > 0 then round(@TXDTLAMT * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end  end  else   begin  select @TDTABMIN = case when @TDTABMIN > 0 then round(@TDTABMIN / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTABMAX = case when @TDTABMAX > 0 then round(@TDTABMAX / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMIN = case when @TDTAXMIN > 0 then round(@TDTAXMIN / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMAX = case when @TDTAXMAX > 0 then round(@TDTAXMAX / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TXDTLAMT = case when @TXDTLAMT > 0 then round(@TXDTLAMT / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end  end  end   select @TaxableBase = 0, @TaxableBaseTemp = 0, @TaxableBaseNeg = 0, @SALES = 0   if (@TXDTLBSE = 5)  begin  select @FINDBOTAX = 0  select @FINDBOTAX = isnull(ORSLSTAX,0) from SOP10105 (nolock)  where   SOPTYPE = @I_vDOCTYPE and  SOPNUMBE = @I_vDOCNUMBE and  LNITMSEQ = @I_vLINENUMBR and  TAXDTLID = @TXDBODTL   select @TaxableBase = @FINDBOTAX  end  else  if (@TXDTLBSE = 4)  begin  select @TaxableBase = round(@I_vCOST * @I_vNUMUNITS, @I_vDECIMALPLACES)  end  else   begin  select @TaxableBase = @I_vSALES  end   if (@TDTABPCT > 0)  begin  select @TaxableBase = round(@TaxableBase * (@TDTABPCT / 100),@I_vDECIMALPLACES)  end   select @TaxableBaseTemp = abs(@TaxableBase)   select @unitAmt = 0  select @unitAmtTotal = @TaxableBaseTemp    if ((@TDTABMIN > 0) or (@TDTABMAX > 0))  begin  if (@TXDTQUAL = 1)   begin  if (@I_vNUMUNITS <> 0)  begin  select @unitAmt = @TaxableBaseTemp / @I_vNUMUNITS  end   if (abs(@unitAmt) < @TDTABMIN)  begin  select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if (@TDTABMAX > 0) and (abs(@unitAmt) > @TDTABMAX)  begin  select @unitAmt = @TDTABMAX  select @TaxableBaseTemp = round(@unitAmt * abs(@I_vNUMUNITS),@I_vDECIMALPLACES)  end  end  else   begin  if (@TDTABMAX > 0) and (abs(@unitAmt) > @TDTABMAX)  begin  select @unitAmt = @TDTABMAX - @TDTABMIN  end  else  begin  select @unitAmt = abs(@unitAmt) - @TDTABMIN  end   select @TaxableBaseTemp = round(@unitAmt * abs(@I_vNUMUNITS), @I_vDECIMALPLACES)  end  end  end  else  begin  if (@TXDTQUAL = 2)   begin  if (@TaxableBaseTemp < @TDTABMIN)  begin  if (@TaxableBase < 0)  begin  select @TaxableBaseNeg = @TaxableBase  end   select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin   select @TaxableBaseNeg = @TaxableBase   select @TaxableBaseTemp = @TDTABMAX  end  end  else  begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX - @TDTABMIN  end  else  begin  select @TaxableBaseTemp = @TaxableBaseTemp - @TDTABMIN   end  end  end  end  else  begin  if (@TXDTQUAL = 3)   begin  select  @TaxableSum = isnull(sum(ORTXSLS),0)  from SOP10105 (nolock)  where   SOPTYPE = @I_vDOCTYPE and  SOPNUMBE = @I_vDOCNUMBE and  LNITMSEQ <> 0 and  TAXDTLID = @TAXDTLID   if (abs(@I_vINVOICETOTAL) < @TDTABMIN)  begin  select @TaxableBaseTemp = 0  end  else  begin  if (@I_vINVOICETOTAL >= 0)    begin  if (@TaxableBase < 0)   begin  if (@TaxableBase < 0) and  (@TDTABMAX > 0)   begin  select @TaxableBaseTemp = 0  end  end  else  begin  if ((@TDTABMAX > 0) and (@TaxableBase + @TaxableSum > @TDTABMAX))    begin  if ((@TDTABMAX - @TaxableSum) > 0)  select @TaxableBaseTemp = (@TDTABMAX - @TaxableSum)  else  select @TaxableBaseTemp = 0  end   if ((@TDTABMAX > 0) and (@I_vINVOICETOTAL < 0))  begin  if ((@TaxableBaseTemp + @TaxableSum) > @I_vINVOICETOTAL)   begin  if ((@I_vINVOICETOTAL - @TaxableSum) > 0)  select @TaxableBaseTemp = (@I_vINVOICETOTAL - @TaxableSum)  else  select @TaxableBaseTemp = 0  end  end  end  end  else  begin  if (@TaxableBase > 0)   begin  if ((@TaxableBase > 0) and (@TDTABMAX > 0))  begin  select @TaxableBaseTemp = 0  end  end  else  begin  if ((@TDTABMAX > 0) and (abs(@TaxableSum + @TaxableBase) > @TDTABMAX))   begin  if ((@TDTABMAX - abs(@TaxableSum)) > 0)  select @TaxableBaseTemp = (@TDTABMAX - abs(@TaxableSum))  else  select @TaxableBaseTemp = 0  end   if ((@TDTABMAX > 0) and (@I_vINVOICETOTAL < 0))  begin  if ((@TaxableBaseTemp + abs(@TaxableSum)) > abs(@I_vINVOICETOTAL))   begin  if ((abs(@I_vINVOICETOTAL) - abs(@TaxableSum)) > 0)  select @TaxableBaseTemp = (abs(@I_vINVOICETOTAL) - abs(@TaxableSum))  else  select @TaxableBaseTemp = 0  end  end  end  end  end  end  else  begin  if (@TaxableBaseTemp < @TDTABMIN)  begin  if (@TXDTLBSE = 5)  begin  select @TaxableBaseTempBO = @TaxableBaseTemp  end   select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX  end  end  else  begin   if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX - @TDTABMIN  end  else  begin  select @TaxableBaseTemp = @TaxableBaseTemp - @TDTABMIN  end  end  end  end  end  end  end   if (@TaxableBase < 0)  begin  select @TaxableBase = @TaxableBaseTemp * -1,  @TaxableBaseTempBO = @TaxableBaseTempBO * -1  end  else  begin  select @TaxableBase = @TaxableBaseTemp  end   if (@TXDTLBSE = 1)   begin  select @SALES = @TaxableBase  select @TaxableBase = round(@TaxableBase / (@TXDTLPCT * .01 + 1), 7)   select @TradeTax = (@I_vTRADE / (@TXDTLPCT * .01 + 1)) * (@TXDTLPCT * .01)   if (@TradeTax <> round(@TradeTax,@I_vDECIMALPLACES, 1))  begin   select @TradeTax =   case  when (@TradeTax < (.5/power(10,@I_vDECIMALPLACES)))  then 0  else round(@TradeTax + (@rnd/power(10,@pow)),@dec,@fun)  end  end   select @I_vBackoutTradeDisc = round(@I_vTRADE - @TradeTax,@I_vDECIMALPLACES)  select @I_vTRADE = @I_vBackoutTradeDisc   select @TAXAMNT = (@TaxableBase * (@TXDTLPCT * .01))  if (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES, 1))  begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end   select @SALES = round(@SALES - @TAXAMNT,@I_vDECIMALPLACES)  select @TaxableBase = @SALES  select @TaxableBaseTemp = @TaxableBase   select @I_vSALES = @I_vSALES - @TAXAMNT   end  else  if (@TXDTLBSE = 2)   begin  select @TAXAMNT = round(@I_vNUMUNITS * @TXDTLAMT, 7)  select @SALES = @TaxableBase  end  else  if (@TXDTLBSE = 3)   begin  select @TAXAMNT = round(@TaxableBase * @TXDTLPCT * .01, 7)  select @SALES = @TaxableBase  end  else  if (@TXDTLBSE = 4)   begin  select @TAXAMNT = round(@TaxableBase * @TXDTLPCT * .01, 7)  select @SALES = @TaxableBase   if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(2,4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  if (@TAXAMNT >= 0)  begin  select @TXDTOTTX = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TXDTOTTX = round(@TAXAMNT - (@rnd/power(10,@pow)),@dec,@fun)  end  end  else  begin  select @TXDTOTTX = @TAXAMNT  end   if (@TAXAMNT < 0) and (abs(@TAXAMNT) <= @TDTAXMIN) and (@I_vINVOICETOTAL > 0)  begin  select @TAXAMNT = 0  end  end  else  if (@TXDTLBSE = 5)   begin  select @TAXAMNT = @TaxableBase * @TXDTLPCT * .01   if (@TAXAMNT <> round(@TAXAMNT, @I_vDECIMALPLACES,1))  begin  if (@TAXAMNT >= 0)  begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TAXAMNT = round(@TAXAMNT - (@rnd/power(10,@pow)),@dec,@fun)  end  end   select @SALES = @TaxableBase  end   if (@TDTAXTAX = 1)   begin  if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(2,4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  if (@TaxableTotal >= 0)  begin  select @TaxableTotal = @TaxableTotal + round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TaxableTotal = @TaxableTotal + round(@TAXAMNT - (@rnd/power(10,@pow)),@dec,@fun)  end  end  else  begin  select @TaxableTotal = @TaxableTotal + @TAXAMNT   end  end   if (@TXDTLBSE = 6)   begin  if (@TaxableBase >= 0)  begin  select @TaxableBaseTemp = round(@TaxableTotal + @TaxableBaseTemp, @I_vDECIMALPLACES)  end  else  begin  if (@TaxableBase < 0 and @I_vSALES < 0)   begin  select @TaxableBaseTemp = round((@TaxableBaseTemp * -1) + @TaxableTotal, @I_vDECIMALPLACES)  end  else  begin  select @TaxableBaseTemp = round(@TaxableBaseTemp - @TaxableTotal, @I_vDECIMALPLACES)  end  end   if (@TaxableBase <> @SALES) and (@TDTABMAX = @TaxableBase or @TaxableBase <= @TDTABMAX - @TDTABMIN)   begin  if (@TaxableBase = @TDTABMAX or (@TaxableBase + @TaxableSum) = @TDTABMAX)  begin  select @SALES = @TaxableBase  end  else  begin  select @SALES = @TaxableBaseTemp  select @TaxableBase = @SALES  end  end  else  begin  if (@SALES = 0 and @TaxableBase = 0 and @TXDTQUAL = 3 and @TDRNGTYP = 2 and ((@TaxableSum + @TaxableTotal) >= @TDTABMAX))  begin  select @SALES = 0, @TaxableBase = 0    end  else  begin  select @SALES = round(@TaxableTotal + @TaxableBase, 7)  select @TaxableBase = round(@TaxableTotal + @TaxableBase, @I_vDECIMALPLACES)  end  end   select @TAXAMNT = round((@SALES * @TXDTLPCT * .01), 7)  select @SALES = round(@SALES,@I_vDECIMALPLACES)  end   if (@TXDTLBSE = 6)  begin   if (((@TXDTQUAL = 3 and abs(@I_vINVOICETOTAL) < @TDTABMIN)) or  ((@TXDTQUAL = 2) and (abs(@SALES) < @TDTABMIN)) or  ((@TXDTQUAL = 1 and @TDRNGTYP = 2) and (abs(@unitAmtTotal) < @TDTABMIN)) or  ((@TXDTQUAL = 1 and @TDRNGTYP = 1) and (abs(@unitAmt) < @TDTABMIN)))  begin  select @TAXAMNT = 0  select @TaxableBase = 0  end  end   if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  if @TAXAMNT > 0   begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TAXAMNT = round(@TAXAMNT - (@rnd/power(10,@pow)),@dec,@fun)  end  end   if (@TXDTLBSE <> 4)  begin  select @TXDTOTTX = @TAXAMNT  end   select @TAXSUM = isnull(TAXSUM,0) from #minmax where TAXDTLID = @TAXDTLID   if ((@TDTAXMAX < (abs(@TAXAMNT) + @TAXSUM)) and (@TDTAXMAX <> 0) and (@TaxableBase <> 0))  begin  select @TAXAMNT =   case  when @TAXAMNT < 0  then (@TDTAXMAX - @TAXSUM) * -1  else @TDTAXMAX - @TAXSUM  end  end   if (abs(@TAXAMNT) > abs(@TXDTOTTX))  begin  select @TAXAMNT = @TXDTOTTX  end   if ((@TDTAXMAX > 0) or (@TDTAXMIN > 0))  begin  if not exists(select TAXDTLID from #minmax where TAXDTLID = @TAXDTLID)  begin  insert #minmax select @TAXDTLID, @TAXAMNT, @TDTAXMAX, @TDTAXMIN, @TAXAMNT  end  else  begin  update #minmax set TAXSUM = TAXSUM + @TAXAMNT, LINESUM = LINESUM + @TAXAMNT   where TAXDTLID = @TAXDTLID  end  end   if (@TXDTLBSE = 1)  begin  select @I_vBACKOSALES = @I_vBACKOSALES + @TAXAMNT  end  else  begin  select @I_vTAXAMNT = @I_vTAXAMNT + @TAXAMNT  end   if (@I_vTRADE > 0)  begin  if (@BKTSLSAM > 0) and (@I_vBackoutTradeDisc = 0)  begin  select @I_vBackoutTradeDisc = @BKTSLSAM - @TaxableBase  end  end  else  begin  select @BKTSLSAM = @TaxableBase  end   if ((@TaxableBaseTemp > 0) and (@TXDTLBSE <> 4))  begin  if (@TaxableBase < 0)  begin  select @SALES = @TaxableBaseTemp * -1  end  else  begin  select @SALES = @TaxableBaseTemp  end  end   if (@TaxableBaseNeg < 0)  begin  select @SALES = @TaxableBaseNeg  end   if ((@TXDTOTTX < 0) and (@TaxableBaseNeg = 0))  begin  if (@SALES > 0)  begin  select @SALES = @SALES * -1  end  end    if (((@TDTABMAX > 0) or (@TDTABMIN > 0)) and (@TXDTLBSE <> 5))  begin  if (@TXDTLBSE = 4)  begin  select @SALES = round(@I_vCOST * @I_vNUMUNITS, @I_vDECIMALPLACES)  end  else  begin  if (@TXDTLBSE <> 6)  begin  select @SALES = @I_vSALES  end  else  begin  select @SALES = @I_vSALES + @TaxableTotal  end  end  end  else  begin   if (((@TDTABMAX > 0) or (@TDTABMIN > 0)) and (@TXDTLBSE = 5))  begin  select @SALES = @FINDBOTAX  end  end   if (@TaxableBaseTempBO <> 0)  begin  select @SALES = @TaxableBaseTempBO  end   select @TaxableBaseNeg = 0,  @TaxableBaseTempBO = 0   if (@I_vTRXSOURCE = 'SLSTE')  begin  if (@ACTINDX = 0)  begin  select @ACTINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 2000  end   exec @iStatus = taSopLineIvcTaxInsert  @I_vSOPTYPE = @I_vDOCTYPE,  @I_vTAXTYPE = 0,   @I_vSOPNUMBE = @I_vDOCNUMBE,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vLNITMSEQ = @I_vLINENUMBR,  @I_vSALESAMT = @SALES,  @I_vFRTTXAMT = 0,  @I_vMSCTXAMT = 0,  @I_vFREIGHT = 0,  @I_vMISCAMNT = 0,  @I_vTDTTXSLS = @TaxableBase,  @I_vTAXDTLID = @TAXDTLID,  @I_vACTINDX = @ACTINDX,  @I_vACTNUMST = '',  @I_vSTAXAMNT = @TAXAMNT,  @I_vTXDTOTTX = @TXDTOTTX,  @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@@error <> 0) or (@iStatus <> 0) or (@O_iErrorState <> 0))  begin  select @O_iErrorState = 820    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vTRXSOURCE = 'CMRCE')  begin  exec @iStatus = taCommerceTaxInsert  @I_vSOPTYPE = @I_vDOCTYPE,  @I_vTAXTYPE = 0,   @I_vSOPNUMBE = @I_vDOCNUMBE,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vLNITMSEQ = @I_vLINENUMBR,  @I_vSALESAMT = @SALES,  @I_vFRTTXAMT = 0,  @I_vMSCTXAMT = 0,  @I_vFREIGHT = 0,  @I_vMISCAMNT = 0,  @I_vTDTTXSLS = @TaxableBase,  @I_vTAXDTLID = @TAXDTLID,  @I_vACTINDX = @ACTINDX,  @I_vACTNUMST = '',  @I_vSTAXAMNT = @TAXAMNT,  @I_vTXDTOTTX = @TXDTOTTX,  @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@@error <> 0) or (@iStatus <> 0) or (@O_iErrorState <> 0))  begin  select @O_iErrorState = 9382    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   fetch next from Line_Taxes into  @TAXDTLID,  @ACTINDX,  @TXDTLBSE,  @TXDTLPCT,  @TXDTLAMT,  @TDTLRNDG,  @TXDBODTL,  @TDTABMIN,  @TDTABMAX,  @TDTAXMIN,  @TDTAXMAX,  @TDRNGTYP,  @TXDTQUAL,  @TDTAXTAX,  @TDTABPCT  end  end  deallocate Line_Taxes end  if (@I_vMISCAMTTAXSLID <> '') begin  declare Misc_Taxes INSENSITIVE cursor for select  a.TAXDTLID,  a.ACTINDX,  a.TXDTLBSE,  a.TXDTLPCT,  a.TXDTLAMT,  a.TDTLRNDG,  a.TXDBODTL,  a.TDTABMIN,  a.TDTABMAX,  a.TDTAXMIN,  a.TDTAXMAX,  a.TDRNGTYP,  a.TXDTQUAL,  a.TDTAXTAX,  a.TDTABPCT  from TX00102 b (nolock),TX00201 a (nolock), TX00201 c (nolock), TX00102 d (nolock)  where  b.TAXSCHID = @I_vMISCAMTTAXSLID  and b.TAXDTLID = a.TAXDTLID  and a.TXDTLTYP = @I_vDETAILTYPE  and @I_vMISCAMTTAXSLID <> ''  and d.TAXSCHID = @I_vMSTRTAXSLID  and d.TAXDTLID = c.TAXDTLID  and a.TAXDTLID = c.TAXDTLID  order by a.TXDTLBSE, a.TDTAXTAX, a.TAXDTLID  open Misc_Taxes  if (@@cursor_rows > 0)  begin  fetch next from Misc_Taxes into  @TAXDTLID,  @ACTINDX,  @TXDTLBSE,  @TXDTLPCT,  @TXDTLAMT,  @TDTLRNDG,  @TXDBODTL,  @TDTABMIN,  @TDTABMAX,  @TDTAXMIN,  @TDTAXMAX,  @TDRNGTYP,  @TXDTQUAL,  @TDTAXTAX,  @TDTABPCT  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 822    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  break  end   select @rnd =  case @TDTLRNDG  when 1 then .5  when 2 then 0  when 3 then -.5  when 4 then 1  when 5 then 1  when 6 then -.000001  else 1  end  select @pow =  case @TDTLRNDG  when 1 then @I_vDECIMALPLACES  when 2 then @I_vDECIMALPLACES  when 3 then @I_vDECIMALPLACES  when 4 then 0  when 5 then 1  when 6 then 0  else 0  end  select @dec =  case @TDTLRNDG  when 1 then @I_vDECIMALPLACES  when 2 then @I_vDECIMALPLACES  when 3 then @I_vDECIMALPLACES  when 4 then 0  when 5 then 0  when 6 then 0  else @I_vDECIMALPLACES  end  select @fun =  case @TDTLRNDG  when 1 then 0  when 2 then 0  when 3 then 0  when 4 then 1  when 5 then 0  when 6 then 1  else 0  end   if ((@I_vXCHGRATE <> 0) and (@I_vRTCLCMTD <> -1))  begin   if (@I_vRTCLCMTD = 1)   begin  select @TDTABMIN = case when @TDTABMIN > 0 then round(@TDTABMIN * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTABMAX = case when @TDTABMAX > 0 then round(@TDTABMAX * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMIN = case when @TDTAXMIN > 0 then round(@TDTAXMIN * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMAX = case when @TDTAXMAX > 0 then round(@TDTAXMAX * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TXDTLAMT = case when @TXDTLAMT > 0 then round(@TXDTLAMT * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end  end  else   begin  select @TDTABMIN = case when @TDTABMIN > 0 then round(@TDTABMIN / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTABMAX = case when @TDTABMAX > 0 then round(@TDTABMAX / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMIN = case when @TDTAXMIN > 0 then round(@TDTAXMIN / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMAX = case when @TDTAXMAX > 0 then round(@TDTAXMAX / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TXDTLAMT = case when @TXDTLAMT > 0 then round(@TXDTLAMT / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end  end  end   select @TaxableBase = 0, @TaxableBaseTemp = 0, @SALES = 0   if (@TXDTLBSE = 5)  begin  select @FINDBOTAX = 0  select @FINDBOTAX = isnull(ORMSCTAX,0) from SOP10105 (nolock)  where   SOPTYPE = @I_vDOCTYPE and  SOPNUMBE = @I_vDOCNUMBE and  LNITMSEQ = 2147483645 and  TAXDTLID = @TXDBODTL  select @TaxableBase = @FINDBOTAX  end  else  if (@TXDTLBSE = 4)  begin  select @TaxableBase = 0  end  else   begin  select @TaxableBase = @I_vMISCAMTAMT  end   if (@TDTABPCT > 0)  begin  select @TaxableBase = round(@TaxableBase * (@TDTABPCT / 100),@I_vDECIMALPLACES)  end   select @TaxableBaseTemp = abs(@TaxableBase)  select @unitAmt = 0   if ((@TDTABMIN > 0) or (@TDTABMAX > 0))  begin  if (@TXDTQUAL = 1)   begin  if (@I_vNUMUNITS <> 0)  begin  select @unitAmt = @TaxableBaseTemp / @I_vNUMUNITS  end   if (abs(@unitAmt) < @TDTABMIN)  begin  select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if (@TDTABMAX > 0) and (abs(@unitAmt) > @TDTABMAX)  begin  select @unitAmt = @TDTABMAX  select @TaxableBaseTemp = round(@unitAmt * abs(@I_vNUMUNITS),@I_vDECIMALPLACES)  end  end  else   begin  if (@TDTABMAX > 0) and (abs(@unitAmt) > @TDTABMAX)  begin  select @unitAmt = @TDTABMAX - @TDTABMIN  end  else  begin  select @unitAmt = abs(@unitAmt) - @TDTABMIN  end   select @TaxableBaseTemp = round(@unitAmt * abs(@I_vNUMUNITS), @I_vDECIMALPLACES)  end  end  end  else  begin  if (@TXDTQUAL = 2)   begin  if (@TaxableBaseTemp < @TDTABMIN)  begin  if (@TaxableBase < 0)  begin  select @TaxableBaseNeg = @TaxableBase  end   select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin   select @TaxableBaseNeg = @TaxableBase   select @TaxableBaseTemp = @TDTABMAX  end  end  else  begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX - @TDTABMIN  end  else  begin  select @TaxableBaseTemp = @TaxableBaseTemp - @TDTABMIN   end  end  end  end  else  begin  if (@TXDTQUAL = 3)   begin  select  @TaxableSum = isnull(sum(ORTXSLS),0)  from SOP10105 (nolock)  where   SOPTYPE = @I_vDOCTYPE and  SOPNUMBE = @I_vDOCNUMBE and  LNITMSEQ <> 0 and  TAXDTLID = @TAXDTLID   if (abs(@I_vINVOICETOTAL) < @TDTABMIN)  begin  select @TaxableBaseTemp = 0  end  else  begin  if (@I_vINVOICETOTAL >= 0)    begin  if (@TaxableBase < 0)   begin  if (@TaxableBase < 0) and  (@TDTABMAX > 0)   begin  select @TaxableBaseTemp = 0  end  end  else  begin  if ((@TDTABMAX > 0) and (@TaxableBase + @TaxableSum > @TDTABMAX))    begin  if ((@TDTABMAX - @TaxableSum) > 0)  select @TaxableBaseTemp = (@TDTABMAX - @TaxableSum)  else  select @TaxableBaseTemp = 0  end   if ((@TDTABMAX > 0) and (@I_vINVOICETOTAL < 0))  begin  if ((@TaxableBaseTemp + @TaxableSum) > @I_vINVOICETOTAL)   begin  if ((@I_vINVOICETOTAL - @TaxableSum) > 0)  select @TaxableBaseTemp = (@I_vINVOICETOTAL - @TaxableSum)  else  select @TaxableBaseTemp = 0  end  end  end  end  else  begin  if (@TaxableBase > 0)   begin  if ((@TaxableBase > 0) and (@TDTABMAX > 0))  begin  select @TaxableBaseTemp = 0  end  end  else  begin  if ((@TDTABMAX > 0) and (abs(@TaxableSum + @TaxableBase) > @TDTABMAX))   begin  if ((@TDTABMAX - abs(@TaxableSum)) > 0)  select @TaxableBaseTemp = (@TDTABMAX - abs(@TaxableSum))  else  select @TaxableBaseTemp = 0  end   if ((@TDTABMAX > 0) and (@I_vINVOICETOTAL < 0))  begin  if ((@TaxableBaseTemp + abs(@TaxableSum)) > abs(@I_vINVOICETOTAL))   begin  if ((abs(@I_vINVOICETOTAL) - abs(@TaxableSum)) > 0)  select @TaxableBaseTemp = (abs(@I_vINVOICETOTAL) - abs(@TaxableSum))  else  select @TaxableBaseTemp = 0  end  end  end  end  end  end  else  begin  if (@TaxableBaseTemp < @TDTABMIN)  begin  if (@TXDTLBSE = 5)  begin  select @TaxableBaseTempBO = @TaxableBaseTemp  end   select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX  end  end  else  begin   if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX - @TDTABMIN  end  else  begin  select @TaxableBaseTemp = @TaxableBaseTemp - @TDTABMIN  end  end  end  end  end  end  end   if (@TaxableBase < 0)  begin  select @TaxableBase = @TaxableBaseTemp * -1,  @TaxableBaseTempBO = @TaxableBaseTempBO * -1  end  else  begin  select @TaxableBase = @TaxableBaseTemp  end   if (@TXDTLBSE = 1)  begin  select @SALES = @TaxableBase  select @TaxableBase = round(@TaxableBase / (@TXDTLPCT * .01 + 1), 7)   select @TAXAMNT = (@TaxableBase * (@TXDTLPCT * .01))  if (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES, 1))  begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end   select @TaxableBase = round(@TaxableBase,@I_vDECIMALPLACES)  select @SALES = round(@SALES - @TAXAMNT,@I_vDECIMALPLACES)   if (@TDTAXTAX <> 1)  begin  select @I_vMISCAMTAMT = @I_vMISCAMTAMT - @TAXAMNT  select @I_vBACKOMISC = @I_vMISCAMTAMT  end   select @TaxableBase = @SALES  select @TaxableBaseTemp = @TaxableBase  end  else  if (@TXDTLBSE = 2)  begin  select @TAXAMNT = 0  select @SALES = 0  select @TaxableBase = 0, @TaxableBaseTemp = 0  end  else  if (@TXDTLBSE = 3)  begin  select @TAXAMNT = round(@TaxableBase * @TXDTLPCT * .01, 7)  select @SALES = @TaxableBase  end  else  if (@TXDTLBSE = 4)  begin  select @TAXAMNT = 0  select @SALES = 0  select @TaxableBase = 0  end  else  if (@TXDTLBSE = 5)  begin  select @TAXAMNT = round(@TaxableBase * @TXDTLPCT * .01, 7)  select @SALES = @TaxableBase  end   if (@TDTAXTAX = 1)  begin   if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(2,4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  select @TaxableTotal = @TaxableTotal + round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TaxableTotal = @TaxableTotal + @TAXAMNT  end  end   if (@TXDTLBSE = 6)  begin  if (@TaxableBase >= 0)  begin  select @TaxableBaseTemp = round(@TaxableTotal + @TaxableBaseTemp, @I_vDECIMALPLACES)  end  else  begin  select @TaxableBaseTemp = round(@TaxableBaseTemp - @TaxableTotal, @I_vDECIMALPLACES)  end   if (@TaxableBase <> @SALES) and (@TDTABMAX = @TaxableBase or @TaxableBase <= @TDTABMAX - @TDTABMIN)   begin  if (@TaxableBase > 0)  select @SALES = @TaxableBase  else  select @SALES = 0  end  else  begin  if (@TaxableBase > 0)  begin  select @SALES = round(@TaxableTotal + @TaxableBase, 7)  select @TaxableBase = round(@TaxableTotal + @TaxableBase, @I_vDECIMALPLACES)  end  else  begin  select @SALES = 0, @TaxableBase = 0  end  end   select @TAXAMNT = round((@SALES * @TXDTLPCT * .01), 7)  select @SALES = round(@SALES,@I_vDECIMALPLACES)  end   if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  if @TAXAMNT > 0   begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TAXAMNT = round(@TAXAMNT - (@rnd/power(10,@pow)),@dec,@fun)  end  end   select @TXDTOTTX = @TAXAMNT   if (@TXDTLBSE <> 2)  begin  select @TAXSUM = isnull(TAXSUM,0) from #minmax where TAXDTLID = @TAXDTLID   if ((@TDTAXMAX < (abs(@TAXAMNT) + @TAXSUM)) and (@TDTAXMAX <> 0) and (@TaxableBase <> 0))  begin  select @TAXAMNT =   case  when @TAXAMNT < 0  then (@TDTAXMAX - @TAXSUM) * -1  else @TDTAXMAX - @TAXSUM  end  end   if (abs(@TAXAMNT) > abs(@TXDTOTTX))  begin  select @TAXAMNT = @TXDTOTTX  end   if ((@TDTAXMAX > 0) or (@TDTAXMIN > 0))  begin  if not exists(select TAXDTLID from #minmax where TAXDTLID = @TAXDTLID)  begin  insert #minmax select @TAXDTLID, @TAXAMNT, @TDTAXMAX, @TDTAXMIN, @TAXAMNT  end  else  begin  update #minmax set TAXSUM = TAXSUM + @TAXAMNT, LINESUM = LINESUM + @TAXAMNT   where TAXDTLID = @TAXDTLID  end  end  end   if (@TXDTLBSE = 1)  begin  select @I_vBACKOSALES = @I_vBACKOSALES + @TAXAMNT  end  else  begin  select @I_vMSCTXAMT = @I_vMSCTXAMT + @TAXAMNT  end   if ((@TaxableBaseTemp > 0) and (@TXDTLBSE <> 4))  begin  select @SALES = @TaxableBaseTemp  end   if ((@TXDTOTTX < 0) and (@TaxableBaseNeg = 0))  begin  if (@SALES > 0)  begin  select @SALES = @SALES * -1  end  end   if (((@TDTABMAX > 0) or (@TDTABMIN > 0)) and (@TXDTLBSE <> 5))  begin  if ((@I_vMISCAMTAMT < @TDTABMIN) or (@TXDTLBSE = 4))  begin  select @SALES = 0  end  else  begin  select @SALES = @I_vMISCAMTAMT  end  end   if (@TaxableBaseTempBO <> 0)  begin  select @SALES = @TaxableBaseTempBO  end   select @TaxableBaseNeg = 0,  @TaxableBaseTempBO = 0   if (@I_vTRXSOURCE = 'SLSTE')  begin  if (@ACTINDX = 0)  begin  select @ACTINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 2000  end   exec @iStatus = taSopLineIvcTaxInsert  @I_vSOPTYPE = @I_vDOCTYPE,  @I_vTAXTYPE = 2,   @I_vSOPNUMBE = @I_vDOCNUMBE,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vLNITMSEQ = @I_vLINENUMBR,  @I_vSALESAMT = 0,  @I_vFRTTXAMT = 0,  @I_vMSCTXAMT = @TAXAMNT,  @I_vFREIGHT = 0,  @I_vMISCAMNT = @SALES,   @I_vTDTTXSLS = @TaxableBase,  @I_vTAXDTLID = @TAXDTLID,  @I_vACTINDX = @ACTINDX,  @I_vACTNUMST = '',  @I_vSTAXAMNT = 0,  @I_vTXDTOTTX = @TXDTOTTX,  @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@@error <> 0) or (@iStatus <> 0) or (@O_iErrorState <> 0))  begin  select @O_iErrorState = 824    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vTRXSOURCE = 'CMRCE')  begin  exec @iStatus = taCommerceTaxInsert  @I_vSOPTYPE = @I_vDOCTYPE,  @I_vTAXTYPE = 2,   @I_vSOPNUMBE = @I_vDOCNUMBE,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vLNITMSEQ = @I_vLINENUMBR,  @I_vSALESAMT = 0,  @I_vFRTTXAMT = 0,  @I_vMSCTXAMT = @TAXAMNT,  @I_vFREIGHT = 0,  @I_vMISCAMNT = @SALES,   @I_vTDTTXSLS = @TaxableBase,  @I_vTAXDTLID = @TAXDTLID,  @I_vACTINDX = @ACTINDX,  @I_vACTNUMST = '',  @I_vSTAXAMNT = 0,  @I_vTXDTOTTX = @TXDTOTTX,  @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@@error <> 0) or (@iStatus <> 0) or (@O_iErrorState <> 0))  begin  select @O_iErrorState = 9383    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   fetch next from Misc_Taxes into  @TAXDTLID,  @ACTINDX,  @TXDTLBSE,  @TXDTLPCT,  @TXDTLAMT,  @TDTLRNDG,  @TXDBODTL,  @TDTABMIN,  @TDTABMAX,  @TDTAXMIN,  @TDTAXMAX,  @TDRNGTYP,  @TXDTQUAL,  @TDTAXTAX,  @TDTABPCT  end  end  deallocate Misc_Taxes end  if (@I_vFREITAXDSLID <> '') begin  declare Frght_Taxes INSENSITIVE cursor for select  a.TAXDTLID,  a.ACTINDX,  a.TXDTLBSE,  a.TXDTLPCT,  a.TXDTLAMT,  a.TDTLRNDG,  a.TXDBODTL,  a.TDTABMIN,  a.TDTABMAX,  a.TDTAXMIN,  a.TDTAXMAX,  a.TDRNGTYP,  a.TXDTQUAL,  a.TDTAXTAX,  a.TDTABPCT  from TX00102 b (nolock),TX00201 a (nolock), TX00201 c (nolock), TX00102 d (nolock)  where  b.TAXSCHID = @I_vFREITAXDSLID  and b.TAXDTLID = a.TAXDTLID  and a.TXDTLTYP = @I_vDETAILTYPE  and @I_vFREITAXDSLID <> ''  and d.TAXSCHID = @I_vMSTRTAXSLID  and d.TAXDTLID = c.TAXDTLID  and a.TAXDTLID = c.TAXDTLID  order by a.TXDTLBSE, a.TDTAXTAX, a.TAXDTLID   open Frght_Taxes  if (@@cursor_rows > 0)  begin  fetch next from Frght_Taxes into  @TAXDTLID,  @ACTINDX,  @TXDTLBSE,  @TXDTLPCT,  @TXDTLAMT,  @TDTLRNDG,  @TXDBODTL,  @TDTABMIN,  @TDTABMAX,  @TDTAXMIN,  @TDTAXMAX,  @TDRNGTYP,  @TXDTQUAL,  @TDTAXTAX,  @TDTABPCT  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 826    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrorDesc,  @oErrorDesc output,  @O_oErrorState output  break  end   select @rnd =  case @TDTLRNDG  when 1 then .5  when 2 then 0  when 3 then -.5  when 4 then 1  when 5 then 1  when 6 then -.000001  else 1  end  select @pow =  case @TDTLRNDG  when 1 then @I_vDECIMALPLACES  when 2 then @I_vDECIMALPLACES  when 3 then @I_vDECIMALPLACES  when 4 then 0  when 5 then 1  when 6 then 0  else 0  end  select @dec =  case @TDTLRNDG  when 1 then @I_vDECIMALPLACES  when 2 then @I_vDECIMALPLACES  when 3 then @I_vDECIMALPLACES  when 4 then 0  when 5 then 0  when 6 then 0  else @I_vDECIMALPLACES  end  select @fun =  case @TDTLRNDG  when 1 then 0  when 2 then 0  when 3 then 0  when 4 then 1  when 5 then 0  when 6 then 1  else 0  end   if ((@I_vXCHGRATE <> 0) and (@I_vRTCLCMTD <> -1))  begin   if (@I_vRTCLCMTD = 1)   begin  select @TDTABMIN = case when @TDTABMIN > 0 then round(@TDTABMIN * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTABMAX = case when @TDTABMAX > 0 then round(@TDTABMAX * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMIN = case when @TDTAXMIN > 0 then round(@TDTAXMIN * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMAX = case when @TDTAXMAX > 0 then round(@TDTAXMAX * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TXDTLAMT = case when @TXDTLAMT > 0 then round(@TXDTLAMT * @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end  end  else   begin  select @TDTABMIN = case when @TDTABMIN > 0 then round(@TDTABMIN / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTABMAX = case when @TDTABMAX > 0 then round(@TDTABMAX / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMIN = case when @TDTAXMIN > 0 then round(@TDTAXMIN / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TDTAXMAX = case when @TDTAXMAX > 0 then round(@TDTAXMAX / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end,  @TXDTLAMT = case when @TXDTLAMT > 0 then round(@TXDTLAMT / @I_vXCHGRATE,@I_vDECIMALPLACES) else 0 end  end  end   select @TaxableBase = 0, @TaxableBaseTemp = 0, @SALES = 0   if (@TXDTLBSE = 5)  begin  select @FINDBOTAX = 0  select @FINDBOTAX = isnull(FRTTXAMT, 0) from SOP10105 (nolock)  where   SOPTYPE = @I_vDOCTYPE and  SOPNUMBE = @I_vDOCNUMBE and  LNITMSEQ = 2147483646 and  TAXDTLID = @TXDBODTL  select @TaxableBase = @FINDBOTAX  end  else  if (@TXDTLBSE = 4)  begin  select @TaxableBase = 0  end  else   begin  select @TaxableBase = @I_vFRTAMT  end   if (@TDTABPCT > 0)  begin  select @TaxableBase = round(@TaxableBase * (@TDTABPCT / 100),@I_vDECIMALPLACES)  end   select @TaxableBaseTemp = abs(@TaxableBase)  select @unitAmt = 0   if ((@TDTABMIN > 0) or (@TDTABMAX > 0))  begin  if (@TXDTQUAL = 1)   begin  if (@I_vNUMUNITS <> 0)  begin  select @unitAmt = @TaxableBaseTemp / @I_vNUMUNITS  end   if (abs(@unitAmt) < @TDTABMIN)  begin  select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if (@TDTABMAX > 0) and (abs(@unitAmt) > @TDTABMAX)  begin  select @unitAmt = @TDTABMAX  select @TaxableBaseTemp = round(@unitAmt * abs(@I_vNUMUNITS),@I_vDECIMALPLACES)  end  end  else   begin  if (@TDTABMAX > 0) and (abs(@unitAmt) > @TDTABMAX)  begin  select @unitAmt = @TDTABMAX - @TDTABMIN  end  else  begin  select @unitAmt = abs(@unitAmt) - @TDTABMIN  end   select @TaxableBaseTemp = round(@unitAmt * abs(@I_vNUMUNITS), @I_vDECIMALPLACES)  end  end  end  else  begin  if (@TXDTQUAL = 2)   begin  if (@TaxableBaseTemp < @TDTABMIN)  begin  if (@TaxableBase < 0)  begin  select @TaxableBaseNeg = @TaxableBase  end   select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin   select @TaxableBaseNeg = @TaxableBase   select @TaxableBaseTemp = @TDTABMAX  end  end  else  begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX - @TDTABMIN  end  else  begin  select @TaxableBaseTemp = @TaxableBaseTemp - @TDTABMIN   end  end  end  end  else  begin  if (@TXDTQUAL = 3)   begin  select  @TaxableSum = isnull(sum(ORTXSLS),0)  from SOP10105 (nolock)  where   SOPTYPE = @I_vDOCTYPE and  SOPNUMBE = @I_vDOCNUMBE and  LNITMSEQ <> 0 and  TAXDTLID = @TAXDTLID   if (abs(@I_vINVOICETOTAL) < @TDTABMIN)  begin  select @TaxableBaseTemp = 0  end  else  begin  if (@I_vINVOICETOTAL >= 0)    begin  if (@TaxableBase < 0)   begin  if (@TaxableBase < 0) and  (@TDTABMAX > 0)   begin  select @TaxableBaseTemp = 0  end  end  else  begin  if ((@TDTABMAX > 0) and (@TaxableBase + @TaxableSum > @TDTABMAX))    begin  if ((@TDTABMAX - @TaxableSum) > 0)  select @TaxableBaseTemp = (@TDTABMAX - @TaxableSum)  else  select @TaxableBaseTemp = 0  end   if ((@TDTABMAX > 0) and (@I_vINVOICETOTAL < 0))  begin  if ((@TaxableBaseTemp + @TaxableSum) > @I_vINVOICETOTAL)   begin  if ((@I_vINVOICETOTAL - @TaxableSum) > 0)  select @TaxableBaseTemp = (@I_vINVOICETOTAL - @TaxableSum)  else  select @TaxableBaseTemp = 0  end  end  end  end  else  begin  if (@TaxableBase > 0)   begin  if ((@TaxableBase > 0) and (@TDTABMAX > 0))  begin  select @TaxableBaseTemp = 0  end  end  else  begin  if ((@TDTABMAX > 0) and (abs(@TaxableSum + @TaxableBase) > @TDTABMAX))   begin  if ((@TDTABMAX - abs(@TaxableSum)) > 0)  select @TaxableBaseTemp = (@TDTABMAX - abs(@TaxableSum))  else  select @TaxableBaseTemp = 0  end   if ((@TDTABMAX > 0) and (@I_vINVOICETOTAL < 0))  begin  if ((@TaxableBaseTemp + abs(@TaxableSum)) > abs(@I_vINVOICETOTAL))   begin  if ((abs(@I_vINVOICETOTAL) - abs(@TaxableSum)) > 0)  select @TaxableBaseTemp = (abs(@I_vINVOICETOTAL) - abs(@TaxableSum))  else  select @TaxableBaseTemp = 0  end  end  end  end  end  end  else  begin  if (@TaxableBaseTemp < @TDTABMIN)  begin  if (@TXDTLBSE = 5)  begin  select @TaxableBaseTempBO = @TaxableBaseTemp  end   select @TaxableBaseTemp = 0  end  else  begin  if (@TDRNGTYP = 1)   begin  if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX  end  end  else  begin   if ((@TDTABMAX > 0) and (@TaxableBaseTemp > @TDTABMAX))  begin  select @TaxableBaseTemp = @TDTABMAX - @TDTABMIN  end  else  begin  select @TaxableBaseTemp = @TaxableBaseTemp - @TDTABMIN  end  end  end  end  end  end  end   if (@TaxableBase < 0)  begin  select @TaxableBase = @TaxableBaseTemp * -1,  @TaxableBaseTempBO = @TaxableBaseTempBO * -1  end  else  begin  select @TaxableBase = @TaxableBaseTemp  end   if (@TXDTLBSE = 1)  begin  select @SALES = @TaxableBase  select @TaxableBase = round(@TaxableBase / (@TXDTLPCT * .01 + 1), 7)   select @TAXAMNT = (@TaxableBase * (@TXDTLPCT * .01))  if (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES, 1))  begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end   select @TaxableBase = round(@TaxableBase,@I_vDECIMALPLACES)  select @SALES = round(@SALES - @TAXAMNT,@I_vDECIMALPLACES)   if (@TDTAXTAX <> 1)  begin  select @I_vFRTAMT = @I_vFRTAMT - @TAXAMNT  select @I_vBACKOFREHT = @I_vFRTAMT  end   select @TaxableBase = @SALES  select @TaxableBaseTemp = @TaxableBase  end  else  if (@TXDTLBSE = 2)  begin  select @TAXAMNT = 0  select @SALES = 0  select @TaxableBase = 0, @TaxableBaseTemp = 0  end  else  if (@TXDTLBSE = 3)  begin  select @TAXAMNT = round(@TaxableBase * @TXDTLPCT * .01, 7)  select @SALES = @TaxableBase  end  else  if (@TXDTLBSE = 4)  begin  select @TAXAMNT = 0  select @SALES = 0  select @TaxableBase = 0  end  else  if (@TXDTLBSE = 5)  begin  select @TAXAMNT = round(@TaxableBase * @TXDTLPCT * .01, 7)  select @SALES = @TaxableBase  end   if (@TDTAXTAX = 1)   begin  if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(2,4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  select @TaxableTotal = @TaxableTotal + round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TaxableTotal = @TaxableTotal + @TAXAMNT  end  end   if (@TXDTLBSE = 6)   begin  if (@TaxableBase >= 0)  begin  select @TaxableBaseTemp = round(@TaxableTotal + @TaxableBaseTemp, @I_vDECIMALPLACES)  end  else  begin  select @TaxableBaseTemp = round(@TaxableBaseTemp - @TaxableTotal, @I_vDECIMALPLACES)  end   if (@TaxableBase <> @SALES) and (@TDTABMAX = @TaxableBase or @TaxableBase <= @TDTABMAX - @TDTABMIN)   begin  if (@TaxableBase > 0)  select @SALES = @TaxableBase  else  select @SALES = 0  end  else  begin  if (@TaxableBase > 0)  begin  select @SALES = round(@TaxableTotal + @TaxableBase, 7)  select @TaxableBase = round(@TaxableTotal + @TaxableBase, @I_vDECIMALPLACES)  end  else  begin  select @SALES = 0, @TaxableBase = 0  end  end   select @TAXAMNT = round((@SALES * @TXDTLPCT * .01), 7)  select @SALES = round(@SALES,@I_vDECIMALPLACES)  end   if (@TAXAMNT <> round(@TAXAMNT,0,1) and @TDTLRNDG in(4,5,6) or (@TAXAMNT <> round(@TAXAMNT,@I_vDECIMALPLACES)and @TDTLRNDG not in(4,5,6)))  begin  if @TAXAMNT > 0   begin  select @TAXAMNT = round(@TAXAMNT + (@rnd/power(10,@pow)),@dec,@fun)  end  else  begin  select @TAXAMNT = round(@TAXAMNT - (@rnd/power(10,@pow)),@dec,@fun)  end  end   select @TXDTOTTX = @TAXAMNT   if (@TXDTLBSE <> 2)  begin  select @TAXSUM = isnull(TAXSUM,0) from #minmax where TAXDTLID = @TAXDTLID   if ((@TDTAXMAX < (abs(@TAXAMNT) + @TAXSUM)) and (@TDTAXMAX <> 0) and (@TaxableBase <> 0))  begin  select @TAXAMNT =   case  when @TAXAMNT < 0  then (@TDTAXMAX - @TAXSUM) * -1  else @TDTAXMAX - @TAXSUM  end  end   if (abs(@TAXAMNT) > abs(@TXDTOTTX))  begin  select @TAXAMNT = @TXDTOTTX  end   if ((@TDTAXMAX > 0) or (@TDTAXMIN > 0))  begin  if not exists(select TAXDTLID from #minmax where TAXDTLID = @TAXDTLID)  begin  insert #minmax select @TAXDTLID, @TAXAMNT, @TDTAXMAX, @TDTAXMIN, @TAXAMNT  end  else  begin  update #minmax set TAXSUM = TAXSUM + @TAXAMNT, LINESUM = LINESUM + @TAXAMNT   where TAXDTLID = @TAXDTLID  end  end  end   if (@TXDTLBSE = 1)  begin  select @I_vBACKOSALES = @I_vBACKOSALES + @TAXAMNT  end  else  begin  select @I_vFRTTXAMT = @I_vFRTTXAMT + @TAXAMNT  end   if ((@TaxableBaseTemp > 0)  and (@TXDTLBSE <> 4))  begin  select @SALES = @TaxableBaseTemp  end   if ((@TXDTOTTX < 0) and (@TaxableBaseNeg = 0))  begin  if (@SALES > 0)  begin  select @SALES = @SALES * -1  end  end   if (((@TDTABMAX > 0) or (@TDTABMIN > 0)) and (@TXDTLBSE <> 5))  begin  if ((@I_vFRTAMT < @TDTABMIN) or (@TXDTLBSE = 4))  begin  select @SALES = 0  end  else  begin  select @SALES = @I_vFRTAMT  end  end   if (@TaxableBaseTempBO <> 0)  begin  select @SALES = @TaxableBaseTempBO  end   select @TaxableBaseNeg = 0,  @TaxableBaseTempBO = 0   if (@I_vTRXSOURCE = 'SLSTE')  begin  if (@ACTINDX = 0)  begin  select @ACTINDX = ACTINDX from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 2000  end   exec @iStatus = taSopLineIvcTaxInsert  @I_vSOPTYPE = @I_vDOCTYPE,  @I_vTAXTYPE = 1,  @I_vSOPNUMBE = @I_vDOCNUMBE,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vLNITMSEQ = @I_vLINENUMBR,  @I_vSALESAMT = 0,  @I_vFRTTXAMT = @TAXAMNT,  @I_vMSCTXAMT = 0,  @I_vFREIGHT = @SALES,  @I_vMISCAMNT = 0,  @I_vTDTTXSLS = @TaxableBase,  @I_vTAXDTLID = @TAXDTLID,  @I_vACTINDX = @ACTINDX,  @I_vACTNUMST = '',  @I_vSTAXAMNT = 0,  @I_vTXDTOTTX = @TXDTOTTX,  @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@@error <> 0) or (@iStatus <> 0) or (@O_iErrorState <> 0))  begin  select @O_iErrorState = 828    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vTRXSOURCE = 'CMRCE')  begin  exec @iStatus = taCommerceTaxInsert  @I_vSOPTYPE = @I_vDOCTYPE,  @I_vTAXTYPE = 1,  @I_vSOPNUMBE = @I_vDOCNUMBE,  @I_vCUSTNMBR = @I_vCUSTNMBR,  @I_vLNITMSEQ = @I_vLINENUMBR,  @I_vSALESAMT = 0,  @I_vFRTTXAMT = @TAXAMNT,  @I_vMSCTXAMT = 0,  @I_vFREIGHT = @SALES,  @I_vMISCAMNT = 0,  @I_vTDTTXSLS = @TaxableBase,  @I_vTAXDTLID = @TAXDTLID,  @I_vACTINDX = @ACTINDX,  @I_vACTNUMST = '',  @I_vSTAXAMNT = 0,  @I_vTXDTOTTX = @TXDTOTTX,  @O_iErrorState = @O_iErrorState output,  @oErrString = @oErrString output  if ((@@error <> 0) or (@iStatus <> 0) or (@O_iErrorState <> 0))  begin  select @O_iErrorState = 9384    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   fetch next from Frght_Taxes into  @TAXDTLID,  @ACTINDX,  @TXDTLBSE,  @TXDTLPCT,  @TXDTLAMT,  @TDTLRNDG,  @TXDBODTL,  @TDTABMIN,  @TDTABMAX,  @TDTAXMIN,  @TDTAXMAX,  @TDRNGTYP,  @TXDTQUAL,  @TDTAXTAX,  @TDTABPCT  end  end  deallocate Frght_Taxes end  select @I_vFUTOTAMT = @I_vTAXAMNT  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taTaxEngine] TO [DYNGRP]
GO
