SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[glReconcilePostingNumbers]  @I_sYear smallint = null,  @I_sOpenOrHistory smallint = null,  @O_iErrorState                          int          = null  output as   declare  @iStatus int,  @iError int,  @cOrigin char(50),  @dFirstDayOfRecYear datetime,  @dLastDayOfRecYear datetime,  @sStartingPeriod smallint,  @sEndingPeriod smallint,  @sStartingYear smallint,  @sEndingYear smallint,  @tClosed tinyint,  @OPEN_YEAR smallint,  @HIST_YEAR smallint,  @FINANCIAL smallint,  @BEGINNING_BALANCE smallint,  @TRUE tinyint,  @FALSE tinyint,  @YEAR_NUMBER smallint,  @sProcessedYear smallint,  @sProcessedPeriod smallint,  @tSomeTrxInHistory tinyint,  @tIsHistoryYear tinyint,  @dLastHistDate datetime,  @sLastHistYear smallint,  @tUseNegativeNumbers tinyint,  @iCalcYearNumber int,  @iCalcPeriodNumber int,  @sNumberOfPeriods smallint,  @dFirstDayOfPeriod datetime,  @dLastDayOfPeriod datetime,  @dFirstDayOfYear datetime,  @dLastDayOfYear datetime,  @iLastIdentity int,  @iTempIdentity int,  @tTransaction tinyint,  @sLastHistPeriod smallint,  @sDummyYear smallint  select @O_iErrorState = 0,  @iStatus = 0,  @iError  = 0  if @I_sYear is NULL or  @I_sOpenOrHistory is NULL  begin  select @O_iErrorState = 21071  return end  select   @TRUE = 1,  @FALSE = 0,  @YEAR_NUMBER = -1,  @OPEN_YEAR = 0,  @HIST_YEAR = 1  exec @iStatus = DYNAMICS..smGetConstantInt  'FINANCIAL',  @FINANCIAL output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'BEGINNING_BALANCE',  @BEGINNING_BALANCE output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_GENERAL_ENTRY',   @cOrigin                output,  @O_iErrorState  output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  if @I_sOpenOrHistory = @OPEN_YEAR  select  @dFirstDayOfRecYear = min(TRXDATE),  @dLastDayOfRecYear = max(TRXDATE)  from  GL20000  where   OPENYEAR = @I_sYear else   select  @dFirstDayOfRecYear = min(TRXDATE),   @dLastDayOfRecYear = max(TRXDATE)  from  GL30000  where   HSTYEAR = @I_sYear  if @dFirstDayOfRecYear is NULL   select   @sStartingYear = @I_sYear,  @sStartingPeriod = @BEGINNING_BALANCE,  @sEndingYear = @I_sYear,  @sEndingPeriod = NUMOFPER,  @dFirstDayOfRecYear = FSTFSCDY,  @dLastDayOfRecYear = LSTFSCDY  from   SY40101  where  YEAR1 = @I_sYear else   begin   exec @iStatus = glCalculateGLPeriod  @FINANCIAL,  @cOrigin,  @dFirstDayOfRecYear,  @dFirstDayOfRecYear,  @sStartingPeriod output,  @tClosed output,  @sStartingYear output,  @iError output,  @O_iErrorState   output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return(@iStatus)   exec @iStatus = glCalculateGLPeriod  @FINANCIAL,  @cOrigin,  @dLastDayOfRecYear,  @dLastDayOfRecYear,  @sEndingPeriod output,  @tClosed output,  @sEndingYear output,  @iError output,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return(@iStatus) end  select   @dLastHistDate = max(TRXDATE),  @sLastHistYear = max(HSTYEAR) from   GL30000  if (@I_sOpenOrHistory = @HIST_YEAR and @sStartingYear < @I_sYear) or   (@I_sOpenOrHistory = @OPEN_YEAR and @sStartingYear = @sLastHistYear)  select   @sStartingYear = @I_sYear,  @sStartingPeriod = @BEGINNING_BALANCE  if (@sStartingYear > @sEndingYear)  select   @sEndingYear = @sStartingYear  create table #PostNumbSetup(  RecYear smallint  not null,  PeriodId smallint  not null,  StartDate datetime not null,  EndDate datetime not null,  PostNumber int not null  )  select   @sProcessedYear = @sStartingYear  while   @sProcessedYear <= @sEndingYear begin  select  @tUseNegativeNumbers = @FALSE,  @tSomeTrxInHistory = @FALSE   if @I_sOpenOrHistory = @OPEN_YEAR  if @sProcessedYear = @sStartingYear  begin  select   @tIsHistoryYear = HISTORYR  from  SY40101  where  @dLastHistDate between FSTFSCDY and LSTFSCDY   if @tIsHistoryYear = @FALSE  begin  select @tSomeTrxInHistory = @TRUE  exec @iStatus = glCalculateGLPeriod  @FINANCIAL,  @cOrigin,  @dLastHistDate,  @dLastHistDate,  @sLastHistPeriod output,  @tClosed output,  @sDummyYear output,  @iError output,  @O_iErrorState   output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return(@iStatus)   end   end  else  if (@sProcessedYear = @sEndingYear and @sProcessedYear > @I_sYear)  select @tUseNegativeNumbers = @TRUE   if (@tSomeTrxInHistory = @TRUE)   begin  select   @iCalcYearNumber = isnull(max(PSTGNMBR),0 ) + 1  from  GL30000 TRX, SY40101 STP  where  STP.YEAR1 = @sProcessedYear and  TRX.HSTYEAR = @sLastHistYear and  TRX.TRXDATE between STP.FSTFSCDY and STP.LSTFSCDY  end  else  if (@sProcessedYear < @I_sYear and @I_sOpenOrHistory = @OPEN_YEAR)  select   @iCalcYearNumber = isnull(max(PSTGNMBR),0 ) + 1  from  GL20000 TRX, SY40101 STP  where  STP.YEAR1 = @sProcessedYear and  TRX.OPENYEAR = @sProcessedYear and  TRX.TRXDATE between STP.FSTFSCDY and STP.LSTFSCDY  else  if @tUseNegativeNumbers = @TRUE  begin  if @I_sOpenOrHistory = @HIST_YEAR  select @iCalcYearNumber = - count(*)  from GL30000   where HSTYEAR = @I_sYear  else  select @iCalcYearNumber = - count(*)  from GL20000   where OPENYEAR = @I_sYear  end  else  select @iCalcYearNumber = 1   insert into  #PostNumbSetup  select  @sProcessedYear,   @YEAR_NUMBER,   case  when @sProcessedYear = @sStartingYear then @dFirstDayOfRecYear  else FSTFSCDY  end,  case  when @sProcessedYear = @sEndingYear then @dLastDayOfRecYear  else LSTFSCDY  end,   @iCalcYearNumber  from  SY40101  where  YEAR1 = @sProcessedYear    select   @sNumberOfPeriods = NUMOFPER,  @sProcessedPeriod = @BEGINNING_BALANCE  from  SY40101  where  YEAR1 = @sProcessedYear   while (@sProcessedPeriod <= @sNumberOfPeriods)  begin  if @sProcessedYear <> @I_sYear and (  (@sProcessedYear = @sStartingYear and @sProcessedPeriod < @sStartingPeriod) or  (@sProcessedYear = @sEndingYear and @sProcessedPeriod > @sEndingPeriod) or  (@I_sOpenOrHistory = @HIST_YEAR and @sProcessedYear > @I_sYear and @sProcessedPeriod = @BEGINNING_BALANCE))  begin  select @sProcessedPeriod = @sProcessedPeriod + 1  continue  end   exec @iStatus = glGetStartEndDatesOfPeriod  @sProcessedYear,  @sProcessedPeriod,  @dFirstDayOfPeriod output,  @dLastDayOfPeriod output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  return   if  (@tSomeTrxInHistory = @TRUE and @sProcessedPeriod = @sLastHistPeriod ) or   (@sProcessedYear < @I_sYear and @I_sOpenOrHistory = @OPEN_YEAR and   @sProcessedPeriod = @sStartingPeriod)  begin  if @tSomeTrxInHistory = @TRUE  select  @iCalcPeriodNumber = isnull(max(PPSGNMBR), 0) + 1  from  GL30000  where  HSTYEAR = @sLastHistYear and  TRXDATE between @dFirstDayOfPeriod and @dLastDayOfPeriod  else  select   @iCalcPeriodNumber = isnull(max(PPSGNMBR), 0) + 1  from  GL20000  where  OPENYEAR = @sProcessedYear and  TRXDATE between @dFirstDayOfPeriod and @dLastDayOfPeriod  end  else   select @iCalcPeriodNumber = 1   insert into  #PostNumbSetup  values (  @sProcessedYear,   @sProcessedPeriod,   case  when @sProcessedYear = @sStartingYear and @sProcessedPeriod = @sStartingPeriod   then @dFirstDayOfRecYear  else  @dFirstDayOfPeriod  end,  case  when @sProcessedYear = @sEndingYear and @sProcessedPeriod = @sEndingPeriod   then @dLastDayOfRecYear  else  @dLastDayOfPeriod  end,  @iCalcPeriodNumber)   select  @sProcessedPeriod = @sProcessedPeriod + 1   end   select  @sProcessedYear = @sProcessedYear + 1  end  create table #RecPostNumb (  TrxYear smallint not null,  TrxPeriod smallint not null,  JrnlEntry int not null,  RecTrxSeq decimal(19,5) not null,  OldPostNumb int not null,  NewPostNumb int not null,  NewPeriodPostBase int not null,  SequenceNumber int identity(1,1) not null)  create index #RecPostNumb_OldPostNumb   on #RecPostNumb(TrxYear, OldPostNumb)  declare PostNumbPeriodCursor cursor for   select   RecYear,   PeriodId,  StartDate,   EndDate,   PostNumber  from   #PostNumbSetup  where   PeriodId <> @YEAR_NUMBER  select   @iLastIdentity = 0,  @iTempIdentity = 0  open PostNumbPeriodCursor fetch next from   PostNumbPeriodCursor into   @sProcessedYear,   @sProcessedPeriod,  @dFirstDayOfPeriod,   @dLastDayOfPeriod,   @iCalcPeriodNumber  while @@FETCH_STATUS = 0 begin   if @I_sOpenOrHistory = @OPEN_YEAR  begin  insert into   #RecPostNumb (  TrxYear,  TrxPeriod,  JrnlEntry,  RecTrxSeq,   OldPostNumb,  NewPostNumb,  NewPeriodPostBase)  select distinct  @sProcessedYear,  @sProcessedPeriod,  JRNENTRY,  RCTRXSEQ,  PSTGNMBR,  0,  @iLastIdentity - @iCalcPeriodNumber + 1  from  GL20000  where  OPENYEAR = @I_sYear and  TRXDATE between @dFirstDayOfPeriod and @dLastDayOfPeriod  order by  PSTGNMBR  end  else   begin  insert into   #RecPostNumb (  TrxYear,  TrxPeriod,  JrnlEntry,  RecTrxSeq,   OldPostNumb,  NewPostNumb,  NewPeriodPostBase)  select distinct  @sProcessedYear,  @sProcessedPeriod,  JRNENTRY,  RCTRXSEQ,  PSTGNMBR,  0,  @iLastIdentity - @iCalcPeriodNumber + 1  from  GL30000  where  HSTYEAR = @I_sYear and  TRXDATE between @dFirstDayOfPeriod and @dLastDayOfPeriod  order by  PSTGNMBR   end   if @@ROWCOUNT <> 0  select @iTempIdentity = @@IDENTITY   update   #PostNumbSetup  set   PostNumber = @iTempIdentity - @iLastIdentity + 1  where  RecYear = @sProcessedYear and  PeriodId = @sProcessedPeriod   select   @iLastIdentity = @iTempIdentity   fetch next from   PostNumbPeriodCursor  into   @sProcessedYear,  @sProcessedPeriod,  @dFirstDayOfPeriod,  @dLastDayOfPeriod,  @iCalcPeriodNumber end close PostNumbPeriodCursor deallocate PostNumbPeriodCursor  create table #PostNumbConv (  TrxYear smallint not null,  JrnlEntry int not null,  RecTrxSeq decimal(19,5) not null,  OldPostNumb int not null,  NewPostNumb int identity(1,1)  not null)  create index #PostNumbConv_OldPostNumb  on #PostNumbConv(OldPostNumb)  declare PostNumbYearCursor cursor for   select   RecYear,   StartDate,   EndDate,   PostNumber  from   #PostNumbSetup  where   PeriodId = @YEAR_NUMBER  select @iLastIdentity = 0  open PostNumbYearCursor fetch next from  PostNumbYearCursor into   @sProcessedYear,   @dFirstDayOfYear,   @dLastDayOfYear,   @iCalcYearNumber  while @@FETCH_STATUS = 0 begin   insert into  #PostNumbConv (  TrxYear,  JrnlEntry,  RecTrxSeq,  OldPostNumb)  select  TrxYear,  JrnlEntry,  RecTrxSeq,  OldPostNumb  from  #RecPostNumb  where  TrxYear = @sProcessedYear  order by  TrxYear,  OldPostNumb,  JrnlEntry,  RecTrxSeq   if @@ROWCOUNT <> 0   select @iLastIdentity = @@IDENTITY   update   #RecPostNumb  set   #RecPostNumb.NewPostNumb = #PostNumbConv.NewPostNumb + @iCalcYearNumber - 1  from  #PostNumbConv  where  #PostNumbConv.OldPostNumb = #RecPostNumb.OldPostNumb and  #RecPostNumb.TrxYear = @sProcessedYear and  #PostNumbConv.JrnlEntry = #RecPostNumb.JrnlEntry and  #PostNumbConv.RecTrxSeq = #RecPostNumb.RecTrxSeq   if @@trancount = 0  begin  select @tTransaction = @TRUE  begin transaction  end    if @I_sOpenOrHistory = @OPEN_YEAR  update   GL20000  set   PSTGNMBR = NewPostNumb,  PPSGNMBR = SequenceNumber - NewPeriodPostBase  from  #RecPostNumb  where  #RecPostNumb.TrxYear = @sProcessedYear and  GL20000.OPENYEAR = @I_sYear and  GL20000.JRNENTRY = #RecPostNumb.JrnlEntry and  GL20000.RCTRXSEQ = #RecPostNumb.RecTrxSeq  else   update   GL30000  set   PSTGNMBR = NewPostNumb,  PPSGNMBR = SequenceNumber - NewPeriodPostBase  from  #RecPostNumb  where  #RecPostNumb.TrxYear = @sProcessedYear and  GL30000.HSTYEAR = @I_sYear and  GL30000.JRNENTRY = #RecPostNumb.JrnlEntry and  GL30000.RCTRXSEQ = #RecPostNumb.RecTrxSeq  update   #PostNumbSetup  set   PostNumber = @iLastIdentity + 1  where  RecYear = @sProcessedYear and  PeriodId = @YEAR_NUMBER   delete   GL40300  from   #PostNumbSetup  where  YEAR1 = #PostNumbSetup.RecYear and  GL40300.PERIODID = #PostNumbSetup.PeriodId and  #PostNumbSetup.RecYear = @sProcessedYear   insert into   GL40300(  YEAR1,  PERIODID,  PSTGNMBR)  select  RecYear,  PeriodId,  PostNumber  from  #PostNumbSetup  where  RecYear = @sProcessedYear   if @tTransaction = @TRUE  commit transaction   truncate table #PostNumbConv   fetch next from  PostNumbYearCursor  into   @sProcessedYear,   @dFirstDayOfYear,   @dLastDayOfYear,   @iCalcYearNumber end close PostNumbYearCursor deallocate PostNumbYearCursor  drop table #PostNumbSetup drop table #PostNumbConv drop table #RecPostNumb  return(@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glReconcilePostingNumbers] TO [DYNGRP]
GO
