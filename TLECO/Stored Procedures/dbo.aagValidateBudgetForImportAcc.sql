SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE   PROCEDURE [dbo].[aagValidateBudgetForImportAcc] (  @aaBudgetID INTEGER ,  @CodeSeqAbove INTEGER OUTPUT ,  @CodeSeqBelow INTEGER OUTPUT ,  @nResultOut INTEGER OUTPUT ) AS  BEGIN  DECLARE @nPeriodCount INTEGER  DECLARE @nCodeCount INTEGER  DECLARE @aaCodeSequence INTEGER  DECLARE @aaFiscalPeriod INTEGER  DECLARE @PeriodDate DATETIME  DECLARE @aaBudgetTreeID INTEGER  DECLARE @nChCount INTEGER  DECLARE @nAcctCount INTEGER  DECLARE @nResult INTEGER  DECLARE @ACTINDX INTEGER  DECLARE @RowInc INTEGER  DECLARE @nAccResult INTEGER  DECLARE @ACTNUMST VARCHAR (129)  DECLARE @USERID CHAR(15)   DECLARE @WINTYPE INTEGER   DECLARE @CMPANYID INTEGER   DECLARE @temp_CodeSequence TABLE (aaCodeSequence INTEGER)   DECLARE @aaActualPriliminary INTEGER   DECLARE @aaAmountQty INTEGER   DECLARE @aaRange SMALLINT  declare @ChildrenTotal FLOAT   declare @NodeAmount FLOAT  declare @aaAcctType INTEGER  declare @ZAccountValue   FLOAT  declare @NodeValue FLOAT  declare @Result integer  SELECT @USERID  = SYSTEM_USER  SELECT @WINTYPE = 1   SELECT @CMPANYID = dbo.aagGetCompanyID()  SELECT @aaBudgetTreeID = aaBudgetTreeID   FROM AAG00903   WHERE aaBudgetID = @aaBudgetID  declare MainLoopCur cursor fast_forward for   select DISTINCT aaCodeSequence FROM AAG00904   WHERE aaBudgetID = @aaBudgetID   order by aaCodeSequence   open MainLoopCur   fetch next from MainLoopCur into  @aaCodeSequence   while @@fetch_status = 0   BEGIN   UPDATE AAG00906   SET aaCodeSequence = @aaCodeSequence   WHERE USERID = @USERID AND  CMPANYID = @CMPANYID AND   WINTYPE = @WINTYPE  set @aaActualPriliminary=0  set @aaAmountQty=0  set @aaRange=0  SELECT @aaActualPriliminary = aaActualPriliminary ,  @aaAmountQty = aaAmtQty,  @aaRange = aaRange  FROM AAG00906 WHERE USERID = SYSTEM_USER and WINTYPE = 1  DELETE FROM @temp_CodeSequence  INSERT INTO @temp_CodeSequence SELECT aaCodeSequence FROM   dbo.aagGetChildNodes ( @aaBudgetTreeID, @aaCodeSequence )  IF (SELECT COUNT(*) FROM @temp_CodeSequence)  > 0  BEGIN   declare SecondLoopCur cursor fast_forward for   SELECT distinct ACTINDX FROM AAG00905 WHERE aaBudgetID = @aaBudgetID   AND aaCodeSequence = @aaCodeSequence   open SecondLoopCur   fetch next from SecondLoopCur into  @ACTINDX   while @@fetch_status = 0   BEGIN  IF @ACTINDX = 0   BEGIN   BEGIN TRANSACTION ERRUPDATE  INSERT INTO  AAG2000E (aaSubLedgerHdrID, aaTrxDimCode, aaSubLedgerDistID, AADOCVAL )   VALUES (-1,'0',0,4)    DELETE FROM AAG00905   WHERE aaBudgetID = @aaBudgetID AND   ACTINDX = @ACTINDX AND   aaCodeSequence = @aaCodeSequence   COMMIT TRANSACTION ERRUPDATE  END   UPDATE AAG00906   SET ACTINDX = @ACTINDX   WHERE USERID = @USERID AND   CMPANYID = @CMPANYID AND   WINTYPE = @WINTYPE  set @aaAcctType=0  SELECT @aaAcctType = ACCTTYPE FROM GL00100 WHERE ACTINDX = @ACTINDX   if (select COUNT (*) FROM AAG00902 WHERE aaLevel = 1 and aaBudgetTreeID = @aaBudgetTreeID   and aaCodeSequence = @aaCodeSequence)>0   begin   if not exists(SELECT distinct A.ACTINDX   FROM AAG00200 A INNER JOIN GL00100 B ON A.ACTINDX = B.ACTINDX   WHERE aaAcctClassID in( select aaAcctClassID FROM AAG00202 where   aaAcctClassID in(SELECT aaAcctClassID FROM AAG00201)  and   aaTrxDimID in (SELECT aaTrxDimID FROM AAG00901 WHERE aaBudgetTreeID = @aaBudgetTreeID)   group by aaAcctClassID   having COUNT(*)>=(select COUNT( aaTrxDimID ) FROM AAG00901 WHERE   aaBudgetTreeID = @aaBudgetTreeID))   and A.ACTINDX=@ACTINDX)   begin   BEGIN TRANSACTION ERRUPDATE   SELECT @ACTNUMST = ISNULL(ACTNUMST, '')   FROM GL00105 WHERE ACTINDX = @ACTINDX   INSERT INTO AAG2000E (aaSubLedgerHdrID,   aaTrxDimCode, aaSubLedgerDistID, AADOCVAL )   VALUES (-1,@ACTNUMST,0,3)   COMMIT TRANSACTION ERRUPDATE   end   end   else   begin  if not exists(SELECT distinct  A.ACTINDX  FROM GL00100 A   INNER JOIN GL00105 B ON A.ACTINDX = B.ACTINDX   WHERE A.ACTINDX IN   (SELECT DISTINCT ACTINDX FROM AAG00905   WHERE aaBudgetID = @aaBudgetID and aaCodeSequence =   (SELECT TOP 1 aaCodeSequence FROM AAG00902 WHERE   aaTrxDimCodeID =(SELECT DISTINCT aaTrxDimParCodeID FROM AAG00902   WHERE aaCodeSequence = @aaCodeSequence AND aaBudgetTreeID = @aaBudgetTreeID)AND   aaBudgetTreeID = @aaBudgetTreeID   AND aaCodeSequence < @aaCodeSequence ORDER BY aaCodeSequence DESC)   ))   begin   BEGIN TRANSACTION ERRUPDATE   SELECT @ACTNUMST = ISNULL(ACTNUMST, '')   FROM GL00105 WHERE ACTINDX = @ACTINDX   INSERT INTO  AAG2000E (aaSubLedgerHdrID,   aaTrxDimCode, aaSubLedgerDistID, AADOCVAL )   VALUES (-1,@ACTNUMST,0,3)   COMMIT TRANSACTION ERRUPDATE   end   end   declare ThirdLoopCur cursor fast_forward for   SELECT PERIODDT, aaFiscalPeriod   FROM AAG00904   WHERE aaBudgetID = @aaBudgetID and aaCodeSequence = 1  ORDER BY PERIODDT  open ThirdLoopCur   fetch next from ThirdLoopCur into  @PeriodDate, @aaFiscalPeriod   while @@fetch_status = 0  BEGIN  set @NodeAmount=0  set @ChildrenTotal=0  set @ZAccountValue=0  set @NodeValue=0  IF @ACTINDX <=0 OR LEN(RTRIM(LTRIM(STR(@ACTINDX)))) = 0  BEGIN  SELECT @NodeAmount = CASE @aaAmountQty WHEN 0 THEN Balance WHEN 1 THEN QUANTITY END  FROM AAG00904 WHERE  aaCodeSequence = @aaCodeSequence AND  aaBudgetID = @aaBudgetID AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  PERIODDT = @PeriodDate  SELECT @ChildrenTotal = CASE @aaAmountQty WHEN 0 THEN SUM(Balance)  ELSE SUM(QUANTITY) END FROM AAG00904 WHERE aaBudgetID = @aaBudgetID AND  aaCodeSequence IN  (  SELECT aaCodeSequence FROM  @temp_CodeSequence   )  AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate  IF @ChildrenTotal IS NULL OR (@NodeAmount < @ChildrenTotal)  BEGIN  SET @nResultOut = -1  PRINT @aaCodeSequence  PRINT @aaFiscalPeriod  PRINT @PeriodDate  PRINT @ACTINDX  SET @CodeSeqAbove = @aaCodeSequence  SELECT TOP 1 @CodeSeqBelow = aaCodeSequence   FROM dbo.aagGetChildNodes( @aaBudgetTreeID  , @aaCodeSequence )  close ThirdLoopCur   deallocate ThirdLoopCur   close SecondLoopCur   deallocate SecondLoopCur   close MainLoopCur   deallocate MainLoopCur  RETURN -1   END  END  ELSE IF @aaRange = 0 or LEN(RTRIM(LTRIM(STR(@aaRange)))) = 0  BEGIN  SELECT @ZAccountValue = SUM(Balance) FROM AAG00905 WHERE  aaBudgetID = @aaBudgetID AND  aaCodeSequence = @aaCodeSequence AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate AND   ACTINDX IN (SELECT ACTINDX FROM GL00100 WHERE ACCTTYPE = @aaAcctType)    SELECT @NodeValue = CASE @aaAcctType WHEN 1 THEN Balance ELSE  QUANTITY END FROM AAG00904 WHERE  aaBudgetID = @aaBudgetID AND  aaCodeSequence = @aaCodeSequence AND  aaActualPriliminary = @aaActualPriliminary  AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate    IF @ZAccountValue > @NodeValue  BEGIN  SET @Result = -3  RETURN @Result  END  SELECT @NodeAmount = ISNULL(SUM(Balance),0) FROM AAG00905 WHERE  aaCodeSequence = @aaCodeSequence AND  aaBudgetID = @aaBudgetID AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  PERIODDT = @PeriodDate AND  ACTINDX = @ACTINDX  SELECT @aaBudgetTreeID = aaBudgetTreeID FROM AAG00903  WHERE aaBudgetID = @aaBudgetID  SELECT @ChildrenTotal = SUM( Balance ) FROM AAG00905 WHERE  aaBudgetID = @aaBudgetID AND  aaCodeSequence IN  ( SELECT aaCodeSequence FROM  @temp_CodeSequence)  AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  PERIODDT = @PeriodDate AND  ACTINDX = @ACTINDX    IF @NodeAmount < @ChildrenTotal  BEGIN  SET @nResultOut = -1  PRINT @aaCodeSequence  PRINT @aaFiscalPeriod  PRINT @PeriodDate   PRINT @ACTINDX  SET @CodeSeqAbove = @aaCodeSequence  SELECT TOP 1 @CodeSeqBelow = aaCodeSequence   FROM dbo.aagGetChildNodes( @aaBudgetTreeID  , @aaCodeSequence )  close ThirdLoopCur   deallocate ThirdLoopCur   close SecondLoopCur   deallocate SecondLoopCur   close MainLoopCur   deallocate MainLoopCur  RETURN -1   END    END  ELSE  BEGIN  SET @nResultOut = -1  PRINT @aaCodeSequence  PRINT @aaFiscalPeriod  PRINT @PeriodDate   PRINT @ACTINDX  SET @CodeSeqAbove = @aaCodeSequence  SELECT TOP 1 @CodeSeqBelow = aaCodeSequence   FROM dbo.aagGetChildNodes( @aaBudgetTreeID  , @aaCodeSequence )  close ThirdLoopCur   deallocate ThirdLoopCur   close SecondLoopCur   deallocate SecondLoopCur   close MainLoopCur   deallocate MainLoopCur  RETURN -1  END   fetch next from ThirdLoopCur into  @PeriodDate, @aaFiscalPeriod  END   close ThirdLoopCur   deallocate ThirdLoopCur   fetch next from SecondLoopCur into  @ACTINDX   END  close SecondLoopCur   deallocate SecondLoopCur  END    fetch next from MainLoopCur into  @aaCodeSequence  END  close MainLoopCur   deallocate MainLoopCur   SET @nResultOut = 1  RETURN 1 END    
GO
GRANT EXECUTE ON  [dbo].[aagValidateBudgetForImportAcc] TO [DYNGRP]
GO
