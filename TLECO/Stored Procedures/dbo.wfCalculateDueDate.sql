SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[wfCalculateDueDate]   @UseWorkflowCalendarTemp tinyint = NULL,   @TimeUnit tinyint = NULL,   @NumbOfUnits int = NULL,   @DueDate datetime = NULL output,   @DueTime datetime = NULL output,  @Error int = NULL output  AS begin  SET nocount on   DECLARE   @SecondsInHour int,  @SecondsInDay int,  @SecondsInWeek int,  @SecondsToSchedule int,  @currentTime datetime,  @tempDate datetime,  @dateToCheck datetime,  @SecondsScheduled int,  @CalculatedEndTime datetime,  @CalculatedDueDateTime datetime,  @day int,   @month int,   @year int,  @hour int,  @minute int,  @second int,  @DayOfWeek int,  @dayCount int,  @StartTime datetime,  @EndTime datetime,  @StartSeconds int,  @EndSeconds int,  @SecondsAvailable int,  @SecondsDiff int,  @Done tinyint,  @MaxSeconds int,  @FirstLoop tinyint,  @DaysInDay int,  @DaysInWeek int,  @DaysToSchedule int,  @UseStartTime tinyint,  @MaxDays int,  @tempTime datetime,  @UseWorkflowCalendar tinyint,  @CalculatedStartTime datetime   declare @Updays TABLE  (   Date1 datetime,  StartTime datetime,  EndTime datetime,  StartSeconds int,  EndSeconds int,   DayCount int  )    select @Error = 0   if (  @UseWorkflowCalendarTemp is NULL or  @TimeUnit is NULL or  @NumbOfUnits is NULL )   begin  select          @Error = 20857  return  end   if (select count(*) from WF40300 where IsWorkDay = 1) = 0  begin  set @UseWorkflowCalendar = 0  end  else  begin  set @UseWorkflowCalendar = @UseWorkflowCalendarTemp  end   SELECT @currentTime = SYSDATETIME ()  SET DATEFIRST 7;  set @SecondsInHour = 3600  set @SecondsInDay = 86400   set @SecondsInWeek = 604800  set @DaysInDay = 1   if (@TimeUnit = 1)   begin  set @SecondsToSchedule = @NumbOfUnits * @SecondsInHour  end   if (@TimeUnit = 2)   begin  set @SecondsToSchedule = @NumbOfUnits * @SecondsInDay  set @DaysToSchedule = @NumbOfUnits * @DaysInDay  end   if (@TimeUnit = 3)   begin  set @SecondsToSchedule = @NumbOfUnits * @SecondsInWeek  set @DaysInWeek = 7  set @DaysToSchedule =  @NumbOfUnits * @DaysInWeek  end   if (@UseWorkflowCalendar = 0)  begin  select @CalculatedEndTime = DATEADD (ss , @SecondsToSchedule, @currentTime )  end  else  begin  exec dbo.wfEvaluateDate @currentTime, @CalculatedStartTime out  end   if (@UseWorkflowCalendar = 1 and @TimeUnit = 1)  begin  set @tempDate = @CalculatedStartTime  set @SecondsScheduled = 0  set @Done = 0  set @FirstLoop = 1  while (@Done = 0)  begin  select  @day = DATEPART (dd , @tempDate ),   @month = DATEPART (mm , @tempDate ),   @year = DATEPART (yyyy , @tempDate ),   @hour = DATEPART (hh , @tempDate ),   @minute = DATEPART (mi , @tempDate ),   @second = DATEPART (ss , @tempDate )   select @dateToCheck = dateadd(mm, (@year - 1900) * 12 + @month - 1 , @day - 1)   if ((select count(*) from WF40310 where DATE1 = @dateToCheck) = 0)  begin  select @DayOfWeek = DATEPART(dw, @tempDate)  if (select count(*) from WF40300 where [DayOfWeek] = @DayOfWeek and IsWorkDay = 1) > 0  begin   select @StartTime = @dateToCheck + STRTTIME, @EndTime = @dateToCheck + ENDTIME  from WF40300  where [DayOfWeek] = @DayOfWeek    if (@FirstLoop = 1)  begin  set @StartTime = @tempDate  end  set @FirstLoop = 0   select @SecondsAvailable = DATEDIFF(ss, @StartTime, @EndTime);  insert into @Updays  select @dateToCheck, @StartTime, @EndTime, @SecondsScheduled, @SecondsScheduled + @SecondsAvailable, @dayCount   set @SecondsScheduled = @SecondsScheduled + @SecondsAvailable    set @MaxSeconds = (Select max(EndSeconds) from @Updays)  if (@MaxSeconds > @SecondsToSchedule)   begin  set @Done = 1  end  end  end  Select @tempDate = DATEADD (dd , 1, @tempDate )  end    select @StartTime = StartTime, @EndTime = EndTime, @StartSeconds = StartSeconds, @EndSeconds = EndSeconds  from @Updays where @SecondsToSchedule between StartSeconds and EndSeconds   set @SecondsDiff = @EndSeconds - @SecondsToSchedule  select @CalculatedEndTime = DATEADD (ss , @SecondsDiff * -1, @EndTime )   end   if (@UseWorkflowCalendar = 1 and @TimeUnit = 2)  begin  set @tempDate = @CalculatedStartTime  set @dayCount = 0  set @Done = 0  while (@Done = 0)  begin  select  @day = DATEPART (dd , @tempDate ),   @month = DATEPART (mm , @tempDate ),   @year = DATEPART (yyyy , @tempDate ),   @hour = DATEPART (hh , @tempDate ),   @minute = DATEPART (mi , @tempDate ),   @second = DATEPART (ss , @tempDate )   select @dateToCheck = dateadd(mm, (@year - 1900) * 12 + @month - 1 , @day - 1)   if ((select count(*) from WF40310 where DATE1 = @dateToCheck) = 0)  begin  select @DayOfWeek = DATEPART(dw, @tempDate)  if (select count(*) from WF40300 where [DayOfWeek] = @DayOfWeek and IsWorkDay = 1) > 0  begin   select @StartTime = @dateToCheck + STRTTIME, @EndTime = @dateToCheck + ENDTIME  from WF40300  where [DayOfWeek] = @DayOfWeek    insert into @Updays  select @dateToCheck, @StartTime, @EndTime, 0, 0, @dayCount  set @dayCount = @dayCount + 1  set @MaxDays = (Select max(DayCount) from @Updays)  if (@MaxDays > @DaysToSchedule)   begin  set @Done = 1  end  end  end  Select @tempDate = DATEADD (dd , 1, @tempDate )  end    select @StartTime = StartTime, @EndTime = EndTime, @dayCount = DayCount  from @Updays where @DaysToSchedule = DayCount   select @day = DATEPART (dd , @StartTime ),   @month = DATEPART (mm , @StartTime ),   @year = DATEPART (yyyy , @StartTime ),  @hour = DATEPART (hh , @CalculatedStartTime ),   @minute = DATEPART (mi , @CalculatedStartTime ),   @second = DATEPART (ss , @CalculatedStartTime )   SELECT @tempDate = dateadd(mm, (@year - 1900) * 12 + @month - 1 , @day - 1)  SELECT @tempTime = dateadd(ss, (@hour * 3600) + (@minute * 60) +  @second, 0)  set @CalculatedEndTime = @tempDate +  @tempTime  end   if (@UseWorkflowCalendar = 1 and @TimeUnit = 3)  begin  select @CalculatedEndTime = DATEADD (dd , @DaysToSchedule, @CalculatedStartTime )  end   if (@UseWorkflowCalendar = 1)  begin  exec dbo.wfEvaluateDate @CalculatedEndTime, @CalculatedDueDateTime out  end  else  begin  set @CalculatedDueDateTime = @CalculatedEndTime  end  select @day = DATEPART (dd , @CalculatedDueDateTime ),   @month = DATEPART (mm , @CalculatedDueDateTime ),   @year = DATEPART (yyyy , @CalculatedDueDateTime ),  @hour = DATEPART (hh , @CalculatedDueDateTime ),   @minute = DATEPART (mi , @CalculatedDueDateTime ),   @second = DATEPART (ss , @CalculatedDueDateTime )   SELECT @DueDate = dateadd(mm, (@year - 1900) * 12 + @month - 1 , @day - 1)  SELECT @DueTime = dateadd(ss, (@hour * 3600) + (@minute * 60) +  @second, 0)  set nocount off end   
GO
GRANT EXECUTE ON  [dbo].[wfCalculateDueDate] TO [DYNGRP]
GO
