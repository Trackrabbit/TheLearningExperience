SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[popGenSuggestedPOs]  @I_vDexTable1 varchar(255), @I_vDexTable2 varchar(255), @I_vIncludeSubordinates tinyint, @I_vIncludeEmptyVendors tinyint, @I_vBuyerIDSelection tinyint, @I_vBuyerID char(15), @I_vIsMcReg tinyint, @I_vPODate datetime, @I_vPromisedDateSelection tinyint, @I_vSpecifiedPromiseDate datetime, @I_vSpecifiedShippingDays smallint, @I_vITEMNMBR_From char(30), @I_vITEMNMBR_To char(30), @I_vLOCNCODE_From char(10), @I_vLOCNCODE_To char(10), @I_vBUYERID_From char(15), @I_vBUYERID_To char(15), @I_vVENDORID_From char(15), @I_vVENDORID_To char(15), @I_vCLASSID_From char(10), @I_vCLASSID_To char(10), @O_iErrorState int output, @O_il_SQL_Return_Status int output  as  set transaction isolation level read uncommitted set nocount on  declare   @iError int,   @iStatus int,  @cStatement varchar(8000),  @FUNLCURR char(15),  @FUNCRIDX smallint,  @DECPLCUR smallint,  @CMPANYID smallint,  @iCursorError int,  @cVENDORID char(15),  @cLast_Originating_Cost numeric(19,5),  @cLast_Currency_ID char(15),  @cITMVNDTY tinyint,  @cITEMNMBR char(31),  @cLOCNCODE char(11),  @cBASEUOFM char(9),  @mcRATETPID char(15),  @mcEXGTBLID char(15),  @mcRATEEXPR smallint,  @mcTRXDTDEF int,  @mcXCHGRATE numeric(19,7),  @mcDYSTINCR smallint,  @mcDATELMTS int,  @mcPRVDSLMT int,  @mcRTCLCMTD smallint,  @mcFunCost numeric(19,7),  @fcITEMNMBR char(31),  @fcLOCNCODE char(11),  @fcADRSCODE char(15),  @fcVENDORID char(15),  @fcQTY_Required numeric(19,5),  @fcBASEUOFM char(9),  @fcPOGENWARNINGS int,  @fcDECPLQTY smallint,  @fcBUYERID char(15),  @fcReplenishmentLevel smallint,  @POGENERRORS int,  @VENDNAME char(65),  @CURNCYID char(15),  @CREDTLMT smallint,  @VENDSTTS smallint,  @VNDITNUM char(31),  @l_VNDITNUM char(31),  @VNDITDSC char(101),  @l_VNDITDSC char(101),  @PLANNINGLEADTIME smallint,  @ORDERMULTIPLE numeric(19,5),  @FREEONBOARD smallint,  @PRCHSUOM char(9),  @MINORQTY numeric(19,5),   @MAXORDQTY numeric(19,5),   @ECORDQTY numeric(19,5),  @QTY_Modified numeric(19,5),  @CURRNIDX smallint,  @ICURRIDX smallint,  @QTYBSUOM numeric(19,5),  @UMPUROPT smallint,  @DecPlaceQtys smallint,  @QTYToOrderInPurchUofM numeric(19,5),  @POPVendorSelection smallint,  @PRIMVNDR char(15),   @POPPricingSelection smallint,  @PurchasePrice numeric(19,5),  @DecPlaceCur smallint,  @Last_Originating_Cost numeric(19,5),  @Last_Currency_ID char(15),  @UNITCOSTINBSUOFM numeric(21,7),  @OriginatingCost numeric(21,7),  @STNDCOST numeric(19,5),  @CURRCOST numeric(19,5),  @UNITCOST numeric(19,5),  @HOLD tinyint,  @CurrencyNeedsValidation tinyint  select  @O_il_SQL_Return_Status = 0,  @cStatement = '',  @FUNLCURR = '',  @FUNCRIDX = 0,  @DECPLCUR = 0,  @CMPANYID = 0,  @iCursorError = 0,  @cVENDORID = '',  @cLast_Originating_Cost = 0,  @cLast_Currency_ID = '',  @cITMVNDTY = 0,  @cITEMNMBR = '',  @cLOCNCODE = '',  @cBASEUOFM = '',  @mcRATETPID = '',  @mcEXGTBLID = '',  @mcRATEEXPR = 0,  @mcTRXDTDEF = 0,  @mcXCHGRATE = 0,  @mcDYSTINCR = 0,  @mcDATELMTS = 0,  @mcPRVDSLMT = 0,  @mcRTCLCMTD = 0,  @mcFunCost = null,   @fcITEMNMBR = '',  @fcLOCNCODE = '',  @fcADRSCODE = '',  @fcVENDORID = '',  @fcQTY_Required = 0,  @fcBASEUOFM = '',  @fcPOGENWARNINGS = 0,  @fcDECPLQTY = 0,  @fcBUYERID = '',  @fcReplenishmentLevel = 0  select @FUNLCURR = isnull(FUNLCURR,''), @FUNCRIDX = isnull(FUNCRIDX,0) from MC40000 (nolock) select @DECPLCUR = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @FUNLCURR select @CMPANYID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()  if (not exists(select 1 from tempdb..sysobjects where id = (select object_id('tempdb..#tmpPOGENSub')))) begin  create table #tmpPOGENSub   (  ITEMNMBR char(31) NOT NULL,  MasterLocationCode char(11) NOT NULL,  LOCNCODE char(11) NOT NULL,  RCRDTYPE smallint NOT NULL,  QTY_Required numeric(19,5) NOT NULL,  QTYAVAIL numeric(19,5) NOT NULL,  QTYONHND numeric(19,5) NOT NULL,  QTYONORD numeric(19,5) NOT NULL,  QTYONORDERNEWPO numeric(19,5) NOT NULL,  ATYALLOC numeric(19,5) NOT NULL,  QTYBKORD numeric(19,5) NOT NULL,  QTYRQSTN numeric(19,5) NOT NULL,  QTY_Total_Supplies numeric(19,5) NOT NULL,  QTY_Total_Requirements numeric(19,5) NOT NULL,  ReplenishmentLevel smallint NOT NULL,  ORDRPNTQTY numeric(19,5) NOT NULL,  ORDRUPTOLVL numeric(19,5) NOT NULL,  DEX_ROW_ID int identity NOT NULL  )   create index #tmpPOGENSub on #tmpPOGENSub (ITEMNMBR, MasterLocationCode) end if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99912    return (@O_il_SQL_Return_Status) end  truncate table #tmpPOGENSub  if (@I_vIncludeSubordinates = 1) begin  insert #tmpPOGENSub   (  ITEMNMBR,  MasterLocationCode,  LOCNCODE,  RCRDTYPE,  QTY_Required,  QTYAVAIL,  QTYONHND,  QTYONORD,  QTYONORDERNEWPO,  ATYALLOC,  QTYBKORD,  QTYRQSTN,  QTY_Total_Supplies,  QTY_Total_Requirements,  ReplenishmentLevel,  ORDRPNTQTY,  ORDRUPTOLVL  )  select  a.ITEMNMBR,                a.MasterLocationCode,             a.LOCNCODE,                 a.RCRDTYPE,                0,                  a.QTYONHND + a.QTYONORD              - (case when a.IncludeAllocations = 1 then a.ATYALLOC else 0 end)   - (case when a.IncludeRequisitions = 1 then a.QTYRQSTN else 0 end)  - (case when a.IncludeBackorders = 1 then a.QTYBKORD else 0 end)  + isnull((select (sum(isnull(round(p.QTYORDER * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0))  - sum(isnull(round(p.QTYCANCE * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0)))  from POP10110 p (nolock)  where ( p.ITEMNMBR = a.ITEMNMBR and p.LOCNCODE = a.LOCNCODE and p.POLNESTA = 1 and   p.POTYPE in (1,3) and p.LineNumber <> 0 )),0),  a.QTYONHND,                a.QTYONORD,                   isnull((select (sum(isnull(round(p.QTYORDER * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0))  - sum(isnull(round(p.QTYCANCE * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0)))  from POP10110 p (nolock)  where (p.ITEMNMBR = a.ITEMNMBR and p.LOCNCODE = a.LOCNCODE and p.POLNESTA = 1 and p.POTYPE in (1,3) and p.LineNumber <> 0 )),0),  case when a.IncludeAllocations = 1 then a.ATYALLOC else 0 end,    case when a.IncludeBackorders = 1  then a.QTYBKORD else 0 end,    case when a.IncludeRequisitions = 1 then a.QTYRQSTN else 0 end,   a.QTYONHND + a.QTYONORD,            case when a.IncludeAllocations = 1 then a.ATYALLOC else 0 end +  case when a.IncludeBackorders = 1  then a.QTYBKORD else 0 end +  case when a.IncludeRequisitions = 1 then a.QTYRQSTN else 0 end,   a.ReplenishmentLevel,             a.ORDRPNTQTY,                a.ORDRUPTOLVL               from IV00102 a (nolock), IV00101 b (nolock)  where  a.MasterLocationCode >= @I_vLOCNCODE_From and  a.MasterLocationCode <= @I_vLOCNCODE_To and   a.MasterLocationCode <> '' and a.LOCNCODE <> '' and  (b.ITEMNMBR = a.ITEMNMBR and b.ITEMTYPE=1 and b.INACTIVE=0) and  a.ITEMNMBR >= @I_vITEMNMBR_From and  a.ITEMNMBR <= @I_vITEMNMBR_To and a.INACTIVE=0  if (@@error <> 0)  begin  select @O_il_SQL_Return_Status = -99913    return (@O_il_SQL_Return_Status)  end   update #tmpPOGENSub set   QTY_Required =   case  when QTYAVAIL < ORDRPNTQTY  then  case  when ReplenishmentLevel in (1,3)  then ORDRPNTQTY - QTYAVAIL  else   case  when (ORDRUPTOLVL = 0 or ORDRUPTOLVL < ORDRPNTQTY)  then ORDRPNTQTY - QTYAVAIL  else ORDRUPTOLVL - QTYAVAIL  end  end  else 0  end,  QTY_Total_Supplies = QTY_Total_Supplies + QTYONORDERNEWPO  if (@@error <> 0)  begin  select @O_il_SQL_Return_Status = -99914    return (@O_il_SQL_Return_Status)  end   delete #tmpPOGENSub where QTY_Required <= 0  if (@@error <> 0)  begin  select @O_il_SQL_Return_Status = -99915    return (@O_il_SQL_Return_Status)  end   select @cStatement = 'insert ' + @I_vDexTable1 +  '(ITEMNMBR,MasterLocationCode,LOCNCODE,RCRDTYPE,QTY_Required,QTYAVAIL,QTYONHND,QTYONORD,QTYONORDERNEWPO,  ATYALLOC,QTYBKORD,QTYRQSTN,QTY_Total_Supplies, QTY_Total_Requirements,ReplenishmentLevel,ORDRPNTQTY,ORDRUPTOLVL)  select ITEMNMBR,MasterLocationCode,LOCNCODE,RCRDTYPE,QTY_Required,QTYAVAIL,QTYONHND,QTYONORD,QTYONORDERNEWPO,ATYALLOC,  QTYBKORD,QTYRQSTN,QTY_Total_Supplies,QTY_Total_Requirements,ReplenishmentLevel,ORDRPNTQTY,ORDRUPTOLVL  from #tmpPOGENSub order by MasterLocationCode, ITEMNMBR, LOCNCODE'   exec (@cStatement)  if (@@error <> 0)  begin  select @O_il_SQL_Return_Status = -99916    return (@O_il_SQL_Return_Status)  end end  if (not exists(select 1 from tempdb..sysobjects where id = (select object_id('tempdb..#tmpPOGENHeader')))) begin  create table #tmpPOGENHeader   (  ITEMNMBR char(31) NOT NULL,  LOCNCODE char(11) NOT NULL,  ADRSCODE char(15) NOT NULL,  VENDORID char(15) NOT NULL,  CURNCYID char(15) NOT NULL,  QTY_Modified numeric(19,5) NOT NULL,  QTY_Required numeric(19,5) NOT NULL,  QTYToOrderInPurchUofM numeric(19,5) NOT NULL,  BASEUOFM char(9) NOT NULL,  PRCHSUOM char(9) NOT NULL,  QTYBSUOM numeric(19,5) NOT NULL,  UNITCOST numeric(19,5) NOT NULL,  VNDITNUM char(31) NOT NULL,  VNDITDSC char(101) NOT NULL,  VENDNAME char(65) NOT NULL,  POGENINCLUDE tinyint NOT NULL,  FREEONBOARD smallint NOT NULL,  POGENERRORS int NOT NULL,  POGENWARNINGS int NOT NULL,  PLANNINGLEADTIME smallint NOT NULL,  MINORQTY numeric(19,5) NOT NULL,  MAXORDQTY numeric(19,5) NOT NULL,  ITEMDESC char(101) NOT NULL,  ITMGEDSC char(11) NOT NULL,  ITMCLSCD char(11) NOT NULL,  PRMDATE datetime NOT NULL  check ( datepart(hour,PRMDATE) = 0 and  datepart(minute,PRMDATE) = 0 and  datepart(second,PRMDATE) = 0 and  datepart(millisecond,PRMDATE) = 0),  PRMSHPDTE datetime NOT NULL  check ( datepart(hour,PRMSHPDTE) = 0 and  datepart(minute,PRMSHPDTE) = 0 and  datepart(second,PRMSHPDTE) = 0 and  datepart(millisecond,PRMSHPDTE) = 0),  DECPLQTY smallint NOT NULL,  CURRNIDX smallint NOT NULL,  ICURRIDX smallint NOT NULL,  BUYERID char(15) NOT NULL,  UNITCOSTINBSUOFM numeric(19,5) NOT NULL,  QTYAVAIL numeric(19,5) NOT NULL,  QTYONORDERNEWPO numeric(19,5) NOT NULL,  QTYFROMSUB numeric(19,5) NOT NULL,  QTYONHND numeric(19,5) NOT NULL,  QTYONORD numeric(19,5) NOT NULL,  ATYALLOC numeric(19,5) NOT NULL,  QTYBKORD numeric(19,5) NOT NULL,  QTYRQSTN numeric(19,5) NOT NULL,  QTY_Total_Supplies numeric(19,5) NOT NULL,  QTY_Total_Requirements numeric(19,5) NOT NULL,  ReplenishmentLevel smallint NOT NULL,  ECORDQTY numeric(19,5) NOT NULL,  ORDRPNTQTY numeric(19,5) NOT NULL,  ORDRUPTOLVL numeric(19,5) NOT NULL,  DEX_ROW_ID int identity NOT NULL)   create unique index #PKtmpPOGENHeader on #tmpPOGENHeader (ITEMNMBR, LOCNCODE)  create index #tmpPOGENHeader on #tmpPOGENHeader (VENDORID) end if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99917    return (@O_il_SQL_Return_Status) end  truncate table #tmpPOGENHeader  insert #tmpPOGENHeader   (  ITEMNMBR,  LOCNCODE,  ADRSCODE,  VENDORID,  CURNCYID,  QTY_Modified,  QTY_Required,  QTYToOrderInPurchUofM,  BASEUOFM,  PRCHSUOM,  QTYBSUOM,  UNITCOST,  VNDITNUM,  VNDITDSC,  VENDNAME,  POGENINCLUDE,  FREEONBOARD,  POGENERRORS,  POGENWARNINGS,  PLANNINGLEADTIME,  MINORQTY,  MAXORDQTY,  ITEMDESC,  ITMGEDSC,  ITMCLSCD,  PRMDATE,  PRMSHPDTE,  DECPLQTY,  CURRNIDX,  ICURRIDX,  BUYERID,  UNITCOSTINBSUOFM,  QTYAVAIL,  QTYONORDERNEWPO,  QTYFROMSUB,  QTYONHND,  QTYONORD,  ATYALLOC,  QTYBKORD,  QTYRQSTN,  QTY_Total_Supplies,  QTY_Total_Requirements,  ReplenishmentLevel,  ECORDQTY,  ORDRPNTQTY,  ORDRUPTOLVL  )  select  a.ITEMNMBR,                     a.LOCNCODE,                     case                      when f.ADRSCODE = '' or f.ADRSCODE is null  then g.LOCATNID  else f.ADRSCODE  end,  '',                       '',                       0,                       0,                       0,                       isnull(i.BASEUOFM,''),                  '',                       0,                       0,                       '',                       '',                       '',                       1,                       0,                        0,                       0,                       0,                       0,                       0,                        isnull(b.ITEMDESC,''),                  isnull(b.ITMGEDSC,''),                  isnull(b.ITMCLSCD,''),                  '',                       '',                       isnull(b.DECPLQTY,1),                  0,                       0,                        case                      when @I_vBuyerIDSelection = 3  then a.BUYERID  else ''  end,  0,                                     a.QTYONHND + a.QTYONORD  - case when a.IncludeAllocations = 1 then a.ATYALLOC else 0 end  - case when a.IncludeRequisitions = 1 then a.QTYRQSTN else 0 end  - case when a.IncludeBackorders = 1 then a.QTYBKORD else 0 end  + isnull((select (sum(isnull(round(p.QTYORDER * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0))  - sum(isnull(round(p.QTYCANCE * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0)))  from POP10110 p (nolock)  where (p.ITEMNMBR = a.ITEMNMBR and p.LOCNCODE = a.LOCNCODE and p.POLNESTA = 1 and   p.POTYPE in (1,3) and p.LineNumber <> 0 )),0)  - case  when @I_vIncludeSubordinates = 1  then isnull(m.QTY_Required,0)  else 0  end,   isnull((select (sum(isnull(round(p.QTYORDER * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0))  - sum(isnull(round(p.QTYCANCE * case when p.UMQTYINB > 0 then p.UMQTYINB else 1 end,p.DECPLQTY - 1),0)))  from POP10110 p (nolock)  where (p.ITEMNMBR = a.ITEMNMBR and p.LOCNCODE = a.LOCNCODE and p.POLNESTA = 1 and   p.POTYPE in (1,3) and p.LineNumber <> 0 )),0),   isnull(m.QTY_Required,0),                 a.QTYONHND,                     a.QTYONORD,                     case when a.IncludeAllocations = 1 then a.ATYALLOC else 0 end,        case when a.IncludeBackorders = 1  then a.QTYBKORD else 0 end,         case when a.IncludeRequisitions = 1 then a.QTYRQSTN else 0 end,        a.QTYONHND+a.QTYONORD,                   case when a.IncludeAllocations = 1 then a.ATYALLOC else 0 end +  case when a.IncludeBackorders = 1  then a.QTYBKORD else 0 end +  case when a.IncludeRequisitions = 1 then a.QTYRQSTN else 0 end,        a.ReplenishmentLevel,                  0,                       a.ORDRPNTQTY,                    a.ORDRUPTOLVL                    from IV40700 e (nolock)  left outer join  POP40800 f (nolock) on (f.LOCNCODE = e.LOCNCODE),  IV00102 a (nolock)   left outer join  (select ITEMNMBR,MasterLocationCode, sum(QTYONORDERNEWPO) QTYONORDERNEWPO, sum(QTYAVAIL) QTYAVAIL,  sum(QTY_Required) QTY_Required from #tmpPOGENSub (nolock) group by ITEMNMBR,MasterLocationCode) m on   (m.ITEMNMBR = a.ITEMNMBR and m.MasterLocationCode = a.LOCNCODE and m.QTY_Required > 0)  left outer join  IV00101 b (nolock) on (b.ITEMNMBR = a.ITEMNMBR and b.ITEMTYPE=1 and b.INACTIVE=0)  left outer join  IV40201 i (nolock) on (i.UOMSCHDL = b.UOMSCHDL),  DYNAMICS.dbo.SY01500 g (nolock)  where  a.ITEMNMBR >= @I_vITEMNMBR_From and  a.ITEMNMBR <= @I_vITEMNMBR_To and  a.LOCNCODE >= @I_vLOCNCODE_From and  a.LOCNCODE <= @I_vLOCNCODE_To and   upper(a.BUYERID) >= upper(@I_vBUYERID_From) and  upper(a.BUYERID) <= upper(@I_vBUYERID_To) and  b.ITMCLSCD >= @I_vCLASSID_From and  b.ITMCLSCD <= @I_vCLASSID_To and  ((select ITEMTYPE from IV00101 (nolock) where ITEMNMBR = a.ITEMNMBR) = 1) and   a.ORDERPOLICY = 5 and a.POPOrderMethod <> 2 and  (a.LOCNCODE = e.LOCNCODE and a.POPOrderMethod<>2 and e.INACTIVE=0 and a.INACTIVE=0) and   (g.INTERID = DB_NAME()) if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99918    return (@O_il_SQL_Return_Status) end  update #tmpPOGENHeader set   QTY_Required =   case  when QTYAVAIL < ORDRPNTQTY  then  case  when ReplenishmentLevel in (1,3)  then ORDRPNTQTY - QTYAVAIL  else   case  when (ORDRUPTOLVL = 0 or ORDRUPTOLVL < ORDRPNTQTY)  then ORDRPNTQTY - QTYAVAIL  else ORDRUPTOLVL - QTYAVAIL  end  end  else 0  end,  QTY_Total_Supplies = QTY_Total_Supplies + QTYONORDERNEWPO,  POGENWARNINGS =  POGENWARNINGS +  case  when (QTYAVAIL < ORDRPNTQTY and ReplenishmentLevel not in (1,3) and (ORDRUPTOLVL = 0 or ORDRUPTOLVL < ORDRPNTQTY))  then 32   else 0  end if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99919    return (@O_il_SQL_Return_Status) end  delete #tmpPOGENHeader where QTY_Required <= 0 if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99920    return (@O_il_SQL_Return_Status) end  update  a set   a.VENDORID =  case  when (b.POPVendorSelection = 1 or  (@I_vIsMcReg = 0 and   (exists(select Last_Currency_ID from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and Last_Currency_ID <> '' and   Last_Currency_ID <> @FUNLCURR))))  then  case  when b.PRIMVNDR in (select VENDORID from PM00200 (nolock) where VENDSTTS <> 2 and CREDTLMT <> 0)  then isnull(b.PRIMVNDR,'')  else ''  end  when (b.POPVendorSelection = 2 and  (@I_vIsMcReg = 0 and   (exists(select Last_Originating_Cost from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and   Last_Originating_Cost <> 0 and (Last_Currency_ID = '' or Last_Currency_ID = @FUNLCURR)))))   then (select top 1 isnull(VENDORID,'') from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and Last_Originating_Cost <> 0 and  (Last_Currency_ID = '' or Last_Currency_ID = @FUNLCURR and   VENDORID in (select VENDORID from PM00200 (nolock) where VENDSTTS <> 2 and CREDTLMT <> 0))  order by Last_Originating_Cost asc, VENDORID asc)  when (b.POPVendorSelection = 2 and   (@I_vIsMcReg = 1 and   ((select count(Last_Originating_Cost) from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and Last_Originating_Cost <> 0) = 1)))  then (select top 1 isnull(VENDORID,'') from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and Last_Originating_Cost <> 0 and   VENDORID in (select VENDORID from PM00200 (nolock) where VENDSTTS <> 2 and CREDTLMT <> 0)  order by Last_Originating_Cost asc, VENDORID asc)   when (b.POPVendorSelection = 2 and   (@I_vIsMcReg = 1 and   ((select count(distinct(Last_Currency_ID)) from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and Last_Originating_Cost <> 0) = 1)))  then (select top 1 isnull(VENDORID,'') from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and Last_Originating_Cost <> 0 and   VENDORID in (select VENDORID from PM00200 (nolock) where VENDSTTS <> 2 and CREDTLMT <> 0)  order by Last_Originating_Cost asc, VENDORID asc)   when (b.POPVendorSelection = 3 and  exists(select PLANNINGLEADTIME from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and PLANNINGLEADTIME <> 0))  then (select top 1 isnull(VENDORID,'') from IV00103 (nolock) where ITEMNMBR = a.ITEMNMBR and PLANNINGLEADTIME <> 0 and   VENDORID in (select VENDORID from PM00200 (nolock) where VENDSTTS <> 2 and CREDTLMT <> 0) order by PLANNINGLEADTIME asc, VENDORID asc)  else ''  end  from #tmpPOGENHeader a (nolock), IV00102 b (nolock)  where a.ITEMNMBR = b.ITEMNMBR and a.LOCNCODE = b.LOCNCODE and b.RCRDTYPE = 2 if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99921    return (@O_il_SQL_Return_Status) end  if (@I_vIsMcReg = 1) and exists(select top 1 VENDORID from #tmpPOGENHeader (nolock) where VENDORID = '') begin  declare LowestCost INSENSITIVE cursor for select  ITEMNMBR,  LOCNCODE,  BASEUOFM  from #tmpPOGENHeader (nolock)  where VENDORID = ''   open LowestCost  select @iCursorError = @@cursor_rows   if (@iCursorError > 0)  begin  fetch next from LowestCost into  @cITEMNMBR,  @cLOCNCODE,  @cBASEUOFM  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  break  end   if ((select POPVendorSelection from IV00102 (nolock) where ITEMNMBR = @cITEMNMBR and LOCNCODE = @cLOCNCODE and RCRDTYPE = 2) = 2)  begin  if (not exists(select 1 from tempdb..sysobjects where id = (select object_id('tempdb..#VendorCosts'))))  begin  create table #VendorCosts  (  VENDORID char(15),  Last_Originating_Cost numeric(19,5),  FunctionalCost numeric(19,5),  Last_Currency_ID char(15),  ITMVNDTY smallint  )  end  else  begin  truncate table #VendorCosts  end   declare LowCostVendor INSENSITIVE cursor for select  VENDORID,  Last_Originating_Cost,  Last_Currency_ID,  ITMVNDTY  from IV00103 (nolock)  where ITEMNMBR = @cITEMNMBR and Last_Originating_Cost > 0 and   VENDORID between @I_vVENDORID_From and @I_vVENDORID_To and  VENDORID in (select VENDORID from PM00200 (nolock) where VENDSTTS <> 2 and CREDTLMT <> 0)  open LowCostVendor  select @iCursorError = @@cursor_rows   if (@iCursorError > 0)  begin  fetch next from LowCostVendor into  @cVENDORID,  @cLast_Originating_Cost,  @cLast_Currency_ID,  @cITMVNDTY  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = -99922  break  end   if (@cLast_Currency_ID = @FUNLCURR)  begin  insert #VendorCosts  (  VENDORID,  Last_Originating_Cost,  FunctionalCost,  Last_Currency_ID,  ITMVNDTY  )  select  @cVENDORID,  @cLast_Originating_Cost,  @cLast_Originating_Cost,   @cLast_Currency_ID,  @cITMVNDTY  end  else  begin  select @mcFunCost = null  exec @iStatus = MCConvertVendorCost  @I_vVENDORID = @cVENDORID,  @I_vPODate = @I_vPODate,  @I_vOriginatingCost = @cLast_Originating_Cost output,  @I_vOriginatingCurrencyID = @cLast_Currency_ID output,  @I_vFunctionalCost = @mcFunCost output,  @O_iErrorState = @O_iErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = -99923  break  end   if (@mcFunCost > 0)  begin  insert #VendorCosts  (  VENDORID,  Last_Originating_Cost,  FunctionalCost,  Last_Currency_ID,  ITMVNDTY  )  select  @cVENDORID,  @cLast_Originating_Cost,  @mcFunCost,  @cLast_Currency_ID,  @cITMVNDTY  end  end  if (@@error <> 0)  begin  deallocate LowCostVendor  break  end   fetch next from LowCostVendor into  @cVENDORID,  @cLast_Originating_Cost,  @cLast_Currency_ID,  @cITMVNDTY  end   end  deallocate LowCostVendor   select  @cVENDORID = '',  @cLast_Originating_Cost = 0,  @cLast_Currency_ID = '',  @cITMVNDTY = 0   select top 1 @cVENDORID = VENDORID from #VendorCosts (nolock) where FunctionalCost > 0 order by FunctionalCost asc, VENDORID asc   truncate table #VendorCosts   update #tmpPOGENHeader set VENDORID = @cVENDORID  where ITEMNMBR = @cITEMNMBR and  LOCNCODE = @cLOCNCODE and   BASEUOFM = @cBASEUOFM  if (@@error <> 0)  begin  select @O_iErrorState = -99924  deallocate LowestCost  break  end   select @cVENDORID = ''  end   fetch next from LowestCost into  @cITEMNMBR,  @cLOCNCODE,  @cBASEUOFM  end  end   deallocate LowestCost end  if (@O_iErrorState <> 0) begin  select @O_il_SQL_Return_Status = -99925    return (@O_il_SQL_Return_Status) end  update a set  a.VENDORID = isnull(b.PRIMVNDR,''),  a.POGENWARNINGS = a.POGENWARNINGS + 1   from #tmpPOGENHeader a (nolock), IV00102 b (nolock), PM00200 c (nolock)  where a.VENDORID = '' and  b.PRIMVNDR <> '' and  b.PRIMVNDR = c.VENDORID and  a.ITEMNMBR = b.ITEMNMBR and   a.LOCNCODE = b.LOCNCODE and   b.RCRDTYPE = 2 and  c.VENDSTTS <> 2 and  c.CREDTLMT <> 0 if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99926    return (@O_il_SQL_Return_Status) end  update #tmpPOGENHeader set VENDORID = ''  where (VENDORID not between @I_vVENDORID_From and @I_vVENDORID_To and VENDORID <> '') if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99927    return (@O_il_SQL_Return_Status) end  if (@I_vIncludeEmptyVendors = 0) begin  delete #tmpPOGENHeader where VENDORID = ''  if (@@error <> 0)  begin  select @O_il_SQL_Return_Status = -99928    return (@O_il_SQL_Return_Status)  end end  declare FillColumns INSENSITIVE cursor for select  ITEMNMBR,  LOCNCODE,  ADRSCODE,  VENDORID,  QTY_Required,  BASEUOFM,  POGENWARNINGS,  DECPLQTY,  BUYERID,  ReplenishmentLevel  from #tmpPOGENHeader (nolock)  open FillColumns select @iCursorError = @@cursor_rows  if (@iCursorError > 0) begin  fetch next from FillColumns into  @fcITEMNMBR,  @fcLOCNCODE,  @fcADRSCODE,  @fcVENDORID,  @fcQTY_Required,  @fcBASEUOFM,  @fcPOGENWARNINGS,  @fcDECPLQTY,  @fcBUYERID,  @fcReplenishmentLevel  while (@@fetch_status <> -1)  begin   if (@@fetch_status = -2)  begin  select @O_iErrorState = -99929  break  end   select @POGENERRORS = 0,  @VENDNAME = '',  @CURNCYID = '',  @CREDTLMT = 0,  @VENDSTTS = 0,  @VNDITNUM = '',  @VNDITDSC = '',  @PLANNINGLEADTIME = 0,  @ORDERMULTIPLE = 0,  @FREEONBOARD = 0,  @PRCHSUOM = '',  @MINORQTY = 0,  @MAXORDQTY = 0,   @ECORDQTY = 0,  @QTY_Modified = 0,  @CURRNIDX = 0,  @ICURRIDX = 0,  @QTYBSUOM = 0,  @UMPUROPT = 0,  @DecPlaceQtys = 0,  @QTYToOrderInPurchUofM = 0,  @POPVendorSelection = 0,  @PRIMVNDR = '',   @POPPricingSelection = 0,  @PurchasePrice = 0,  @DecPlaceCur = 0,  @Last_Originating_Cost = 0,  @Last_Currency_ID = '',  @UNITCOSTINBSUOFM = 0,  @OriginatingCost = null,   @STNDCOST = 0,  @CURRCOST = 0,  @UNITCOST = 0,  @HOLD = 0,  @CurrencyNeedsValidation = 1   if (@fcVENDORID = '')  begin   select @CURRNIDX = CURRNIDX,  @ICURRIDX = DECPLCUR  from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = ''   select @ICURRIDX = @ICURRIDX + 6,  @QTY_Modified = @fcQTY_Required  end  else   begin  select @VENDNAME = VENDNAME,  @CURNCYID =   case  when @I_vIsMcReg = 0  then ''  when CURNCYID = ''  then @FUNLCURR  else CURNCYID  end,  @CREDTLMT = CREDTLMT,  @VENDSTTS = VENDSTTS,  @HOLD = HOLD  from PM00200 (nolock) where VENDORID = @fcVENDORID   select @VNDITNUM = VNDITNUM,  @VNDITDSC = VNDITDSC,  @PLANNINGLEADTIME = PLANNINGLEADTIME,  @ORDERMULTIPLE = ORDERMULTIPLE,  @FREEONBOARD = FREEONBOARD,  @PRCHSUOM = PRCHSUOM,  @MINORQTY = MINORQTY,  @MAXORDQTY = MAXORDQTY,   @ECORDQTY = ECORDQTY  from IV00103 (nolock) where ITEMNMBR = @fcITEMNMBR and VENDORID = @fcVENDORID   if (@fcReplenishmentLevel = 3) and (@fcQTY_Required < @ECORDQTY)  begin  select @fcQTY_Required = @ECORDQTY  end   if (@ORDERMULTIPLE <> 0)  begin  select @QTY_Modified = round(ceiling(@fcQTY_Required / @ORDERMULTIPLE) * @ORDERMULTIPLE,@fcDECPLQTY - 1)   if (@QTY_Modified < @MINORQTY)  begin  select @QTY_Modified = round((ceiling(@MINORQTY / @ORDERMULTIPLE) * @ORDERMULTIPLE),@fcDECPLQTY - 1)  end   if (@QTY_Modified > @MAXORDQTY) and (@MAXORDQTY > 0)  begin  select @QTY_Modified = round(round(@MAXORDQTY / @ORDERMULTIPLE,0,1) * @ORDERMULTIPLE,@fcDECPLQTY - 1)  end   if (@QTY_Modified < @MINORQTY)  begin  select @QTY_Modified = 0  end  else  begin  if (@QTY_Modified < @fcQTY_Required)  begin  select @QTY_Modified = @QTY_Modified   end  end  end  else  begin  select @QTY_Modified = @fcQTY_Required   if (@QTY_Modified < @MINORQTY)  begin  select @QTY_Modified = @MINORQTY  end   if (@QTY_Modified > @MAXORDQTY) and (@MAXORDQTY > 0) and (@MAXORDQTY >= @MINORQTY)  begin  select @QTY_Modified = @MAXORDQTY  end  end   if (@I_vIsMcReg = 1)  begin  if exists(select 1 from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @CURNCYID)  begin  select @CURRNIDX = CURRNIDX from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @CURNCYID   if (@CURNCYID = @FUNLCURR or @CURNCYID = '')  begin  select @ICURRIDX = (DECPLCUR - 1) + 7 from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @FUNLCURR  end  else   begin   select @ICURRIDX = (((CURRNIDX - 1000) * 6) + 2000 + (DECPLCUR - 1)) from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @CURNCYID  end  end  else   begin   select  @CURRNIDX = CURRNIDX, @ICURRIDX = CURRNIDX from DYNAMICS..MC40200 (nolock) where CURNCYID = @CURNCYID  select @POGENERRORS = @POGENERRORS + 128   end  end  else   begin  select @CURRNIDX = CURRNIDX,  @ICURRIDX = DECPLCUR + 6  from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = ''  end  end   if (@PRCHSUOM = '')  begin  select @PRCHSUOM = PRCHSUOM from IV00101 (nolock) where ITEMNMBR = @fcITEMNMBR   if (@PRCHSUOM = '')  begin  select @PRCHSUOM = @fcBASEUOFM  end  end   select @QTYBSUOM = QTYBSUOM, @UMPUROPT = UMPUROPT from IV00106 (nolock) where ITEMNMBR = @fcITEMNMBR and UOFM = @PRCHSUOM   if (@PRCHSUOM <> '')  begin  if (@QTYBSUOM <> 0)  begin  if (@UMPUROPT = 2)  begin  select @DecPlaceQtys = 0  end  else  begin  select @DecPlaceQtys = @fcDECPLQTY - 1  end  end  else  begin  select @QTYBSUOM = 1  end   select @QTYToOrderInPurchUofM =  case  when ((round((@QTY_Modified / @QTYBSUOM),@DecPlaceQtys) * @QTYBSUOM) >=  @QTY_Modified)  then round((@QTY_Modified / @QTYBSUOM),@DecPlaceQtys)  else round((@QTY_Modified / @QTYBSUOM) + (.5/power(10,@DecPlaceQtys)),@DecPlaceQtys,0)  end   end   select @POPVendorSelection = POPVendorSelection,  @PRIMVNDR = PRIMVNDR,   @POPPricingSelection = POPPricingSelection,  @PurchasePrice = PurchasePrice  from IV00102 (nolock) where ITEMNMBR = @fcITEMNMBR and LOCNCODE = @fcLOCNCODE and LOCNCODE <> ''   if ((@POGENERRORS = 0) and (@fcVENDORID <> '') and exists(select 1 from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @CURNCYID))  begin  if (@I_vIsMcReg = 1)  begin  select @DecPlaceCur = DECPLCUR - 1 from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @CURNCYID  end  else  begin  select @DecPlaceCur = DECPLCUR - 1 from IV00101 (nolock) where ITEMNMBR = @fcITEMNMBR  end   if (@POPPricingSelection = 1)   begin  select @Last_Originating_Cost = Last_Originating_Cost,  @Last_Currency_ID = Last_Currency_ID  from IV00103 (nolock) where ITEMNMBR = @fcITEMNMBR and VENDORID = @fcVENDORID   if (@Last_Originating_Cost <> 0)  begin  if (@I_vIsMcReg = 1)  begin  if (@Last_Currency_ID = '')  begin  select @Last_Currency_ID = @FUNLCURR   end   if (@Last_Currency_ID = @CURNCYID)  begin  select @UNITCOSTINBSUOFM = @Last_Originating_Cost   end  else  begin  if (@Last_Currency_ID = @FUNLCURR)  begin  exec @iStatus = MCConvertVendorCost  @I_vVENDORID = @fcVENDORID,  @I_vPODate = @I_vPODate,  @I_vOriginatingCost = @OriginatingCost output,  @I_vOriginatingCurrencyID = @CURNCYID output,  @I_vFunctionalCost = @Last_Originating_Cost output,  @O_iErrorState = @O_iErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = -99930  break  end   if (@OriginatingCost is null)  begin  select @POGENERRORS = @POGENERRORS + 64   end   select @UNITCOSTINBSUOFM = isnull(@OriginatingCost,0)  select @CurrencyNeedsValidation = 0  end  else  begin  select @UNITCOSTINBSUOFM = 0, @fcPOGENWARNINGS = @fcPOGENWARNINGS + 4   end  end  end  else   begin  if (@Last_Currency_ID <> @FUNLCURR) and (@Last_Currency_ID <> '')  begin  select @UNITCOSTINBSUOFM = 0, @fcPOGENWARNINGS = @fcPOGENWARNINGS + 4   end  else  begin  select @UNITCOSTINBSUOFM = isnull(@Last_Originating_Cost,0)  end  end  end  else   begin  select @UNITCOSTINBSUOFM = 0, @fcPOGENWARNINGS = @fcPOGENWARNINGS + 4   end  end   if (@POPPricingSelection = 2)   begin  select @CURRCOST = CURRCOST from IV00101 (nolock) where ITEMNMBR = @fcITEMNMBR   if (@CURRCOST <> 0)  begin  if (@I_vIsMcReg = 1) and (@CURNCYID <> @FUNLCURR)  begin   exec @iStatus = MCConvertVendorCost  @I_vVENDORID = @fcVENDORID,  @I_vPODate = @I_vPODate,  @I_vOriginatingCost = @OriginatingCost output,  @I_vOriginatingCurrencyID = @CURNCYID output,  @I_vFunctionalCost = @CURRCOST output,  @O_iErrorState = @O_iErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = -99931  break  end   if (@OriginatingCost is null)  begin  select @POGENERRORS = @POGENERRORS + 64   end   select @UNITCOSTINBSUOFM = isnull(@OriginatingCost,0)  select @CurrencyNeedsValidation = 0  end  else  begin  select @UNITCOSTINBSUOFM = isnull(@CURRCOST,0)  end  end  else   begin  select @UNITCOSTINBSUOFM = 0, @fcPOGENWARNINGS = @fcPOGENWARNINGS + 4   end  end   if (@POPPricingSelection = 3)   begin  select @STNDCOST = STNDCOST from IV00101 (nolock) where ITEMNMBR = @fcITEMNMBR   if (@STNDCOST <> 0)  begin  if (@I_vIsMcReg = 1) and (@CURNCYID <> @FUNLCURR)  begin   exec @iStatus = MCConvertVendorCost  @I_vVENDORID = @fcVENDORID,  @I_vPODate = @I_vPODate,  @I_vOriginatingCost = @OriginatingCost output,  @I_vOriginatingCurrencyID = @CURNCYID output,  @I_vFunctionalCost = @STNDCOST output,  @O_iErrorState = @O_iErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = -99932  break  end   if (@OriginatingCost is null)  begin  select @POGENERRORS = @POGENERRORS + 64   end  select @UNITCOSTINBSUOFM = isnull(@OriginatingCost,0)  select @CurrencyNeedsValidation = 0  end  else  begin  select @UNITCOSTINBSUOFM = isnull(@STNDCOST,0)  end  end  else   begin  select @UNITCOSTINBSUOFM = 0, @fcPOGENWARNINGS = @fcPOGENWARNINGS + 4    end  end   if (@POPPricingSelection = 4)   begin   if (@PurchasePrice <> 0)  begin  if (@I_vIsMcReg = 1) and (@CURNCYID <> @FUNLCURR)  begin   exec @iStatus = MCConvertVendorCost  @I_vVENDORID = @fcVENDORID,  @I_vPODate = @I_vPODate,  @I_vOriginatingCost = @OriginatingCost output,  @I_vOriginatingCurrencyID = @CURNCYID output,  @I_vFunctionalCost = @PurchasePrice output,  @O_iErrorState = @O_iErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = -99933  break  end   if (@OriginatingCost is null)  begin  select @POGENERRORS = @POGENERRORS + 64   end  select @UNITCOSTINBSUOFM = isnull(@OriginatingCost,0)  select @CurrencyNeedsValidation = 0  end  else  begin  select @UNITCOSTINBSUOFM = isnull(@PurchasePrice,0)  end  end  else   begin  select @UNITCOSTINBSUOFM = 0, @fcPOGENWARNINGS = @fcPOGENWARNINGS + 4   end  end   select @UNITCOSTINBSUOFM = round(@UNITCOSTINBSUOFM,@DecPlaceCur)   if (@QTYBSUOM in (0,1)) and (@UNITCOSTINBSUOFM <> 0)  begin  select @UNITCOST = @UNITCOSTINBSUOFM  end  else  begin  select @UNITCOST = round(@QTYBSUOM * @UNITCOSTINBSUOFM,@DecPlaceCur)  end  end   if (exists(select ITEMNMBR from IV00101 (nolock) where ITEMNMBR = @fcITEMNMBR) or  exists(select ITEMNMBR from IV00102 (nolock) where ITEMNMBR = @fcITEMNMBR and LOCNCODE = @fcLOCNCODE and @fcLOCNCODE <> ''))  begin  if ((select ITEMTYPE from IV00101 (nolock) where ITEMNMBR = @fcITEMNMBR) <> 1)  begin  select @POGENERRORS = @POGENERRORS + 65536   end  if (not exists(select CMPANYID from SY00600 (nolock) where LOCATNID = @fcADRSCODE and CMPANYID = @CMPANYID))  begin   select @POGENERRORS = @POGENERRORS + 1024   end  if (@fcBUYERID <> '' and @fcBUYERID is not null and  not exists(select BUYERID from POP00101 (nolock) where BUYERID = @fcBUYERID))  begin  select @POGENERRORS = @POGENERRORS + 2048   end  if (@fcVENDORID = '')  begin   select @POGENERRORS = @POGENERRORS + 1   end  else  begin  if not exists(select VENDORID from PM00200 (nolock) where VENDORID = @fcVENDORID)  begin   select @POGENERRORS = @POGENERRORS + 512   end  if exists(select ITEMNMBR from IV00103 (nolock) where ITEMNMBR = @fcITEMNMBR and VENDORID = @fcVENDORID)  begin  select @l_VNDITNUM = VNDITNUM, @l_VNDITDSC = VNDITDSC from IV00103 (nolock) where ITEMNMBR = @fcITEMNMBR and VENDORID = @fcVENDORID  if (@l_VNDITNUM = '')  begin   select @POGENERRORS = @POGENERRORS + 2   end  if ((@VNDITNUM = '') or (@l_VNDITNUM = ''))  begin  select @VNDITNUM = @l_VNDITNUM, @VNDITDSC = @l_VNDITDSC  end  end  else  begin  select @POGENERRORS = @POGENERRORS + 4096   end  if (@HOLD = 1)  begin   select @fcPOGENWARNINGS = @fcPOGENWARNINGS + 2   end  if (@CREDTLMT = 0)  begin  select @POGENERRORS = @POGENERRORS + 16384   end  if (@VENDSTTS = 2)  begin   select @POGENERRORS = @POGENERRORS + 32768   end  if (@QTYToOrderInPurchUofM > 0 and @QTYBSUOM > 0 and (@QTYToOrderInPurchUofM * @QTYBSUOM) < @MINORQTY)  begin   select @fcPOGENWARNINGS = @fcPOGENWARNINGS + 64   end  if ((@MAXORDQTY > 0) and (@MAXORDQTY > @MINORQTY) and ((@QTYToOrderInPurchUofM * @QTYBSUOM) > @MAXORDQTY))  begin   select @fcPOGENWARNINGS = @fcPOGENWARNINGS + 128   end  if ((@I_vIsMcReg = 1) and (@CurrencyNeedsValidation = 1) and (@CURNCYID <> @FUNLCURR) and  exists(select 1 from IV00105 (nolock) where ITEMNMBR = @fcITEMNMBR and CURNCYID = @CURNCYID))  begin  if ((not exists(select 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @CURNCYID)) or  (not exists(select 1 from DYNAMICS..MC60100 (nolock) where CMPANYID = @CMPANYID and CURNCYID = @CURNCYID and INACTIVE = 0)))  begin  select @POGENERRORS = @POGENERRORS + 64    end  else  begin    select @mcFunCost = null  exec @iStatus = MCConvertVendorCost  @I_vVENDORID = @fcVENDORID,  @I_vPODate = @I_vPODate,  @I_vOriginatingCost = @UNITCOSTINBSUOFM output,  @I_vOriginatingCurrencyID = @CURNCYID output,  @I_vFunctionalCost = @mcFunCost output,  @O_iErrorState = @O_iErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = -99934  break  end  if (@mcFunCost is null)   begin  select @POGENERRORS = @POGENERRORS + 64    end  end  end  end  if (@PRCHSUOM = '')  begin   select @POGENERRORS = @POGENERRORS + 4   end  else  begin  if exists(select ITEMNMBR from IV00106 (nolock) where ITEMNMBR = @fcITEMNMBR and UOFM = @PRCHSUOM)   begin  if (@UMPUROPT = 1)  begin   select @POGENERRORS = @POGENERRORS + 256   end  else  begin  if (@QTYBSUOM = 0)  begin   select @POGENERRORS = @POGENERRORS + 8   end  end   if ((@UMPUROPT = 2) and (round(@QTYToOrderInPurchUofM,0,1) <> @QTYToOrderInPurchUofM))  begin  select @POGENERRORS = @POGENERRORS + 8192   end  end  else  begin  select @POGENERRORS = @POGENERRORS + 32   end   if ((@QTYToOrderInPurchUofM * @QTYBSUOM) < @fcQTY_Required)  begin   select @fcPOGENWARNINGS = @fcPOGENWARNINGS + 8   end  if ((@fcVENDORID <> '') and(@fcReplenishmentLevel = 3) and   (((@QTYToOrderInPurchUofM * @QTYBSUOM <> @ECORDQTY) and (@ECORDQTY <> 0)) or  ((@ECORDQTY = 0) and  (select ORDRPNTQTY from IV00102 (nolock) where ITEMNMBR = @fcITEMNMBR and LOCNCODE = @fcLOCNCODE) <> 0)))  begin   select @fcPOGENWARNINGS = @fcPOGENWARNINGS + 16   end  end  if ((@ORDERMULTIPLE > 0 and @fcQTY_Required > 0 and @QTY_Modified = 0))  begin  select @fcPOGENWARNINGS = @fcPOGENWARNINGS + 256   end   end  else  begin   select @POGENERRORS = @POGENERRORS + 16   end   update #tmpPOGENHeader set  CURNCYID = @CURNCYID,         QTY_Modified = @QTY_Modified,       QTY_Required = @fcQTY_Required,       QTYToOrderInPurchUofM = @QTYToOrderInPurchUofM,   PRCHSUOM = @PRCHSUOM,         QTYBSUOM = @QTYBSUOM,         UNITCOST = @UNITCOST,         VNDITNUM = @VNDITNUM,         VNDITDSC = @VNDITDSC,         VENDNAME = @VENDNAME,         FREEONBOARD = @FREEONBOARD,        POGENERRORS = @POGENERRORS,        POGENWARNINGS = @fcPOGENWARNINGS,      PLANNINGLEADTIME = @PLANNINGLEADTIME,     MINORQTY = @MINORQTY,         MAXORDQTY = @MAXORDQTY,         PRMDATE =            case  when @I_vPromisedDateSelection = 1   then @I_vPODate  when @I_vPromisedDateSelection = 2   then dateadd(day,@PLANNINGLEADTIME,@I_vPODate)  else @I_vSpecifiedPromiseDate    end,  PRMSHPDTE =            case  when @I_vPromisedDateSelection = 1  then datediff(day,@I_vSpecifiedShippingDays,@I_vPODate)  when @I_vPromisedDateSelection = 2  then datediff(day,@I_vSpecifiedShippingDays,(dateadd(day,@PLANNINGLEADTIME,@I_vPODate)))  else datediff(day,@I_vSpecifiedShippingDays,@I_vSpecifiedPromiseDate)  end,   CURRNIDX = @CURRNIDX,         ICURRIDX = @ICURRIDX,         UNITCOSTINBSUOFM = @UNITCOSTINBSUOFM,     ECORDQTY = @ECORDQTY,         POGENINCLUDE =           case  when @POGENERRORS > 0 or @fcPOGENWARNINGS > 0  then 0  else 1  end,  BUYERID =  case  when @I_vBuyerIDSelection = 2  then @I_vBuyerID  else BUYERID  end  where ITEMNMBR = @fcITEMNMBR and LOCNCODE = @fcLOCNCODE and ADRSCODE = @fcADRSCODE and VENDORID = @fcVENDORID  if (@@error <> 0)  begin  select @O_iErrorState = -99935  deallocate FillColumns  break  end   fetch next from FillColumns into  @fcITEMNMBR,  @fcLOCNCODE,  @fcADRSCODE,  @fcVENDORID,  @fcQTY_Required,  @fcBASEUOFM,  @fcPOGENWARNINGS,  @fcDECPLQTY,  @fcBUYERID,  @fcReplenishmentLevel  end  end deallocate FillColumns  if (@O_iErrorState <> 0) begin  select @O_il_SQL_Return_Status = -99936    return (@O_il_SQL_Return_Status) end  select @cStatement = '' select @cStatement = 'insert ' + @I_vDexTable2 +  '(ITEMNMBR,LOCNCODE,ADRSCODE,VENDORID,CURNCYID,QTY_Modified,QTY_Required,QTYToOrderInPurchUofM,BASEUOFM,PRCHSUOM,QTYBSUOM, UNITCOST,VNDITNUM,VNDITDSC,VENDNAME,POGENINCLUDE,FREEONBOARD,POGENERRORS,POGENWARNINGS,PLANNINGLEADTIME,MINORQTY,MAXORDQTY, ITEMDESC,ITMGEDSC,ITMCLSCD,PRMDATE,PRMSHPDTE,DECPLQTY,CURRNIDX,ICURRIDX,BUYERID,UNITCOSTINBSUOFM,QTYAVAIL,QTYONORDERNEWPO, QTYFROMSUB,QTYONHND,QTYONORD,ATYALLOC,QTYBKORD,QTYRQSTN,QTY_Total_Supplies,QTY_Total_Requirements,ReplenishmentLevel,ECORDQTY, ORDRPNTQTY,ORDRUPTOLVL)select ITEMNMBR,LOCNCODE,ADRSCODE,VENDORID,CURNCYID,QTY_Modified,QTY_Required,QTYToOrderInPurchUofM, BASEUOFM,PRCHSUOM,QTYBSUOM,UNITCOST,VNDITNUM,VNDITDSC,VENDNAME,POGENINCLUDE,FREEONBOARD,POGENERRORS,POGENWARNINGS,PLANNINGLEADTIME, MINORQTY,MAXORDQTY,ITEMDESC,ITMGEDSC,ITMCLSCD,PRMDATE,PRMSHPDTE,DECPLQTY,CURRNIDX,ICURRIDX,BUYERID,UNITCOSTINBSUOFM,QTYAVAIL, QTYONORDERNEWPO,QTYFROMSUB,QTYONHND,QTYONORD,ATYALLOC,QTYBKORD,QTYRQSTN,QTY_Total_Supplies,QTY_Total_Requirements,ReplenishmentLevel, ECORDQTY,ORDRPNTQTY,ORDRUPTOLVL from #tmpPOGENHeader order by LOCNCODE,ITEMNMBR'  exec (@cStatement) if (@@error <> 0) begin  select @O_il_SQL_Return_Status = -99937    return (@O_il_SQL_Return_Status) end    
GO
GRANT EXECUTE ON  [dbo].[popGenSuggestedPOs] TO [DYNGRP]
GO
