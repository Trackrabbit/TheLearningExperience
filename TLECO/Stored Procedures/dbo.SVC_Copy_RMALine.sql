SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Copy_RMALine] (@RETDOCID char(16), @RecType smallint, @Line numeric(19,5), @DeleteQTY tinyint, @CMPNTSEQ int =0)  AS  declare @NewLine numeric(19,5) declare @OldNoteIndex numeric(19,5) declare @NewNoteIndex numeric(19,5) declare @RMAStatus smallint declare @ReturnStatus char(3), @RetType char(11) declare @Received tinyint declare @USERID char(15) declare @MinDate datetime declare @QtyInBase numeric(19,5),@item varchar(31),@UOM char(10), @Qty numeric(19,5), @TransferQtyInBase numeric(19,5) declare @UnitCost numeric(19,5),@UnitPrice numeric(19,5), @Return_Qty numeric(19,5) declare @OrigUnitCost numeric(19,5),@OrigUnitPrice numeric(19,5)  declare @Description char(100) declare @New_Return_Qty numeric(19,5), @SerialSeq int declare @TransferNumber char(15), @TransferLine int, @NewTransferLine int,  @Location char(11),@ToLocation char(11), @ViaLocation char(11) declare @IVIndex integer, @OffsetIndex integer, @newIVIndex integer, @newOffsetIndex integer declare @SerialNumber char(21) declare @Sequence int, @BinQty numeric(19,5), @ReturnBinQty numeric(19,5) declare @BinDone tinyint declare @Tracking smallint declare @QtyType smallint,@QTYONHND numeric(19,5), @QTYRTRND numeric(19,5), @QTYINUSE numeric(19,5), @QTYINSVC numeric(19,5), @QTYDMGED numeric(19,5)  select @USERID = SYSTEM_USER exec smGetMinDate @MinDate output select @RetType = RETTYPE, @OldNoteIndex = NOTEINDX, @New_Return_Qty = 0,  @TransferNumber = ORDDOCID, @TransferLine = TRANSLINESEQ from SVC05200 WITH (NOLOCK) where   RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and svcRMAComponentSeq = @CMPNTSEQ select @ReturnStatus = RETSTAT, @QtyType = QTYTYPE from SVC05501 WITH (NOLOCK) where RETTYPE = @RetType select @UOM = Return_U_Of_M, @Qty = QUANTITY-Return_QTY, @Return_Qty = Return_QTY from SVC05015 WITH (NOLOCK)   where RETDOCID = @RETDOCID and LNSEQNBR = @Line and USERID = @USERID   select @QTYONHND=0,@QTYRTRND=0,@QTYINUSE=0,@QTYINSVC=0,@QTYDMGED = 0  if @QtyType = 1 select @QTYONHND = @Qty   else if @QtyType = 2 select @QTYRTRND = @Qty  else if @QtyType = 3 select @QTYINUSE = @Qty  else if @QtyType = 4 select @QTYINSVC = @Qty  else select @QTYDMGED = @Qty  if @DeleteQTY = 0  Begin  if @OldNoteIndex > 0  exec SVC_Copy_Note @OldNoteIndex, @NewNoteIndex output  else  exec SVC_Get_Next_Note_Index @NewNoteIndex output  select @Received = 0, @RMAStatus = 0  select @NewLine = isnull(Max(LNSEQNBR),0) + 100 from SVC05200 WITH (NOLOCK) where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and svcRMAComponentSeq = @CMPNTSEQ  insert into SVC05200 with (rowlock) select   @RETDOCID, 1, @NewLine, 0,@Line,   RETTYPE, @RMAStatus, @ReturnStatus, @Received, 0, 0,   SVC_RMA_Reason_Code, SVC_RMA_Reason_Code_Desc, @NewNoteIndex, RETORIG, RETREF,   SRVRECTYPE, CALLNBR, EQPLINE, LNITMSEQ,  SVC_RMA_From_Service, SOPTYPE, SOPNUMBE, CMPNTSEQ,SOP_Line_Item_Sequence,   CONVERT(char(10),GETDATE(),102) + ' 00:00:00' ,   @MinDate + CONVERT(char(5),GETDATE(),108),  @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate,  PRMDATE, REFRENCE, @USERID, OFFID,   LOCNCODE,RTRNNAME, RETADDR1, RETADDR2, RETADDR3, RTRNCITY,SVC_Return_State, RTRNZIP,Return_Country,  CUSTNMBR, CUSTNAME, ADRSCODE, CONTACT, ADDRESS1,ADDRESS2, ADDRESS3, CITY, STATE, ZIPCODE,COUNTRY,   Bill_To_Customer, SVC_Bill_To_Address_Code, CSTPONBR, @Qty, DECPLQTY, @UOM,ITEMNMBR,ITEMDESC,  UNITCOST, ORUNTCST, UNITCOST * @Qty, ORUNTCST * @Qty, UNITPRCE, ORUNTPRC,  UNITPRCE * @Qty, ORUNTPRC * @Qty, CUSTOWN,  FACTSEAL,  ORDDOCID, TRANSLINESEQ, STATUS, Flat_Rate_Repair_Price, Orig_Flat_RepairPrice,  Repair_Price, Originating_Repair_Price, NTE_Price, Originating_NTE_Price, Repair_Cost, Originating_Repair_Cost,  Bill_of_Lading, SHIPMTHD, 0, '', 0,   Replace_SOP_Type, Replace_SOP_Number, Replace_SOP_Line_Item_Se,   Location_Code_Replacemen, Replace_Item_Number,  @UOM, Replace_Price_Level, @Qty, Replace_Cost, Originating_Replace_Cost, Replace_Price,  Originating_Replace_Pric, '', Item_Number_Invoice,   USERDEF1, USERDEF2, USRDEF03, USRDEF04, USRDEF05, CURRNIDX, DECPLCUR, ODECPLCU,   Return_Item_Number, Return_Item_Description, Return_Location_Code, @New_Return_Qty, @UOM, RETCOST,  Originating_Return_Cost, RETCOST * @New_Return_Qty, Originating_Return_Cost * @New_Return_Qty,   SVC_Return_Price_Level, SVC_Return_Price, Originating_Return_Price,   SVC_Return_Price * @New_Return_Qty, Originating_Return_Price * @New_Return_Qty, '', 0  ,svcRMAKitComponentFrom, svcRMAComponentSeq, CMPITQTY,  @QTYONHND,@QTYRTRND,@QTYINUSE,@QTYINSVC,@QTYDMGED,0,0  from SVC05200  where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and svcRMAComponentSeq = @CMPNTSEQ   update SVC05200 with (rowlock) set SVC_Next_Line_SEQ_Number = @NewLine where  RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and svcRMAComponentSeq = @CMPNTSEQ  select @item = ITEMNMBR,@Qty = QUANTITY, @UOM = UOFM,@UnitCost=UNITCOST,@UnitPrice = UNITPRCE,  @OrigUnitCost = ORUNTCST,@OrigUnitPrice = ORUNTPRC  from SVC05200 WITH (NOLOCK) where Return_Record_Type = 1 and RETDOCID = @RETDOCID and LNSEQNBR = @NewLine and svcRMAComponentSeq = @CMPNTSEQ  if @TransferNumber > ''   begin  exec SVC_Get_Next_Transfer_Line @TransferNumber, @NewTransferLine output  select @IVIndex = IVIVINDX, @OffsetIndex = IVIVINDX from IV00101 where ITEMNMBR = @item  select @ToLocation = LOCNCODE, @ViaLocation = ITLOCN, @Location = TRNSFLOC from SVC00700 where ORDDOCID = @TransferNumber  set @TransferQtyInBase = 0  exec SVC_Get_QtyInBase @item, @UOM, @Qty, @TransferQtyInBase OUTPUT  insert into SVC00701   (ORDDOCID,  LNITMSEQ,  STATUS,  ITEMNMBR,  DSCRIPTN,  UOFM,  TRNSFQTY,  QTYFULFI,  QTYSHPPD,  QTY_To_Receive,  QTYRECVD,  CALLNBR,  SRVRECTYPE,  SERVLITEMSEQ,  EQPLINE,  LINITMTYP,  RETDOCID,  LNSEQNBR,  RTV_Number,  WORECTYPE,  WORKORDNUM,  QTYBSUOM,  TRNSFLOC,  ITLOCN,  TRNSTLOC,  TRFQTYTY,  TRTQTYTY,  DECPLCUR,  DECPLQTY,  Landed_Cost_Group_ID)   select  ORDDOCID,  @NewTransferLine,  1,  ITEMNMBR,  DSCRIPTN,  UOFM,  @Qty,  @Qty,  0,  0,  0,  CALLNBR,  SRVRECTYPE,  SERVLITEMSEQ,  EQPLINE,  LINITMTYP,  RETDOCID,  @NewLine,   RTV_Number,  WORECTYPE,  WORKORDNUM,  @TransferQtyInBase,   @Location,  @ViaLocation,  @ToLocation,  1,   1,   DECPLCUR,  DECPLQTY,  Landed_Cost_Group_ID  from SVC00701  where ORDDOCID = @TransferNumber and LNITMSEQ=@TransferLine   if @IVIndex = 0 or @IVIndex is null  select @IVIndex = ACTINDX from SY01100 where SERIES=5 and SEQNUMBR = 100  if @OffsetIndex = 0 or @OffsetIndex is null  select @OffsetIndex = ACTINDX from SY01100 where SERIES=5 and SEQNUMBR = 100  exec SVC_LocationSegmentReplace @IVIndex, @Location, @newIVIndex output   exec SVC_LocationSegmentReplace @OffsetIndex, @ToLocation, @newOffsetIndex output   exec SVC_Get_QtyInBase @item,@UOM,1,@QtyInBase OUTPUT  select @UnitCost = @UnitCost * @Qty * @QtyInBase  select @OrigUnitCost = @OrigUnitCost * @Qty * @QtyInBase  exec SVC_Set_Transfer_Line_Dist @TransferNumber,@NewTransferLine,@newIVIndex,@newOffsetIndex,@UnitCost,@OrigUnitCost,0  update SVC05200 with (rowlock) set TRANSLINESEQ = @NewTransferLine where  RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @NewLine and svcRMAComponentSeq = @CMPNTSEQ  if exists(select * from SVC00712 where ORDDOCID = @TransferNumber and LNITMSEQ=@TransferLine)   begin  select @ReturnBinQty = @Return_Qty, @BinDone = 0  declare XBin_record cursor for select SEQNUMBR, QUANTITY from SVC00712 where  ORDDOCID = @TransferNumber and LNITMSEQ = @TransferLine  open XBin_record   fetch next from XBin_record into @Sequence, @BinQty  while @@FETCH_STATUS = 0  begin  if @BinDone = 0  Begin  if @BinQty > @ReturnBinQty  begin  update SVC00712 set QUANTITY = @ReturnBinQty where ORDDOCID = @TransferNumber and  LNITMSEQ = @TransferLine and SEQNUMBR = @Sequence  insert into SVC00712 select  ORDDOCID, @NewTransferLine, SEQNUMBR,ITEMNMBR, TRNSFLOC, LOCNCODE, BIN, TOBIN, QTYTYPE, (@BinQty - @ReturnBinQty),0  from SVC00712 where ORDDOCID = @TransferNumber and LNITMSEQ = @TransferLine and SEQNUMBR = @Sequence  insert into SVC05212 select Return_Record_Type, RETDOCID, @NewLine, SEQNUMBR,ITEMNMBR,  LOCNCODE, BIN, QTYTYPE, (@BinQty - @ReturnBinQty) ,0,CMPNTSEQ from SVC05212 where  RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and CMPNTSEQ = @CMPNTSEQ  select @BinDone = 1  end  else if @BinQty = @ReturnBinQty  select @BinDone = 1  else if @BinQty < @ReturnBinQty   select @ReturnBinQty = @ReturnBinQty - @BinQty  End  else   Begin  update SVC00712 set LNITMSEQ = @NewTransferLine where ORDDOCID = @TransferNumber and  LNITMSEQ = @TransferLine and SEQNUMBR = @Sequence  End  fetch next from XBin_record into @Sequence, @BinQty  end   deallocate XBin_record  end   end    select @Tracking = ITMTRKOP from IV00101  where ITEMNMBR = @item  if @Tracking = 3  begin   select @ReturnBinQty = @Return_Qty, @BinDone = 0    declare Lot_Line cursor for select SERLTQTY, SLTSQNUM, Return_Serial_Number from SVC05255 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line  open Lot_Line   fetch next from Lot_Line into @BinQty, @SerialSeq, @SerialNumber  while @@FETCH_STATUS = 0  Begin   if @BinDone = 0  begin  if @BinQty > @ReturnBinQty  begin  update SVC05255 set SERLTQTY = @ReturnBinQty where RETDOCID = @RETDOCID and Return_Record_Type = @RecType  and LNSEQNBR = @Line and SLTSQNUM = @SerialSeq and CMPNTSEQ = @CMPNTSEQ  insert SVC05255 select @RecType, @RETDOCID, @NewLine, 1, (@BinQty - @ReturnBinQty),   Return_Item_Number, Return_Serial_Number, Return_Equipment_ID, @SerialSeq, BIN, RETCOST,  SVC_Original_Serial, DATERECD, DTSEQNUM, TRXSORCE, 0, 0,MFGDATE,EXPNDATE, CMPNTSEQ from  SVC05255 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and SLTSQNUM = @SerialSeq and CMPNTSEQ = @CMPNTSEQ  select @BinDone = 1  if @TransferNumber > ''  begin  update SVC00702 set SERLTQTY = @ReturnBinQty   where ORDDOCID = @TransferNumber and TRANSLINESEQ = @TransferLine and SLTSQNUM = @SerialSeq and SERLTNUM = @SerialNumber  insert SVC00702 select ORDDOCID, @NewTransferLine, SRVRECTYPE, CALLNBR, EQPLINE, LINITMTYP, LNITMSEQ,QTYTYPE,  SERLTNUM, (@BinQty - @ReturnBinQty), SLTSQNUM, DATERECD, DTSEQNUM,  UNITCOST,  ITEMNMBR,  TRXSORCE, POSTED, OVRSERLT, STATUS, FROMBIN, TOBIN,MFGDATE,EXPNDATE from  SVC00702 where ORDDOCID = @TransferNumber and TRANSLINESEQ = @TransferLine and SLTSQNUM = @SerialSeq and SERLTNUM = @SerialNumber  end   end  else if @BinQty = @ReturnBinQty  select @BinDone = 1  else if @BinQty < @ReturnBinQty   select @ReturnBinQty = @ReturnBinQty - @BinQty  end  else   begin  update SVC05255 set LNSEQNBR = @NewLine, MARKED = 0 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType  and LNSEQNBR = @Line and SLTSQNUM = @SerialSeq and CMPNTSEQ = @CMPNTSEQ  if @TransferNumber > ''  begin  update SVC00702 with (rowlock) set TRANSLINESEQ = @NewTransferLine  where ORDDOCID = @TransferNumber and TRANSLINESEQ = @TransferLine and SLTSQNUM = @SerialSeq and SERLTNUM = @SerialNumber  end  end  fetch next from Lot_Line into @BinQty, @SerialSeq, @SerialNumber  End  deallocate Lot_Line   end   if exists(select * from SVC05255 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and MARKED = 0 and CMPNTSEQ = @CMPNTSEQ)  begin  update SVC05255 with (rowlock) set LNSEQNBR = @NewLine where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and MARKED = 0  if @TransferNumber > ''  Begin  declare Process_Line cursor for select SLTSQNUM, Return_Serial_Number  from SVC05255 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @NewLine and CMPNTSEQ = @CMPNTSEQ  open Process_Line   fetch next from Process_Line into @SerialSeq, @SerialNumber  while @@FETCH_STATUS = 0  Begin  update SVC00702 with (rowlock) set TRANSLINESEQ = @NewTransferLine  where ORDDOCID = @TransferNumber and TRANSLINESEQ=@TransferLine and SERLTNUM = @SerialNumber  fetch next from Process_Line into @SerialSeq, @SerialNumber  End  deallocate Process_Line   End  delete from SVC05210 with (rowlock) where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and SVC_Document_Number = ''  end  else  update SVC05210 with (rowlock) set Return_QTY = @Return_Qty, SVC_Process_QTY = @Return_Qty where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and CMPNTSEQ = @CMPNTSEQ and SVC_Document_Number = ''   exec SVC_Get_QtyInBase @item,@UOM,1,@QtyInBase OUTPUT  select @UnitPrice = @UnitPrice * @Qty * @QtyInBase  select @UnitCost = @UnitCost * @Qty * @QtyInBase  select @OrigUnitPrice = @OrigUnitPrice * @Qty * @QtyInBase  select @OrigUnitCost = @OrigUnitCost * @Qty * @QtyInBase  select @Description = 'New RMA Line for ' + @RETDOCID + ' - ' + @item  exec SVC_Create_RMA_Audit @RETDOCID, @NewLine, '', @ReturnStatus, @Description , @USERID  exec SVC_Set_RMA_Dist @RETDOCID,1,@NewLine,0,'',0,@UnitPrice,@OrigUnitPrice, @UnitCost,@OrigUnitCost,1,0 End else Begin   if exists(select * from SVC05255 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and CMPNTSEQ = @CMPNTSEQ and MARKED = 0)  begin  delete from SVC05255 with (rowlock) where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and CMPNTSEQ = @CMPNTSEQ and MARKED = 0  delete from SVC05210 where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and CMPNTSEQ = @CMPNTSEQ and SVC_Document_Number = ''  end  else  update SVC05210 with (rowlock) set Return_QTY = @Return_Qty, SVC_Process_QTY = @Return_Qty where RETDOCID = @RETDOCID and Return_Record_Type = @RecType and LNSEQNBR = @Line and CMPNTSEQ = @CMPNTSEQ and SVC_Document_Number = '' End  return   
GO
GRANT EXECUTE ON  [dbo].[SVC_Copy_RMALine] TO [DYNGRP]
GO
