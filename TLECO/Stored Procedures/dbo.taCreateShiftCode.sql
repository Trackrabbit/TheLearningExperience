SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taCreateShiftCode] @I_vSHFTCODE char(6),    @I_vDSCRIPTN char(30),    @I_vSHFTTYPE smallint = 0,   @I_vSHFTAMT numeric(19,5) = 0,   @I_vSHFTPCT numeric(19,5) = 0,   @I_vINACTIVE tinyint = 0,   @I_vUpdateIfExists tinyint = 1,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',       @I_vUSRDEFND2 char(50) = '',       @I_vUSRDEFND3 char(50) = '',       @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @sCompanyID int,  @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @nNextNoteIndex numeric(19,5),    @iGetNextNoteIdxErrState int,    @iAddCodeErrState int,  @O_oErrorState int,  @iError int      select  @O_iErrorState = 0,     @sCompanyID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taCreateShiftCodePre  @I_vSHFTCODE output,  @I_vDSCRIPTN output,  @I_vSHFTTYPE output,  @I_vSHFTAMT output,  @I_vSHFTPCT output,  @I_vINACTIVE output,  @I_vUpdateIfExists output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3927    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vSHFTCODE is NULL or  @I_vDSCRIPTN is NULL or  @I_vSHFTTYPE is NULL or  @I_vSHFTAMT is NULL or  @I_vSHFTPCT is NULL or  @I_vINACTIVE is NULL or  @I_vUpdateIfExists is NULL or  @I_vRequesterTrx is NULL or  @I_vUSRDEFND1 is NULL or  @I_vUSRDEFND2 is NULL or  @I_vUSRDEFND3 is NULL or  @I_vUSRDEFND4 is NULL or  @I_vUSRDEFND5 is NULL  ) begin  select @O_iErrorState = 3928    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  select @I_vSHFTCODE = UPPER(@I_vSHFTCODE)  if ( @I_vSHFTCODE = '' ) begin  select @O_iErrorState = 3929    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vDSCRIPTN = '' ) begin  select @O_iErrorState = 3930    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vSHFTTYPE < 0 or @I_vSHFTTYPE > 1 ) begin  select @O_iErrorState = 3931     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vSHFTTYPE = 0 and @I_vSHFTPCT <> 0) begin  select @O_iErrorState = 3932     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vSHFTTYPE = 1 and @I_vSHFTAMT <> 0) begin  select @O_iErrorState = 3933     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vINACTIVE < 0 or @I_vINACTIVE > 1 ) begin  select @O_iErrorState = 3934     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vUpdateIfExists < 0 or @I_vUpdateIfExists > 1)  begin  select @O_iErrorState = 3673     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vRequesterTrx < 0 or @I_vRequesterTrx > 1)  begin  select @O_iErrorState = 3674     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if @O_iErrorState <> 0  return (@O_iErrorState)  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @nNextNoteIndex output,  @O_iErrorState  = @iGetNextNoteIdxErrState output select @iError = @@error if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iGetNextNoteIdxErrState))  select @O_iErrorState = 3935   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  begin  if not exists( select 1 from UPR41500 (nolock) where SHFTCODE = @I_vSHFTCODE )  begin  insert UPR41500 (  SHFTCODE,  DSCRIPTN,  SHFTTYPE,  SHFTAMT,  SHFTPCT,  INACTIVE,  NOTEINDX  )  select  @I_vSHFTCODE,    @I_vDSCRIPTN,    @I_vSHFTTYPE,    @I_vSHFTAMT,    @I_vSHFTPCT,    @I_vINACTIVE,    @nNextNoteIndex    if @@error <> 0  begin  select @O_iErrorState = 3936    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end  else  if ( @I_vUpdateIfExists = 1 )  begin  update UPR41500   set DSCRIPTN =  case  WHEN @I_vDSCRIPTN = ''  THEN DSCRIPTN  ELSE @I_vDSCRIPTN  end,  SHFTTYPE = @I_vSHFTTYPE,  SHFTAMT =  case  WHEN @I_vSHFTTYPE = 1  THEN 0  ELSE @I_vSHFTAMT  end,  SHFTPCT =  case  WHEN @I_vSHFTTYPE = 0  THEN 0  ELSE @I_vSHFTPCT  end,  INACTIVE =  @I_vINACTIVE  where  SHFTCODE = @I_vSHFTCODE  if @@error <> 0  begin  select @O_iErrorState = 3937    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end end  exec @iStatus = taCreateShiftCodePost  @I_vSHFTCODE,  @I_vDSCRIPTN,  @I_vSHFTTYPE,  @I_vSHFTAMT,  @I_vSHFTPCT,  @I_vINACTIVE,  @I_vUpdateIfExists,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3938    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taCreateShiftCode] TO [DYNGRP]
GO
