SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taCreatePayrollBatchHeaderInsert]  @I_vBACHNUMB char(15),    @I_vUPRBCHOR smallint=2,   @I_vBCHCOMNT char(60)='',   @I_vUPRBCHFR smallint=1,    @I_vPOSTEDDT datetime='',   @I_vCNTRLTRX int=0,    @I_vCTRLEMPCT smallint=0,   @I_vUpdateIfExists smallint=1,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',       @I_vUSRDEFND2 char(50) = '',       @I_vUSRDEFND3 char(50) = '',       @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @sCompanyID int,  @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @nNextNoteIndex numeric(19,5),    @iGetNextNoteIdxErrState int,    @iAddCodeErrState int,  @O_oErrorState int,  @iError int      select  @O_iErrorState = 0,     @nNextNoteIndex = 0,  @sCompanyID = CMPANYID from DYNAMICS..SY01500 where INTERID = db_name()  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taCreatePayrollBatchHeaderInsertPre  @I_vBACHNUMB output,  @I_vUPRBCHOR output,  @I_vBCHCOMNT output,  @I_vUPRBCHFR output,  @I_vPOSTEDDT output,  @I_vCNTRLTRX output,  @I_vCTRLEMPCT output,  @I_vUpdateIfExists output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 2988    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vBACHNUMB is NULL or  @I_vUPRBCHOR is NULL or  @I_vBCHCOMNT is NULL or  @I_vUPRBCHFR is NULL or  @I_vPOSTEDDT is NULL or  @I_vCNTRLTRX is NULL or  @I_vCTRLEMPCT is NULL or  @I_vUpdateIfExists is NULL or  @I_vRequesterTrx is NULL or  @I_vUSRDEFND1 is NULL or  @I_vUSRDEFND2 is NULL or  @I_vUSRDEFND3 is NULL or  @I_vUSRDEFND4 is NULL or  @I_vUSRDEFND5 is NULL  ) begin  select @O_iErrorState = 2989    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  select @I_vBACHNUMB = UPPER(@I_vBACHNUMB)  if ( @I_vBACHNUMB = '' ) begin  select @O_iErrorState = 2990    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vUPRBCHOR < 1 or @I_vUPRBCHOR > 2 ) begin  select @O_iErrorState = 2991     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vUPRBCHFR < 1 or @I_vUPRBCHFR > 9 ) begin  select @O_iErrorState = 2992     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vCNTRLTRX < 0 )  begin  select @O_iErrorState = 4305     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vCTRLEMPCT < 0 )  begin  select @O_iErrorState = 3531     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vUpdateIfExists < 0 or @I_vUpdateIfExists > 1 ) begin  select @O_iErrorState = 2998     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vRequesterTrx < 0 or @I_vRequesterTrx > 1 ) begin  select @O_iErrorState = 2993     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if @O_iErrorState <> 0  return (@O_iErrorState)  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @nNextNoteIndex output,  @O_iErrorState  = @iGetNextNoteIdxErrState output select @iError = @@error if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iGetNextNoteIdxErrState))  select @O_iErrorState = 2994   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  begin  if not exists( select 1 from UPR10301 (nolock) where BACHNUMB = @I_vBACHNUMB and UPRBCHOR = @I_vUPRBCHOR )  begin  insert UPR10301 (  BACHNUMB,  UPRBCHOR,  BCHCOMNT,  UPRBCHFR,  POSTEDDT,  UPRBCHMK,  MKDBYUSR,  MSCBDINC,  RECPSTGS,  RCLPSTDT,  NOFPSTGS,  CNTRLTRX,  CTRLEMPCT,  APPROVL,  APPRVLDT,  APRVLUSERID,  NOTEINDX  )  select  @I_vBACHNUMB,    @I_vUPRBCHOR,    @I_vBCHCOMNT,    @I_vUPRBCHFR,    case     WHEN @I_vPOSTEDDT = ''  THEN convert(varchar(12),getdate())  ELSE @I_vPOSTEDDT  end,  0,     '',     0,     0,     '',     0,     @I_vCNTRLTRX,    @I_vCTRLEMPCT,    0,     '',     '',     @nNextNoteIndex    if @@error <> 0  begin  select @O_iErrorState = 2995    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end  else  if ( @I_vUpdateIfExists = 1 )  begin  update UPR10301 set  BCHCOMNT =  case  WHEN @I_vBCHCOMNT = ''  THEN BCHCOMNT  ELSE @I_vBCHCOMNT  end,  CTRLEMPCT =  case  WHEN @I_vCTRLEMPCT is not null  THEN @I_vCTRLEMPCT  ELSE CTRLEMPCT  end,  CNTRLTRX =  case  WHEN @I_vCNTRLTRX is not null  THEN @I_vCNTRLTRX  ELSE CNTRLTRX  end  where  BACHNUMB = @I_vBACHNUMB and UPRBCHOR = @I_vUPRBCHOR  if @@error <> 0  begin  select @O_iErrorState = 2996    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end end  exec @iStatus = taCreatePayrollBatchHeaderInsertPost  @I_vBACHNUMB,  @I_vUPRBCHOR,  @I_vBCHCOMNT,  @I_vUPRBCHFR,  @I_vPOSTEDDT,  @I_vCNTRLTRX,  @I_vCTRLEMPCT,  @I_vUpdateIfExists,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 2997    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taCreatePayrollBatchHeaderInsert] TO [DYNGRP]
GO
