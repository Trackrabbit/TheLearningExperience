SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[aagCopyaaCodesforSOP]  @DOCTYPE SMALLINT,  @DOCNUMBR CHAR(21),  @OLDDOCTYPE SMALLINT,  @OLDDOCNUMBR CHAR(21),  @CompanyID SMALLINT,  @OutStatus SMALLINT OUTPUT AS  BEGIN  DECLARE   @SERIES SMALLINT,  @OLDSERIES SMALLINT ,  @NEWaaSubLedgerHdrID INT,  @NEWSubLedgerDistID INT,  @NEWSubLedgerDistID1 INT,  @OLDaaSubLedgerDistID INT,  @NEWSubLedgerAssignID2 INT,  @aaSubLedgerAssignID2 INT,  @OLDaaSubLedgerHdrID INT,  @AssignID INT,  @AssignPercent INT,  @DEBITAMT NUMERIC(19,7),  @CRDTAMNT NUMERIC(19,7),  @ORDBTAMT NUMERIC(19,7),  @ORCRDAMT NUMERIC(19,7),  @INVRETDEBITAMT   NUMERIC(19,7),  @INVRETCRDTAMT NUMERIC(19,7),  @ORGINVRETDEBITAMT NUMERIC(19,7),  @ORGINVRETCRDTAMT NUMERIC(19,7),  @CUSTNMBR CHAR(15),  @TRXSORCE CHAR(15),  @ClassID INT,  @SEQNUMBR INT,  @ACCTTYPE SMALLINT,  @CURNCYID1 CHAR(15),  @SEQNUMBR1 INT,  @DECPLCUR SMALLINT,  @DISTTYPE SMALLINT,  @ACTINDX INT,  @CURRNIDX SMALLINT,  @RATETPID CHAR(15),  @EXGTBLID CHAR(15),  @XCHGRATE NUMERIC(19,7),  @EXCHDATE DATETIME,  @TIME1 DATETIME ,   @RTCLCMTD SMALLINT,  @DENXRATE NUMERIC(19,7),  @MCTRXSTT SMALLINT,  @CURNCYID CHAR(15),  @GLPOSTDT DATETIME,   @aaBrowseTypeNew SMALLINT,  @oRequiredFieldEmpty TINYINT,  @aaSubLedgerAssignID3 INT,  @NEWSubLedgerAssignID3 INT,  @TotAssignCRDTAmnt NUMERIC(19,7),  @TotAssignORGCRDTAmnt NUMERIC(19,7),  @TotAssignDBTAmnt NUMERIC(19,7),  @TotAssignORGDBTAmnt NUMERIC(19,7),  @aaAssignedPercent SMALLINT   SELECT @SERIES = 11, @OLDSERIES = 11  EXEC aagSubWorkHdrUpdate  @DOCTYPE,   @DOCNUMBR,  '',  '20000',  @SERIES,  @CompanyID,  @NEWaaSubLedgerHdrID OUTPUT   SELECT @OLDaaSubLedgerHdrID  = aaSubLedgerHdrID FROM AAG20000 WHERE DOCTYPE = @OLDDOCTYPE AND DOCNUMBR = @OLDDOCNUMBR AND @OLDSERIES = 11    IF NOT EXISTS(SELECT TOP 1 1 FROM AAG20001 A21 INNER JOIN AAG20000 A2 ON A21.aaSubLedgerHdrID=@NEWaaSubLedgerHdrID)  BEGIN  SELECT @NEWSubLedgerDistID=1  if @DOCTYPE = 4  BEGIN  DECLARE  TrxOpenCursor  CURSOR LOCAL FOR SELECT SEQNUMBR,DISTTYPE,ACTINDX,DEBITAMT,ORDBTAMT,CRDTAMNT,ORCRDAMT,SOP10102.CURRNIDX,SOP10102.TRXSORCE,  RATETPID,EXGTBLID,XCHGRATE,DENXRATE,EXCHDATE,TIME1,RTCLCMTD,MCTRXSTT,GLPOSTDT,CUSTNMBR  FROM  SOP10102 INNER JOIN SOP10100 ON SOP10102.SOPNUMBE = SOP10100.SOPNUMBE AND SOP10102.SOPTYPE = SOP10100.SOPTYPE WHERE SOP10102.SOPTYPE = @DOCTYPE AND SOP10102.SOPNUMBE = @DOCNUMBR AND DISTTYPE NOT IN (22) ORDER BY SOP10102.SEQNUMBR  END  ELSE  BEGIN  DECLARE  TrxOpenCursor  CURSOR LOCAL FOR SELECT SEQNUMBR,DISTTYPE,ACTINDX,DEBITAMT,ORDBTAMT,CRDTAMNT,ORCRDAMT,SOP10102.CURRNIDX,SOP10102.TRXSORCE,  RATETPID,EXGTBLID,XCHGRATE,DENXRATE,EXCHDATE,TIME1,RTCLCMTD,MCTRXSTT,GLPOSTDT,CUSTNMBR  FROM  SOP10102 INNER JOIN SOP10100 ON SOP10102.SOPNUMBE = SOP10100.SOPNUMBE AND SOP10102.SOPTYPE = SOP10100.SOPTYPE WHERE SOP10102.SOPTYPE = @DOCTYPE AND SOP10102.SOPNUMBE = @DOCNUMBR AND DISTTYPE NOT IN (14,15,22) ORDER BY SOP10102.SEQNUMBR  END  OPEN TrxOpenCursor  FETCH NEXT FROM TrxOpenCursor INTO @SEQNUMBR,@DISTTYPE,@ACTINDX,@DEBITAMT,@ORDBTAMT,@CRDTAMNT,@ORCRDAMT,@CURRNIDX,@TRXSORCE,  @RATETPID,@EXGTBLID,@XCHGRATE,@DENXRATE,@EXCHDATE,@TIME1,@RTCLCMTD,@MCTRXSTT,@GLPOSTDT,@CUSTNMBR  WHILE @@FETCH_STATUS = 0   BEGIN   EXEC aagGetClassIDBrowseType   @ACTINDX,   @ClassID OUTPUT,   @aaBrowseTypeNew OUTPUT    SELECT TOP 1 @ACCTTYPE = ACCTTYPE FROM GL00100 WHERE @ACTINDX = @ACTINDX  SELECT TOP 1 @CURNCYID1 = A.CURNCYID FROM DYNAMICS..MC40200 A WHERE A.CURRNIDX = @CURRNIDX  SELECT TOP 1 @DECPLCUR = A.DECPLCUR-1 FROM DYNAMICS..MC40200 A WHERE A.CURNCYID = @CURNCYID1   SET @INVRETDEBITAMT = @DEBITAMT  SET @INVRETCRDTAMT = @CRDTAMNT  SET @ORGINVRETDEBITAMT = @ORDBTAMT  SET @ORGINVRETCRDTAMT = @ORCRDAMT   INSERT INTO AAG20001 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [INTERID], [CorrespondingUnit], [ACTINDX], [DISTTYPE], [ACCTTYPE], [aaBrowseType],   [DECPLACS], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [CURNCYID], [CURRNIDX],   [RATETPID], [EXGTBLID], [XCHGRATE], [EXCHDATE], [TIME1], [RTCLCMTD], [DENXRATE], [MCTRXSTT], [SEQNUMBR], [GLPOSTDT], [aaCustID],   [aaVendID], [aaSiteID], [aaItemID], [aaCopyStatus], [aaWinWasOpen], [POSTED], [HISTORY], [aaChangeDate],[aaChangeTime])  VALUES ( @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID, DB_NAME(), '', @ACTINDX, @DISTTYPE, ISNULL(@ACCTTYPE,0), @aaBrowseTypeNew,   ISNULL( @DECPLCUR,0), @INVRETDEBITAMT, @INVRETCRDTAMT, @ORGINVRETDEBITAMT, @ORGINVRETCRDTAMT, @CURNCYID1, @CURRNIDX,   @RATETPID,@EXGTBLID,@XCHGRATE, @EXCHDATE,@TIME1,@RTCLCMTD, @DENXRATE, @MCTRXSTT, @SEQNUMBR, @GLPOSTDT,@CUSTNMBR,  '', '', '', 8, 1, 0, 0, CONVERT(CHAR(12), GETDATE(), 102), CONVERT(CHAR(12), GETDATE(), 108))   DECLARE  Assign  CURSOR LOCAL FOR   SELECT AAG20001.aaSubLedgerDistID,aaSubLedgerAssignID,aaAssignedPercent FROM AAG20002 INNER JOIN AAG20001 ON AAG20001.aaSubLedgerHdrID=AAG20002.aaSubLedgerHdrID AND AAG20002.aaSubLedgerDistID=AAG20001.aaSubLedgerDistID WHERE AAG20002.aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND AAG20001.DISTTYPE=@DISTTYPE AND AAG20001.ACTINDX=@ACTINDX  OPEN Assign  FETCH NEXT FROM Assign INTO @OLDaaSubLedgerDistID,@aaSubLedgerAssignID2,@aaAssignedPercent  WHILE @@FETCH_STATUS = 0   BEGIN   SELECT @NEWSubLedgerAssignID2 = ISNULL(MAX(A22.aaSubLedgerAssignID),0) + 1 FROM AAG20002 A22  WHERE A22.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND A22.aaSubLedgerDistID = @NEWSubLedgerDistID   INSERT INTO AAG20002 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID])  SELECT @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID, @NEWSubLedgerAssignID2, (@INVRETDEBITAMT * @aaAssignedPercent)/10000, (@INVRETCRDTAMT * @aaAssignedPercent)/10000 , (@ORGINVRETDEBITAMT * @aaAssignedPercent)/10000, (@ORGINVRETCRDTAMT * @aaAssignedPercent)/10000, [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID]  FROM AAG20002  WHERE aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND aaSubLedgerDistID=@OLDaaSubLedgerDistID AND aaSubLedgerAssignID = @aaSubLedgerAssignID2   IF @aaBrowseTypeNew <> 0   AND NOT EXISTS  (SELECT 1 FROM AAG20003  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID  AND aaSubLedgerDistID = @NEWSubLedgerDistID   AND aaSubLedgerAssignID = @NEWSubLedgerAssignID2)  BEGIN   EXEC aagSubWorkCodeUpdate   @NEWaaSubLedgerHdrID,   @NEWSubLedgerDistID,   @NEWSubLedgerAssignID2,   @ClassID,   @oRequiredFieldEmpty OUTPUT    UPDATE AAG20003 SET AAG20003.aaTrxCodeID = A3.aaTrxCodeID FROM AAG20003   INNER JOIN (SELECT aaSubLedgerHdrID,aaSubLedgerAssignID,aaTrxDimID,aaTrxCodeID FROM AAG20003 WHERE   aaSubLedgerHdrID = @OLDaaSubLedgerHdrID and aaSubLedgerDistID = @OLDaaSubLedgerDistID AND aaSubLedgerAssignID=@aaSubLedgerAssignID2) A3 on   AAG20003.aaTrxDimID=A3.aaTrxDimID AND   AAG20003.aaSubLedgerHdrID=@NEWaaSubLedgerHdrID AND AAG20003.aaSubLedgerDistID = @NEWSubLedgerDistID AND   AAG20003.aaSubLedgerAssignID=@NEWSubLedgerAssignID2  END   FETCH NEXT   FROM   Assign  INTO  @OLDaaSubLedgerDistID,@aaSubLedgerAssignID2,@aaAssignedPercent  END  CLOSE Assign  DEALLOCATE Assign   IF NOT EXISTS(SELECT TOP 1 1 FROM AAG20002 A22 INNER JOIN AAG20001 A21 ON A21.aaSubLedgerHdrID=@OLDaaSubLedgerHdrID INNER JOIN AAG20000 A2 ON A21.aaSubLedgerHdrID=@OLDaaSubLedgerHdrID  AND A21.DISTTYPE=@DISTTYPE AND A21.ACTINDX=@ACTINDX)   BEGIN  INSERT INTO AAG20002 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [aaAssignedPercent])  VALUES( @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID, 1, @INVRETDEBITAMT, @INVRETCRDTAMT, @ORGINVRETDEBITAMT, @ORGINVRETCRDTAMT, 10000)   IF @aaBrowseTypeNew <> 0   AND NOT EXISTS  (SELECT 1 FROM AAG20003  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID  AND aaSubLedgerDistID = @NEWSubLedgerDistID)  BEGIN   EXEC aagSubWorkCodeUpdate   @NEWaaSubLedgerHdrID,   @NEWSubLedgerDistID,   1,   @ClassID,   @oRequiredFieldEmpty OUTPUT    SET @aaBrowseTypeNew = 0   END    UPDATE AAG20001 SET aaBrowseType = 1  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND  aaSubLedgerDistID = @NEWSubLedgerDistID  END  SET @aaBrowseTypeNew = 0    SET @NEWSubLedgerDistID = @NEWSubLedgerDistID + 1  FETCH NEXT   FROM   TrxOpenCursor  INTO  @SEQNUMBR,@DISTTYPE,@ACTINDX,@DEBITAMT,@ORDBTAMT,@CRDTAMNT,@ORCRDAMT,@CURRNIDX,@TRXSORCE,  @RATETPID,@EXGTBLID,@XCHGRATE,@DENXRATE,@EXCHDATE,@TIME1,@RTCLCMTD,@MCTRXSTT,@GLPOSTDT,@CUSTNMBR  END  CLOSE TrxOpenCursor  DEALLOCATE TrxOpenCursor   END  ELSE  BEGIN  DECLARE  TrxOpenCursor  CURSOR LOCAL FOR SELECT SEQNUMBR,DISTTYPE,ACTINDX,DEBITAMT,ORDBTAMT,CRDTAMNT,ORCRDAMT,SOP10102.CURRNIDX,SOP10102.TRXSORCE,  RATETPID,EXGTBLID,XCHGRATE,DENXRATE,EXCHDATE,TIME1,RTCLCMTD,MCTRXSTT,GLPOSTDT,CUSTNMBR  FROM  SOP10102 INNER JOIN SOP10100 ON SOP10102.SOPNUMBE = SOP10100.SOPNUMBE AND SOP10102.SOPTYPE = SOP10100.SOPTYPE WHERE SOP10102.SOPTYPE = @DOCTYPE AND SOP10102.SOPNUMBE = @DOCNUMBR ORDER BY SOP10102.SEQNUMBR  OPEN TrxOpenCursor  FETCH NEXT FROM TrxOpenCursor INTO @SEQNUMBR,@DISTTYPE,@ACTINDX,@DEBITAMT,@ORDBTAMT,@CRDTAMNT,@ORCRDAMT,@CURRNIDX,@TRXSORCE,  @RATETPID,@EXGTBLID,@XCHGRATE,@DENXRATE,@EXCHDATE,@TIME1,@RTCLCMTD,@MCTRXSTT,@GLPOSTDT,@CUSTNMBR  WHILE @@FETCH_STATUS = 0   BEGIN   SET @INVRETDEBITAMT = @DEBITAMT  SET @INVRETCRDTAMT = @CRDTAMNT  SET @ORGINVRETDEBITAMT = @ORDBTAMT  SET @ORGINVRETCRDTAMT = @ORCRDAMT   EXEC aagGetClassIDBrowseType   @ACTINDX,   @ClassID output,   @aaBrowseTypeNew output    IF NOT EXISTS (SELECT TOP 1 1 FROM AAG20001 WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND ACTINDX=@ACTINDX AND DISTTYPE=@DISTTYPE)  BEGIN  SELECT @NEWSubLedgerDistID1 = MAX(aaSubLedgerDistID) + 1 FROM AAG20001 WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID    SELECT TOP 1 @ACCTTYPE = ACCTTYPE FROM GL00100 WHERE @ACTINDX = @ACTINDX  SELECT TOP 1 @CURNCYID1 = A.CURNCYID FROM DYNAMICS..MC40200 A WHERE A.CURRNIDX = @CURRNIDX  SELECT TOP 1 @DECPLCUR = A.DECPLCUR-1 FROM DYNAMICS..MC40200 A WHERE A.CURNCYID = @CURNCYID1   INSERT INTO AAG20001 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [INTERID], [CorrespondingUnit], [ACTINDX], [DISTTYPE], [ACCTTYPE], [aaBrowseType],   [DECPLACS], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [CURNCYID], [CURRNIDX],   [RATETPID], [EXGTBLID], [XCHGRATE], [EXCHDATE], [TIME1], [RTCLCMTD], [DENXRATE], [MCTRXSTT], [SEQNUMBR], [GLPOSTDT], [aaCustID],   [aaVendID], [aaSiteID], [aaItemID], [aaCopyStatus], [aaWinWasOpen], [POSTED], [HISTORY], [aaChangeDate],[aaChangeTime])  VALUES ( @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID1, DB_NAME(), '', @ACTINDX, @DISTTYPE, ISNULL(@ACCTTYPE,0), @aaBrowseTypeNew,   ISNULL( @DECPLCUR,0), @INVRETDEBITAMT, @INVRETCRDTAMT, @ORGINVRETDEBITAMT, @ORGINVRETCRDTAMT, @CURNCYID1, @CURRNIDX,   @RATETPID,@EXGTBLID,@XCHGRATE, @EXCHDATE,@TIME1,@RTCLCMTD, @DENXRATE, @MCTRXSTT, @SEQNUMBR, @GLPOSTDT,@CUSTNMBR,  '', '', '', 8, 1, 0, 0, CONVERT(CHAR(12), GETDATE(), 102), CONVERT(CHAR(12), GETDATE(), 108))   DECLARE  Assign  CURSOR LOCAL FOR   SELECT AAG20001.aaSubLedgerDistID,aaSubLedgerAssignID,aaAssignedPercent FROM AAG20002 INNER JOIN AAG20001 ON AAG20001.aaSubLedgerHdrID=AAG20002.aaSubLedgerHdrID AND AAG20002.aaSubLedgerDistID=AAG20001.aaSubLedgerDistID WHERE AAG20002.aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND AAG20001.DISTTYPE=@DISTTYPE AND AAG20001.ACTINDX=@ACTINDX  OPEN Assign  FETCH NEXT FROM Assign INTO @OLDaaSubLedgerDistID,@aaSubLedgerAssignID2,@aaAssignedPercent  WHILE @@FETCH_STATUS = 0   BEGIN   SELECT @NEWSubLedgerAssignID2 = ISNULL(MAX(A22.aaSubLedgerAssignID),0) + 1 FROM AAG20002 A22  WHERE A22.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND A22.aaSubLedgerDistID = @NEWSubLedgerDistID   INSERT INTO AAG20002 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID])  SELECT @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID, @NEWSubLedgerAssignID2, (@INVRETDEBITAMT * @aaAssignedPercent)/10000, (@INVRETCRDTAMT * @aaAssignedPercent)/10000 , (@ORGINVRETDEBITAMT * @aaAssignedPercent)/10000, (@ORGINVRETCRDTAMT * @aaAssignedPercent)/10000, [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID]  FROM AAG20002  WHERE aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND aaSubLedgerDistID=@OLDaaSubLedgerDistID AND aaSubLedgerAssignID = @aaSubLedgerAssignID2   IF @aaBrowseTypeNew <> 0   AND NOT EXISTS  (SELECT 1 FROM AAG20003  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID  AND aaSubLedgerDistID = @NEWSubLedgerDistID   AND aaSubLedgerAssignID = @NEWSubLedgerAssignID2)  BEGIN   EXEC aagSubWorkCodeUpdate   @NEWaaSubLedgerHdrID,   @NEWSubLedgerDistID,   @NEWSubLedgerAssignID2,   @ClassID,   @oRequiredFieldEmpty OUTPUT    UPDATE AAG20003 SET AAG20003.aaTrxCodeID = A3.aaTrxCodeID FROM AAG20003   INNER JOIN (SELECT aaSubLedgerHdrID,aaSubLedgerAssignID,aaTrxDimID,aaTrxCodeID FROM AAG20003 WHERE   aaSubLedgerHdrID = @OLDaaSubLedgerHdrID and aaSubLedgerDistID = @OLDaaSubLedgerDistID AND aaSubLedgerAssignID=@aaSubLedgerAssignID2) A3 on   AAG20003.aaTrxDimID=A3.aaTrxDimID AND   AAG20003.aaSubLedgerHdrID=@NEWaaSubLedgerHdrID AND AAG20003.aaSubLedgerDistID = @NEWSubLedgerDistID AND   AAG20003.aaSubLedgerAssignID=@NEWSubLedgerAssignID2  END   FETCH NEXT   FROM   Assign  INTO  @OLDaaSubLedgerDistID,@aaSubLedgerAssignID2,@aaAssignedPercent  END  CLOSE Assign  DEALLOCATE Assign  END  ELSE  BEGIN  SELECT @NEWSubLedgerDistID1 = aaSubLedgerDistID FROM AAG20001 WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND ACTINDX=@ACTINDX AND DISTTYPE=@DISTTYPE   UPDATE AAG20001 SET [DEBITAMT]= S1.[DEBITAMT], [CRDTAMNT] = S1.[CRDTAMNT], [ORDBTAMT] = S1.[ORDBTAMT], [ORCRDAMT] = S1.[ORCRDAMT]   FROM AAG20001 INNER JOIN AAG20000 ON AAG20001.aaSubLedgerHdrID = AAG20000.aaSubLedgerHdrID  INNER JOIN SOP10102 S1 ON AAG20000.DOCNUMBR = S1.SOPNUMBE AND AAG20000.DOCTYPE = S1.SOPTYPE AND AAG20001.SEQNUMBR = S1.SEQNUMBR  WHERE AAG20000.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND AAG20001.aaSubLedgerDistID = @NEWSubLedgerDistID1   SELECT @NEWSubLedgerAssignID3 = ISNULL(MAX(A22.aaSubLedgerAssignID),0) + 1 FROM AAG20002 A22  WHERE A22.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND A22.aaSubLedgerDistID = @NEWSubLedgerDistID1   SELECT @TotAssignDBTAmnt = (A1.DEBITAMT) - (SUM(A2.DEBITAMT)/SUM(aaAssignedPercent))*10000, @TotAssignORGCRDTAmnt = (A1.ORCRDAMT) - (SUM(A2.ORCRDAMT)/SUM(aaAssignedPercent))*10000,  @TotAssignCRDTAmnt = (A1.CRDTAMNT) - (SUM(A2.CRDTAMNT)/SUM(aaAssignedPercent))*10000, @TotAssignORGDBTAmnt = (A1.ORDBTAMT) - (SUM(A2.ORDBTAMT)/SUM(aaAssignedPercent))*10000  FROM AAG20001 A1 INNER JOIN AAG20002 A2 ON A1.aaSubLedgerHdrID = A2.aaSubLedgerHdrID   AND A1.aaSubLedgerDistID = A2.aaSubLedgerDistID AND A2.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND   A2.aaSubLedgerDistID = @NEWSubLedgerDistID1 GROUP BY A1.DEBITAMT ,A1.ORCRDAMT,A1.CRDTAMNT,A1.ORDBTAMT   IF (@TotAssignDBTAmnt + @TotAssignORGDBTAmnt) >0 OR (@TotAssignORGCRDTAmnt+@TotAssignCRDTAmnt) > 0  BEGIN   IF EXISTS(SELECT TOP 1 1 FROM  AAG20001 WHERE aaSubLedgerHdrID= @OLDaaSubLedgerHdrID AND ACTINDX=@ACTINDX AND DISTTYPE=@DISTTYPE)  BEGIN  SELECT @OLDaaSubLedgerDistID = aaSubLedgerDistID FROM  AAG20001 WHERE aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND ACTINDX=@ACTINDX AND DISTTYPE=@DISTTYPE  DECLARE  Assign  CURSOR LOCAL FOR   SELECT aaSubLedgerAssignID,aaAssignedPercent FROM AAG20002  WHERE AAG20002.aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND AAG20002.aaSubLedgerDistID = @OLDaaSubLedgerDistID  OPEN Assign  FETCH NEXT FROM Assign INTO @aaSubLedgerAssignID2,@aaAssignedPercent  WHILE @@FETCH_STATUS = 0   BEGIN   SELECT @NEWSubLedgerAssignID2 = ISNULL(MAX(A22.aaSubLedgerAssignID),0) + 1 FROM AAG20002 A22  WHERE A22.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND A22.aaSubLedgerDistID = @NEWSubLedgerDistID1   INSERT INTO AAG20002 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID])  SELECT @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID1, @NEWSubLedgerAssignID2, (@TotAssignDBTAmnt * @aaAssignedPercent)/10000, (@TotAssignCRDTAmnt * @aaAssignedPercent)/10000 , (@TotAssignORGDBTAmnt * @aaAssignedPercent)/10000, (@TotAssignORGCRDTAmnt * @aaAssignedPercent)/10000, [aaAssignedPercent], [DistRef], [NOTEINDX], [aaAssignErrors], [aaAliasID]  FROM AAG20002  WHERE aaSubLedgerHdrID = @OLDaaSubLedgerHdrID AND aaSubLedgerDistID=@OLDaaSubLedgerDistID AND aaSubLedgerAssignID = @aaSubLedgerAssignID2   IF @aaBrowseTypeNew <> 0   AND NOT EXISTS  (SELECT 1 FROM AAG20003  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID  AND aaSubLedgerDistID = @NEWSubLedgerDistID1   AND aaSubLedgerAssignID = @NEWSubLedgerAssignID2)  BEGIN   EXEC aagSubWorkCodeUpdate   @NEWaaSubLedgerHdrID,   @NEWSubLedgerDistID1,   @NEWSubLedgerAssignID2,   @ClassID,   @oRequiredFieldEmpty OUTPUT    SET @aaBrowseTypeNew = 0    UPDATE AAG20003 SET AAG20003.aaTrxCodeID = A3.aaTrxCodeID FROM AAG20003   INNER JOIN (SELECT aaSubLedgerHdrID,aaSubLedgerAssignID,aaTrxDimID,aaTrxCodeID FROM AAG20003 WHERE   aaSubLedgerHdrID = @OLDaaSubLedgerHdrID and aaSubLedgerDistID = @OLDaaSubLedgerDistID AND aaSubLedgerAssignID=@aaSubLedgerAssignID2) A3 on   AAG20003.aaTrxDimID=A3.aaTrxDimID AND   AAG20003.aaSubLedgerHdrID=@NEWaaSubLedgerHdrID AND AAG20003.aaSubLedgerDistID = @NEWSubLedgerDistID1 AND   AAG20003.aaSubLedgerAssignID=@NEWSubLedgerAssignID2  END    FETCH NEXT   FROM   Assign  INTO  @aaSubLedgerAssignID2,@aaAssignedPercent  END  CLOSE Assign  DEALLOCATE Assign  END  ELSE  BEGIN  INSERT INTO AAG20002 ([aaSubLedgerHdrID], [aaSubLedgerDistID], [aaSubLedgerAssignID], [DEBITAMT], [CRDTAMNT], [ORDBTAMT], [ORCRDAMT], [aaAssignedPercent])  VALUES( @NEWaaSubLedgerHdrID, @NEWSubLedgerDistID1, @NEWSubLedgerAssignID3, @TotAssignDBTAmnt, @TotAssignCRDTAmnt, @TotAssignORGDBTAmnt, @TotAssignORGCRDTAmnt, 10000)   IF @aaBrowseTypeNew <> 0   AND NOT EXISTS  (SELECT 1 FROM AAG20003  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID  AND aaSubLedgerDistID = @NEWSubLedgerDistID1  AND aaSubLedgerAssignID = @NEWSubLedgerAssignID3)  BEGIN   EXEC aagSubWorkCodeUpdate   @NEWaaSubLedgerHdrID,   @NEWSubLedgerDistID1,   @NEWSubLedgerAssignID3,   @ClassID,   @oRequiredFieldEmpty OUTPUT    SET @aaBrowseTypeNew = 0   END   UPDATE AAG20001 SET aaBrowseType = 1  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND  aaSubLedgerDistID = @NEWSubLedgerDistID1  END  END  SET @aaBrowseTypeNew = 0   END  FETCH NEXT   FROM   TrxOpenCursor  INTO  @SEQNUMBR,@DISTTYPE,@ACTINDX,@DEBITAMT,@ORDBTAMT,@CRDTAMNT,@ORCRDAMT,@CURRNIDX,@TRXSORCE,  @RATETPID,@EXGTBLID,@XCHGRATE,@DENXRATE,@EXCHDATE,@TIME1,@RTCLCMTD,@MCTRXSTT,@GLPOSTDT,@CUSTNMBR  END  CLOSE TrxOpenCursor  DEALLOCATE TrxOpenCursor   DECLARE  PercentageUpdate  CURSOR LOCAL FOR SELECT aaSubLedgerDistID, DEBITAMT, CRDTAMNT,CURNCYID FROM AAG20001 WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND (DEBITAMT+CRDTAMNT) > 0   OPEN PercentageUpdate  FETCH NEXT FROM PercentageUpdate INTO @NEWSubLedgerDistID, @DEBITAMT, @CRDTAMNT, @CURNCYID  WHILE @@FETCH_STATUS = 0   BEGIN  UPDATE AAG20002 SET aaAssignedPercent = ROUND(((DEBITAMT+CRDTAMNT)* 10000)/(@DEBITAMT+@CRDTAMNT),2)  WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND aaSubLedgerDistID = @NEWSubLedgerDistID   SET @AssignID = (SELECT Max(A.aaSubLedgerAssignID) FROM AAG20002 A where A.aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND aaSubLedgerDistID = @NEWSubLedgerDistID )  SET @AssignPercent = (SELECT SUM(aaAssignedPercent) FROM AAG20002 WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND aaSubLedgerDistID = @NEWSubLedgerDistID)  IF @AssignPercent <> 0 AND @AssignPercent > 9990   BEGIN  UPDATE AAG20002 SET aaAssignedPercent = aaAssignedPercent + (10000 - @AssignPercent) FROM AAG20002 WHERE aaSubLedgerHdrID = @NEWaaSubLedgerHdrID AND   aaSubLedgerDistID = @NEWSubLedgerDistID AND aaSubLedgerAssignID = @AssignID  END   FETCH NEXT FROM PercentageUpdate  INTO  @NEWSubLedgerDistID, @DEBITAMT, @CRDTAMNT, @CURNCYID  END  CLOSE PercentageUpdate  DEALLOCATE PercentageUpdate  END END    
GO
GRANT EXECUTE ON  [dbo].[aagCopyaaCodesforSOP] TO [DYNGRP]
GO
