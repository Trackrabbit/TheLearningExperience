SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taFSCalcAutomaticOvertime]  @I_vTECHID char(11) = '',     @I_vSTRTDATE datetime = '',     @I_vSTRTTIME datetime = '',     @I_vENDDATE datetime = '',     @I_vENDTME datetime = '',     @O_vTRANSTME char(7) output,    @O_vOTTRANSTME char(7) output,    @O_iSplitTransaction tinyint output,   @O_iErrorState int output,     @oErrString varchar(255) output     with encryption as  set transaction isolation level read uncommitted set nocount on  declare @laborstartdatetime datetime,  @laborenddatetime datetime,  @avail smallint,  @schedstarttime datetime,  @schedendtime datetime,  @billablehours int,  @billableminutes int,  @billablehours2 int,  @billableminutes2 int,  @billabletimestring char(7),  @billabletime numeric (10, 2),  @splitneeded tinyint,  @O_TRANSTME char(7),  @O_OTTRANSTME char(7),  @iStatus int,  @O_oErrorState int  select @laborstartdatetime = '',  @laborenddatetime = '',  @avail = 0,  @schedstarttime = '',  @schedendtime = '',  @billablehours = 0,  @billableminutes = 0,  @billablehours2 = 0,  @billableminutes2 = 0,  @billabletimestring = '',  @billabletime = 0,  @splitneeded = 0,  @O_TRANSTME = '',  @O_OTTRANSTME = '',  @O_vTRANSTME = '',  @O_vOTTRANSTME = '',  @O_iSplitTransaction = 0,  @iStatus = 0,  @O_iErrorState = 0,  @oErrString = ''  if (@I_vTECHID = '') begin  select @O_iErrorState = 11439    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec SVC_Get_Tech_Work_Hours  @I_vTECHID,  @I_vSTRTDATE,  @avail output,  @schedstarttime output,  @schedendtime output  if @@error <> 0  begin  select @O_iErrorState = 11440    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  exec SVC_util_combine_date_time  @I_vSTRTDATE,  @I_vSTRTTIME,  @laborstartdatetime OUTPUT exec SVC_util_combine_date_time  @I_vENDDATE,  @I_vENDTME,  @laborenddatetime OUTPUT  if @laborstartdatetime < @schedstarttime begin  if @laborenddatetime <= @schedstarttime  begin  select @splitneeded = 0  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vSTRTDATE,  @I_vENDTME,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_OTTRANSTME output  select @O_vTRANSTME = @O_TRANSTME, @O_vOTTRANSTME = @O_OTTRANSTME, @O_iSplitTransaction = @splitneeded  end  else  if (@laborenddatetime > @schedstarttime) and (@laborenddatetime < @schedendtime)  begin  select @splitneeded = 1  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vSTRTDATE,  @schedstarttime,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_OTTRANSTME output   exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @schedstarttime,  @I_vSTRTDATE,  @laborenddatetime,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_TRANSTME output   select @O_vTRANSTME = @O_TRANSTME, @O_vOTTRANSTME = @O_OTTRANSTME, @O_iSplitTransaction = @splitneeded  end  else  if @laborenddatetime > @schedendtime  begin  select @splitneeded = 1  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vSTRTDATE,  @schedstarttime,   @billabletimestring OUTPUT   select @billablehours2 = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes2 = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @schedstarttime,  @I_vSTRTDATE,  @schedendtime,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_TRANSTME output   exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @schedendtime,  @I_vSTRTDATE,  @I_vENDTME,   @billabletimestring OUTPUT   select @billablehours = @billablehours2 + convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = @billableminutes2 + convert(int,substring(@billabletimestring, 5, 2))  exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_OTTRANSTME output   select @O_vTRANSTME = @O_TRANSTME, @O_vOTTRANSTME = @O_OTTRANSTME, @O_iSplitTransaction = @splitneeded  end end else  if (@laborstartdatetime >= @schedstarttime) and (@laborstartdatetime < @schedendtime) begin  if @laborenddatetime <= @schedendtime  begin  select @splitneeded = 0  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vSTRTDATE,  @I_vENDTME,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_TRANSTME output   select @O_vTRANSTME = @O_TRANSTME, @O_vOTTRANSTME = @O_OTTRANSTME, @O_iSplitTransaction = @splitneeded  end  else  if @laborenddatetime > @schedendtime  begin  select @splitneeded = 1  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vSTRTDATE,  @schedendtime,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_TRANSTME output   exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @schedendtime,  @I_vSTRTDATE,  @laborenddatetime,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_OTTRANSTME output   select @O_vTRANSTME = @O_TRANSTME, @O_vOTTRANSTME = @O_OTTRANSTME, @O_iSplitTransaction = @splitneeded  end end else  if @laborstartdatetime >= @schedendtime begin  select @splitneeded = 0  exec SVC_Obj_CalcBillTransTime   @I_vSTRTDATE,  @I_vSTRTTIME,  @I_vSTRTDATE,  @I_vENDTME,   @billabletimestring OUTPUT   select @billablehours = convert(int,substring(@billabletimestring, 1, 3)),  @billableminutes = convert(int,substring(@billabletimestring, 5, 2))   exec SVC_util_convert_timelength_to_string   @billablehours,   @billableminutes,   @O_OTTRANSTME output   select @O_vTRANSTME = @O_TRANSTME, @O_vOTTRANSTME = @O_OTTRANSTME, @O_iSplitTransaction = @splitneeded end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taFSCalcAutomaticOvertime] TO [DYNGRP]
GO
