SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taBRPostBankDeposits]  @I_vCHEKBKID char(15),    @I_vdepositnumber char(20),   @I_vRequesterTrx smallint = 0,   @I_vPTDUSRID char(15) = '',   @I_vUSRDEFND1 char(50) = '',       @I_vUSRDEFND2 char(50) = '',       @I_vUSRDEFND3 char(50) = '',       @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare   @iStatus int,  @O_oErrorState int,  @iError int,  @iCustomState int,  @iCustomErrString varchar(255),  @CMChkbkMstrTbl char(18),  @CMChkbkMstrDexRowID int,  @oExists int,  @OInsStatus int,  @DexLockErrorState int,  @CMDpstWorkTbl char(18),  @CMDpstWorkDexRowID int,  @CMDNUMWK numeric(19,5),  @iTrxSorceErrState int,  @TRXSORCE char(13),  @dtDEFAULT datetime,  @CurrDate char(12),  @Checkbook_Amount numeric(19,5),  @iCursorError int,  @iGLTrxLineInsertErrState int,  @iGLTrxLineInsertErrString varchar(255),  @iGLTrxHdrInsertErrState int,  @iGLTrxHdrInsertErrString varchar(255),  @cCMRECNUM numeric(19,5),  @cRCPTNMBR char(20),  @cSRCDOCNUM char(20),  @cAUDITTRAIL char(13),  @cCURRNIDX int,  @cDECPLCUR int,  @cRLGANLOS numeric(19,5),  @cRATETPID char(15),  @cCURNCYID char(15),  @cEXGTBLID char(15),  @cDENXRATE numeric(19,5),  @REALGAINActIdx int,  @REALLOSSActIdx int,  @ChkbkActIdx int,  @DebActIdx int,  @CrdActIdx int,  @JRNENTRY int,  @O_tOUTOK smallint,  @iJrnlEntryErrState int,  @DEPDATE datetime,  @GainLoss int,  @ORCTRNUM char(20),  @TRXAMNT numeric(19,5),  @TRXAMNT1 numeric(19,5),  @TRXAMNT2 numeric(19,5),  @CURNCYID char(15),  @RTCLCMTD smallint,  @DECPLCUR int,  @XCHGRATE numeric(19,7),  @FUNLCURR char(15),  @DSTSQNUM int,  @DebitAmnt numeric(19,5),  @CreditAmnt numeric(19,5),  @AcctIndx int,  @CMActIndx int,  @CMDebitAmount numeric(19,5),  @CMCreditAmount numeric(19,5),  @icmGetLastJournalNumberErrState int  select  @iStatus = 0,  @O_oErrorState = 0,  @iError = 0,  @iCustomState = 0,  @iCustomErrString = '',  @CMChkbkMstrTbl = '',  @CMChkbkMstrDexRowID = 0,  @oExists = 0,  @OInsStatus = 0,  @DexLockErrorState = 0,  @CMDpstWorkTbl = 0,  @CMDpstWorkDexRowID = 0,  @CMDNUMWK = 0,  @iTrxSorceErrState = 0,  @TRXSORCE = '',  @dtDEFAULT = '',  @CurrDate = '',  @Checkbook_Amount = 0,  @iCursorError = 0,  @iGLTrxLineInsertErrState = 0,  @iGLTrxLineInsertErrString = '',  @iGLTrxHdrInsertErrState = 0,  @iGLTrxHdrInsertErrString = '',  @cCMRECNUM = 0,  @cRCPTNMBR = '',  @cSRCDOCNUM = '',  @cAUDITTRAIL = '',  @cCURRNIDX = 0,  @cDECPLCUR = 0,  @cRLGANLOS = 0,  @cRATETPID = '',  @cCURNCYID = '',  @cEXGTBLID = '',  @cDENXRATE = 0,  @REALGAINActIdx = 0,  @REALLOSSActIdx = 0,  @ChkbkActIdx = 0,  @DebActIdx = 0,  @CrdActIdx = 0,  @JRNENTRY = 0,  @O_tOUTOK = 0,  @iJrnlEntryErrState = 0,  @DEPDATE = '',  @GainLoss = 0,  @ORCTRNUM = '',  @O_iErrorState = 0,  @TRXAMNT = 0,  @TRXAMNT1 = 0,  @TRXAMNT2 = 0,  @CURNCYID = '',  @RTCLCMTD = 0,  @DECPLCUR = 0,  @FUNLCURR = '',  @DSTSQNUM = 0,  @DebitAmnt = 0,  @CreditAmnt = 0,  @AcctIndx = 0,  @CMActIndx = 0,  @CMDebitAmount = 0,  @CMCreditAmount = 0,  @icmGetLastJournalNumberErrState = 0  if (@oErrString is null) begin  select @oErrString = '' end  exec @iStatus = taBRPostBankDepositsPre  @I_vCHEKBKID output,  @I_vdepositnumber output,  @I_vRequesterTrx output,  @I_vPTDUSRID output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 7403    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vCHEKBKID is null or  @I_vdepositnumber is null or  @I_vRequesterTrx is null or  @I_vPTDUSRID is null or  @I_vUSRDEFND1 is null or  @I_vUSRDEFND2 is null or  @I_vUSRDEFND3 is null or  @I_vUSRDEFND4 is null or  @I_vUSRDEFND5 is null  ) begin  select @O_iErrorState = 7404    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vCHEKBKID = UPPER(@I_vCHEKBKID),  @I_vdepositnumber = UPPER(@I_vdepositnumber)  select @CurrDate = convert(varchar(12),getdate())  if (@I_vCHEKBKID = '') begin  select @O_iErrorState = 7405     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vdepositnumber = '') begin  select @O_iErrorState = 7406     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRequesterTrx < 0) or (@I_vRequesterTrx > 1)) begin  select @O_iErrorState = 7407     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (not exists(select 1 from CM10100 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber)) begin  select @O_iErrorState = 7408     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (exists(select 1 from CM20300 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber and ((DEPOSITED = 1) or (VOIDED = 1)))) begin  select @O_iErrorState = 7409     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  select @CMChkbkMstrTbl = rtrim(db_name()) + '.dbo.CM00100' select @CMChkbkMstrDexRowID = DEX_ROW_ID from CM00100 (nolock) where CHEKBKID = @I_vCHEKBKID  if (not exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @CMChkbkMstrTbl and row_id = @CMChkbkMstrDexRowID and session_id = @@spid)) begin  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 1,  @I_vtable_path_name = @CMChkbkMstrTbl,   @I_vrow_id = @CMChkbkMstrDexRowID,   @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@DexLockErrorState <> 0) or (@iError <> 0) or (@iStatus <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7410    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  select @CMDpstWorkTbl = rtrim(db_name()) + '.dbo.CM10100' select @CMDpstWorkDexRowID = DEX_ROW_ID from CM10100 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber  if (not exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @CMDpstWorkTbl and row_id = @CMDpstWorkDexRowID and session_id = @@spid)) begin  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 1,  @I_vtable_path_name = @CMDpstWorkTbl,   @I_vrow_id = @CMDpstWorkDexRowID,   @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@DexLockErrorState <> 0) or (@iError <> 0) or (@iStatus <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7411    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (exists(select 1 from CM00100 (nolock) where CHEKBKID = @I_vCHEKBKID and Deposit_In_Progress <> '')) begin  select @O_iErrorState = 7412     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end else begin  update CM00100 set Deposit_In_Progress = @I_vdepositnumber where CHEKBKID = @I_vCHEKBKID  if (@@error <> 0)  begin  select @O_iErrorState = 7413     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  exec @iStatus = taGetTrxSourceNumber  2,  'CMDEP',  1,  @TRXSORCE output,  @iTrxSorceErrState output select @iError = @@error if ((@iStatus <> 0) or (@iTrxSorceErrState <> 0) or (@TRXSORCE = '') or (@TRXSORCE is null) or (@iError <> 0)) begin   select @O_iErrorState = 7414    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec @iStatus = cmGetLastJournalNumber @CMDNUMWK output, @icmGetLastJournalNumberErrState output select @iError = @@error if ((@iStatus <> 0) or (@icmGetLastJournalNumberErrState <> 0) or (@iError <> 0)) begin  select @O_iErrorState = 10448    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @CMDNUMWK = @CMDNUMWK + 1  select @DEPDATE = DEPDATE,  @Checkbook_Amount = DepAmt  from CM10100 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber  select @FUNLCURR = FUNLCURR from MC40000 (nolock)  select @DECPLCUR = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @FUNLCURR  select @CURNCYID = CURNCYID from CM00100 (nolock) where CHEKBKID = @I_vCHEKBKID  select @XCHGRATE = XCHGRATE,  @RTCLCMTD = RTCLCMTD  from CM10101 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber  if ((@CURNCYID = '') or (@XCHGRATE = 1.00000)) begin  select @TRXAMNT = @Checkbook_Amount end else begin  select @TRXAMNT1 = isnull(sum(DepAmt * XCHGRATE),0)  from CM10100 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber and RTCLCMTD = 0   select @TRXAMNT2 = isnull(sum(DepAmt / XCHGRATE),0)  from CM10100 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber and RTCLCMTD = 1   select @TRXAMNT = round(@TRXAMNT1 + @TRXAMNT2, @DECPLCUR) end  update CM00100 set CURRBLNC = CURRBLNC + @Checkbook_Amount where CHEKBKID = @I_vCHEKBKID if (@@error <> 0) begin  select @O_iErrorState = 7416     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (exists(select top 1 RLGANLOS from CM20300 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber and RLGANLOS <> 0)) begin  declare PostGainLoss INSENSITIVE cursor for select  CMRECNUM,  RCPTNMBR,  CURNCYID,  SRCDOCNUM,  AUDITTRAIL,  RATETPID,  EXGTBLID,  CURRNIDX,  DECPLCUR,  RLGANLOS,  DENXRATE  from CM20300 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber and RLGANLOS <> 0  order by RCPTNMBR   open PostGainLoss  select @iCursorError = @@cursor_rows   if (@iCursorError > 0)  begin  fetch next from PostGainLoss into  @cCMRECNUM,  @cRCPTNMBR,  @cCURNCYID,  @cSRCDOCNUM,  @cAUDITTRAIL,  @cRATETPID,  @cEXGTBLID,  @cCURRNIDX,  @cDECPLCUR,  @cRLGANLOS,  @cDENXRATE  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 5459   break  end   if (@cRLGANLOS < 0)  begin  select @GainLoss = -1  end  else  begin  select @GainLoss = 1  end   select @REALGAINActIdx = REALGAIN,  @REALLOSSActIdx = REALLOSS  from MC40301 (nolock) where RATETPID = @cRATETPID and CURNCYID = @cCURNCYID and EXGTBLID = @cEXGTBLID   if (@REALGAINActIdx = 0)  begin  select @REALGAINActIdx = REALGAIN from MC40201 (nolock) where CURNCYID = @cCURNCYID  if (@REALGAINActIdx = 0)  begin  select @REALGAINActIdx = ACTINDX from SY01100 (nolock) where SERIES = 2 and SEQNUMBR = 100  end  end   if (@REALLOSSActIdx = 0)  begin  select @REALLOSSActIdx = REALLOSS from MC40201 (nolock) where CURNCYID = @cCURNCYID  if (@REALLOSSActIdx = 0)  begin  select @REALLOSSActIdx = ACTINDX from SY01100 (nolock) where SERIES = 2 and SEQNUMBR = 200  end  end   select @ChkbkActIdx = ACTINDX from CM00100 (nolock) where CHEKBKID = @I_vCHEKBKID   if (@cRLGANLOS < 0)  begin  select @DebActIdx = @REALLOSSActIdx  select @CrdActIdx = @ChkbkActIdx  end  else  begin  select @CrdActIdx = @REALGAINActIdx  select @DebActIdx = @ChkbkActIdx  end   select @cRLGANLOS = abs(@cRLGANLOS)   exec @iStatus = glGetNextJournalEntry  1,  0,  @JRNENTRY output,  @O_tOUTOK output,  @iJrnlEntryErrState output  select @iError = @@error   if ((@iStatus <> 0) or (@iJrnlEntryErrState <> 0) or (@O_tOUTOK <> 1) or (@iError <> 0))  begin  select @O_iErrorState = 5460   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   if (@CrdActIdx <= @DebActIdx)  begin  select @CreditAmnt = @cRLGANLOS,  @DebitAmnt = 0,  @AcctIndx = @CrdActIdx  end  else  begin  select @DebitAmnt = @cRLGANLOS,  @CreditAmnt = 0,  @AcctIndx = @DebActIdx  end   exec @iStatus = taGLTransactionLineInsert  @I_vBACHNUMB = @TRXSORCE,  @I_vJRNENTRY = @JRNENTRY,  @I_vSQNCLINE = 16384,  @I_vACTINDX = @AcctIndx,  @I_vCRDTAMNT = @CreditAmnt,  @I_vDEBITAMT = @DebitAmnt,  @I_vDSCRIPTN = 'Bank Deposit Entry',  @I_vORCTRNUM = 0,     @I_vORDOCNUM = @I_vdepositnumber,  @I_vORMSTRID = @I_vCHEKBKID,  @I_vORMSTRNM = @cRCPTNMBR,  @O_iErrorState = @iGLTrxLineInsertErrState output,  @oErrString = @iGLTrxLineInsertErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iGLTrxLineInsertErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGLTrxLineInsertErrString  select @O_iErrorState = 5462    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   if (@CrdActIdx <= @DebActIdx)  begin  select @DebitAmnt = @cRLGANLOS,  @CreditAmnt = 0,  @AcctIndx = @DebActIdx  end  else  begin  select @CreditAmnt = @cRLGANLOS,  @DebitAmnt = 0,  @AcctIndx = @CrdActIdx   end   exec @iStatus = taGLTransactionLineInsert  @I_vBACHNUMB = @TRXSORCE,  @I_vJRNENTRY = @JRNENTRY,  @I_vSQNCLINE = 32768,  @I_vACTINDX = @AcctIndx,  @I_vCRDTAMNT = @CreditAmnt,  @I_vDEBITAMT = @DebitAmnt,  @I_vDSCRIPTN = 'Bank Deposit Entry',  @I_vORCTRNUM = 0,     @I_vORDOCNUM = @I_vdepositnumber,  @I_vORMSTRID = @I_vCHEKBKID,  @I_vORMSTRNM = @cRCPTNMBR,  @O_iErrorState = @iGLTrxLineInsertErrState output,  @oErrString = @iGLTrxLineInsertErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iGLTrxLineInsertErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGLTrxLineInsertErrString  select @O_iErrorState = 5461    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   exec @iStatus = taGLTransactionHeaderInsert  @I_vBACHNUMB = @TRXSORCE,  @I_vJRNENTRY = @JRNENTRY,  @I_vREFRENCE = 'Bank Deposit Entry',  @I_vTRXDATE = @DEPDATE,  @I_vTRXTYPE = 0,  @I_vSQNCLINE = 16384,  @I_vSOURCDOC = 'CMDEP',  @I_vCURNCYID = '',  @O_iErrorState = @iGLTrxHdrInsertErrState output,  @oErrString = @iGLTrxHdrInsertErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iGLTrxHdrInsertErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGLTrxHdrInsertErrString  select @O_iErrorState = 5463    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   select @DSTSQNUM = @DSTSQNUM + 1   if (@GainLoss = -1)  begin  select @CMActIndx = @DebActIdx,  @CMDebitAmount = @cRLGANLOS,  @CMCreditAmount = 0  end  else  begin  select @CMActIndx = @CrdActIdx,  @CMDebitAmount = 0,  @CMCreditAmount = @cRLGANLOS  end   insert CM20400 (  CMDNUMWK,  VOIDED,  DSTSQNUM,  ACTINDX,  DEBITAMT,  CRDTAMNT,  DistRef,  GLPOSTDT,  ORCRDAMT,  ORDBTAMT  )  select  @CMDNUMWK,   0,    @DSTSQNUM,   @CMActIndx,   @CMDebitAmount,   @CMCreditAmount,  '',    @DEPDATE,   0,    0    if (@@error <> 0)  begin  select @O_iErrorState = 7467    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   select @DSTSQNUM = @DSTSQNUM + 1   if (@GainLoss = -1)  begin  select @CMActIndx = @CrdActIdx,  @CMDebitAmount = 0,  @CMCreditAmount = @cRLGANLOS  end  else  begin  select @CMActIndx = @DebActIdx,  @CMDebitAmount = @cRLGANLOS,  @CMCreditAmount = 0  end   insert CM20400 (  CMDNUMWK,  VOIDED,  DSTSQNUM,  ACTINDX,  DEBITAMT,  CRDTAMNT,  DistRef,  GLPOSTDT,  ORCRDAMT,  ORDBTAMT  )  select  @CMDNUMWK,   0,    @DSTSQNUM,   @CMActIndx,   @CMDebitAmount,   @CMCreditAmount,  '',    @DEPDATE,   0,    0    if (@@error <> 0)  begin  select @O_iErrorState = 7468    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   delete DTA10100 where substring(DTAREF,1,14) in(select substring(cast(DTA_Index as varchar),1,9)+substring(cast(DTA_Index as varchar),11,5)  from GL10000 where JRNENTRY = @JRNENTRY)  if (@@error <> 0)  begin  select @O_iErrorState = 7463    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   delete DTA10200 where substring(DTAREF,1,14) in(select substring(cast(DTA_Index as varchar),1,9)+substring(cast(DTA_Index as varchar),11,5)  from GL10000 where JRNENTRY = @JRNENTRY)  if (@@error <> 0)  begin  select @O_iErrorState = 7464    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   update CM20300 set  Cash_Account_Index =  case  when @GainLoss = -1  then @CrdActIdx  else @DebActIdx  end,  Realized_GL_Account_Inde =  case  when @GainLoss = -1  then @REALLOSSActIdx  else @REALGAINActIdx  end  where CMRECNUM = @cCMRECNUM  if (@@error <> 0)  begin  select @O_iErrorState = 7417    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   update GL10000 set  USWHPSTD = @I_vPTDUSRID,  ORTRXSRC = @TRXSORCE,  ORPSTDDT = @CurrDate,  DTAControlNum = @ChkbkActIdx,  CURNCYID = @cCURNCYID,  CURRNIDX = @cCURRNIDX,  RATETPID = @cRATETPID,  EXGTBLID = @cEXGTBLID,  GLHDRVAL = 0,  OPENYEAR = 0,  Tax_Date = ''  where JRNENTRY = @JRNENTRY  if (@@error <> 0)  begin  select @O_iErrorState = 7462    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   update GL10001 set  XCHGRATE = 0,  GLLINVAL = 0,  ORCTRNUM = @ChkbkActIdx,  RATETPID = '',  DTA_GL_Status = 40,  EXGTBLID = '',  ORCRDAMT = 0,  ORDBTAMT = 0,  LNESTAT = 257,  PSTNGTYP = 0  where JRNENTRY = @JRNENTRY  if (@@error <> 0)  begin  select @O_iErrorState = 7415    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostGainLoss  return (@O_iErrorState)  end   fetch next from PostGainLoss into  @cCMRECNUM,  @cRCPTNMBR,  @cCURNCYID,  @cSRCDOCNUM,  @cAUDITTRAIL,  @cRATETPID,  @cEXGTBLID,  @cCURRNIDX,  @cDECPLCUR,  @cRLGANLOS,  @cDENXRATE  end  end   deallocate PostGainLoss   update SY00500 set  BCHCOMNT = 'Bank Deposit Entry',  BRKDNALL = 1  where BACHNUMB = @TRXSORCE and BCHSOURC = 'GL_Normal'  if (@@error <> 0)  begin  select @O_iErrorState = 8081    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  update CM20300 set  DEPOSITED = 1  where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber if (@@error <> 0) begin  select @O_iErrorState = 7465    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  insert CM20100 (  CMDNUMWK,  RecNumControl,  VOIDED,  CNTRLTYP,  AUDITTRAIL,  CHEKBKID,  CMTrxType,  CMTrxNum,  CMERRMSG  )  select  @CMDNUMWK,    @CMDNUMWK,    0,     1,     @TRXSORCE,    @I_vCHEKBKID,    1,     @I_vdepositnumber,   0x00000000   if (@@error <> 0) begin  select @O_iErrorState = 7418   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  insert CM20200 (  CMRECNUM,  sRecNum,  RCRDSTTS,  CHEKBKID,  CMTrxNum,  CMTrxType,  TRXDATE,  GLPOSTDT,  TRXAMNT,  CURNCYID,  CMLinkID,  paidtorcvdfrom,  DSCRIPTN,  Recond,  RECONUM,  ClrdAmt,  clearedate,  VOIDED,  VOIDDATE,  VOIDPDATE,  VOIDDESC,  NOTEINDX,  AUDITTRAIL,  DEPTYPE,  SOURCDOC,  SRCDOCTYP,  SRCDOCNUM,  POSTEDDT,  PTDUSRID,  MODIFDT,  MDFUSRID,  USERDEF1,  USERDEF2,  ORIGAMT,  Checkbook_Amount,  RATETPID,  EXGTBLID,  XCHGRATE,  EXCHDATE,  TIME1,  RTCLCMTD,  EXPNDATE,  CURRNIDX,  DECPLCUR,  DENXRATE,  MCTRXSTT,  Xfr_Record_Number,  EFTFLAG  )  select  @CMDNUMWK,    @CMDNUMWK,    40,     @I_vCHEKBKID,    @I_vdepositnumber,   1,     DEPDATE,    GLPOSTDT,    @TRXAMNT,    CURNCYID,    '',     '',     DSCRIPTN,    0,     .00000,     .00000,     @dtDEFAULT,    0,     @dtDEFAULT,    @dtDEFAULT,    '',     NOTEINDX,    @TRXSORCE,    DEPTYPE,    'CMDEP',    1,     @I_vdepositnumber,   @CurrDate,    @I_vPTDUSRID,     @CurrDate,    MDFUSRID,    '',     '',     0,     @Checkbook_Amount,   RATETPID,    EXGTBLID,    XCHGRATE,    EXCHDATE,    TIME1,     RTCLCMTD,    EXPNDATE,    CURRNIDX,    DECPLCUR,    DENXRATE,    0,     .00000,     0      from CM10100 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber if (@@error <> 0) begin  select @O_iErrorState = 7419   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  insert CM20201 (  depositnumber,  CHEKBKID,  CURNCYID,  Void,  CMRECNUM,  CURRNIDX,  RATETPID,  EXGTBLID,  XCHGRATE,  EXCHDATE,  TIME1,  RTCLCMTD,  EXPNDATE,  DECPLCUR,  RCPTCOUNT,  ORCHKTTL,  Originating_Check_Count,  Orig_Credit_Card_Total,  Originating_Credit_Card_,  Originating_Cash_Total,  Originating_Cash_Count,  Originating_Coin_Amount,  Originating_Deposit_Amou,  Originating_Checkbook_Am,  DENXRATE,  MCTRXSTT  )  select  depositnumber,  CHEKBKID,  CURNCYID,  0,      CMRECNUM,  CURRNIDX,  RATETPID,  EXGTBLID,  XCHGRATE,  EXCHDATE,  TIME1,  RTCLCMTD,  EXPNDATE,  DECPLCUR,  RCPTCOUNT,  ORCHKTTL,  Originating_Check_Count,  Orig_Credit_Card_Total,  Originating_Credit_Card_,  Originating_Cash_Total,  Originating_Cash_Count,  Originating_Coin_Amount,  Originating_Deposit_Amou,  Originating_Checkbook_Am,  DENXRATE,  MCTRXSTT  from CM10101 (nolock) where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber if (@@error <> 0) begin  select @O_iErrorState = 7420    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  delete CM10100 where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber if (@@error <> 0) begin  select @O_iErrorState = 7421    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  delete CM10101 where CHEKBKID = @I_vCHEKBKID and depositnumber = @I_vdepositnumber if (@@error <> 0) begin  select @O_iErrorState = 7422    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  update CM00100 set Deposit_In_Progress = '' where CHEKBKID = @I_vCHEKBKID if (@@error <> 0) begin  select @O_iErrorState = 7423     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 3,   @I_vtable_path_name = @CMChkbkMstrTbl,   @I_vrow_id = @CMChkbkMstrDexRowID,   @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output select @iError = @@error if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0)) begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7424    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 3,   @I_vtable_path_name = @CMDpstWorkTbl,   @I_vrow_id = @CMDpstWorkDexRowID,   @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output select @iError = @@error if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0)) begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7425    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec @iStatus = taBRPostBankDepositsPost  @I_vCHEKBKID,  @I_vdepositnumber,  @I_vRequesterTrx,  @I_vPTDUSRID,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 7426    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taBRPostBankDeposits] TO [DYNGRP]
GO
