SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[aagCheckFACodeSettingAssign] @I_nValidationLevel SMALLINT =0,   @I_cTableCode NVARCHAR(30) = NULL, @I_cTableError NVARCHAR(30) = NULL, @I_nFASetupID INT = 0, @I_nListID INT = 0, @I_nAcctClassID INT = 0, @I_nActIndx INT = 0, @I_nAssignID INT = 0, @I_fValidCodeSetting TINYINT = 1, @O_fValidCodeSetting TINYINT = 1 OUTPUT, @I_UserID VARCHAR(20), @I_Right INT  As Begin  declare @nTrxDimID INT,  @nTrxDimCodeID  INT,  @cTrxDim VARCHAR(15),  @cTrxDimCode VARCHAR(30),  @nErrorNum INT,  @nHdrErrorNum INT,  @nDataType TINYINT,  @nAnalysisType SMALLINT,  @nZero INT,  @NOTFound TINYINT,  @nTrxDimID1 INT,  @nTrxDimID2 INT,  @nTrxDimCodeID1 INT,  @AccountClass CHAR(15)   set nocount on  Set @O_fValidCodeSetting = 1  Set @nZero = 0  exec ('declare aaCode cursor fast_forward FOR  select aaTrxDimID, aaTrxCodeID from ' + @I_cTableCode + ' where aaSubLedgerHdrID = ' + @I_nFASetupID +  ' and aaSubLedgerDistID =' + @I_nListID  )  open aaCode  fetch next from aaCode into @nTrxDimID,@nTrxDimCodeID  WHILE @@fetch_status = 0  begin  exec aagCheckCodeSetting  @I_nValidationLevel,  @I_nAcctClassID,  @I_nActIndx,  @nTrxDimID,  @nTrxDimCodeID,  @cTrxDim output,  @cTrxDimCode output,  @nErrorNum  output,  @I_UserID,  @I_Right   if @nErrorNum <> 0  begin   If @I_fValidCodeSetting = 1 and @O_fValidCodeSetting = 1   If @I_nValidationLevel = 1  Begin  set @nHdrErrorNum = 100  exec ('insert ' + @I_cTableError + '(aaSubLedgerHdrID, aaSubLedgerDistID,aaSubLedgerAssignID  ,aaErrorNum,aaTrxDim,aaTrxDimCode)  values(' + @I_nFASetupID + ',' + @I_nListID + ',' + @nZero +  ',' + @nHdrErrorNum + ',''' + '' + ''',''' + '' + ''')' )   End  set @O_fValidCodeSetting = 0  Select @AccountClass = aaAccountClass From AAG00201 Where aaAcctClassID = @I_nAcctClassID   exec ('insert ' + @I_cTableError + '(aaSubLedgerHdrID, aaSubLedgerDistID,aaSubLedgerAssignID  ,aaErrorNum,aaTrxDim,aaTrxDimCode, aaAcctClassID, aaAccountClass)  values(' + @I_nFASetupID + ',' + @I_nListID + ',' + @I_nAssignID +  ',' + @nErrorNum + ',''' + @cTrxDim + ''',''' + @cTrxDimCode + ''',' + @I_nAcctClassID + ',''' + @AccountClass + ''')' )   end  fetch next from aaCode into @nTrxDimID,@nTrxDimCodeID  end  close aaCode  deallocate aaCode   If @I_nValidationLevel <> 2 and @I_nAcctClassID <> 0  Begin  If RIGHT(@I_cTableCode, 8) = 'AAG04001'   Begin  Set @I_cTableCode = 'AAG04001'    End   Begin  Declare aaCheck1 cursor fast_forward FOR  Select aaTrxDimID, aaTrxDimCodeIDDflt, aaDataEntry from AAG00202 where aaAcctClassID = @I_nAcctClassID   Open aaCheck1  Fetch next from aaCheck1 into @nTrxDimID1, @nTrxDimCodeID1, @nAnalysisType  Set @NOTFound = 0  While @@fetch_status = 0  Begin  Set @nErrorNum = 0  Set @NOTFound = 0  Exec('Declare aaCheck2 cursor fast_forward FOR  Select aaTrxDimID from ' + @I_cTableCode + ' Where aaTrxDimID = ' + @nTrxDimID1  + ' and aaSubLedgerHdrID  = ' + @I_nFASetupID + ' and aaSubLedgerDistID  = ' + @I_nListID )  Open aaCheck2  Fetch next from aaCheck2 into @nTrxDimID2  If @@fetch_status <> 0  Set @NOTFound = 1  Close aaCheck2  Deallocate aaCheck2  If @NOTFound = 1 and @nTrxDimID1 > 0  If @nAnalysisType = 2   Set @nErrorNum = 4  Else If @nAnalysisType = 3   Set @nErrorNum = 5  Else If @nAnalysisType = 4   Set @nErrorNum = 6   If @nErrorNum <> 0  Begin  If @I_fValidCodeSetting = 1 and @O_fValidCodeSetting = 1   If @I_nValidationLevel = 1  Begin  set @nHdrErrorNum = 100  exec ('insert ' + @I_cTableError + '(aaSubLedgerHdrID, aaSubLedgerDistID,aaSubLedgerAssignID  ,aaErrorNum,aaTrxDim,aaTrxDimCode)  values(' + @I_nFASetupID + ',' + @I_nListID + ',' + @nZero +  ',' + @nHdrErrorNum + ',''' + '' + ''',''' + '' + ''')' )   End  set @O_fValidCodeSetting = 0  select @cTrxDim =  aaTrxDim from AAG00400 where aaTrxDimID = @nTrxDimID1  select @cTrxDimCode = aaTrxDimCode from AAG00401 where aaTrxDimID = @nTrxDimID and aaTrxDimCodeID = @nTrxDimCodeID1   exec ('insert ' + @I_cTableError + '(aaSubLedgerHdrID, aaSubLedgerDistID,aaSubLedgerAssignID  ,aaErrorNum,aaTrxDim,aaTrxDimCode)  values(' + @I_nFASetupID + ',' + @I_nListID + ',' + @I_nAssignID +  ',' + @nErrorNum + ',''' + @cTrxDim + ''',''' + @cTrxDimCode + ''')' )  End  Fetch next from aaCheck1 into @nTrxDimID1, @nTrxDimCodeID1, @nAnalysisType  End  Close aaCheck1  Deallocate aaCheck1  End  End  set nocount off End   
GO
GRANT EXECUTE ON  [dbo].[aagCheckFACodeSettingAssign] TO [DYNGRP]
GO
