SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Copy_Service_Call]  @OLDTYPE smallint,  @OLDCALLNBR char(11),  @NEWTYPE smallint,  @NEWCALLNBR char(11) AS declare @default_status varchar(3) declare @OLDTIMEZONE char(3) declare @TIMEZONEDIFF smallint declare @Nowtime datetime declare @OldNoteIndex numeric(19,5) declare @NewNoteIndex numeric(19,5) declare @EQPLINE integer declare @LNITMSEQ integer declare @LINITMTYP char(3),  @Amount numeric (19,2),  @OrigAmount numeric (19,2),  @QTY numeric(19,5),  @CMPNTSEQ int declare @MinDate datetime  exec smGetMinDate @MinDate output  BEGIN TRANSACTION select  @default_status = SRVSTAT  from SVC00998 select * into #NewCall from SVC00200 where  SRVRECTYPE = @OLDTYPE and  CALLNBR = @OLDCALLNBR select @OLDTIMEZONE = TIMEZONE from SVC00200 where  SRVRECTYPE = @OLDTYPE and  CALLNBR = @OLDCALLNBR select @TIMEZONEDIFF = TIMEZONEVALUE from SVC00900 where  SVC00900.TIMEZONE = @OLDTIMEZONE select @Nowtime = DATEADD(hh,@TIMEZONEDIFF,GETDATE()) insert into SVC00200  select  @NEWCALLNBR, @NEWTYPE, @default_status, SRVTYPE, SVCDESCR, priorityLevel, CUSTNMBR, Customer_Reference, ADRSCODE, CUSTNAME, ADDRESS1, ADDRESS2, CITY, STATE, ZIP, CNTCPRSN, PHONE1, OFFID, SVCAREA, TECHID, TIMEZONE, CONVERT(varchar(10),GETDATE(),102) + ' 00:00:00', @MinDate + CONVERT(varchar(10),@Nowtime,108), @MinDate, @MinDate, CONVERT(varchar(10),GETDATE(),102) + ' 00:00:00', @MinDate + CONVERT(varchar(10),@Nowtime,108), @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, @MinDate, PRICELVL, PYMTRMID, SLPRSNID, 0, LABPCT, 0, 0, PARTPCT, 0, 0, MISCPCT, 0, TAXSCHID, '', '', 0, 0, 0, 0, 0, 0, 0, PORDNMBR, 0, 0, USERDEF1, USERDEF2, USRDEF03, USRDEF04, USRDEF05, @OLDTYPE, @OLDCALLNBR, @MinDate, @MinDate, 0, '', 0, '', ProjectRef1_1, ProjectRef1_2, ProjectRef1_3, ProjectRef1_4, CONSTS, CONTNBR, SVC_Contract_Line_SEQ, ETTR, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Bill_To_Customer, CURNCYID, SVC_Bill_To_Address_Code, CURRNIDX ,  RATETPID ,  EXGTBLID ,  XCHGRATE ,  EXCHDATE ,  DECPLACS ,  TIME1 ,  RATECALC ,  VIEWMODE ,  ISMCTRX ,  EXPNDATE ,  DENXRATE ,  MCTRXSTT ,  0 ,  0,  0 ,  0 ,  0 ,  0 ,  0,  0,  0,  0,  ADDRESS3,  COUNTRY,  0,  '',   0,0,0,0,0 ,9,2 from #NewCall if @@error <> 0 goto baderror select @OldNoteIndex = NOTEINDX from SVC00200 where SRVRECTYPE = @OLDTYPE and CALLNBR = @OLDCALLNBR if @OldNoteIndex > 0  begin  exec SVC_Copy_Note @OldNoteIndex, @NewNoteIndex output  update SVC00200 set NOTEINDX = @NewNoteIndex where SRVRECTYPE = @NEWTYPE and CALLNBR = @NEWCALLNBR  end insert into SVC00210 values  ( @NEWCALLNBR,   @NEWTYPE,   1,  @default_status,   @default_status,  '',  'Record Added via Transfer',  USER, CONVERT(varchar(10),GETDATE(),101) ,  CONVERT(varchar(10),GETDATE(),108)   ) select * into #NewCodes from SVC00201 where  SRVRECTYPE = @OLDTYPE and  CALLNBR = @OLDCALLNBR insert into SVC00201 select  @NEWTYPE,  @NEWCALLNBR,  LNITMSEQ,  EQUIPID,  ITEMNMBR,  PRDLINE,  PROBCDE,  CAUSECDE,  RPRCODE,  0,  0,  0  from #NewCodes if @@error <> 0 goto baderror select * into #NewEquipment from SVC00202 where  SRVRECTYPE = @OLDTYPE and  CALLNBR = @OLDCALLNBR insert into SVC00202 select @NEWTYPE,  @NEWCALLNBR,  EQPLINE,  EQUIPID,  ITEMNMBR,  0,  0,  0,  @MinDate,  0 from #NewEquipment if @@error <> 0 goto baderror select * into #NewLines from SVC00203 where  SRVRECTYPE = @OLDTYPE and  CALLNBR = @OLDCALLNBR insert into SVC00203 select @NEWTYPE,  @NEWCALLNBR,  EQPLINE,  LNITMSEQ,  LINITMTYP,  @default_status,  TECHID,  ITEMNMBR,  ITEMUSETYPE,  ITEMDESC,  LOCNCODE,  UOFM,  QTYORDER,  0,  0,  CASE WHEN LINITMTYP <> 'P' AND LINITMTYP <> 'L' THEN QTYSOLD ELSE 0 END,  UNITCOST,  UNITPRCE,  CASE WHEN LINITMTYP <> 'P' AND LINITMTYP <> 'L' THEN EXTDCOST ELSE 0 END,  CASE WHEN LINITMTYP <> 'P' AND LINITMTYP <> 'L' THEN XTNDPRCE ELSE 0 END,  0,  STRTDATE,  STRTTIME,  ENDDATE,  ENDTME,  TRANSTME,  BILLABLTIM,  TRNSFLOC,  0,  TRNFLAG,  '',  0,  LABPCT,  PARTPCT,  MISCPCT,  FUFILDAT,  '',  0,  0,  '',  0,  0,  0,  0,  PRICELVL,  SVC_Address_Option,  SVC_Misc_Address_Code,  SVC_Disable_XFR_Grouping,  Work_Type,  ORUNTCST,  ORUNTPRC,  CASE WHEN LINITMTYP <> 'P' AND LINITMTYP <> 'L' THEN OREXTCST ELSE 0 END,  CASE WHEN LINITMTYP <> 'P' AND LINITMTYP <> 'L' THEN OXTNDPRC ELSE 0 END,  0,0 ,  '' ,svcCreateVoucher,'', CMPNTSEQ, CMPITQTY from #NewLines if @@error <> 0 goto baderror declare Lines_Cursor cursor for select EQPLINE, LNITMSEQ, LINITMTYP,QTYSOLD,XTNDPRCE,OXTNDPRC, CMPNTSEQ  from SVC00203   where SRVRECTYPE=@NEWTYPE and CALLNBR=@NEWCALLNBR open Lines_Cursor fetch next from Lines_Cursor into @EQPLINE, @LNITMSEQ, @LINITMTYP,@QTY,@Amount,@OrigAmount, @CMPNTSEQ while (@@fetch_status = 0)   begin  select @OldNoteIndex = NOTEINDX from SVC00203  where SRVRECTYPE=@OLDTYPE and   CALLNBR=@OLDCALLNBR and   EQPLINE=@EQPLINE and   LNITMSEQ=@LNITMSEQ and   LINITMTYP=@LINITMTYP and  CMPNTSEQ = @CMPNTSEQ  if @OldNoteIndex > 0       begin  exec SVC_Copy_Note @OldNoteIndex, @NewNoteIndex output  update SVC00203 set NOTEINDX = @NewNoteIndex   where SRVRECTYPE=@NEWTYPE and   CALLNBR=@NEWCALLNBR and   EQPLINE=@EQPLINE and  LNITMSEQ=@LNITMSEQ and   LINITMTYP=@LINITMTYP and CMPNTSEQ = @CMPNTSEQ  end  if @QTY > 0   exec SVC_Set_Service_Line_Dist @NEWTYPE,@NEWCALLNBR,@EQPLINE, @LNITMSEQ, @LINITMTYP,@Amount,@OrigAmount,1, @CMPNTSEQ  fetch next from Lines_Cursor into @EQPLINE, @LNITMSEQ, @LINITMTYP,@QTY,@Amount,@OrigAmount, @CMPNTSEQ  end deallocate Lines_Cursor COMMIT TRANSACTION return baderror:  rollback transaction return @@error  return   
GO
GRANT EXECUTE ON  [dbo].[SVC_Copy_Service_Call] TO [DYNGRP]
GO
