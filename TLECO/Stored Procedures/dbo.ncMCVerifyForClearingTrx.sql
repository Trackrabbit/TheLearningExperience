SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ncMCVerifyForClearingTrx] 	@I_cCurrencyID char(15) = NULL, 	@I_sMCTrxState smallint = NULL, 	@O_cRateTypeID char(15) = NULL output, 	@O_cExchangeTableID char(15) = NULL output, 	@O_iErrorState int = NULL output as declare 	@iError int, 	@iStatus int, 	@tLoop tinyint, 	@tTransaction tinyint, 	@tEuroEnabled tinyint, 	@tInactive tinyint, 	@sCompanyID smallint, 	@cCurrencyID char(15), 	@cEuroCurrencyID char(15), 	@tBaseExchangeRateOn tinyint, 	@MC_NONDENOM_TO_DENOM smallint, 	@MC_DENOM_TO_NONDENOM smallint, 	@BASERATEON_FUNCTIONAL smallint, 	@BASERATEON_EURO smallint, 	@TRUE tinyint, 	@FALSE tinyint set nocount on select 	@O_iErrorState = 0, 	@iStatus = 0 /* IB - 20/06/06, Added Intercompany Log table */ exec dbo.ncWriteInterLog 'ncMCVerifyForClearingTrx started' if @@trancount = 0 begin 	select @tTransaction = 1 	begin transaction end while (@tLoop is NULL) begin 	select @tLoop = 1 	if @I_cCurrencyID is NULL or 		@I_sMCTrxState is NULL 	begin 		select @O_iErrorState = 20030 		break 	end 	 	select 		@MC_NONDENOM_TO_DENOM = 3, 		@MC_DENOM_TO_NONDENOM = 4, 		@BASERATEON_FUNCTIONAL = 0, 		@BASERATEON_EURO = 1, 		@TRUE = 1, 		@FALSE = 0 	 	/* get global settings */ 	select @sCompanyID = CMPANYID FROM DYNAMICS..SY01500 where INTERID = (select db_name()) 	 	if exists(select 1 from MC60400 where ENABLED = @TRUE) 		select @tEuroEnabled = @TRUE 	else 		select @tEuroEnabled = @FALSE 	 	select @cEuroCurrencyID = isnull(Euro_Currency_ID,'') from DYNAMICS..MC40400 	 	/* based on trx state, determine currency id */ 	if @I_sMCTrxState = @MC_DENOM_TO_NONDENOM 		select @cCurrencyID = @cEuroCurrencyID 	else 		select @cCurrencyID = @I_cCurrencyID 	 	if @I_sMCTrxState = @MC_NONDENOM_TO_DENOM 		select @tBaseExchangeRateOn = @BASERATEON_EURO 	else 		select @tBaseExchangeRateOn = @BASERATEON_FUNCTIONAL 	 	if @cCurrencyID <> '' 	begin 		/* get default rate type */ 		select @O_cRateTypeID = DEFFINTP from MC40000 		 		/* verify rate type */ 		if not exists(select 1 from MC40100 where RATETPID = @O_cRateTypeID) 			select @O_cRateTypeID = '' 		 		select top 1 @O_cExchangeTableID = EXGTBLID from MC40301 		where CURNCYID = @cCurrencyID and RATETPID = @O_cRateTypeID and Base_Exchange_Rate_On = @tBaseExchangeRateOn 		 		if @@rowcount <> 1 			select @O_cRateTypeID = '', @O_cExchangeTableID = '' 		else 		begin 			/* verify the exch. table id */ 			if not exists(select 1 from DYNAMICS..MC40300 where EXGTBLID = @O_cExchangeTableID) 				select @O_cExchangeTableID = '' 			 			select @tInactive = INACTIVE from DYNAMICS..MC60200 where CMPANYID = @sCompanyID and EXGTBLID = @O_cExchangeTableID 			 			if @@rowcount <> 1 or @tInactive = @TRUE 				select @O_cExchangeTableID = '' 		end 	end 	else 		select @O_cRateTypeID = '', @O_cExchangeTableID = '' end if @iStatus <> 0 or @O_iErrorState <> 0 begin 	if @tTransaction = 1 		rollback transaction end else if @tTransaction = 1 	commit transaction return (@iStatus)  
GO
GRANT EXECUTE ON  [dbo].[ncMCVerifyForClearingTrx] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[ncMCVerifyForClearingTrx] TO [public]
GO
