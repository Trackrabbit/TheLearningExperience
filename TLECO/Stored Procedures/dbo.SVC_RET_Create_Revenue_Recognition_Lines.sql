SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[SVC_RET_Create_Revenue_Recognition_Lines] (  @FiscalYear Integer,  @FiscalPeriod Integer,  @ContractRecordType Smallint,  @ContractNumber Char(11),  @ContractLine Numeric(19,5),  @Status Smallint,  @PostedDate Datetime,  @SourceType Char(3),  @SourceDocument Varchar(255),  @TransactionDate datetime,  @TransactionAmount Numeric(19,5),  @UserID Varchar(30),  @StartDate Datetime,  @EndDate Datetime,  @Discount Numeric(19,5),  @ErrorCondition integer = 0 OUTPUT ) as  declare @RevenueLine integer,  @EndingFiscalYear integer,  @BeginningFiscalYear integer,   @CurrentFiscalYear integer,   @EndingFiscalPeriod integer,  @BeginningFiscalPeriod integer,  @CurrentFiscalPeriod integer,  @PostedAmount numeric(19,5),   @OrigPostedAmount numeric(19,5),   @OrigTransactionAmount numeric(19,5),   @NetTransactionAmount numeric(19,5),   @OrigNetTransactionAmount numeric(19,5),   @LineTransactionAmount numeric(19,5),   @OrigLineTransactionAmount numeric(19,5),  @NetLineTransactionAmount numeric(19,5),  @OrigNetLineTransactionAmount numeric(19,5),  @LineDiscountAmount numeric(19,5),  @OrigLineDiscountAmount numeric(19,5),  @FirstLineTransactionAmount numeric(19,5),   @OrigFirstLineTransactionAmount numeric(19,5),   @FirstLineNetTransactionAmount numeric(19,5),   @OrigFirstLineNetTransactionAmount numeric(19,5),   @FirstLineDiscountAmount numeric(19,5),  @OrigFirstLineDiscountAmount numeric(19,5),   @FinalLineTransactionAmount numeric(19,5),   @OrigFinalLineTransactionAmount numeric(19,5),   @FinalLineNetTransactionAmount numeric(19,5),   @OrigFinalLineNetTransactionAmount numeric(19,5),   @FinalLineDiscountAmount numeric(19,5),  @OrigFinalLineDiscountAmount numeric(19,5),  @CurrentLineTransactionAmount numeric(19,5),  @CurrentOrigLineTransactionAmount numeric(19,5),   @CurrentLineDiscountAmount numeric(19,5),   @CurrentOrigLineDiscountAmount numeric(19,5),  @CurrentNetLineTransactionAmount numeric(19,5),  @CurrentOrigNetLineTransactionAmount numeric(19,5),  @CreditAmount numeric(19,5),   @OrigCreditAmount numeric(19,5),  @OrigDiscount numeric(19,5),  @ProRateAmount numeric(19,5),  @EndingStartDate datetime,  @EndingEndDate datetime,  @CurrentStartDate datetime,  @CurrentEndDate datetime,  @O_iErrorState int,  @REV_cursor cursor,  @Contract_Length smallint,  @Bill_Length smallint,  @BillStartDay smallint,  @ContractPeriod smallint,  @BillPeriod smallint,  @Smooth int,  @OverrideSmooth int ,  @Insert tinyint,  @SVC_Liability_Type smallint  declare @Divisor integer,  @Counter integer,  @MinDate datetime,  @FiscalYearChanged tinyint,  @PercentAmount numeric(19,5),  @FirstPartial numeric(19,5),  @LastPartial numeric(19,5)  declare @I_sRateCalcMethod  smallint ,     @I_sViewMode   smallint,      @I_nExchangeRate  numeric(15,7),    @I_nDenomExchangeRate numeric(15,7),      @I_sMCTrxState   smallint,      @I_sDecimalPlaces  smallint       declare @Contract_Period smallint,  @TempEndDate datetime,  @MonthlyPrice numeric(19,5),  @Total numeric(19,5), @OrigMonthlyPrice numeric(19,5) set nocount on SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED  IF @TransactionAmount = 0 BEGIN  select @ErrorCondition = 200  return  END select @CreditAmount = 0,   @OrigCreditAmount = 0,  @OverrideSmooth = 0 exec smGetMinDate @MinDate output select @I_sViewMode = 3,  @I_sRateCalcMethod = RATECALC,   @I_nExchangeRate = XCHGRATE,   @I_nDenomExchangeRate = DENXRATE,   @I_sMCTrxState = MCTRXSTT,  @I_sDecimalPlaces = DECPLACS,  @Contract_Length = Contract_Length,  @Bill_Length = BILLNGTH,  @BillStartDay = DATEPART(dd,BILSTRT),  @ContractPeriod = Contract_Period,  @BillPeriod =  BILPRD,  @OrigTransactionAmount = ORIGTOTAL,  @MonthlyPrice = SVC_Monthly_Price,  @OrigMonthlyPrice = ORIGMONTHPRICE,  @SVC_Liability_Type = SVC_Liability_Type,  @Total = TOTAL from SVC00601 WITH (NOLOCK) where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber and  LNSEQNBR = @ContractLine  if @FiscalYear = -1 and @FiscalPeriod = -1  begin  if @Total <> @TransactionAmount and (@SVC_Liability_Type > 1 or  exists(select * from SVC00604 where CONSTS = @ContractRecordType and CONTNBR = @ContractNumber and LNSEQNBR = @ContractLine))  exec SVC_Convert_Amount @I_sRateCalcMethod, @I_sViewMode,@I_nExchangeRate,  @I_nDenomExchangeRate,@I_sMCTrxState,@I_sDecimalPlaces,  @TransactionAmount,@OrigTransactionAmount OUTPUT,   @O_iErrorState OUTPUT   end  select @Smooth = SmoothRevenueCalc, @Contract_Length = Contract_Length, @Contract_Period = Contract_Period from SVC00600 WITH (NOLOCK) where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber  IF DATEPART(dd,@StartDate) = 1 and @Smooth = 1   select @OverrideSmooth = 1  IF @SourceType = 'CAL' BEGIN  IF @Status = -1  select @Status = 0   ELSE  delete from SVC00604  where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber and  LNSEQNBR = @ContractLine and   Status = 0  END  IF @Status = 0 BEGIN  select @PostedAmount = 0,  @OrigPostedAmount = 0 END ELSE IF @Status = 1 BEGIN  select @PostedAmount = @TransactionAmount, @OrigPostedAmount = @OrigTransactionAmount END ELSE IF @Status = 2 BEGIN  select @PostedAmount = 0,  @OrigPostedAmount = 0 END ELSE BEGIN  select @ErrorCondition  = 400  GOTO NoTransactionErrorCondition END  BEGIN  IF @StartDate <> @MinDate and @EndDate <> @MinDate   BEGIN  IF @StartDate >= @EndDate   BEGIN  IF @StartDate > @EndDate  select @StartDate = @EndDate  select @StartDate = DATEADD(dd, -1 * (DATEPART(dd,@StartDate) - 1),@StartDate)   exec SVC_EOM @EndDate OUTPUT  END   END ELSE  BEGIN   select @ErrorCondition  = 503  GOTO NoTransactionErrorCondition  END   END   exec SVC_FiscalPeriods @UserID,@StartDate, @EndDate, @REV_cursor OUTPUT  select @LastPartial = 1.0 FETCH LAST FROM @REV_cursor INTO @EndingFiscalPeriod,@EndingStartDate,@EndingEndDate,@EndingFiscalYear  IF @Smooth = 0   select @LastPartial = (DATEDIFF(dd,@EndingStartDate,@EndDate)+1)*1.0/ (DATEDIFF(dd,@EndingStartDate,@EndingEndDate)+1) * 1.0  BEGIN   select @Divisor = @@CURSOR_ROWS    if @Divisor = 0 select @Divisor = 1    IF @FiscalYear <> -1  select @Divisor = 1   select @NetTransactionAmount = ROUND((@TransactionAmount - (@Discount * @TransactionAmount)),2),  @OrigNetTransactionAmount = ROUND((@OrigTransactionAmount - (@Discount * @OrigTransactionAmount)),2)   IF @Smooth = 0  and @Divisor > 1   BEGIN  FETCH FIRST FROM @REV_cursor INTO @CurrentFiscalPeriod,@CurrentStartDate,@CurrentEndDate,@CurrentFiscalYear   select @PercentAmount = ((DATEPART(dd,@CurrentEndDate) - DATEPART(dd,@StartDate) * 1.00) + 1.00) / ((DATEDIFF(dd,@CurrentStartDate,@CurrentEndDate) * 1.00) + 1.00)  select @LineTransactionAmount =  ROUND((@TransactionAmount / (@Divisor - 2 +@PercentAmount + @LastPartial)),2)  select @OrigLineTransactionAmount =  ROUND((@OrigTransactionAmount / (@Divisor - 2 +@PercentAmount + @LastPartial)),2)  END  ELSE  BEGIN  select @LineTransactionAmount =  ROUND((@TransactionAmount / @Divisor),2)  select @OrigLineTransactionAmount =  ROUND((@OrigTransactionAmount / @Divisor),2)  END   select @NetLineTransactionAmount =  ROUND((@LineTransactionAmount - (@Discount * @LineTransactionAmount)),2)  select @LineDiscountAmount = @LineTransactionAmount - @NetLineTransactionAmount  select @OrigNetLineTransactionAmount =  ROUND((@OrigLineTransactionAmount - (@Discount * @OrigLineTransactionAmount)),2)  select @OrigLineDiscountAmount = @OrigLineTransactionAmount - @OrigNetLineTransactionAmount   IF @Smooth = 0   BEGIN  FETCH FIRST FROM @REV_cursor INTO @CurrentFiscalPeriod,@CurrentStartDate,@CurrentEndDate,@CurrentFiscalYear   IF (@@FETCH_STATUS <> -1)  BEGIN  select @PercentAmount = ((DATEPART(dd,@CurrentEndDate) - DATEPART(dd,@StartDate) * 1.00) + 1.00) / ((DATEDIFF(dd,@CurrentStartDate,@CurrentEndDate) * 1.00) + 1.00)    IF @Divisor = 1  BEGIN  select @FirstLineTransactionAmount =  ROUND(@LineTransactionAmount ,2),  @FirstLineNetTransactionAmount =  ROUND((@FirstLineTransactionAmount - (@Discount * @FirstLineTransactionAmount)),2),   @FirstLineDiscountAmount = @FirstLineTransactionAmount - @FirstLineNetTransactionAmount  select @OrigFirstLineTransactionAmount =  ROUND(@OrigLineTransactionAmount ,2),  @OrigFirstLineNetTransactionAmount =  ROUND((@OrigFirstLineTransactionAmount - (@Discount * @OrigFirstLineTransactionAmount)),2),   @OrigFirstLineDiscountAmount = @OrigFirstLineTransactionAmount - @OrigFirstLineNetTransactionAmount   select @LineTransactionAmount =  ROUND((@LineTransactionAmount  +  @LineTransactionAmount),2)  select @NetLineTransactionAmount =  ROUND((@LineTransactionAmount - (@Discount * @LineTransactionAmount)),2)  select @LineDiscountAmount = @LineTransactionAmount - @NetLineTransactionAmount   select @OrigLineTransactionAmount =  ROUND((@OrigLineTransactionAmount  +  @OrigLineTransactionAmount),2)  select @OrigNetLineTransactionAmount =  ROUND((@OrigLineTransactionAmount - (@Discount * @OrigLineTransactionAmount)),2)  select @OrigLineDiscountAmount = @OrigLineTransactionAmount - @OrigNetLineTransactionAmount   END ELSE  BEGIN  select @FirstLineTransactionAmount =  ROUND((@LineTransactionAmount * @PercentAmount),2),  @FirstLineNetTransactionAmount =  ROUND((@FirstLineTransactionAmount - (@Discount * @FirstLineTransactionAmount)),2),   @FirstLineDiscountAmount = @FirstLineTransactionAmount - @FirstLineNetTransactionAmount,  @OrigFirstLineTransactionAmount =  ROUND((@OrigLineTransactionAmount * @PercentAmount),2),  @OrigFirstLineNetTransactionAmount =  ROUND((@OrigFirstLineTransactionAmount - (@Discount * @OrigFirstLineTransactionAmount)),2),   @OrigFirstLineDiscountAmount = @OrigFirstLineTransactionAmount - @OrigFirstLineNetTransactionAmount  select @NetLineTransactionAmount =  ROUND((@LineTransactionAmount - (@Discount * @LineTransactionAmount)),2)  select @LineDiscountAmount = @LineTransactionAmount - @NetLineTransactionAmount   select @OrigNetLineTransactionAmount =  ROUND((@OrigLineTransactionAmount - (@Discount * @OrigLineTransactionAmount)),2)  select @OrigLineDiscountAmount = @OrigLineTransactionAmount - @OrigNetLineTransactionAmount   END  END ELSE  BEGIN  select @ErrorCondition = 300  GOTO NoTransactionErrorCondition  END   END ELSE  BEGIN  select @FirstLineTransactionAmount = @LineTransactionAmount,  @FirstLineNetTransactionAmount = @NetLineTransactionAmount,   @FirstLineDiscountAmount = @LineDiscountAmount,  @OrigFirstLineTransactionAmount = @OrigLineTransactionAmount,  @OrigFirstLineNetTransactionAmount = @OrigNetLineTransactionAmount,   @OrigFirstLineDiscountAmount = @OrigLineDiscountAmount   END    select @FinalLineTransactionAmount = @TransactionAmount - (@FirstLineTransactionAmount + (@LineTransactionAmount * (@Divisor - 2 )))  select @FinalLineNetTransactionAmount = @NetTransactionAmount - (@FirstLineNetTransactionAmount + (@NetLineTransactionAmount * (@Divisor - 2)))  select @FinalLineDiscountAmount = @FinalLineTransactionAmount - @FinalLineNetTransactionAmount  select @OrigFinalLineTransactionAmount = @OrigTransactionAmount - (@OrigFirstLineTransactionAmount + (@OrigLineTransactionAmount * (@Divisor - 2 )))  select @OrigFinalLineNetTransactionAmount = @OrigNetTransactionAmount - (@OrigFirstLineNetTransactionAmount + (@OrigNetLineTransactionAmount * (@Divisor - 2)))  select @OrigFinalLineDiscountAmount = @OrigFinalLineTransactionAmount - @OrigFinalLineNetTransactionAmount END    BEGIN     select @Counter = 1  BEGIN transaction   FETCH FIRST FROM @REV_cursor INTO @CurrentFiscalPeriod,@CurrentStartDate,@CurrentEndDate,@CurrentFiscalYear   WHILE (@@FETCH_STATUS <> -1)  BEGIN  IF @FiscalYear <> -1  BEGIN  select @CurrentFiscalYear = @FiscalYear,  @CurrentFiscalPeriod = @FiscalPeriod,  @CurrentStartDate = @StartDate,  @CurrentEndDate = @EndDate  END  IF @Status = 1  BEGIN  select @PostedAmount = @LineTransactionAmount,  @OrigPostedAmount =  @OrigLineTransactionAmount   END ELSE  BEGIN  select @PostedAmount = 0,  @OrigPostedAmount =  0  END   IF @Counter = 1  BEGIN     select @CurrentLineTransactionAmount = @FirstLineTransactionAmount,   @CurrentOrigLineTransactionAmount = @OrigFirstLineTransactionAmount,   @CurrentLineDiscountAmount = @FirstLineDiscountAmount,   @CurrentOrigLineDiscountAmount = @OrigFirstLineDiscountAmount,   @CurrentNetLineTransactionAmount = @FirstLineNetTransactionAmount,   @CurrentOrigNetLineTransactionAmount = @OrigFirstLineNetTransactionAmount  END ELSE IF @Counter = @Divisor  BEGIN  select @CurrentLineTransactionAmount = @FinalLineTransactionAmount,   @CurrentOrigLineTransactionAmount = @OrigFinalLineTransactionAmount,   @CurrentLineDiscountAmount = @FinalLineDiscountAmount,   @CurrentOrigLineDiscountAmount = @OrigFinalLineDiscountAmount,   @CurrentNetLineTransactionAmount = @FinalLineNetTransactionAmount,   @CurrentOrigNetLineTransactionAmount = @OrigFinalLineNetTransactionAmount  END ELSE  BEGIN  select @CurrentLineTransactionAmount = @LineTransactionAmount,   @CurrentOrigLineTransactionAmount = @OrigLineTransactionAmount,   @CurrentLineDiscountAmount = @LineDiscountAmount,   @CurrentOrigLineDiscountAmount = @OrigLineDiscountAmount,   @CurrentNetLineTransactionAmount = @NetLineTransactionAmount,   @CurrentOrigNetLineTransactionAmount = @OrigNetLineTransactionAmount  END  IF exists(select * from SVC00604 where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber and  LNSEQNBR = @ContractLine and  YEAR1 = @CurrentFiscalYear and  PERIODID = @CurrentFiscalPeriod and  Source_Trx_Document_Type = @SourceType and  SourceTrxDocumentNumber = @SourceDocument and  Status = 0)   BEGIN  select @RevenueLine = LNITMSEQ from SVC00604 WITH (NOLOCK) where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber and  LNSEQNBR = @ContractLine and  YEAR1 = @CurrentFiscalYear and  PERIODID = @CurrentFiscalPeriod and  Source_Trx_Document_Type = @SourceType and  SourceTrxDocumentNumber = @SourceDocument  select @Insert = 0   END ELSE  BEGIN  select @RevenueLine = MAX(ISNull(LNITMSEQ,0)) + 1  from SVC00604 WITH (NOLOCK)  where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber and  LNSEQNBR = @ContractLine and  YEAR1 = @CurrentFiscalYear and  PERIODID = @CurrentFiscalPeriod   IF @RevenueLine is null  select @RevenueLine = 1  select @Insert = 1   END   IF @CurrentLineTransactionAmount < 0 and @Insert = 1  BEGIN  select @CreditAmount = -1 * @CurrentLineTransactionAmount,   @OrigCreditAmount = -1 * @CurrentOrigLineTransactionAmount  select @CurrentLineTransactionAmount = 0,   @CurrentOrigLineTransactionAmount = 0  END    IF @Insert = 1  BEGIN  INSERT INTO SVC00604 with (ROWLOCK)  (CONSTS,CONTNBR,LNSEQNBR,  YEAR1, PERIODID, LNITMSEQ, Status, POSTEDDT,   Transaction_Date, USERID, PSTDAMNT, Originating_PostedAmount,   Source_Trx_Document_Type, SourceTrxDocumentNumber,   SVC_Coverage_Start_Date,  SVC_Coverage_End_Date,   SVC_Invoice_Credit_Amoun, OrigInvCreditAmt,   Transaction_Amount,       OrigTransactionAmount,   DSCDLRAM,      ORDDLRAT,   Net_Transaction_Amount,   OrigNetTransactionAmount)  VALUES (@ContractRecordType,    @ContractNumber, @ContractLine, @CurrentFiscalYear, @CurrentFiscalPeriod,   @RevenueLine, @Status,  @PostedDate,   @TransactionDate,    @UserID, @PostedAmount, @OrigPostedAmount,   @SourceType,     @SourceDocument ,   @CurrentStartDate,      @CurrentEndDate,   @CreditAmount,          @OrigCreditAmount,   @CurrentLineTransactionAmount,    @CurrentOrigLineTransactionAmount,   @CurrentLineDiscountAmount,       @CurrentOrigLineDiscountAmount,   @CurrentNetLineTransactionAmount, @CurrentOrigNetLineTransactionAmount)  END ELSE  BEGIN  UPDATE SVC00604 with (ROWLOCK)  set     SVC_Invoice_Credit_Amoun = SVC_Invoice_Credit_Amoun + @CreditAmount ,   OrigInvCreditAmt = OrigInvCreditAmt + @OrigCreditAmount,   Transaction_Amount = Transaction_Amount + @CurrentLineTransactionAmount,  OrigTransactionAmount = OrigTransactionAmount + @CurrentOrigLineTransactionAmount,   DSCDLRAM = DSCDLRAM + @CurrentLineDiscountAmount,  ORDDLRAT = ORDDLRAT + @CurrentOrigLineDiscountAmount,   Net_Transaction_Amount = Net_Transaction_Amount + @CurrentNetLineTransactionAmount,   OrigNetTransactionAmount = OrigNetTransactionAmount + @CurrentOrigNetLineTransactionAmount  where CONSTS = @ContractRecordType and  CONTNBR = @ContractNumber and  LNSEQNBR = @ContractLine and  YEAR1 = @CurrentFiscalYear and  PERIODID = @CurrentFiscalPeriod and  Source_Trx_Document_Type = @SourceType and  SourceTrxDocumentNumber = @SourceDocument and  Status = 0  END   IF @Smooth = 1 AND @Counter = @Divisor   BEGIN  BREAK  END  IF @FiscalYear <> -1  BEGIN  BREAK  END  select @Counter = @Counter + 1   FETCH NEXT FROM @REV_cursor INTO @CurrentFiscalPeriod,@CurrentStartDate,@CurrentEndDate,@CurrentFiscalYear  END  CLOSE @REV_cursor  DEALLOCATE @REV_cursor   IF @@TRANCOUNT > 0  commit transaction  END    delete from SVC00020 where UserID = @UserID  return   NoTransactionErrorCondition: return  ErrorCondition: IF @@TRANCOUNT > 0   rollback transaction  return    
GO
GRANT EXECUTE ON  [dbo].[SVC_RET_Create_Revenue_Recognition_Lines] TO [DYNGRP]
GO
