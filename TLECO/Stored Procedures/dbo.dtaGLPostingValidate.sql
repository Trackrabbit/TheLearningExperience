SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
 create procedure [dbo].[dtaGLPostingValidate]  @I_sDTAGLStatus smallint = NULL,  @I_nRecurringTrxSeq numeric(19,5) = NULL,  @I_iSequenceNumber int  = NULL,  @I_iAccountIndex int  = NULL,  @I_iOrigSequenceNumber int  = NULL,  @I_cOrigDocumentNumber char(21) = NULL,  @I_cOrigControlNumber char(21) = NULL,  @I_sOrigTrxType smallint = NULL,  @I_cOrigTrxSource char(13) = NULL,  @I_sSeries smallint = NULL,  @I_sOrigDTASeries smallint = NULL,  @I_sPostingStatus smallint = NULL,  @I_nDTAIndex numeric(19,5) = NULL,  @I_nPostingAmount numeric(19,5) = NULL,  @I_tPosting tinyint  = NULL,  @I_tReversing tinyint  = NULL,  @IO_bLineMessages2 binary(4) = NULL output,  @O_tMDAExists tinyint  = NULL output,  @O_sDTASeries smallint        = NULL output,  @O_cDTAReference char(25) = NULL output,  @O_iSequenceNumber int  = NULL output,  @O_cDTAGLReference char(25) = NULL output,  @O_iErrorState int  = NULL  output as  declare  @FALSE tinyint,  @TRUE tinyint,  @vSLSVT varchar(25),  @vPOPVT varchar(25),  @vRECVT varchar(25),  @MS_ITEM_28 int,  @SUMMARY_CHECKED smallint,  @REVERSING_CHECKED smallint,  @RECURRING_CHECKED smallint,  @UNREGISTERED_CHECKED smallint,  @WORKACCESSED_CHECKED smallint,  @sDTASeries smallint,  @cDTAReference char(25),  @iSequenceNumber int,  @cDTAGLReference char(25),  @cDocumentNumber char(21),  @sDocumentType smallint,  @tTransaction tinyint,  @cErrorGroupID char(15),  @cDBName char(5),  @tRecordsOK tinyint,  @tOptionalNoStats tinyint,  @tDistHasMDA tinyint,  @tZeroAmtMDAExists tinyint,  @tLoop tinyint,  @iStatus int,  @iError int  select   @O_tMDAExists = 0,  @O_sDTASeries = 0,  @O_cDTAReference = '',  @O_iSequenceNumber = 0,  @O_cDTAGLReference = '',  @O_iErrorState = 0  select  @tRecordsOK = 1,  @MS_ITEM_28 = convert(int, 0x00000008),  @iStatus = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if @I_sDTAGLStatus is NULL or  @I_nRecurringTrxSeq is NULL or  @I_iSequenceNumber is NULL or  @I_iAccountIndex is NULL or  @I_iOrigSequenceNumber is NULL or  @I_cOrigDocumentNumber is NULL or  @I_cOrigControlNumber is NULL or  @I_sOrigTrxType is NULL or  @I_cOrigTrxSource is NULL or  @I_sSeries is NULL or  @I_sOrigDTASeries is NULL or  @I_sPostingStatus is NULL or  @I_nDTAIndex is NULL or  @I_nPostingAmount is NULL or  @I_tPosting is NULL or  @I_tReversing is NULL or  @IO_bLineMessages2 is NULL  begin  select @O_iErrorState = 20940  break  end    select  @FALSE    = 0,  @TRUE   = 1,  @SUMMARY_CHECKED = 1,  @REVERSING_CHECKED = 2,  @RECURRING_CHECKED = 4,  @UNREGISTERED_CHECKED = 8,  @WORKACCESSED_CHECKED = 16   select @cDBName = db_name()  exec @iStatus = DYNAMICS.dbo.smGetMsgString  16541,  @cDBName,  @vSLSVT output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetMsgString  17782,  @cDBName,  @vPOPVT output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetMsgString  17795,  @cDBName,  @vRECVT output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   if @vSLSVT = substring(@I_cOrigTrxSource,1,len(@vSLSVT))  or @vPOPVT = substring(@I_cOrigTrxSource,1,len(@vPOPVT))  or @vRECVT = substring(@I_cOrigTrxSource,1,len(@vRECVT))  begin  break  end   if ((@I_sDTAGLStatus & @WORKACCESSED_CHECKED) <> @WORKACCESSED_CHECKED)  and ((@I_sDTAGLStatus & @UNREGISTERED_CHECKED) = @UNREGISTERED_CHECKED)  begin  select @O_tMDAExists = @FALSE  break  end   exec @iStatus = dtaGetGLKeyFields  @I_sDTAGLStatus,  @I_nRecurringTrxSeq,  @I_iSequenceNumber,  @I_iOrigSequenceNumber,  @I_cOrigDocumentNumber,  @I_cOrigControlNumber,  @I_sOrigTrxType,  @I_cOrigTrxSource,  @I_sSeries,  @I_sOrigDTASeries,  @I_sPostingStatus,  @I_nDTAIndex,  @sDTASeries output,  @cDTAReference output,  @iSequenceNumber output,  @cDTAGLReference output,  @cDocumentNumber output,  @sDocumentType output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   if (@I_sOrigDTASeries = 0) and (@cDTAGLReference <> '')  begin  select @O_tMDAExists = @FALSE  break  end   if NOT EXISTS(select 1 from DTA00300 where ACTINDX = @I_iAccountIndex)  begin  if @cDTAGLReference = ''     begin  exec @iStatus = dtaDeleteStats  @cDTAReference,  @sDTASeries,  @I_iAccountIndex,  @iSequenceNumber,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break  end   else     begin  delete  DTA10200  from  DTA10100  where  DTA10200.DTASERIES = DTA10100.DTASERIES  and DTA10200.DTAREF = DTA10100.DTAREF  and DTA10200.ACTINDX = DTA10100.ACTINDX  and DTA10200.SEQNUMBR = DTA10100.SEQNUMBR  and DTA10200.GROUPID = DTA10100.GROUPID  and DTA10100.DTA_GL_Reference = @cDTAGLReference  and DTA10100.DTASERIES = @sDTASeries  and DTA10100.ACTINDX = @I_iAccountIndex   delete  DTA10100  where  DTA_GL_Reference = @cDTAGLReference  and DTASERIES = @sDTASeries  and ACTINDX = @I_iAccountIndex  end   select @O_tMDAExists = @FALSE  break  end   if @cDTAGLReference = ''     begin  exec @iStatus = dtaValidateStats  @cDTAReference,  @sDTASeries,  @I_iAccountIndex,  @iSequenceNumber,  @I_nPostingAmount,  @FALSE,   @FALSE,   @tRecordsOK output,  @tOptionalNoStats output,  @tDistHasMDA output,  @tZeroAmtMDAExists output,  @cErrorGroupID output,  @cDocumentNumber output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break  end   else     begin  exec @iStatus = dtaValidateSummary  @sDTASeries,  @cDTAGLReference,  @I_iAccountIndex,  @I_nPostingAmount,  @tRecordsOK output,  @tOptionalNoStats output,  @tDistHasMDA output,  @tZeroAmtMDAExists output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break  end   if @tRecordsOK = @TRUE  begin  if @I_tPosting = @TRUE  begin  if @tZeroAmtMDAExists = @TRUE  begin  if @cDTAGLReference = ''    begin  exec @iStatus = dtaRemoveOccasionalAnalysis  @cDTAReference,  @sDTASeries,  @I_iAccountIndex,  @iSequenceNumber,  @O_iErrorState   output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   end    else     begin  delete  DTA10200  from   DTA10100  where  DTA10100.DTA_GL_Reference = @cDTAGLReference  and DTA10100.DTASERIES = @sDTASeries  and DTA10100.ACTINDX   = @I_iAccountIndex  and DTA10200.CODEAMT   = 0.00  and DTA10200.DTASERIES = DTA10100.DTASERIES  and DTA10200.DTAREF = DTA10100.DTAREF  and DTA10200.ACTINDX = DTA10100.ACTINDX  and DTA10200.SEQNUMBR = DTA10100.SEQNUMBR  and DTA10200.GROUPID = DTA10100.GROUPID   delete  DTA10100  where  DTA10100.DTA_GL_Reference = @cDTAGLReference  and DTA10100.DTASERIES = @sDTASeries  and DTA10100.ACTINDX   = @I_iAccountIndex  and  NOT EXISTS(  select  1  from  DTA10200  where  DTA10200.DTASERIES = DTA10100.DTASERIES  and DTA10200.DTAREF = DTA10100.DTAREF  and DTA10200.ACTINDX = DTA10100.ACTINDX  and DTA10200.SEQNUMBR = DTA10100.SEQNUMBR  and DTA10200.GROUPID = DTA10100.GROUPID )   end     end      end      end      select  @O_sDTASeries = @sDTASeries,  @O_cDTAGLReference = @cDTAGLReference   if (@tRecordsOK = @TRUE) and (@tDistHasMDA = @TRUE) and (@tZeroAmtMDAExists = @FALSE)  begin  select @O_tMDAExists = @TRUE   if @cDTAGLReference = ''    select  @O_cDTAReference = @cDTAReference,  @O_iSequenceNumber = @iSequenceNumber  else    select  @O_cDTAReference = '',  @O_iSequenceNumber = 0  end   else  begin  if @cDTAGLReference = ''    begin  select  @O_cDTAReference = @cDTAReference,  @O_iSequenceNumber = @iSequenceNumber   if EXISTS(select  1  from  DTA10100  where   DTASERIES = @sDTASeries  and DTAREF = @cDTAReference  and ACTINDX = @I_iAccountIndex)  begin  select @O_tMDAExists = @TRUE  end   ELSE  select @O_tMDAExists = @FALSE  end   else    begin  select  @O_cDTAReference = '',  @O_iSequenceNumber = 0   if EXISTS(select  1  from  DTA10100  where   DTASERIES = @sDTASeries  and DTA_GL_Reference = @cDTAGLReference  and ACTINDX = @I_iAccountIndex)  begin  select @O_tMDAExists = @TRUE  end   ELSE  select @O_tMDAExists = @FALSE  end  end   if @tRecordsOK = @FALSE  select @IO_bLineMessages2 = (@IO_bLineMessages2 | @MS_ITEM_28)  end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[dtaGLPostingValidate] TO [DYNGRP]
GO
