SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[SVC_EVGR_Create_Next_Invoice_Line]  @CONSTS smallint,  @ContractNumber char(11)  AS  declare @NEXTBILLDATE datetime,  @LineStatus char(1),  @Line numeric (19,5),  @MinDate datetime,  @MaxDate datetime,  @StartDate datetime, @BillStartDate datetime,  @EndDate datetime, @BillEndDate datetime,  @PendingEndDate datetime,  @HDRBillingStatus smallint,  @BillingStatus smallint,  @RenewLimit smallint,  @Renewals smallint,  @ContractLength smallint,  @ContractPeriod smallint,   @RenewPriceBook char(10),  @RenewContact char(31) declare @ExchTableID   char(15),  @CurrencyID    char(15),@I_sRateCalcMethod  smallint ,   @I_nExchangeRate  numeric(15,7),   @EXPNDATE datetime,  @ExchangeDate datetime,   @ExchangeTime datetime,  @I_sViewMode   smallint,   @I_nDenomExchangeRate numeric(15,7),  @I_sMCTrxState   smallint,   @I_sDecimalPlaces  smallint,  @O_iErrorState          int declare @Total numeric(19,5), @LineTotal numeric(19,5),  @DayDiffOnStart smallint, @BillDayDiffOnStart smallint, @EoMStartDate datetime, @HDRStartDate datetime, @HDRBillStartDate datetime  exec smGetMinDate @MinDate output  select @MaxDate = DATEADD(yy, 1000, @MinDate)   begin  declare Line_Cursor CURSOR for select LNSEQNBR, SVC_Monthly_Price, Next_Liability_Date, BILSTAT, ENDDATE, BILEND  from SVC00601 where CONSTS = 2 and CONTNBR = @ContractNumber and Contract_Line_Status <> 'C' and Contract_Line_Status <> 'I' and Credit_Hold = 0  OPEN Line_Cursor  fetch next from Line_Cursor into @Line, @LineTotal, @NEXTBILLDATE, @BillingStatus, @EndDate, @BillEndDate  while @@FETCH_STATUS = 0  BEGIN   if @LineTotal > 0   exec SVC_EVGR_Update_Contract_Line 2, @ContractNumber, @Line, 2  else if @LineTotal = 0 and @BillingStatus = 4 and @NEXTBILLDATE >= @BillEndDate   update SVC00601 with (rowlock) set  Contract_Line_Status = 'C', BILSTAT = 2, NXTBLDTE = @MaxDate  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line   fetch next from Line_Cursor into @Line, @LineTotal, @NEXTBILLDATE, @BillingStatus, @EndDate, @BillEndDate  END  close Line_Cursor  DEALLOCATE Line_Cursor  end if not exists(select * from SVC00603 where  CONSTS = 2 and CONTNBR = @ContractNumber and POSTED = 0) Begin  select @NEXTBILLDATE = NXTBLDTE, @RenewLimit = isnull(SVC_Evergreen_RenewLimit,0), @Renewals = isnull(SVC_Evergreen_Renewals,0),  @BillingStatus = BILSTAT, @PendingEndDate = ENDDATE, @Total = TOTAL  from SVC00600 where CONSTS = 2 and CONTNBR = @ContractNumber  if @NEXTBILLDATE = @MaxDate and (@RenewLimit > @Renewals or @RenewLimit = 0) and @BillingStatus <> 2  begin  select @StartDate = FRXSTRT, @EndDate = FRZEND, @ContractLength = Contract_Length, @BillEndDate = BILEND,  @ContractPeriod= Contract_Period, @RenewContact = isnull(Contract_Renewal_Contact,CONTACT),  @ExchTableID = EXGTBLID, @CurrencyID = CURNCYID, @EXPNDATE = EXPNDATE, @I_sRateCalcMethod = RATECALC,  @I_sDecimalPlaces = DECPLACS,  @I_nDenomExchangeRate = DENXRATE, @I_sMCTrxState = MCTRXSTT, @RenewPriceBook = isnull(RENPRCSCHD,PRICSHED),  @EoMStartDate = STRTDATE, @HDRStartDate =STRTDATE, @HDRBillStartDate = BILSTRT  from SVC00600 WITH (NOLOCK) where CONSTS = 2 and CONTNBR = @ContractNumber  if @RenewPriceBook = '' select @RenewPriceBook = PRICSHED from SVC00600 WITH (NOLOCK) where CONSTS = 2 and CONTNBR = @ContractNumber  if @RenewContact = '' select @RenewContact = CONTACT  from SVC00600 WITH (NOLOCK) where CONSTS = 2 and CONTNBR = @ContractNumber   exec SVC_EOM @EoMStartDate output  if DATEPART(dd,@HDRStartDate) >= 28   select @DayDiffOnStart = CASE  when DATEPART(dd,@HDRStartDate) = 28 THEN 0   when DATEPART(dd,@HDRStartDate) = 29 THEN 1   when DATEPART(dd,@HDRStartDate) = 30 THEN 2  when DATEPART(dd,@HDRStartDate) = 31 THEN 3 END,  @BillDayDiffOnStart = CASE   when DATEPART(dd,@HDRBillStartDate) = 28 THEN 0   when DATEPART(dd,@HDRBillStartDate) = 29 THEN 1   when DATEPART(dd,@HDRBillStartDate) = 30 THEN 2  when DATEPART(dd,@HDRBillStartDate) = 31 THEN 3 END   select @StartDate = dateadd(dd,1,@EndDate), @BillStartDate = dateadd(dd,1,@BillEndDate)  select @EndDate = CASE  WHEN (@ContractPeriod = 1) THEN dateadd(dd,-1,(dateadd(dd,@ContractLength, @StartDate)))  WHEN (@ContractPeriod = 2) THEN dateadd(dd,-1,(dateadd(mm,@ContractLength, @StartDate)))  WHEN (@ContractPeriod = 3) THEN dateadd(dd,-1,(dateadd(yy,@ContractLength, @StartDate)))  END,  @BillEndDate = CASE   WHEN (@ContractPeriod = 1) THEN dateadd(dd,-1,(dateadd(dd,@ContractLength, @BillStartDate)))  WHEN (@ContractPeriod = 2) THEN dateadd(dd,-1,(dateadd(mm,@ContractLength, @BillStartDate)))  WHEN (@ContractPeriod = 3) THEN dateadd(dd,-1,(dateadd(yy,@ContractLength, @BillStartDate)))  END   if datepart(mm,@StartDate) = 2 and @DayDiffOnStart > 0  select  @EndDate =  dateadd(dd,@DayDiffOnStart,@EndDate)  else if @DayDiffOnStart = 3  begin  exec SVC_EOM @EndDate output  select @EndDate = dateadd(dd,-1,@EndDate)  end   if datepart(mm,@BillStartDate) = 2 and @BillDayDiffOnStart > 0  select @BillEndDate =  dateadd(dd,@BillDayDiffOnStart,@BillEndDate)  else if @BillDayDiffOnStart = 3  begin  exec SVC_EOM @BillEndDate output  select @BillEndDate =  dateadd(dd,-1,@BillEndDate)  end   if @ExchTableID > ''  Begin         if exists(select CURNCYID, EXGTBLID, EXCHDATE, TIME1 from  DYNAMICS..MC00100 where   EXGTBLID =@ExchTableID and CURNCYID =@CurrencyID and (EXCHDATE <= @StartDate and (EXPNDATE >= @StartDate or EXPNDATE = @MinDate) ))  select @ExchangeDate = EXCHDATE, @ExchangeTime = TIME1, @I_nExchangeRate = XCHGRATE from  DYNAMICS..MC00100 where   EXGTBLID =@ExchTableID and CURNCYID =@CurrencyID and  (EXCHDATE <= @StartDate and (EXPNDATE >= @StartDate or EXPNDATE = @MinDate) )  else  begin  select @EXPNDATE = max(EXPNDATE) from  DYNAMICS..MC00100 where   EXGTBLID =@ExchTableID and CURNCYID =@CurrencyID and EXPNDATE < @StartDate  select @ExchangeDate = EXCHDATE, @ExchangeTime = TIME1, @I_nExchangeRate = XCHGRATE from  DYNAMICS..MC00100 where   EXGTBLID =@ExchTableID and CURNCYID =@CurrencyID and EXPNDATE = @EXPNDATE   end  update SVC00600 with (rowlock) set XCHGRATE = @I_nExchangeRate, EXCHDATE = @ExchangeDate, TIME1 = @ExchangeTime  where CONSTS = 2 and CONTNBR = @ContractNumber  update SVC00601 with (rowlock) set XCHGRATE = @I_nExchangeRate, EXCHDATE = @ExchangeDate, TIME1 = @ExchangeTime  where CONSTS = 2 and CONTNBR = @ContractNumber  End   if @BillingStatus = 1  update SVC00600 with (rowlock) set SVC_Evergreen_Renewals = @Renewals + 1 , PRICSHED = @RenewPriceBook, CONTACT = isnull(@RenewContact,''),  FRXSTRT = @StartDate, FRZEND = @EndDate, ENDDATE = @EndDate, BILEND = @BillEndDate  where CONSTS = 2 and CONTNBR = @ContractNumber  else if @BillingStatus = 4  update SVC00600 with (rowlock) set SVC_Evergreen_Renewals = @Renewals + 1, PRICSHED = @RenewPriceBook,CONTACT = isnull(@RenewContact,''),FRXSTRT = @StartDate, FRZEND = @EndDate  where CONSTS = 2 and CONTNBR = @ContractNumber   declare Site_Cursor CURSOR for select LNSEQNBR, BILSTAT from SVC00608 where  CONSTS = 2 and CONTNBR = @ContractNumber  OPEN Site_Cursor  fetch next from Site_Cursor into @Line, @BillingStatus  while @@FETCH_STATUS = 0  BEGIN   if @BillingStatus = 4  update SVC00608 with (rowlock) set FRXSTRT = @StartDate, FRZEND = @EndDate, PRICSHED = @RenewPriceBook where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line  else if @BillingStatus = 1  update SVC00608 with (rowlock) set FRXSTRT = @StartDate, FRZEND = @EndDate, ENDDATE = @EndDate, BILEND = @BillEndDate, PRICSHED = @RenewPriceBook  where  CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line  fetch next from Site_Cursor into @Line, @BillingStatus  END  close Site_Cursor  DEALLOCATE Site_Cursor  if exists(select * from SVC00601 where CONSTS = 2 and CONTNBR = @ContractNumber and Contract_Line_Status <> 'C')  Begin  declare Line_Cursor CURSOR for select LNSEQNBR, Contract_Line_Status, TOTAL from SVC00601 where CONSTS = 2 and CONTNBR = @ContractNumber and Contract_Line_Status <> 'C'  OPEN Line_Cursor  fetch next from Line_Cursor into @Line, @LineStatus, @LineTotal  while @@FETCH_STATUS = 0  BEGIN  if @LineStatus = 'P'   update SVC00601 with (rowlock) set FRXSTRT = @StartDate, FRZEND = @EndDate, PRICSHED = @RenewPriceBook  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line  else if @LineStatus <> 'I' and @LineStatus <> 'M'   update SVC00601 with (rowlock) set FRXSTRT = @StartDate, FRZEND = @EndDate, ENDDATE = @EndDate, PRICSHED = @RenewPriceBook,  BILEND = @BillEndDate, Contract_Line_Status = 'R'  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line  if @LineTotal > 0  exec SVC_EVGR_Update_Contract_Line 2, @ContractNumber, @Line, 2  else  begin  select @NEXTBILLDATE = isnull(Next_Liability_Date, @StartDate) from SVC00601   where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line  update SVC00601 with (rowlock) set NXTBLDTE = @NEXTBILLDATE  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @Line  exec SVC_EVGR_Update_Contract_Header 2, @ContractNumber  end   fetch next from Line_Cursor into @Line, @LineStatus, @LineTotal  END  close Line_Cursor  DEALLOCATE Line_Cursor  End  else  Begin  select @BillingStatus = min(BILSTAT) from SVC00601 where CONSTS = 2 and CONTNBR = @ContractNumber  update SVC00600 with (rowlock) set BILSTAT = @BillingStatus where CONSTS = 2 and CONTNBR = @ContractNumber  End  end  else if @BillingStatus > 0 and @Total > 0   begin  if @BillingStatus = 4 or @BillingStatus = 2  select @BillingStatus = 2, @LineStatus = 'C'   else  select @BillingStatus = 5, @LineStatus = 'T'  update SVC00600 with (rowlock) set BILSTAT = @BillingStatus where CONSTS = 2 and CONTNBR = @ContractNumber  update SVC00608 with (rowlock) set BILSTAT = @BillingStatus where CONSTS = 2 and CONTNBR = @ContractNumber  update SVC00601 with (rowlock) set BILSTAT = @BillingStatus, Contract_Line_Status = @LineStatus where CONSTS = 2 and CONTNBR = @ContractNumber and Contract_Line_Status <> 'C'  end  else if (@BillingStatus > 0 and @Total = 0) and (@RenewLimit = @Renewals) and @RenewLimit <> 0   begin  select @BillingStatus = 5, @LineStatus = 'T'  update SVC00600 with (rowlock) set BILSTAT = @BillingStatus where CONSTS = 2 and CONTNBR = @ContractNumber  update SVC00608 with (rowlock) set BILSTAT = @BillingStatus where CONSTS = 2 and CONTNBR = @ContractNumber  update SVC00601 with (rowlock) set BILSTAT = @BillingStatus, Contract_Line_Status = @LineStatus where CONSTS = 2 and CONTNBR = @ContractNumber and Contract_Line_Status <> 'C'  end End else Begin  if exists(select * from SVC00601 where CONSTS = 2 and CONTNBR = @ContractNumber and NXTBLDTE = @MaxDate and TOTAL = 0 and BILSTAT = 4)  begin  select @NEXTBILLDATE = Next_Liability_Date from SVC00601   where CONSTS = 2 and CONTNBR = @ContractNumber and NXTBLDTE = @MaxDate and TOTAL = 0 and BILSTAT = 4   update SVC00601 with (rowlock) set NXTBLDTE = @NEXTBILLDATE  where CONSTS = 2 and CONTNBR = @ContractNumber and NXTBLDTE = @MaxDate and TOTAL = 0 and BILSTAT = 4  end  End  return    
GO
GRANT EXECUTE ON  [dbo].[SVC_EVGR_Create_Next_Invoice_Line] TO [DYNGRP]
GO
