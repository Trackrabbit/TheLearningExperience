SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taPMSchedPmnts] @I_vORIG_VOUCHER_NUM char (21),   @I_vORIG_DOC_TYPE  smallint,   @I_vPAY_OFFSET_ACCT_IDX int = 0,   @I_vPayOffsetAccount  varchar(75) = '',  @I_vFIRST_INV_DOC_DATE  datetime = '',   @I_vFIRST_INV_DUE_DATE  datetime = '',   @I_vINT_EXP_ACCT_IDX  int = 0,   @I_vIntExpenseAccount  varchar(75) = '',  @I_vPAYMENT_AMOUNT  numeric (19,5) = 0,  @I_vNUM_PAYMENTS  smallint = 0,   @I_vSCHEDULE_NUMBER  char (21)= '',   @I_vPYMNT_FREQUENCY  smallint = 2,   @I_vPAY_ACCT_IDX  int = 0,   @I_vPayAccount   varchar(75) = '',  @I_vSCH_DOC_DATE  datetime = '',   @I_vSCHEDULE_AMOUNT  numeric (19,5) = 0,  @I_vSCHEDULE_DESC  char (31) = '',   @I_vSCHEDULE_INT_RATE  numeric (19,5) = 0,  @I_vSCHEDULE_INT_TYPE1  smallint = 0,   @I_vUSERID char (15)= 'eConnect',  @I_vRequesterTrx  smallint = 0,   @I_vUSRDEFND1   char(50) = '',   @I_vUSRDEFND2   char(50) = '',   @I_vUSRDEFND3   char(50) = '',   @I_vUSRDEFND4   char(8000) = '',  @I_vUSRDEFND5   char(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output   with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @ACCTTYPE tinyint,    @ACTIVE tinyint,    @AppendString char (5),    @AppendNumber int,    @count int,     @CURNCYID char (15),    @DecPlaces smallint,    @DOCDATE datetime,    @DOCNUMBR char (22),    @DUEDATE datetime,    @FIRST_INV_DOC_DATE datetime,   @FIRST_INV_DUE_DATE datetime,   @FuncSchAmnt numeric (19,5),   @FUNLCURR char(15),      @HOLD tinyint,     @INT_EXP_ACCT_IDX int,    @IntDenominator smallint,   @INTEREST_AMOUNT numeric (19,5),  @InterestRate numeric (19,7),   @ISMCTRX int,       @NOTEINDX numeric (19,5),   @NUM_PAYMENTS smallint,    @ORIG_DOC_NUMBER char (21),   @ORIG_DOC_TYPE smallint,   @ORIG_VOUCHER_NUM char (21),   @PAYMENT_AMOUNT numeric (19,5),   @PRINCIPAL_AMOUNT numeric (19,5),  @PRINCIPAL_BALANCE numeric (19,5),  @PAY_ACCT_IDX int,    @PAY_OFFSET_ACCT_IDX int,   @SCH_DOC_DATE datetime,    @SCHEDULE_AMOUNT numeric (19,5),  @SCHEDULE_DESC char (31),   @SCHEDULE_NUMBER char (21),   @VENDORID char (15),    @iStatus int,     @iGetNextNoteIdxErrState int,   @sCompanyID smallint,    @iError int,      @iCustomErrString varchar(255),   @O_iNumErrorState int,    @O_iInitErrorState int,    @oInitErrString varchar(255),   @O_oErrorState int,    @iCustomState int,  @I_tInc_Dec int,  @VADCDTRO char(15)    select  @ACCTTYPE = 0,     @ACTIVE = 0,     @AppendString = '',  @AppendNumber = 1001,    @count = 1,  @CURNCYID = '',  @DecPlaces = 2,  @DOCDATE = '',  @DOCNUMBR = '',  @DUEDATE = '',  @FIRST_INV_DOC_DATE = '',  @FIRST_INV_DUE_DATE = '',  @FuncSchAmnt = 0,  @FUNLCURR = '',  @HOLD = 0,  @INT_EXP_ACCT_IDX = 0,  @IntDenominator = 1,  @INTEREST_AMOUNT = 0,  @InterestRate = 0,  @ISMCTRX =0,  @NOTEINDX = 0,  @NUM_PAYMENTS = 0,  @ORIG_DOC_NUMBER = '',  @ORIG_DOC_TYPE = 0,  @ORIG_VOUCHER_NUM = '',  @PAYMENT_AMOUNT = 0,  @PRINCIPAL_AMOUNT = 0,  @PRINCIPAL_BALANCE = 0,  @PAY_ACCT_IDX = 0,  @PAY_OFFSET_ACCT_IDX = 0,  @SCH_DOC_DATE = '',  @SCHEDULE_AMOUNT = 0,  @SCHEDULE_DESC = '',  @SCHEDULE_NUMBER = '',  @VENDORID = '',  @iStatus = 0,  @iGetNextNoteIdxErrState = 0,  @sCompanyID = 0,  @iError = 0,  @iCustomErrString = '',  @O_iNumErrorState = 0,  @O_iInitErrorState = 0,  @oInitErrString = '',  @O_oErrorState = 0,  @iCustomState = 0,  @I_tInc_Dec = 1,     @O_iErrorState = 0,  @VADCDTRO = ''      if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taPMSchedPmntsPre  @I_vORIG_VOUCHER_NUM  output,    @I_vORIG_DOC_TYPE  output,    @I_vPAY_OFFSET_ACCT_IDX output,    @I_vPayOffsetAccount  output,    @I_vFIRST_INV_DOC_DATE  output,    @I_vFIRST_INV_DUE_DATE  output,    @I_vINT_EXP_ACCT_IDX  output,    @I_vIntExpenseAccount  output,    @I_vPAYMENT_AMOUNT  output,    @I_vNUM_PAYMENTS  output,    @I_vSCHEDULE_NUMBER  output,    @I_vPYMNT_FREQUENCY  output,    @I_vPAY_ACCT_IDX  output,    @I_vPayAccount   output,    @I_vSCH_DOC_DATE  output,    @I_vSCHEDULE_AMOUNT  output,    @I_vSCHEDULE_DESC  output,    @I_vSCHEDULE_INT_RATE  output,    @I_vSCHEDULE_INT_TYPE1  output,    @I_vUSERID output,    @I_vRequesterTrx  output,    @I_vUSRDEFND1   output,    @I_vUSRDEFND2   output,    @I_vUSRDEFND3 output,    @I_vUSRDEFND4   output,    @I_vUSRDEFND5   output,    @O_iErrorState = @iCustomState output,   @oErrString = @iCustomErrString output if (@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3059     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if ( @I_vORIG_VOUCHER_NUM is NULL or  @I_vORIG_DOC_TYPE  is NULL or  @I_vPAY_OFFSET_ACCT_IDX is NULL or  @I_vPayOffsetAccount is NULL or  @I_vFIRST_INV_DOC_DATE is NULL or  @I_vFIRST_INV_DUE_DATE is NULL or  @I_vINT_EXP_ACCT_IDX is NULL or  @I_vIntExpenseAccount is NULL or  @I_vPAYMENT_AMOUNT is NULL or  @I_vNUM_PAYMENTS is NULL or  @I_vSCHEDULE_NUMBER is NULL or  @I_vPYMNT_FREQUENCY is NULL or  @I_vPAY_ACCT_IDX is NULL or  @I_vPayAccount is NULL or  @I_vSCH_DOC_DATE is NULL or  @I_vSCHEDULE_AMOUNT is NULL or  @I_vSCHEDULE_DESC is NULL or  @I_vSCHEDULE_INT_RATE is NULL or  @I_vSCHEDULE_INT_TYPE1 is NULL or  @I_vUSERID is NULL) begin  select @O_iErrorState = 3060    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vSCHEDULE_NUMBER = UPPER(@I_vSCHEDULE_NUMBER),  @I_vORIG_VOUCHER_NUM = UPPER(@I_vORIG_VOUCHER_NUM)  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output select @iError = @@error if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 3061   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @ORIG_VOUCHER_NUM = VCHRNMBR,  @VENDORID = VENDORID,  @ORIG_DOC_TYPE = DOCTYPE,  @SCH_DOC_DATE = DOCDATE,  @ORIG_DOC_NUMBER = DOCNUMBR,  @SCHEDULE_AMOUNT =   case  when (@I_vSCHEDULE_AMOUNT > 0) then @I_vSCHEDULE_AMOUNT  else CURTRXAM  end,  @HOLD = HOLD,  @CURNCYID = CURNCYID,  @VADCDTRO = VADCDTRO      from PM20000 (nolock)  where VCHRNMBR = @I_vORIG_VOUCHER_NUM and DOCTYPE = @I_vORIG_DOC_TYPE  select  @FuncSchAmnt = @SCHEDULE_AMOUNT, @NUM_PAYMENTS = @I_vNUM_PAYMENTS,  @IntDenominator =   case @I_vPYMNT_FREQUENCY  when 1 then 24  when 2 then 12  when 3 then 4  when 4 then 2  when 5 then 1  else 1  end  if (@I_vFIRST_INV_DOC_DATE = '')  select @FIRST_INV_DOC_DATE = @SCH_DOC_DATE else  select @FIRST_INV_DOC_DATE = @I_vFIRST_INV_DOC_DATE  select @FUNLCURR = FUNLCURR from MC40000 (nolock)  if (@FUNLCURR <> '' and @CURNCYID <> @FUNLCURR) begin  select @SCHEDULE_AMOUNT = ORCTRXAM from MC020103 (nolock) where VCHRNMBR = @ORIG_VOUCHER_NUM  and DOCTYPE = @I_vORIG_DOC_TYPE  select @ISMCTRX = 1   end  select @DecPlaces = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @CURNCYID  if (@I_vSCHEDULE_INT_TYPE1 not in (0,1)) begin  select @O_iErrorState = 3062     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSCHEDULE_INT_RATE < 0.0000 or @I_vSCHEDULE_INT_RATE > 99.9999) begin  select @O_iErrorState = 3063     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (len(@I_vSCHEDULE_NUMBER) > 20)  begin  select @O_iErrorState = 3064    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSCHEDULE_NUMBER = '')   begin  exec @iStatus = taGetNextPMSchNumber  @I_tInc_Dec = 1,   @O_vSCHEDULE_NUMBER = @I_vSCHEDULE_NUMBER output,  @O_iErrorState = @O_iNumErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iNumErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = 3065   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if  (exists(select 1 from PM00400 (nolock) where CNTRLNUM = @I_vSCHEDULE_NUMBER)) or  (exists(select 1 from PM20000 (nolock) where VCHRNMBR = @I_vSCHEDULE_NUMBER)) or  (exists(select 1 from PM20400 (nolock) where SCHEDULE_NUMBER = @I_vSCHEDULE_NUMBER)) or  (exists(select 1 from PM20401 (nolock) where SCHEDULE_NUMBER = @I_vSCHEDULE_NUMBER)) or  (exists(select 1 from PM30200 (nolock) where TRXDSCRN = @I_vSCHEDULE_NUMBER)) or  (exists(select 1 from MC020103 (nolock) where VCHRNMBR = @I_vSCHEDULE_NUMBER)) begin  select @O_iErrorState = 3066    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vORIG_VOUCHER_NUM = '') begin  select @O_iErrorState = 3067    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@ORIG_VOUCHER_NUM = '')  begin  select @O_iErrorState = 3068    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@SCHEDULE_AMOUNT = 0)   begin  select @O_iErrorState = 3069    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@ORIG_DOC_TYPE not in (1,3))  begin  select @O_iErrorState = 3070    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@HOLD = 1) begin  select @O_iErrorState = 3071    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vPayOffsetAccount <> '') begin  select @PAY_OFFSET_ACCT_IDX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vPayOffsetAccount  if (@PAY_OFFSET_ACCT_IDX = 0)  begin  select @O_iErrorState = 3072      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else if (@I_vPAY_OFFSET_ACCT_IDX <> 0) begin  select @PAY_OFFSET_ACCT_IDX = ACTINDX from GL00105 (nolock) where ACTINDX = @I_vPAY_OFFSET_ACCT_IDX  if (@PAY_OFFSET_ACCT_IDX = 0)  begin  select @O_iErrorState = 3073     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vPayOffsetAccount = '' and @I_vPAY_OFFSET_ACCT_IDX = 0) begin  select @O_iErrorState = 3074     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@PAY_OFFSET_ACCT_IDX > 0 and @ISMCTRX = 1)  begin  if (not exists(select 1 from MC00200 (nolock) where ACTINDX = @PAY_OFFSET_ACCT_IDX  and CURNCYID = @CURNCYID))  begin  select @O_iErrorState = 3075     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@PAY_OFFSET_ACCT_IDX > 0)  begin  select @ACTIVE = ACTIVE, @ACCTTYPE = ACCTTYPE from GL00100 (nolock) where ACTINDX = @PAY_OFFSET_ACCT_IDX  if (@ACTIVE = 0)   begin  select @O_iErrorState = 3076     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @ACTIVE = 0   if (@ACCTTYPE not in (1,3))  begin  select @O_iErrorState = 3077     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @ACCTTYPE = 0  end  if (@I_vIntExpenseAccount <> '') begin  select @INT_EXP_ACCT_IDX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vIntExpenseAccount  if (@INT_EXP_ACCT_IDX = 0)  begin  select @O_iErrorState = 3078      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else if (@I_vINT_EXP_ACCT_IDX <> 0) begin  select @INT_EXP_ACCT_IDX = ACTINDX from GL00105 (nolock) where ACTINDX = @I_vINT_EXP_ACCT_IDX  if (@INT_EXP_ACCT_IDX = 0)  begin  select @O_iErrorState = 3079     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vIntExpenseAccount = '' and @I_vINT_EXP_ACCT_IDX = 0 and @I_vSCHEDULE_INT_RATE <> 0)  begin  select @O_iErrorState = 3080     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@INT_EXP_ACCT_IDX > 0 and @ISMCTRX = 1)  begin  if (not exists(select 1 from MC00200 (nolock) where ACTINDX = @INT_EXP_ACCT_IDX  and CURNCYID = @CURNCYID))  begin  select @O_iErrorState = 3081     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@INT_EXP_ACCT_IDX > 0)  begin  select @ACTIVE = ACTIVE, @ACCTTYPE = ACCTTYPE from GL00100 (nolock) where ACTINDX = @INT_EXP_ACCT_IDX  if (@ACTIVE = 0)   begin  select @O_iErrorState = 3082     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @ACTIVE = 0   if (@ACCTTYPE not in (1,3))  begin  select @O_iErrorState = 3083     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @ACCTTYPE = 0  end  if (@I_vPYMNT_FREQUENCY not in (1,2,3,4,5)) begin  select @O_iErrorState = 3084     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vFIRST_INV_DOC_DATE = '' and @I_vPYMNT_FREQUENCY = 1) begin  select @O_iErrorState = 3085     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end else if (@I_vFIRST_INV_DOC_DATE = '' and @I_vPYMNT_FREQUENCY <> 1) begin   if (@FIRST_INV_DOC_DATE = '')  begin  select @O_iErrorState = 3086     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vFIRST_INV_DOC_DATE <> '' and @I_vFIRST_INV_DOC_DATE < @SCH_DOC_DATE) begin  select @O_iErrorState = 3087     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vFIRST_INV_DOC_DATE <> '' and @I_vPYMNT_FREQUENCY = 1) begin    if (datepart(day, @I_vFIRST_INV_DOC_DATE) not in (1,15))  begin  select @O_iErrorState = 3088     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vFIRST_INV_DUE_DATE = '' and @I_vPYMNT_FREQUENCY <> 1) begin  select @FIRST_INV_DUE_DATE =  case @I_vPYMNT_FREQUENCY    when 2 then DATEADD(month, 1, @FIRST_INV_DOC_DATE)  when 3 then DATEADD(quarter, 1, @FIRST_INV_DOC_DATE)  when 4 then DATEADD(quarter, 2, @FIRST_INV_DOC_DATE)  when 5 then DATEADD(year, 1, @FIRST_INV_DOC_DATE)  else @FIRST_INV_DUE_DATE  end end else  select @FIRST_INV_DUE_DATE = @I_vFIRST_INV_DUE_DATE  if (@I_vFIRST_INV_DUE_DATE <> '' and @I_vFIRST_INV_DUE_DATE < @FIRST_INV_DOC_DATE) begin  select @FIRST_INV_DUE_DATE = @I_vFIRST_INV_DUE_DATE  select @O_iErrorState = 3089     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vFIRST_INV_DUE_DATE <> '' and @I_vPYMNT_FREQUENCY = 1) begin    if (datepart(day, @I_vFIRST_INV_DUE_DATE) not in (1,15))  begin  select @O_iErrorState = 3090     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vNUM_PAYMENTS not between 0 and 999) begin  select @O_iErrorState = 3091      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vNUM_PAYMENTS = 0  and @I_vPAYMENT_AMOUNT = 0) begin  select @O_iErrorState = 3092     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vPAYMENT_AMOUNT < 0) begin  select @O_iErrorState = 3093     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  If (@I_vPAYMENT_AMOUNT > @SCHEDULE_AMOUNT) begin  select @O_iErrorState = 3404     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSCH_DOC_DATE = '') begin   if (@SCH_DOC_DATE = '')  begin  select @O_iErrorState = 3094     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vSCHEDULE_AMOUNT = 0) begin   if (@SCHEDULE_AMOUNT = 0)  begin  select @O_iErrorState = 3095     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else if (@I_vSCHEDULE_AMOUNT > @SCHEDULE_AMOUNT) begin  select @O_iErrorState = 3096     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vPayAccount <> '') begin  select @PAY_ACCT_IDX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vPayAccount  if (@PAY_ACCT_IDX = 0)  begin  select @O_iErrorState = 3097     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else if (@I_vPAY_ACCT_IDX <> 0) begin  select @PAY_ACCT_IDX = ACTINDX from GL00105 (nolock) where ACTINDX = @I_vPAY_ACCT_IDX  if (@PAY_ACCT_IDX = 0)  begin  select @O_iErrorState = 3098     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if ( @I_vRequesterTrx < 0 or @I_vRequesterTrx > 1 ) begin  select @O_iErrorState = 5621     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vPayAccount <> '') or (@I_vPAY_ACCT_IDX <> 0)) and  (@PAY_ACCT_IDX > 0 and @ISMCTRX = 1) begin  if (not exists(select 1 from MC00200 (nolock) where ACTINDX = @PAY_ACCT_IDX  and CURNCYID = @CURNCYID))  begin  select @O_iErrorState = 3099     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if ((@I_vPayAccount <> '') or (@I_vPAY_ACCT_IDX <> 0)) and (@PAY_ACCT_IDX > 0) begin  select @ACTIVE = ACTIVE, @ACCTTYPE = ACCTTYPE from GL00100 (nolock) where ACTINDX = @PAY_ACCT_IDX  if (@ACTIVE = 0)   begin  select @O_iErrorState = 3100     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @ACTIVE = 0    if (@ACCTTYPE not in (1,3))  begin  select @O_iErrorState = 3397     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select @ACCTTYPE = 0  end  if (@I_vPayAccount = '' and @I_vPAY_ACCT_IDX = 0) begin  select @PAY_ACCT_IDX = DSTINDX from PM10100 (nolock)  where VCHRNMBR = @ORIG_VOUCHER_NUM and DISTTYPE = 2  if (@PAY_ACCT_IDX = 0)  begin  select @O_iErrorState = 3398     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  select  @PRINCIPAL_BALANCE = @SCHEDULE_AMOUNT,  @DOCDATE = @FIRST_INV_DOC_DATE,  @DUEDATE = @FIRST_INV_DUE_DATE  if @I_vSCHEDULE_INT_RATE <> 0  select @InterestRate = @I_vSCHEDULE_INT_RATE / 100.0 else  select @InterestRate=0  if (@I_vSCHEDULE_INT_TYPE1 = 0)  begin   if (@I_vPAYMENT_AMOUNT > 0)  begin   select  @PAYMENT_AMOUNT = @I_vPAYMENT_AMOUNT  if (@I_vSCHEDULE_INT_RATE <> 0)   begin  select @NUM_PAYMENTS = round((-1 * log(1 - (((@InterestRate / @IntDenominator) * @SCHEDULE_AMOUNT) / @PAYMENT_AMOUNT))) / log(1 + (@InterestRate / @IntDenominator)) + .5,0)   end  else  if (@I_vSCHEDULE_INT_RATE = 0)   begin  select @NUM_PAYMENTS = round((@SCHEDULE_AMOUNT / @PAYMENT_AMOUNT) + .5,0)   end  end  else  begin   if (@I_vSCHEDULE_INT_RATE <> 0 and @NUM_PAYMENTS > 0)   begin  select @PAYMENT_AMOUNT = round((@SCHEDULE_AMOUNT * (@InterestRate / @IntDenominator))/(1 - (power((1 + (@InterestRate / @IntDenominator)),(-1 * @NUM_PAYMENTS)))),@DecPlaces)  end  else  if (@I_vSCHEDULE_INT_RATE = 0 and @NUM_PAYMENTS > 0)   begin  select @PAYMENT_AMOUNT = round((@SCHEDULE_AMOUNT / @NUM_PAYMENTS),@DecPlaces)  end  end end else  if (@I_vSCHEDULE_INT_TYPE1 = 1) begin   if (@InterestRate <> 0)  select @INTEREST_AMOUNT = round(@InterestRate * @PRINCIPAL_BALANCE * @NUM_PAYMENTS / @IntDenominator / @NUM_PAYMENTS,@DecPlaces)  else select @INTEREST_AMOUNT = 0   if (@I_vPAYMENT_AMOUNT > 0)  begin  select  @PAYMENT_AMOUNT = @I_vPAYMENT_AMOUNT  if (@InterestRate <> 0)   begin  select @NUM_PAYMENTS = round(1 /((@PAYMENT_AMOUNT / @PRINCIPAL_BALANCE) - (@InterestRate / @IntDenominator)) + .5, 0)  end  else  if (@InterestRate = 0)   begin  select @NUM_PAYMENTS = round((@SCHEDULE_AMOUNT / @PAYMENT_AMOUNT)+.5,0)   end  end  else   begin   if (@InterestRate <> 0 and @NUM_PAYMENTS > 0)   begin  select @PAYMENT_AMOUNT = round(((@PRINCIPAL_BALANCE * @InterestRate * @NUM_PAYMENTS / @IntDenominator) + @PRINCIPAL_BALANCE) / @NUM_PAYMENTS,@DecPlaces)  end  else  if (@InterestRate = 0 and @NUM_PAYMENTS > 0)   begin  select @PAYMENT_AMOUNT = round((@SCHEDULE_AMOUNT / @NUM_PAYMENTS),@DecPlaces)  end  end end  insert PM00400   (  CNTRLNUM,  CNTRLTYP,  DCSTATUS,   DOCTYPE,  VENDORID,  DOCNUMBR,   TRXSORCE,   CHEKBKID,  DUEDATE,  DISCDATE,   BCHSOURC,  DOCDATE,   USERID  ) select  @I_vSCHEDULE_NUMBER,   0,        0,        7,        '',        '',        '',        '',        '',        '',        'XXPM_Schent',     '',        @I_vUSERID     if (@@error <> 0) begin  select @O_iErrorState = 3399     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  insert PM20400  (  SCHEDULE_NUMBER,  SCHEDULE_DESC,  ORIG_DOC_NUMBER,  ORIG_DOC_TYPE,  ORIG_VOUCHER_NUM,  VENDORID,  SCH_DOC_DATE,  SCHEDULE_AMOUNT,  FuncSchAmnt,  CURNCYID,  SCHEDULE_INT_TYPE1,  SCHEDULE_INT_RATE,  NUM_PAYMENTS,  PYMNT_FREQUENCY,  PAYMENT_AMOUNT,  FIRST_INV_DOC_DATE,  FIRST_INV_DUE_DATE,  PAY_ACCT_IDX,  PAY_OFFSET_ACCT_IDX,  INT_EXP_ACCT_IDX,  NOTEINDX,  Status,  CREDIT_MEMO_DOC_NUM,  VADCDTRO     ) select  @I_vSCHEDULE_NUMBER,    @I_vSCHEDULE_DESC,     @ORIG_DOC_NUMBER,     @ORIG_DOC_TYPE,      @ORIG_VOUCHER_NUM,     @VENDORID,       @SCH_DOC_DATE,      @SCHEDULE_AMOUNT,     @FuncSchAmnt,      @CURNCYID,       @I_vSCHEDULE_INT_TYPE1,    @I_vSCHEDULE_INT_RATE * 10000,   @NUM_PAYMENTS,      @I_vPYMNT_FREQUENCY,    @PAYMENT_AMOUNT,     @FIRST_INV_DOC_DATE,    @FIRST_INV_DUE_DATE,    @PAY_ACCT_IDX,      @PAY_OFFSET_ACCT_IDX,    @INT_EXP_ACCT_IDX,     @NOTEINDX,       3,         '',         @VADCDTRO      if (@@error <> 0) begin  select @O_iErrorState = 3400     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  while (@count <= @NUM_PAYMENTS) begin  select  @AppendString = CAST(@AppendNumber AS char(4)),  @DOCNUMBR = rtrim(@I_vSCHEDULE_NUMBER) + substring(@AppendString, 2, 3)   if (@I_vSCHEDULE_INT_TYPE1 = 0 and @InterestRate <> 0)  begin  select @INTEREST_AMOUNT = round(@InterestRate / @IntDenominator * @PRINCIPAL_BALANCE, @DecPlaces)  end  else  if (@I_vSCHEDULE_INT_TYPE1 = 0 and @InterestRate = 0)  select @INTEREST_AMOUNT = 0   if (@count = @NUM_PAYMENTS)   select  @PRINCIPAL_AMOUNT = @PRINCIPAL_BALANCE,  @PAYMENT_AMOUNT = @INTEREST_AMOUNT + @PRINCIPAL_AMOUNT,  @PRINCIPAL_BALANCE = @PRINCIPAL_BALANCE - @PAYMENT_AMOUNT + @INTEREST_AMOUNT  else  select  @PRINCIPAL_AMOUNT = @PAYMENT_AMOUNT - @INTEREST_AMOUNT,  @PRINCIPAL_BALANCE = @PRINCIPAL_BALANCE - @PAYMENT_AMOUNT + @INTEREST_AMOUNT   insert PM20401  (  SCHEDULE_NUMBER,  Schedule_Payment_Number,  VCHRNMBR,  PAYMENT_AMOUNT,  VENDORID,  INTEREST_AMOUNT,  PRINCIPAL_AMOUNT,  PRINCIPAL_BALANCE,  DOCDATE,  DUEDATE,  Status,  MARKED,  MKDBYUSR  )  select   @I_vSCHEDULE_NUMBER,    @count,     '',     @PAYMENT_AMOUNT,   @VENDORID,    @INTEREST_AMOUNT,   @PRINCIPAL_AMOUNT,   @PRINCIPAL_BALANCE,   @DOCDATE,    @DUEDATE,    3,     0,     ''     if (@@error <> 0)  begin  select @O_iErrorState = 3401     exec @iStatus = taUpdateString  @O_iErrorState,   @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select  @DOCDATE =  case @I_vPYMNT_FREQUENCY  when 2 then dateadd(month, 1 * @count, @FIRST_INV_DOC_DATE)  when 3 then dateadd(quarter, 1 * @count, @FIRST_INV_DOC_DATE)  when 4 then dateadd(quarter, 2 * @count, @FIRST_INV_DOC_DATE)  when 5 then dateadd(year, 1 * @count, @FIRST_INV_DOC_DATE)  else @DOCDATE  end   if @I_vPYMNT_FREQUENCY = 1 and (datepart(day, @DOCDATE) = 1)  select @DOCDATE = dateadd(day, 14, @DOCDATE)  else   if @I_vPYMNT_FREQUENCY = 1 and (datepart(day, @DOCDATE) = 15)  select @DOCDATE = dateadd(month, 1, @DOCDATE) - 14   select @DUEDATE =   case @I_vPYMNT_FREQUENCY  when 2 then dateadd(month, 1 * @count, @FIRST_INV_DUE_DATE)  when 3 then dateadd(quarter, 1 * @count, @FIRST_INV_DUE_DATE)  when 4 then dateadd(quarter, 2 * @count, @FIRST_INV_DUE_DATE)  when 5 then dateadd(year, 1 * @count, @FIRST_INV_DUE_DATE)  else @DUEDATE  end  if @I_vPYMNT_FREQUENCY = 1 and (datepart(day, @DUEDATE) = 1)  select @DUEDATE = dateadd(day, 14, @DUEDATE)  else   if @I_vPYMNT_FREQUENCY = 1 and (datepart(day, @DUEDATE) = 15)  select @DUEDATE = dateadd(month, 1, @DUEDATE) - 14   select @AppendNumber = @AppendNumber + 1, @count = @count + 1 end  exec @iStatus = taPMSchedPmntsPost  @I_vORIG_VOUCHER_NUM,  @I_vORIG_DOC_TYPE,  @I_vPAY_OFFSET_ACCT_IDX,  @I_vPayOffsetAccount,  @I_vFIRST_INV_DOC_DATE,  @I_vFIRST_INV_DUE_DATE,  @I_vINT_EXP_ACCT_IDX,  @I_vIntExpenseAccount,  @I_vPAYMENT_AMOUNT,  @I_vNUM_PAYMENTS,  @I_vSCHEDULE_NUMBER,  @I_vPYMNT_FREQUENCY,  @I_vPAY_ACCT_IDX,  @I_vPayAccount,  @I_vSCH_DOC_DATE,  @I_vSCHEDULE_AMOUNT,  @I_vSCHEDULE_DESC,  @I_vSCHEDULE_INT_RATE,  @I_vSCHEDULE_INT_TYPE1,  @I_vUSERID,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if (@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3403    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taPMSchedPmnts] TO [DYNGRP]
GO
