SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ncDestBatchPostingEngine]   @I_iSQLSessionID	int = NULL,  @I_cBatchSourceMCR	char(15) = NULL,	/* batch source for MC Revaluation */  @I_cBatchActivityTS	char(25) = NULL,	/* transaction source for Batch_Activity */  @I_cBatchSource	char(15) = NULL,  @I_cBatchNumber	char(15) = NULL,  @I_cTransactionSource	char(25) = NULL,  @I_sTransactionType	smallint = NULL,  @I_cUserID		char(15) = NULL,  @I_tPrinting		tinyint = NULL,  @I_tPosting		tinyint = NULL,  @I_sWindowType		smallint = NULL,  @I_cCompanyName	char(64) = NULL,  @I_sCompanyID		smallint = NULL,  @I_tMCRegistered	tinyint = NULL,  @I_tICRegistered	tinyint = NULL,  @I_cOrigIntercompanyID	char(5) = NULL,  @I_cProductName	char(30) = NULL,  @I_tMDARegistered	tinyint = NULL,  @I_tCalculateGLTaxes	tinyint = NULL,  @I_tUseTaxPeriods	tinyint = NULL,  @O_iErrorState		int = NULL output as  declare @iError int, @iLoop tinyint, @tPrinting tinyint, @tPosting tinyint,  	@sFuncCurrId char(15), @iFuncCurrIdx smallint, @iDecPlFuncCurr smallint, 	@tMCReport tinyint,@cLogMsg char(255) select @tPrinting = @I_tPrinting, @tPosting = @I_tPosting select @iLoop = 0 while( @iLoop = 0 ) begin 	select @iLoop = 1, @iError = 0 	/* IB - 20/06/06, Added Intercompany Log table */ 	exec dbo.ncWriteInterLog 'ncDestBatchPostingEngine started.' 	/* check for MC Revaluation activity in destination company (blocks posting) */ 	if exists( select 1 from DYNAMICS.dbo.SY00800 BACT join MC10000 MCRV  		on MCRV.RVLUEID = BACT.BACHNUMB 		where BACT.BCHSOURC = @I_cBatchSourceMCR and BACT.POSTING = 1 		and BACT.CMPNYNAM = @I_cCompanyName and MCRV.RVLSRIES = 1 ) 	begin 		select @O_iErrorState = 36451	/* reval in progress, try later */ 		break 	end 	 	/* update batch activity for batch to be posted */ 	if exists( select 1 from DYNAMICS.dbo.SY00800 where USERID = @I_cUserID and CMPNYNAM = @I_cCompanyName  			and BACHNUMB = @I_cBatchNumber and BCHSOURC = @I_cBatchSource and WINTYPE = @I_sWindowType ) 		update DYNAMICS.dbo.SY00800 set POSTING = 1, TRXSOURC = @I_cBatchActivityTS 		where USERID = @I_cUserID and CMPNYNAM = @I_cCompanyName  			and BACHNUMB = @I_cBatchNumber and BCHSOURC = @I_cBatchSource and WINTYPE = @I_sWindowType 	else 		insert into DYNAMICS.dbo.SY00800 ( USERID, CMPNYNAM, BACHNUMB, BCHSOURC, WINTYPE, POSTING, TRXSOURC )  		values ( @I_cUserID, @I_cCompanyName, @I_cBatchNumber, @I_cBatchSource, @I_sWindowType, 1, @I_cBatchActivityTS ) 	/* update batch validation status */ 	update SY00500 set GLBCHVAL = 0x08000000 where BACHNUMB = @I_cBatchNumber and BCHSOURC = @I_cBatchSource 	 	/* set up functional currency info - MC_SETP (MC40000) and MC_Currency_SETP (DYN..MC40200) */ 	if exists(select 1 from MC40000 MCSETP join DYNAMICS.dbo.MC40200 CURRSETP on CURRSETP.CURRNIDX = MCSETP.FUNCRIDX where FUNCRIDX <> 0) 	begin 		select @sFuncCurrId = MCSETP.FUNLCURR, @iFuncCurrIdx = MCSETP.FUNCRIDX, @iDecPlFuncCurr = CURRSETP.DECPLCUR-1 		from MC40000 MCSETP join DYNAMICS.dbo.MC40200 CURRSETP on CURRSETP.CURRNIDX = MCSETP.FUNCRIDX 	end 	else 		select @sFuncCurrId = '', @iFuncCurrIdx = 0, @iDecPlFuncCurr = 2 	/* determine whether MC or FC journal */ 	select @tMCReport = isnull( (select INCMCINF from SY02300 where TRXSOURC=@I_cTransactionSource), 0) 	/* check for routine added by 8.0 sp2 - must be called prior to posting else posting will fail on sp2 */ 	if exists (select * from sysobjects where id = object_id('dbo.glpCreatePostingActivity') and sysstat & 0xf = 4) 	begin 		/* IB - 20/06/06, Added Intercompany Log table */ 		exec dbo.ncWriteInterLog 'ncDestBatchPostingEngine.  Call glpCreatePostingActivity' 		exec @iError = glpCreatePostingActivity  			@I_iSQLSessionID, 			@I_cBatchSource, 			@I_cBatchNumber, 			@I_cUserID, 			@I_sWindowType, 			@I_cCompanyName, 			@I_sCompanyID, 			@I_tPosting, 			@O_iErrorState output 		if @iError = 0 select @iError = @@error 		if @iError <> 0 or @O_iErrorState <> 0 		begin 			select @cLogMsg = 'ncDestBatchPostingEngine break.  glpCreatePostingActivity failed. '+ 								'Error: '+str(@iError)+' , ErrorState: '+str(@O_iErrorState) 			/* IB - 20/06/06, Added Intercompany Log table */ 			exec dbo.ncWriteInterLog @cLogMsg 			break 		end 	end 	/* IB - 20/06/06, Added Intercompany Log table */ 	exec dbo.ncWriteInterLog 'ncDestBatchPostingEngine.  Call glpPostBatch' 	exec @iError = glpPostBatch  		@I_iSQLSessionID, 		@I_cBatchSource, 		@I_cBatchNumber, 		@I_cTransactionSource, 		@I_sTransactionType, 		@I_cUserID, 		@tPrinting output, 		@tPosting output, 		@I_sWindowType, 		@I_cCompanyName, 		@I_sCompanyID, 		@sFuncCurrId, 		@iFuncCurrIdx, 		@iDecPlFuncCurr, 		@I_tMCRegistered, 		@tMCReport, 		@I_tICRegistered, 		@I_cOrigIntercompanyID, 		@I_cProductName, 		@I_tMDARegistered, 		@I_tCalculateGLTaxes, 		@I_tUseTaxPeriods, 		@O_iErrorState output 	if @iError = 0 select @iError = @@error 	if @iError <> 0 or @O_iErrorState <> 0 	begin 		select @cLogMsg = 'ncDestBatchPostingEngine break.  glpPostBatch failed. '+ 							'Error: '+str(@iError)+' , ErrorState: '+str(@O_iErrorState) 		/* IB - 20/06/06, Added Intercompany Log table */ 		exec dbo.ncWriteInterLog @cLogMsg 		break 	end 	exec @iError = glpBatchCleanup 		@I_iSQLSessionID, 		@I_cBatchSource, 		@I_cBatchNumber, 		@I_cTransactionSource, 		@I_sTransactionType, 		@I_tPosting, 		@I_cUserID, 		@I_sWindowType, 		@I_cCompanyName, 		@I_tCalculateGLTaxes, 		@O_iErrorState output 	if @iError = 0 select @iError = @@error end /* flow control loop */ return (@iError)  
GO
GRANT EXECUTE ON  [dbo].[ncDestBatchPostingEngine] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[ncDestBatchPostingEngine] TO [public]
GO
