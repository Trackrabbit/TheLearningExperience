SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taIVTransferLotInsert] @I_vIVDOCNBR char(17),     @I_vUSERDATE datetime = '',   @I_vITEMNMBR char(30),    @I_vLOTNUMBR char(20),    @I_vSLTSQNUM int = 0,    @I_vSERLTQTY numeric(19,5),   @I_vLOCNCODE char(10),    @I_vEXPNDATE datetime = '',   @I_vMFGDATE datetime = '',   @I_vAUTOCREATELOT int = 0,   @I_vLNSEQNBR int = 0,    @I_vQTYTYPE tinyint = 1,   @I_vBIN char(15) = '',    @I_vTOBIN char(15) = '',   @I_vTOLOCNCODE char(10) = '',  @I_vCreateBin tinyint = 0,   @I_vOverrideBin tinyint = 0,  @I_vRequesterTrx smallint = 0,  @I_vUSRDEFND1 char(50) = '',  @I_vUSRDEFND2 char(50) = '',  @I_vUSRDEFND3 char(50) = '',  @I_vUSRDEFND4 varchar(8000) ='', @I_vUSRDEFND5 varchar(8000) ='', @O_iErrorState int output,   @oErrString varchar(255) output   with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare   @IVDOCTYP smallint,     @SLTSQNUM int,      @OVRSERLT smallint,     @DATERECD datetime,     @ITMTRKOP smallint,     @UNITCOST numeric(19,5),   @DTSEQNUM numeric(19,5),   @QTYTYPE smallint,     @ATYALLOC numeric(19,5),   @QTYRECVD numeric(19,5),   @QTYSOLD numeric(19,5),    @QTYDONE numeric(19,5),    @QTYAVAIL numeric(19,5),   @QTYTOALLOC numeric(19,5),   @LotFound tinyint,     @ENABLEMULTIBIN tinyint,  @DECPLQTY tinyint,  @QtyAvailBin numeric(19,5),  @sCompanyID int,  @NOTEINDX numeric(19,5),  @iGetNextNoteIdxErrState int,  @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @O_oErrorState int,  @iError int,      @LTNUMSLD tinyint,  @SERLTQTY numeric(19,5),  @ALLEXPLOTSIV tinyint,  @ASSIGNLOTNUMBY tinyint,  @USEEXISTINGSNLOTS tinyint,  @LotHit tinyint,  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select  @IVDOCTYP = 3,       @SLTSQNUM = 0,  @OVRSERLT = 0,  @DATERECD = '',   @ITMTRKOP = 0,  @UNITCOST = 0,  @DTSEQNUM = 0,  @QTYTYPE = 1,  @ATYALLOC = 0,  @QTYRECVD = 0,  @QTYSOLD = 0,  @QTYDONE = 0,  @QTYAVAIL = 0,  @QTYTOALLOC = 0,  @LotFound = 0,  @ENABLEMULTIBIN = 0,  @DECPLQTY = 0,  @QtyAvailBin = 0,  @QTYTOALLOC = 0,  @ENABLEMULTIBIN = 0,  @sCompanyID = 0,  @NOTEINDX = 0,  @iGetNextNoteIdxErrState = 0,  @iStatus = 0,  @O_iErrorState = 0,  @LTNUMSLD = 0,  @SERLTQTY = 0,  @ALLEXPLOTSIV = 0,  @ASSIGNLOTNUMBY = 0,  @USEEXISTINGSNLOTS = 0,  @LotHit = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taIVTransferLotInsertPre  @I_vIVDOCNBR output,  @I_vUSERDATE output,  @I_vITEMNMBR output,  @I_vLOTNUMBR output,  @I_vSLTSQNUM output,  @I_vSERLTQTY output,  @I_vLOCNCODE output,  @I_vEXPNDATE output,  @I_vMFGDATE output,  @I_vAUTOCREATELOT output,  @I_vLNSEQNBR output,  @I_vQTYTYPE output,  @I_vBIN output,  @I_vTOBIN output,  @I_vTOLOCNCODE output,  @I_vCreateBin output,  @I_vOverrideBin output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3337    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vIVDOCNBR is NULL or  @I_vITEMNMBR is NULL or  @I_vLNSEQNBR is NULL or  @I_vLOTNUMBR is NULL or  @I_vLOCNCODE is NULL or  @I_vAUTOCREATELOT is NULL or  @I_vSERLTQTY is null or  @I_vQTYTYPE is null or  @I_vBIN is null or  @I_vTOBIN is null or  @I_vTOLOCNCODE is null or  @I_vCreateBin is null or  @I_vOverrideBin is null or  @I_vRequesterTrx is null or  @I_vUSRDEFND1 is NULL or  @I_vUSRDEFND2 is NULL or  @I_vUSRDEFND3 is NULL or  @I_vUSRDEFND4 is NULL or  @I_vUSRDEFND5 is NULL) begin  select @O_iErrorState = 3335    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vIVDOCNBR = '' or  @I_vITEMNMBR = '' or  @I_vLOTNUMBR = '') begin  select @O_iErrorState = 3336    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vLOTNUMBR = UPPER(@I_vLOTNUMBR),  @I_vLOCNCODE = UPPER(@I_vLOCNCODE),  @I_vBIN = upper(@I_vBIN),  @I_vTOBIN = upper(@I_vTOBIN)  if (@I_vITEMNMBR <> '') begin  if (not exists(select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR))  begin  select @O_iErrorState = 2271    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vLOCNCODE = '') begin  select @O_iErrorState = 1626    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  if (@I_vLOCNCODE <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11835     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vLOCNCODE <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11836     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSERLTQTY < 0) begin  select @O_iErrorState = 3347    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSLTSQNUM <> 0) begin  select @SLTSQNUM = @I_vSLTSQNUM end  if (@I_vQTYTYPE not in (1,2,3,4,5)) begin  select @O_iErrorState = 5953    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vUSERDATE = '') begin  select @I_vUSERDATE = convert(varchar(12),getdate()) end  select @ENABLEMULTIBIN = ENABLEMULTIBIN,  @ALLEXPLOTSIV = ALLEXPLOTSIV,  @ASSIGNLOTNUMBY = ASSIGNLOTNUMBY,  @USEEXISTINGSNLOTS = USEEXISTINGSNLOTS  from IV40100 (nolock) where SETUPKEY = 1  if (@ENABLEMULTIBIN = 0) begin  select @I_vBIN = '', @I_vTOBIN = '' end  if (@ENABLEMULTIBIN = 1) begin  if (@I_vBIN = '')  begin  select @I_vBIN = 'AUTOCREATE'  end   if (@I_vTOBIN = '')  begin  select @I_vTOBIN = 'AUTOCREATE'  end   if (@I_vOverrideBin not in (0,1))  begin  select @O_iErrorState = 5954    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin not in (0,1))  begin  select @O_iErrorState = 5955    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((@I_vTOLOCNCODE = '') and (@I_vCreateBin = 1))  begin  select @O_iErrorState = 5956    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vAUTOCREATELOT = 0)  begin  if not exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  LOTNUMBR = @I_vLOTNUMBR and  QTYTYPE  = @I_vQTYTYPE and  LTNUMSLD = 0 and  BIN = @I_vBIN)  begin  select @O_iErrorState = 5957    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   select @sCompanyID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()  if not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN)  begin  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5958     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin = 1)  begin  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 5959   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @I_vLOCNCODE, @I_vBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 5960     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vTOLOCNCODE and BIN = @I_vTOBIN)  begin  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5961     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin = 1)  begin  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 5962   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @I_vTOLOCNCODE, @I_vTOBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 5963     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = @I_vQTYTYPE)  begin  if (@I_vCreateBin = 1)  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN, @I_vQTYTYPE,0,0  if (@@error <> 0)  begin  select @O_iErrorState = 5964     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5965     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if (@I_vAUTOCREATELOT = 0)  begin  select @QtyAvailBin = (QUANTITY - ATYALLOC) from IV00112 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE   if ((@I_vSERLTQTY > @QtyAvailBin) and (@I_vOverrideBin = 0))  begin  select @O_iErrorState = 5984   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  select @ITMTRKOP = ITMTRKOP from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  if ( @ITMTRKOP <> 3 ) begin  select @O_iErrorState = 3346    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx=0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='IV_Transaction',  @I_vINDEX1=@I_vIVDOCNBR,  @I_vINDEX2=@IVDOCTYP,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @O_iErrorState = 3356   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ( @I_vAUTOCREATELOT = 1 and @I_vLOTNUMBR <> '' ) begin  if (@I_vLOCNCODE = '')  begin  select @O_iErrorState = 3348    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if exists(select 1 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR and LOCNCODE = @I_vLOCNCODE)  begin  select @O_iErrorState = 6352    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @UNITCOST =  case  when VCTNMTHD in (4,5) then STNDCOST  else CURRCOST  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   select @DTSEQNUM = isnull(max(DTSEQNUM),0)+16384 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and DATERECD = @DATERECD and LOCNCODE = @I_vLOCNCODE and QTYTYPE = 1   select @OVRSERLT = 1     if (@USEEXISTINGSNLOTS = 1)  begin  select @O_iErrorState = 8681    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV00300  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  LOTNUMBR,  QTYRECVD,  QTYSOLD,  ATYALLOC,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  LTNUMSLD,  QTYTYPE,  BIN,  MFGDATE,  EXPNDATE  )  select  @I_vITEMNMBR,  @I_vLOCNCODE,  @DATERECD,  @DTSEQNUM,  @I_vLOTNUMBR,  @I_vSERLTQTY,  0,  @I_vSERLTQTY,  @UNITCOST,  0,  '',  1,  @I_vQTYTYPE,  @I_vBIN,  @I_vMFGDATE,   @I_vEXPNDATE   if (@@error <> 0)  begin  select @O_iErrorState = 3345     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 3339    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''   if (@@error <> 0)  begin  select @O_iErrorState = 3340    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@ENABLEMULTIBIN = 1)  begin  if (exists(select 1 from IV00112 (nolock)  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE))  begin  update IV00112 set QUANTITY = QUANTITY + @I_vSERLTQTY  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE  end  else  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN, @I_vQTYTYPE, @I_vSERLTQTY,0  end  if (@@error <> 0)  begin  select @O_iErrorState = 5985   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   if (@I_vLNSEQNBR = 0)  begin  select @I_vLNSEQNBR = LNSEQNBR from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and   IVDOCNBR = @I_vIVDOCNBR and  ITEMNMBR = @I_vITEMNMBR  if (@I_vLNSEQNBR = 0)  select @I_vLNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and IVDOCNBR = @I_vIVDOCNBR  end   if (@SLTSQNUM = 0)  begin  select @SLTSQNUM = isnull(max(SLTSQNUM),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR  end   if not exists(select 1 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  SLTSQNUM = @SLTSQNUM)  begin  insert IV10002  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  SERLTNUM,  SERLTQTY,  LNSEQNBR,  SLTSQNUM,  DATERECD,  DTSEQNUM,  OVRSERLT,  QTYSCRAPPED,  FROMBIN,  TOBIN,  MFGDATE,  EXPNDATE  )  select  @I_vIVDOCNBR,   @IVDOCTYP,    @I_vITEMNMBR,   @I_vLOTNUMBR,   @I_vSERLTQTY,   @I_vLNSEQNBR,   @SLTSQNUM,    @DATERECD,    @DTSEQNUM,    @OVRSERLT,    0,      @I_vBIN,    @I_vTOBIN,    @I_vMFGDATE,   @I_vEXPNDATE   if (@@error <> 0)  begin  select @O_iErrorState = 3341    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  select @O_iErrorState = 3355     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@I_vAUTOCREATELOT = 0)and (@I_vLOTNUMBR <> '')) begin  if (@I_vEXPNDATE <> '')   begin  if not exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  LOTNUMBR = @I_vLOTNUMBR and  QTYTYPE  = @I_vQTYTYPE and  LTNUMSLD = 0 and  BIN = @I_vBIN and  EXPNDATE = @I_vEXPNDATE)  begin  select @O_iErrorState = 8680    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   while (@LotFound = 0)  begin  select @LotHit = 0   if (@ASSIGNLOTNUMBY = 2)   begin  select TOP 1  @DATERECD = DATERECD,  @DTSEQNUM = DTSEQNUM,  @QTYSOLD = QTYSOLD,  @ATYALLOC = ATYALLOC,  @QTYRECVD = QTYRECVD,  @I_vEXPNDATE = isnull(EXPNDATE,''),  @I_vMFGDATE = isnull(MFGDATE,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vEXPNDATE = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and  QTYTYPE  = @I_vQTYTYPE and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vEXPNDATE <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and  QTYTYPE  = @I_vQTYTYPE and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by EXPNDATE,DTSEQNUM  end   if (@LotHit = 0)  begin  select TOP 1  @DATERECD = DATERECD,  @DTSEQNUM = DTSEQNUM,  @QTYSOLD = QTYSOLD,  @ATYALLOC = ATYALLOC,  @QTYRECVD = QTYRECVD,  @I_vEXPNDATE = isnull(EXPNDATE,''),  @I_vMFGDATE = isnull(MFGDATE,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vEXPNDATE = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and  QTYTYPE  = @I_vQTYTYPE and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vEXPNDATE <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and  QTYTYPE  = @I_vQTYTYPE and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by DATERECD,DTSEQNUM  end     if (@LotHit = 0)  begin  if (@I_vEXPNDATE = '') and exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and   QTYTYPE = 1 and BIN = @I_vBIN)  begin  select @O_iErrorState = 8679       exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  if @QTYRECVD < @I_vSERLTQTY  begin  select @O_iErrorState = 11990      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   else  begin  select @O_iErrorState = 3353     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@ALLEXPLOTSIV = 0)   begin  if ((@I_vEXPNDATE <= @I_vUSERDATE) and (@I_vEXPNDATE <> ''))  begin  select @O_iErrorState = 8682    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@QTYTYPE <> 1)  begin  select @O_iErrorState = 3344    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@DTSEQNUM = 0 and (@QTYDONE < @I_vSERLTQTY))  begin  select @O_iErrorState = 3354     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @QTYAVAIL = @QTYRECVD - (@ATYALLOC + @QTYSOLD)  if (@QTYAVAIL >= @I_vSERLTQTY)  begin  select @QTYTOALLOC = @I_vSERLTQTY   update IV00300 set ATYALLOC = ATYALLOC + @QTYTOALLOC  where ITEMNMBR = @I_vITEMNMBR   and LOCNCODE = @I_vLOCNCODE  and DATERECD = @DATERECD  and DTSEQNUM = @DTSEQNUM  and QTYTYPE =  @I_vQTYTYPE  and BIN = @I_vBIN  if (@@error <> 0)  begin  select @O_iErrorState = 3349    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @SERLTQTY = @QTYTOALLOC   if (@QTYAVAIL = @QTYTOALLOC)  begin  update IV00300 set LTNUMSLD = 1  where ITEMNMBR = @I_vITEMNMBR and   LOCNCODE = @I_vLOCNCODE and   DATERECD = @DATERECD and  DTSEQNUM = @DTSEQNUM and  QTYTYPE = @I_vQTYTYPE and  BIN = @I_vBIN  if (@@error <> 0)  begin  select @O_iErrorState = 3352    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  else  begin  select @SERLTQTY = @I_vSERLTQTY  end   select @LotFound = 1,  @QTYDONE = @I_vSERLTQTY   end  else  begin  update IV00300 set ATYALLOC = ATYALLOC + @QTYAVAIL  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  DATERECD = @DATERECD and  DTSEQNUM = @DTSEQNUM and  QTYTYPE = @I_vQTYTYPE and  BIN = @I_vBIN  if (@@error <> 0)  begin  select @O_iErrorState = 3350    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @SERLTQTY = @QTYAVAIL   update IV00300 set LTNUMSLD = 1  where ITEMNMBR = @I_vITEMNMBR and   LOCNCODE = @I_vLOCNCODE and   DATERECD = @DATERECD and  DTSEQNUM = @DTSEQNUM and  BIN = @I_vBIN  if (@@error <> 0)  begin  select @O_iErrorState = 3351    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @QTYDONE = @QTYDONE + @QTYAVAIL  end   if (@I_vLNSEQNBR = 0)  begin  select @I_vLNSEQNBR = LNSEQNBR from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  ITEMNMBR = @I_vITEMNMBR   if (@I_vLNSEQNBR = 0)  begin  select @I_vLNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR  end  end   select @SLTSQNUM = SLTSQNUM from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  DTSEQNUM = @DTSEQNUM and  DATERECD = @DATERECD and   SERLTNUM = @I_vLOTNUMBR and  FROMBIN = @I_vBIN   if ((@SLTSQNUM = 0) or (@LTNUMSLD = 1))  begin  select @SLTSQNUM = isnull(max(SLTSQNUM),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR  end   if (@ALLEXPLOTSIV = 0)   begin  if ((@I_vEXPNDATE <= @I_vUSERDATE) and (@I_vEXPNDATE <> ''))  begin  select @O_iErrorState = 8683    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   if not exists( select 1 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  SLTSQNUM = @SLTSQNUM)  begin  insert IV10002  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  SERLTNUM,  SERLTQTY,  LNSEQNBR,  SLTSQNUM,  DATERECD,  DTSEQNUM,  OVRSERLT,  QTYSCRAPPED,  FROMBIN,  TOBIN,  MFGDATE,  EXPNDATE  )  select  @I_vIVDOCNBR,   @IVDOCTYP,    @I_vITEMNMBR,   @I_vLOTNUMBR,   @SERLTQTY,    @I_vLNSEQNBR,   @SLTSQNUM,    @DATERECD,    @DTSEQNUM,    @OVRSERLT,    0,      @I_vBIN,    @I_vTOBIN,    @I_vMFGDATE,   @I_vEXPNDATE   if (@@error <> 0)  begin  select @O_iErrorState = 3342    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  update IV10002 set SERLTQTY = SERLTQTY + @SERLTQTY  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  SLTSQNUM = @SLTSQNUM  if (@@error <> 0)  begin  select @O_iErrorState = 5867    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   if ((@QTYAVAIL = @QTYTOALLOC) or (@QTYAVAIL < @I_vSERLTQTY))  begin  select @LTNUMSLD = 1  end  else  begin  select @LTNUMSLD = 0  end   select @I_vSERLTQTY = @I_vSERLTQTY - @SERLTQTY   end end  if (@ENABLEMULTIBIN = 1 and @I_vQTYTYPE = 1)  begin  update IV00112 set ATYALLOC = ATYALLOC + @SERLTQTY    where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 6641    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  exec @iStatus = taIVTransferLotInsertPost  @I_vIVDOCNBR,  @I_vUSERDATE,  @I_vITEMNMBR,  @I_vLOTNUMBR,  @I_vSLTSQNUM,  @I_vSERLTQTY,  @I_vLOCNCODE,   @I_vEXPNDATE,  @I_vMFGDATE,  @I_vAUTOCREATELOT,  @I_vLNSEQNBR,  @I_vQTYTYPE,  @I_vBIN,  @I_vTOBIN,  @I_vTOLOCNCODE,  @I_vCreateBin,  @I_vOverrideBin,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3338    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx=0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='IV_Transaction',  @I_vINDEX1=@I_vIVDOCNBR,  @I_vINDEX2=@IVDOCTYP,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @O_iErrorState = 3357   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taIVTransferLotInsert] TO [DYNGRP]
GO
