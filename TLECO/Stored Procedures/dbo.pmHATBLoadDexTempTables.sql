SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[pmHATBLoadDexTempTables]  @I_cVendorTemp char(40)        = NULL,  @I_cDocumentTemp char(40)        = NULL,  @I_cApplyTemp char(40)        = NULL,  @I_cVendorListTemp char(40) = NULL,  @I_cStartVendorID               char(15)        = NULL,  @I_cEndVendorID          char(15)        = NULL,  @I_cStartVendorName             char(65)        = NULL,  @I_cEndVendorName               char(65)        = NULL,  @I_cStartClassID                char(15)        = NULL,  @I_cEndClassID                  char(15)        = NULL,  @I_cStartUserDefined     char(15)        = NULL,  @I_cEndUserDefined              char(15)        = NULL,  @I_cStartPaymentPriority        char(3)  = NULL,  @I_cEndPaymentPriority   char(3)  = NULL,  @I_tExcludeNoActivity tinyint  = NULL,  @I_tExcludeZeroBalanceVendors tinyint  = NULL,  @I_tExcludeFullyPaidTrxs tinyint  = NULL,  @I_tExcludeCreditBalance tinyint  = NULL,  @I_tExcludeMultiCurrency tinyint  = NULL,  @O_iErrorState                  int             = NULL output as  declare  @TRUE smallint,  @FALSE smallint,  @vVendorTable varchar(255),  @cExcludeFullyPaidTrxs char(1),  @cExcludeMulticurrency char(1),  @cStartVendorID char(32),  @cEndVendorID char(32),  @cStartVendorName char(132),  @cEndVendorName char(132),  @cStartClassID char(32),  @cEndClassID char(32),  @cStartUserDefined char(32),  @cEndUserDefined char(32),  @cStartPaymentPriority char(8),  @cEndPaymentPriority char(8),  @tLoopControl           tinyint,  @iStatus                int,  @iError                 int  select  @iStatus = 0,  @O_iErrorState = 0  select  @TRUE  = 1,  @FALSE = 0  while @tLoopControl is NULL begin  select @tLoopControl = 1   if @I_cVendorTemp is NULL or  @I_cDocumentTemp is NULL or  @I_cApplyTemp is NULL or  @I_cVendorListTemp is NULL or  @I_cStartVendorID               is NULL or  @I_cEndVendorID          is NULL or  @I_cStartVendorName             is NULL or  @I_cEndVendorName               is NULL or  @I_cStartClassID                is NULL or  @I_cEndClassID                  is NULL or  @I_cStartUserDefined     is NULL or  @I_cEndUserDefined              is NULL or  @I_cStartPaymentPriority        is NULL or  @I_cEndPaymentPriority   is NULL or  @I_tExcludeNoActivity is NULL or  @I_tExcludeZeroBalanceVendors is NULL or  @I_tExcludeFullyPaidTrxs is NULL or  @I_tExcludeCreditBalance is NULL or  @I_tExcludeMultiCurrency is NULL  begin  select @O_iErrorState = 20962  break  end    if @I_cVendorListTemp = ''  select @vVendorTable = ' PM00200 A with (NOLOCK) '  else  select @vVendorTable = @I_cVendorListTemp + ' T join PM00200 A with (NOLOCK) on T.VENDORID = A.VENDORID '   if (@I_tExcludeNoActivity = @FALSE) and (@I_tExcludeZeroBalanceVendors = @FALSE)  begin  Exec @iStatus = smFormatStringsForExecs  @I_cStartVendorID,  @cStartVendorID output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cEndVendorID,  @cEndVendorID output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cStartVendorName,  @cStartVendorName output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cEndVendorName,  @cEndVendorName output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cStartClassID,  @cStartClassID output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cEndClassID,  @cEndClassID output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cStartUserDefined,  @cStartUserDefined output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cEndUserDefined,  @cEndUserDefined output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cStartPaymentPriority,  @cStartPaymentPriority output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   Exec @iStatus = smFormatStringsForExecs  @I_cEndPaymentPriority,  @cEndPaymentPriority output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec('insert into ' + @I_cVendorTemp +  ' select  A.VENDORID,  A.VENDNAME,  A.VNDCLSID,  A.USERDEF1,  A.PYMNTPRI,  A.VENDORID  from  ' + @vVendorTable + '  where  A.VENDORID >= ' + @cStartVendorID +  ' and A.VENDORID <= ' + @cEndVendorID +  ' and A.VENDNAME >= ' + @cStartVendorName +  ' and A.VENDNAME <= ' + @cEndVendorName +  ' and A.VNDCLSID >= ' + @cStartClassID +  ' and A.VNDCLSID <= ' + @cEndClassID +  ' and A.USERDEF1 >= ' + @cStartUserDefined +  ' and A.USERDEF1 <= ' + @cEndUserDefined +  ' and A.PYMNTPRI >= ' + @cStartPaymentPriority +  ' and A.PYMNTPRI <= ' + @cEndPaymentPriority)   end   else  begin   exec('insert into ' +   @I_cVendorTemp +   ' select distinct  A.VENDORID,  A.VENDNAME,  A.VNDCLSID,  A.USERDEF1,  A.PYMNTPRI,  A.VENDORID  from  ' + @vVendorTable + ',  #DocumentTEMP  where  A.VENDORID = #DocumentTEMP.VendorID')   end   if (@I_tExcludeZeroBalanceVendors = @TRUE) and (@I_tExcludeCreditBalance = @TRUE)  begin  exec('delete ' +  @I_cVendorTemp +  ' where  (select  sum(CurrentTrxAmount)  from  #DocumentTEMP  where ' +  @I_cVendorTemp + '.VENDORID = #DocumentTEMP.VendorID ) <= 0.00')  end   else if @I_tExcludeZeroBalanceVendors = @TRUE  begin  exec('delete ' +  @I_cVendorTemp +  ' where  (select  sum(CurrentTrxAmount)  from  #DocumentTEMP  where ' +  @I_cVendorTemp + '.VENDORID = #DocumentTEMP.VendorID ) = 0.00')  end   else if @I_tExcludeCreditBalance = @TRUE  begin  exec('delete ' +  @I_cVendorTemp +  ' where  (select  sum(CurrentTrxAmount)  from  #DocumentTEMP  where ' +  @I_cVendorTemp + '.VENDORID = #DocumentTEMP.VendorID ) < 0.00')  end   update   #DocumentTEMP  set  AgingPeriod = 0  where  DocumentType = 7   select @cExcludeFullyPaidTrxs = convert(char(1),@I_tExcludeFullyPaidTrxs)  select @cExcludeMulticurrency = convert(char(1),@I_tExcludeMultiCurrency)   exec('insert into ' +   @I_cDocumentTemp +   ' select  VendorID,  VoucherNumber,  case   WHEN (DocumentType < 6)   THEN 0  ELSE 1  end,  DocumentNumber,  DocumentType,  case  WHEN (DocumentType < 4 or DocumentType = 7)   THEN DocumentAmount  ELSE -DocumentAmount  end,  case  WHEN (DocumentType < 4)   THEN DiscountTakenAmount  ELSE 0.00  end,  DocumentDate,  DueDate,  DiscountDate,  TrxSource,  CurrentTrxAmount,  case  WHEN (AgingPeriod = 1) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end  ELSE 0.00  end,  case  WHEN (AgingPeriod = 2) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 3) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 4) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 5) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 6) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 7) THEN  case  WHEN (DocumentType < 4) THEN  (DocumentAmount - RevalDocAmountAdj - DiscountTakenAmount - WriteoffAmount)  ELSE  (CurrentTrxAmount)  end ELSE 0.00  end,  (DiscountAmountAvail + RevalDiscAmountAvailAdj),  AgingPeriod,  case  WHEN (DocumentType < 4)   THEN WriteoffAmount  ELSE 0.00  end,  case  WHEN (DocumentType < 4)   THEN (rtrim(VoucherNumber) + ''0'')   ELSE (rtrim(VoucherNumber) + ''1'')        end,   '''',   GLPostingDate,  case  WHEN (' + @cExcludeMulticurrency + ' = 1) THEN  ''''  ELSE  CurrencyID  end,  CurrencyIndex,  ExchangeRate,  case  WHEN (DocumentType < 4)   THEN OrigDocumentAmount  ELSE (-1 * OrigDocumentAmount)  end,  case  WHEN (DocumentType < 4)   THEN OrigDiscTakenAmount  ELSE 0.00  end,  OrigCurrentTrxAmount,  case  WHEN (AgingPeriod = 1) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end  ELSE 0.00  end,  case  WHEN (AgingPeriod = 2) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 3) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 4) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 5) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 6) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end ELSE 0.00  end,  case  WHEN (AgingPeriod = 7) THEN   case  WHEN (DocumentType < 4)   THEN (OrigDocumentAmount - OrigDiscTakenAmount - OrigWriteoffAmount)  ELSE OrigCurrentTrxAmount  end ELSE 0.00  end,  OrigDiscAmountAvail,  case  WHEN (DocumentType < 4)   THEN OrigWriteoffAmount  ELSE 0.00  end,  DenominationExchangeRate,  MCTransactionState  from  #DocumentTEMP  where ' +  @cExcludeFullyPaidTrxs + ' = 0  or   ( ' + @cExcludeFullyPaidTrxs + ' = 1  and CurrentTrxAmount <> 0.00)')   if (@I_tExcludeZeroBalanceVendors = @TRUE or @I_tExcludeCreditBalance = @TRUE) and (@I_tExcludeMultiCurrency = @FALSE)  exec('delete ' +  @I_cDocumentTemp + '  where  NOT EXISTS(  select  1  from ' +  @I_cVendorTemp + ' A  where  A.VENDORID =  ' + @I_cDocumentTemp + '.VENDORID)')   exec('insert into ' +   @I_cApplyTemp +   ' select  ApplyToVoucherNumber,  ApplyToDocumentType,  VoucherNumber,  DocumentType,  case  WHEN (AgingPeriod = 1) THEN -AppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 2) THEN -AppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 3) THEN -AppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 4) THEN -AppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 5) THEN -AppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 6) THEN -AppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 7) THEN -AppliedAmount  ELSE 0.00  end,  AppliedAmount,  Posted,  CurrencyID,  CurrencyIndex,  ExchangeRate,  OrigAppliedAmount,  case  WHEN (AgingPeriod = 1) THEN -OrigAppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 2) THEN -OrigAppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 3) THEN -OrigAppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 4) THEN -OrigAppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 5) THEN -OrigAppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 6) THEN -OrigAppliedAmount  ELSE 0.00  end,  case  WHEN (AgingPeriod = 7) THEN -OrigAppliedAmount  ELSE 0.00  end,  (-1 * RealizedGainLossAmount),  DenominationExchangeRate,  MCTransactionState  from  #ApplyTEMP')  end   return(@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[pmHATBLoadDexTempTables] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[pmHATBLoadDexTempTables] TO [rpt_accounting manager]
GO
GRANT EXECUTE ON  [dbo].[pmHATBLoadDexTempTables] TO [rpt_accounts payable coordinator]
GO
GRANT EXECUTE ON  [dbo].[pmHATBLoadDexTempTables] TO [rpt_bookkeeper]
GO
GRANT EXECUTE ON  [dbo].[pmHATBLoadDexTempTables] TO [rpt_executive]
GO
