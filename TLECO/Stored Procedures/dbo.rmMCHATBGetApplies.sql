SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[rmMCHATBGetApplies]  @I_tUsingDocumentDate tinyint  = NULL,  @I_dStartDate datetime = NULL,  @I_dEndDate datetime = NULL,  @I_tExcludeUnpostedAppldCrDocs tinyint  = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_sPrintCurrencyIn smallint = NULL,  @I_nReportingExchangeRate numeric(15,7) = NULL,  @I_sReportingRateCalcMethod smallint = NULL,  @I_sReportingDecimalPlaces smallint = NULL,  @O_iErrorState                  int             = NULL output as  declare  @TRUE smallint,  @FALSE smallint,  @vExcludeUnpostedAppldCrDocs varchar(50),  @vExcludeApplyDateRange varchar(150),  @vExcludeDateRange varchar(150),  @cUsingDocumentDate char(1),  @cExcludeUnpostedFlag char(1),  @cStartDate char(12),  @cEndDate char(12),  @cPrintCurrencyIn char(1),  @cMCRegistered char(1),  @cReportingExchangeRate char(20),  @cReportingRateCalcMethod char(1),  @cReportingDecimalPlaces char(1),  @tLoopControl            tinyint,  @iError                  int  select @O_iErrorState = 0  select  @TRUE  = 1,  @FALSE = 0  while @tLoopControl is NULL begin  select @tLoopControl = 1   if      @I_tUsingDocumentDate is NULL or  @I_dStartDate is NULL or  @I_dEndDate is NULL or  @I_tExcludeUnpostedAppldCrDocs is NULL or  @I_cFunctionalCurrency is NULL or  @I_tMCRegistered is NULL or  @I_sPrintCurrencyIn is NULL or  @I_nReportingExchangeRate is NULL or  @I_sReportingRateCalcMethod is NULL or  @I_sReportingDecimalPlaces is NULL  begin  select @O_iErrorState = 20974  break  end    select @cUsingDocumentDate = convert(char(1),@I_tUsingDocumentDate),  @cStartDate = '''' + convert(char(10),@I_dStartDate,102) + '''',  @cEndDate = '''' + convert(char(10),@I_dEndDate,102) + '''',  @cExcludeUnpostedFlag = convert(char(1),@I_tExcludeUnpostedAppldCrDocs)   if @I_tExcludeUnpostedAppldCrDocs = @TRUE  select @vExcludeUnpostedAppldCrDocs = ' and A.POSTED = 1'  else  select @vExcludeUnpostedAppldCrDocs = ''   if @I_tUsingDocumentDate = @TRUE  begin  select @vExcludeApplyDateRange = ' and A.DATE1 BETWEEN ' + @cStartDate + ' and ' + @cEndDate  select @vExcludeDateRange = ' and A.APFRDCDT BETWEEN ' + @cStartDate + ' and ' + @cEndDate  end  else  begin  select @vExcludeApplyDateRange = ' and A.GLPOSTDT BETWEEN ' + @cStartDate + ' and ' + @cEndDate  select @vExcludeDateRange = ' and A.ApplyFromGLPostDate BETWEEN ' + @cStartDate + ' and ' + @cEndDate  end   select @cMCRegistered = convert(char(1),@I_tMCRegistered)  select @cPrintCurrencyIn = convert(char(1),@I_sPrintCurrencyIn)  select @cReportingExchangeRate = convert(char(16),@I_nReportingExchangeRate)  select @cReportingRateCalcMethod = convert(char(1),@I_sReportingRateCalcMethod)  select @cReportingDecimalPlaces = convert(char(1),@I_sReportingDecimalPlaces)   exec('  insert into  #AppliedTEMP  select  A.APTODCNM,A.APTODCTY,A.APFRDCNM,A.APFRDCTY,A.APFRDCDT,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.APPTOAMT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.RLGANLOS  end),  case  WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  A.APPTOAMT  ELSE  A.ORAPTOAM  end,  case    WHEN (A.FROMCURR = '''' or A.FROMCURR = ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  A.DISTKNAM  ELSE   A.ORDISTKN  end,  case    WHEN (A.FROMCURR = '''' or A.FROMCURR = ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  A.WROFAMNT  ELSE   A.ORWROFAM  end,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.OAPYTORNDAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.OAPYTORNDAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.OAPYTORNDAMT  end),  case  WHEN (A.FROMCURR = '''') THEN  A.CURNCYID  ELSE  A.FROMCURR  end,  ISNULL(C.CURRNIDX,0),  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID <> '''' and A.CURNCYID <> ''' + @I_cFunctionalCurrency + ''') THEN  ISNULL(D.XCHGRATE,ISNULL(C.XCHGRATE,0.00))  ELSE  0.00  end,  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID <> '''' and A.CURNCYID <> ''' + @I_cFunctionalCurrency + ''') THEN  case WHEN (D.XCHGRATE IS NULL or D.XCHGRATE = 0.0000000) THEN  ISNULL(C.DENXRATE,0.00)  ELSE  ISNULL(D.DENXRATE,0.00)  end  ELSE  0.00  end,  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID <> '''' and A.CURNCYID <> ''' + @I_cFunctionalCurrency + ''') THEN  case WHEN (D.XCHGRATE IS NULL or D.XCHGRATE = 0.0000000) THEN  ISNULL(C.MCTRXSTT,0)  ELSE  ISNULL(D.MCTRXSTT,0)  end  ELSE  0  end,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.DISTKNAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.DISTKNAM / ' + @cReportingExchangeRate + '),  ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.DISTKNAM  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.GSTDSAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.GSTDSAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.GSTDSAMT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.WROFAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.WROFAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.WROFAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.PPSAMDED * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.PPSAMDED / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.PPSAMDED  end),  B.AgingPeriod,A.POSTED,  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  1  ELSE 0  end  from  #TransactionTEMP B   JOIN RM20201 A with (NOLOCK)  ON A.APTODCNM = B.DocumentNumber  and A.APTODCTY = B.RMDocumentTypeAll  LEFT OUTER JOIN MC020102 C with (NOLOCK)   ON A.APTODCNM = C.DOCNUMBR  and A.APTODCTY = C.RMDTYPAL  LEFT OUTER JOIN MC020104 D with (NOLOCK)  ON D.CURNCYID = A.CURNCYID  and D.DOCNUMBR = A.APTODCNM  and D.DOCTYPE  = A.APTODCTY  and  (convert(char(10), D.RVLUDATE, 102) + convert(char(10), D.SEQNUMBR))  = (select max(convert(char(10), MC020104.RVLUDATE, 102) + convert(char(10), MC020104.SEQNUMBR))  from  MC020104  where  MC020104.CURNCYID = A.CURNCYID  and  MC020104.DOCNUMBR = A.APTODCNM  and  MC020104.DOCTYPE  = A.APTODCTY  and MC020104.RVLUDATE <= ' + @cEndDate + ')   where  B.Status = 0   and B.RMDocumentTypeAll > 0  and B.RMDocumentTypeAll < 7'  + @vExcludeDateRange  + @vExcludeApplyDateRange  + @vExcludeUnpostedAppldCrDocs )   exec('  insert into  #AppliedTEMP  select  A.APTODCNM,A.APTODCTY,A.APFRDCNM,A.APFRDCTY,A.APFRDCDT,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.APPTOAMT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.RLGANLOS  end),  case  WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  A.APPTOAMT  ELSE  A.ORAPTOAM  end,  case    WHEN (A.FROMCURR = '''' or A.FROMCURR = ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  A.DISTKNAM  ELSE   A.ORDISTKN  end,  case    WHEN (A.FROMCURR = '''' or A.FROMCURR = ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  A.WROFAMNT  ELSE   A.ORWROFAM  end,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.OAPYTORNDAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.OAPYTORNDAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.OAPYTORNDAMT  end),  case  WHEN (A.FROMCURR = '''') THEN  A.CURNCYID  ELSE  A.FROMCURR  end,  ISNULL(C.CURRNIDX,0),  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID <> '''' and A.CURNCYID <> ''' + @I_cFunctionalCurrency + ''') THEN  ISNULL(D.XCHGRATE,ISNULL(C.XCHGRATE,0.00))  ELSE   0.00  end,  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID <> '''' and A.CURNCYID <> ''' + @I_cFunctionalCurrency + ''') THEN  case WHEN (D.XCHGRATE IS NULL or D.XCHGRATE = 0.0000000) THEN  ISNULL(C.DENXRATE,0.00)  ELSE  ISNULL(D.DENXRATE,0.00)  end  ELSE   0.00  end,  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID <> '''' and A.CURNCYID <> ''' + @I_cFunctionalCurrency + ''') THEN  case WHEN (D.XCHGRATE IS NULL or D.XCHGRATE = 0.0000000) THEN  ISNULL(C.MCTRXSTT,0)  ELSE  ISNULL(D.MCTRXSTT,0)  end  ELSE   0  end,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.DISTKNAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.DISTKNAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.DISTKNAM  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.GSTDSAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.GSTDSAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.GSTDSAMT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.WROFAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.WROFAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.WROFAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.PPSAMDED * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.PPSAMDED / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.PPSAMDED  end),  B.AgingPeriod,A.POSTED,  case    WHEN (A.FROMCURR <> '''' and A.FROMCURR <> ''' + @I_cFunctionalCurrency + ''') and  (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''') THEN  1  ELSE 0  end  from  #TransactionTEMP B   JOIN RM30201 A with (NOLOCK)  ON A.APTODCNM = B.DocumentNumber  and A.APTODCTY = B.RMDocumentTypeAll  LEFT OUTER JOIN MC020102 C with (NOLOCK)   ON A.APTODCNM = C.DOCNUMBR  and A.APTODCTY = C.RMDTYPAL  LEFT OUTER JOIN MC020104 D with (NOLOCK)  ON D.CURNCYID = A.CURNCYID  and D.DOCNUMBR = A.APTODCNM  and D.DOCTYPE  = A.APTODCTY  and  (convert(char(10), D.RVLUDATE, 102) + convert(char(10), D.SEQNUMBR))  = (select max(convert(char(10), MC020104.RVLUDATE, 102) + convert(char(10), MC020104.SEQNUMBR))  from  MC020104  where  MC020104.CURNCYID = A.CURNCYID  and  MC020104.DOCNUMBR = A.APTODCNM  and  MC020104.DOCTYPE  = A.APTODCTY  and MC020104.RVLUDATE <= ' + @cEndDate + ')  where  B.Status = 1   and B.RMDocumentTypeAll > 0  and B.RMDocumentTypeAll < 7'  + @vExcludeDateRange  + @vExcludeApplyDateRange )  end   return   
GO
GRANT EXECUTE ON  [dbo].[rmMCHATBGetApplies] TO [DYNGRP]
GO
