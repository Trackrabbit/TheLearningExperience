SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[glBuildMulticurrencyTranslationTemp]  @I_vTableName varchar(27)  = NULL,  @I_vYear int    = NULL,  @I_vHistoricalYear tinyint   = NULL,  @I_vTransCurrencyID varchar(15)  = NULL,  @I_vTransCurrencyIndex int    = NULL,  @I_DecPlacesCurrency int    = NULL,  @I_vTransCurrencyType int    = NULL,  @O_SQL_Error_State int    = NULL   output  as  declare @iStatus int,  @iError int,  @TRUE int,  @FALSE int,  @_vNumberSegments int,   @_vSegment int,  @startdate datetime,  @_vsqlstring1 varchar(8000),  @_vsqlstring2 varchar(8000)  select @O_SQL_Error_State = 0  if( @I_vTableName is NULL or  @I_vYear is NULL or  @I_vHistoricalYear is NULL or  @I_vTransCurrencyID is NULL or  @I_vTransCurrencyIndex is NULL or  @I_DecPlacesCurrency    is NULL or   @I_vTransCurrencyType is NULL )  begin  select @O_SQL_Error_State = 21022  return end  select @iStatus = 0,  @iError = 0,  @_vNumberSegments = 0,   @_vSegment = 0,  @_vsqlstring1 = '',  @_vsqlstring2 = ''  select @startdate = PERIODDT from SY40100 where YEAR1 = @I_vYear and PERIODID = 0 and SERIES = 2  exec @iStatus = DYNAMICS..smGetConstantInt 'TRUE', @TRUE output, @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt 'FALSE', @FALSE output, @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  CREATE TABLE #MCTranslationCurrency  (  [TranslationCurrencyID] [char] (15) NOT NULL ,  [YEAR1] [smallint] NOT NULL ,  [JRNENTRY] [int] NOT NULL ,  [SOURCDOC] [char] (10) NOT NULL ,  [REFRENCE] [char] (30) NOT NULL ,  [TRXDATE] [datetime] NOT NULL ,  [TRXSORCE] [char] (13) NOT NULL ,  [ACTINDX] [int] NOT NULL ,  [SEQNUMBR] [int] NOT NULL ,  [PERIODID] [smallint] NOT NULL ,  [Ledger_ID] [smallint] NOT NULL ,  [CURNCYID] [char] (15) NOT NULL ,  [Original_Exchange_Rate] [numeric](19, 7) NOT NULL ,  [ORGNTSRC] [char] (15) NOT NULL ,  [MKTOPROC] [int] NOT NULL ,  [ACTDESCR] [char] (51) NOT NULL ,  [ACCATNUM] [smallint] NOT NULL ,  [CRDTAMNT] [numeric](19, 5) NOT NULL ,  [DEBITAMT] [numeric](19, 5) NOT NULL ,  [ORCRDAMT] [numeric](19, 5) NOT NULL ,  [ORDBTAMT] [numeric](19, 5) NOT NULL ,  [TranslationCreditAmount] [numeric](19, 5) NOT NULL ,  [TranslationDebitAmount] [numeric](19, 5) NOT NULL ,  [CURRNIDX] [smallint] NOT NULL ,  [DECPLCUR] [smallint] NOT NULL ,  [RATETPID] [char] (15) NOT NULL ,  [EXGTBLID] [char] (15) NOT NULL,  [XCHGRATE] [numeric](19, 7) NOT NULL ,  [PrevExRate]  [numeric](19, 7) NOT NULL ,  [EXCHDATE] [datetime] NOT NULL ,  [TIME1] [datetime] NOT NULL ,  [RTCLCMTD] [smallint] NOT NULL ,  [DENXRATE] [numeric](19, 7) NOT NULL ,  [MCTRXSTT] [smallint] NOT NULL ,  [CurrencyTranslationType] [smallint] NOT NULL ,  [Identity_Column] [int] NOT NULL ,  [DEX_ROW_ID] int identity NOT NULL  )  CREATE INDEX AK2#MCTranslationCurrency ON #MCTranslationCurrency (TranslationCurrencyID, YEAR1, ACTINDX, Ledger_ID, CURNCYID, JRNENTRY, TRXDATE, SEQNUMBR)   begin  if @I_vHistoricalYear = @FALSE   begin  insert #MCTranslationCurrency  (TranslationCurrencyID,  YEAR1,  JRNENTRY,  SOURCDOC,  REFRENCE,  TRXDATE,  TRXSORCE,  ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  CURNCYID,  Original_Exchange_Rate,  ORGNTSRC,  MKTOPROC,  ACTDESCR,  ACCATNUM,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  TranslationCreditAmount,  TranslationDebitAmount,  CURRNIDX,  DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  PrevExRate,  EXCHDATE,  TIME1,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  Identity_Column  )  select  @I_vTransCurrencyID,   GLTRXMerge.OPENYEAR,  GLTRXMerge.JRNENTRY,  GLTRXMerge.SOURCDOC,  GLTRXMerge.REFRENCE,  GLTRXMerge.TRXDATE,  GLTRXMerge.TRXSORCE,  GLTRXMerge.ACTINDX,  GLTRXMerge.SEQNUMBR,  GLTRXMerge.PERIODID,  GLTRXMerge.Ledger_ID,  GLTRXMerge.CURNCYID,  GLTRXMerge.XCHGRATE,  GLTRXMerge.ORGNTSRC,  0,     GLTRXMerge.ACTDESCR,  GLTRXMerge.ACCATNUM,  GLTRXMerge.CRDTAMNT,  GLTRXMerge.DEBITAMT,  GLTRXMerge.ORCRDAMT,  GLTRXMerge.ORDBTAMT,  isnull(GLBBF.TranslationCreditAmount,0),  isnull(GLBBF.TranslationDebitAmount, 0),  @I_vTransCurrencyIndex,  @I_DecPlacesCurrency,  '',    isnull(GLBBF.EXGTBLID, 0),  isnull(GLBBF.XCHGRATE, 0),  isnull(GLBBF.XCHGRATE, 0),  isnull(GLBBF.EXCHDATE, 0),  isnull(GLBBF.TIME1, 0),  isnull(GLBBF.RTCLCMTD, 0),  isnull(GLBBF.DENXRATE, 0),  isnull(GLBBF.MCTRXSTT, 0),  @I_vTransCurrencyType,  isnull(GLBBF.Identity_Column, GLTRXMerge.DEX_ROW_ID)  from (select GLTRX.OPENYEAR,  GLTRX.JRNENTRY,  GLTRX.SOURCDOC,  GLTRX.REFRENCE,  GLTRX.TRXDATE,  GLTRX.TRXSORCE,  GLTRX.ACTINDX,  GLTRX.SEQNUMBR,  GLTRX.PERIODID,  GLTRX.Ledger_ID,  GLTRX.CURNCYID,  GLTRX.XCHGRATE,  GLTRX.ORGNTSRC,  GLTRX.CRDTAMNT,  GLTRX.DEBITAMT,  GLTRX.ORCRDAMT,  GLTRX.ORDBTAMT,  GLTRX.DEX_ROW_ID,  MC.CurrencyTranslationType,  GLMSTR.ACTDESCR,  GLMSTR.ACCATNUM  from GL20000 GLTRX, MC00200 MC, GL00100 GLMSTR  where MC.CurrencyTranslationType = @I_vTransCurrencyType   and GLTRX.ACTINDX = MC.ACTINDX and MC.CURNCYID = ''  and GLTRX.ACTINDX = GLMSTR.ACTINDX  and GLTRX.OPENYEAR = @I_vYear   and GLTRX.TRXDATE = @startdate  ) GLTRXMerge  left outer join (select  BBF.ACTINDX,  BBF.JRNENTRY,  BBF.CURNCYID,  BBF.Ledger_ID,  BBF.SEQNUMBR,  BBF.TranslationCurrencyID,  BBF.TranslationCreditAmount,  BBF.TranslationDebitAmount,  BBF.EXGTBLID,  BBF.XCHGRATE,  BBF.EXCHDATE,  BBF.TIME1,  BBF.RTCLCMTD,  BBF.DENXRATE,  BBF.MCTRXSTT,  BBF.Identity_Column  from GL20001 BBF   where BBF.TranslationCurrencyID = @I_vTransCurrencyID   and BBF.CurrencyTranslationType = @I_vTransCurrencyType ) GLBBF  on GLBBF.ACTINDX = GLTRXMerge.ACTINDX and GLBBF.JRNENTRY = GLTRXMerge.JRNENTRY and GLBBF.CURNCYID = GLTRXMerge.CURNCYID   and GLBBF.Ledger_ID = GLTRXMerge.Ledger_ID and GLBBF.SEQNUMBR = GLTRXMerge.SEQNUMBR   select @iError = @@error  if @iError <> 0  return (@iError)  end  else   begin  insert #MCTranslationCurrency  (TranslationCurrencyID,  YEAR1,  JRNENTRY,  SOURCDOC,  REFRENCE,  TRXDATE,  TRXSORCE,  ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  CURNCYID,  Original_Exchange_Rate,  ORGNTSRC,  MKTOPROC,  ACTDESCR,  ACCATNUM,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  TranslationCreditAmount,  TranslationDebitAmount,  CURRNIDX,  DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  PrevExRate,  EXCHDATE,  TIME1,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  Identity_Column  )  select  @I_vTransCurrencyID,   GLTRXMerge.HSTYEAR,  GLTRXMerge.JRNENTRY,  GLTRXMerge.SOURCDOC,  GLTRXMerge.REFRENCE,  GLTRXMerge.TRXDATE,  GLTRXMerge.TRXSORCE,  GLTRXMerge.ACTINDX,  GLTRXMerge.SEQNUMBR,  GLTRXMerge.PERIODID,  GLTRXMerge.Ledger_ID,  GLTRXMerge.CURNCYID,  GLTRXMerge.XCHGRATE,  GLTRXMerge.ORGNTSRC,  0,     GLTRXMerge.ACTDESCR,  GLTRXMerge.ACCATNUM,  GLTRXMerge.CRDTAMNT,  GLTRXMerge.DEBITAMT,  GLTRXMerge.ORCRDAMT,  GLTRXMerge.ORDBTAMT,  isnull(GLBBF.TranslationCreditAmount,0),  isnull(GLBBF.TranslationDebitAmount, 0),  @I_vTransCurrencyIndex,  @I_DecPlacesCurrency,  '',    isnull(GLBBF.EXGTBLID, 0),  isnull(GLBBF.XCHGRATE, 0),  isnull(GLBBF.XCHGRATE, 0),  isnull(GLBBF.EXCHDATE, 0),  isnull(GLBBF.TIME1, 0),  isnull(GLBBF.RTCLCMTD, 0),  isnull(GLBBF.DENXRATE, 0),  isnull(GLBBF.MCTRXSTT, 0),  @I_vTransCurrencyType,  isnull(GLBBF.Identity_Column, GLTRXMerge.DEX_ROW_ID)  from (select GLTRX.HSTYEAR,  GLTRX.JRNENTRY,  GLTRX.SOURCDOC,  GLTRX.REFRENCE,  GLTRX.TRXDATE,  GLTRX.TRXSORCE,  GLTRX.ACTINDX,  GLTRX.SEQNUMBR,  GLTRX.PERIODID,  GLTRX.Ledger_ID,  GLTRX.CURNCYID,  GLTRX.XCHGRATE,  GLTRX.ORGNTSRC,  GLTRX.CRDTAMNT,  GLTRX.DEBITAMT,  GLTRX.ORCRDAMT,  GLTRX.ORDBTAMT,  GLTRX.DEX_ROW_ID,  MC.CurrencyTranslationType,  GLMSTR.ACTDESCR,  GLMSTR.ACCATNUM  from GL30000 GLTRX, MC00200 MC, GL00100 GLMSTR  where MC.CurrencyTranslationType = @I_vTransCurrencyType   and GLTRX.ACTINDX = MC.ACTINDX and MC.CURNCYID = ''  and GLTRX.ACTINDX = GLMSTR.ACTINDX  and GLTRX.HSTYEAR = @I_vYear   and GLTRX.TRXDATE = @startdate  ) GLTRXMerge  left outer join (select  BBF.ACTINDX,  BBF.JRNENTRY,  BBF.CURNCYID,  BBF.Ledger_ID,  BBF.SEQNUMBR,  BBF.TranslationCurrencyID,  BBF.TranslationCreditAmount,  BBF.TranslationDebitAmount,  BBF.EXGTBLID,  BBF.XCHGRATE,  BBF.EXCHDATE,  BBF.TIME1,  BBF.RTCLCMTD,  BBF.DENXRATE,  BBF.MCTRXSTT,  BBF.Identity_Column  from GL30001 BBF   where BBF.TranslationCurrencyID = @I_vTransCurrencyID   and BBF.CurrencyTranslationType = @I_vTransCurrencyType ) GLBBF  on GLBBF.ACTINDX = GLTRXMerge.ACTINDX and GLBBF.JRNENTRY = GLTRXMerge.JRNENTRY and GLBBF.CURNCYID = GLTRXMerge.CURNCYID   and GLBBF.Ledger_ID = GLTRXMerge.Ledger_ID and GLBBF.SEQNUMBR = GLTRXMerge.SEQNUMBR   select @iError = @@error  if @iError <> 0  return (@iError)  end end  delete  #MCTranslationCurrency where  YEAR1 = @I_vYear  and TranslationDebitAmount = 0.00  and TranslationCreditAmount = 0.00  and DEBITAMT = 0.00  and CRDTAMNT = 0.00  select @_vNumberSegments = MXNUMSEG from DYNAMICS..SY003001  select @_vSegment = 1  while @_vSegment <= @_vNumberSegments   begin   select @_vsqlstring1 = @_vsqlstring1 + 'ACTNUMBR_' + RTRIM(CAST(@_vSegment as char(2))) + ', '   select @_vsqlstring2 = @_vsqlstring2 + 'GL.ACTNUMBR_' + RTRIM(CAST(@_vSegment as char(2))) + ', '  select @_vSegment = @_vSegment + 1   end   exec  ('insert ' + @I_vTableName   + ' (TranslationCurrencyID, YEAR1, JRNENTRY, SOURCDOC, REFRENCE, TRXDATE, TRXSORCE, ACTINDX, '  + @_vsqlstring1  + ' SEQNUMBR, PERIODID, Ledger_ID, CURNCYID, Original_Exchange_Rate, ORGNTSRC, MKTOPROC, ACTDESCR, ACCATNUM, '  + '  CRDTAMNT, DEBITAMT, ORCRDAMT, ORDBTAMT, TranslationCreditAmount, TranslationDebitAmount, StartingTranCreditAmount, StartingTranDebitAmount, CURRNIDX, DECPLCUR, '  + ' RATETPID, EXGTBLID, XCHGRATE, PrevExRate, EXCHDATE, TIME1, RTCLCMTD, DENXRATE, MCTRXSTT, CurrencyTranslationType, Identity_Column)'  + ' select  M.TranslationCurrencyID,  M.YEAR1,  M.JRNENTRY,  M.SOURCDOC,  M.REFRENCE,  M.TRXDATE,  M.TRXSORCE,  M.ACTINDX, '  + @_vsqlstring2  + ' M.SEQNUMBR, M.PERIODID, M.Ledger_ID, M.CURNCYID, M.Original_Exchange_Rate, M.ORGNTSRC, M.MKTOPROC, M.ACTDESCR, M.ACCATNUM, '  + '  M.CRDTAMNT, M.DEBITAMT, M.ORCRDAMT, M.ORDBTAMT, M.TranslationCreditAmount, M.TranslationDebitAmount, M.TranslationCreditAmount, M.TranslationDebitAmount, M.CURRNIDX, M.DECPLCUR, '  + ' M.RATETPID, M.EXGTBLID, M.XCHGRATE, M.PrevExRate, M.EXCHDATE, M.TIME1, M.RTCLCMTD, M.DENXRATE, M.MCTRXSTT, M.CurrencyTranslationType, M.Identity_Column '  + ' from #MCTranslationCurrency as M '  + ' join GL00100 as GL on M.ACTINDX = GL.ACTINDX'  )  select @iError = @@error if @iError <> 0  return (@iError) drop table #MCTranslationCurrency  return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[glBuildMulticurrencyTranslationTemp] TO [DYNGRP]
GO
