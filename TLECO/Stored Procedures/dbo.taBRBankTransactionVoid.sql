SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taBRBankTransactionVoid]  @I_vOption smallint,    @I_vVOIDDATE datetime = '',   @I_vCHEKBKID char(15),    @I_vCMTrxNum char(20),    @I_vVOIDDESC char(30) = null,  @I_vUSERID char(15) = '',   @I_vGLPOSTDT datetime = '',   @I_vDistRef char(30) = null,  @I_vCreateDist tinyint = 1,   @I_vCMDNUMWK numeric(19,5) = 0,  @I_vBACHNUMB char(15) = '',   @I_vRequesterTrx smallint = 0,  @I_vUSRDEFND1 char(50) = '',  @I_vUSRDEFND2 char(50) = '',  @I_vUSRDEFND3 char(50) = '',  @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare   @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @iError int,  @O_oErrorState int,  @ACTINDX int,  @CurrDate datetime,  @CURNCYID char(15),  @CURRNIDX smallint,  @FUNCURRNIDX smallint,  @DECPLCUR int,  @DECPLCURFun int,  @FUNLCURR char(15),  @ISMCTRX tinyint,  @AUDITTRAIL char(25),  @AUDITTRAILErrState int,  @count int,  @CMTrxType smallint,  @ORIGAMT numeric(19,5),  @DistCMDNUMWK numeric(19,5),  @sessionid int,  @maxDSTSQNUM int,  @SQNCLINE int,  @iCursorError int,  @JRNENTRY int,  @O_tOUTOK smallint,  @iJrnlEntryErrState int,  @iGLTrxLineInsertErrState int,  @iGLTrxLineInsertErrString varchar(255),  @iGLTrxHdrInsertErrState int,  @iGLTrxHdrInsertErrString varchar(255),  @cCMDNUMWK numeric(19,5),  @cDSTSQNUM int,  @cACTINDX int,  @cDistRef char(30),  @cGLPOSTDT datetime,  @cORCRDAMT numeric(19,5),  @cORDBTAMT numeric(19,5),  @paidtorcvdfrom char(30),  @RTCLCMTD smallint,  @XCHGRATE numeric(19,5),  @RATETPID char(15),  @EXGTBLID char(15),  @EXCHDATE datetime,  @TIME1 datetime,  @REFRENCE char(30),  @ISMCREG tinyint,  @TRXDATE datetime,  @GLPOSTDT datetime,  @TRXTOTAL1 numeric(19,5),  @TRXTOTAL2 numeric(19,5),  @TRXTOTAL numeric(19,5),  @DTAREF char(25),  @OrigRoundSTSQNUM int,  @sumdebit numeric(19,5),  @sumcredit numeric(19,5),  @DexLockErrorState int,  @CMTranTble char(18),  @CMTranDexRowID int,  @oExists int,  @OInsStatus int,  @RNDDIFF int,  @ROUNDDSTSQNUM int,  @SOURCDOC char(10),  @source varchar(6),  @iTempValuesErrState int,  @iTempValuesErrString varchar(255)  select  @O_iErrorState = 0,  @iStatus = 0,  @iCustomState = 0,  @iCustomErrString = '',  @iError = 0,  @O_oErrorState = 0,  @ACTINDX = 0,  @CurrDate = '',  @CURNCYID = '',  @CURRNIDX = 0,  @FUNCURRNIDX = 0,  @DECPLCUR = 0,  @DECPLCURFun = 0,  @FUNLCURR = '',  @ISMCTRX = 0,  @AUDITTRAIL = '',  @AUDITTRAILErrState = 0,  @count = 0,  @CMTrxType = 0,  @ORIGAMT = 0,  @DistCMDNUMWK = 0,  @sessionid = 0,  @maxDSTSQNUM = 0,  @SQNCLINE = 16384,  @iCursorError = 0,  @JRNENTRY = 0,  @O_tOUTOK = 0,  @iJrnlEntryErrState = 0,  @iGLTrxLineInsertErrState = 0,  @iGLTrxLineInsertErrString = '',  @iGLTrxHdrInsertErrState = 0,  @iGLTrxHdrInsertErrString = '',  @cCMDNUMWK = 0,  @cDSTSQNUM = 0,  @cACTINDX = 0,  @cDistRef = '',  @cGLPOSTDT = '',  @cORCRDAMT = 0,  @cORDBTAMT = 0,  @paidtorcvdfrom = '',  @RTCLCMTD = 0,  @XCHGRATE = 0,  @RATETPID = '',  @EXGTBLID = '',  @EXCHDATE = '',  @TIME1 = '',  @REFRENCE = '',  @ISMCREG = 0,  @TRXDATE = '',  @GLPOSTDT = '',  @TRXTOTAL1 = 0,  @TRXTOTAL2 = 0,  @TRXTOTAL = 0,  @DTAREF = '',  @OrigRoundSTSQNUM = 0,  @sumdebit = 0,  @sumcredit = 0,  @DexLockErrorState = 0,  @CMTranTble = '',  @CMTranDexRowID = 0,  @oExists = 0,  @OInsStatus = 0,  @RNDDIFF = 0,  @ROUNDDSTSQNUM = 0,  @SOURCDOC = '',  @source = '',  @iTempValuesErrState = 0,  @iTempValuesErrString = ''  if (@oErrString is null) begin  select @oErrString = '' end  exec @iStatus = taBRBankTransactionVoidPre  @I_vOption output,  @I_vVOIDDATE output,  @I_vCHEKBKID output,  @I_vCMTrxNum output,  @I_vVOIDDESC output,  @I_vUSERID output,  @I_vGLPOSTDT output,  @I_vDistRef output,  @I_vCreateDist output,  @I_vCMDNUMWK output,  @I_vBACHNUMB output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 7606    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vOption is null or  @I_vVOIDDATE is null or  @I_vCHEKBKID is null or  @I_vCMTrxNum is null or  @I_vUSERID is null or  @I_vGLPOSTDT is null or  @I_vCreateDist is null or  @I_vCMDNUMWK is null or  @I_vBACHNUMB is null or  @I_vRequesterTrx is null  ) begin  select @O_iErrorState = 7607    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vCHEKBKID = UPPER(@I_vCHEKBKID),  @I_vCMTrxNum = UPPER(@I_vCMTrxNum)  select @sessionid = @@spid  select @source = TRXSRCPX from SY01000 (nolock) where SERIES = 2 and TRXSRCPX like 'CMTR_'  if (exists(select 1 from CM00100 (nolock) where CURNCYID <> '')) begin  select @ISMCREG = 1 end  select @DistCMDNUMWK = cast(@sessionid as numeric(19,5)) + .999  if (@I_vOption = 3) begin  if (@I_vCMDNUMWK = 0)  begin  select @count = count(*) from CM20200 (nolock)  where CMTrxNum = @I_vCMTrxNum and CHEKBKID = @I_vCHEKBKID and CMTrxType <> 1 and RECONUM = 0 and Recond = 0 and VOIDED = 0   if (@count = 0)  begin  select @O_iErrorState = 7608     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else  begin  if (@count = 1)  begin  select @I_vCMDNUMWK = CMRECNUM from CM20200 (nolock)  where CMTrxNum = @I_vCMTrxNum and CHEKBKID = @I_vCHEKBKID and CMTrxType <> 1 and RECONUM = 0 and  Recond = 0 and VOIDED = 0  end  else  begin  if (@count > 1)  begin  select @O_iErrorState = 7609     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end  end  else  begin  select @count = count(*) from CM20200 (nolock)  where CMRECNUM = @I_vCMDNUMWK and CMTrxNum = @I_vCMTrxNum and CHEKBKID = @I_vCHEKBKID and CMTrxType <> 1 and RECONUM = 0 and  Recond = 0 and VOIDED = 0   if (@count = 0)  begin  select @O_iErrorState = 7610     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end else begin  if (@I_vCMDNUMWK = 0)  begin  select @count = count(*) from CM20300 (nolock)  where CHEKBKID = @I_vCHEKBKID and RCPTNMBR = @I_vCMTrxNum and depositnumber = '' and VOIDED = 0   if (@count = 0)  begin  select @O_iErrorState = 8108     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else  begin  if (@count = 1)  begin  select @I_vCMDNUMWK = CMRECNUM from CM20300 (nolock)  where CHEKBKID = @I_vCHEKBKID and depositnumber = '' and RCPTNMBR = @I_vCMTrxNum and VOIDED = 0  end  else  begin  if (@count > 1)  begin  select @O_iErrorState = 8109     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end  end  else  begin  select @count = count(*) from CM20300 (nolock)  where CHEKBKID = @I_vCHEKBKID and depositnumber = '' and RCPTNMBR = @I_vCMTrxNum and VOIDED = 0 and CMRECNUM = @I_vCMDNUMWK   if (@count = 0)  begin  select @O_iErrorState = 8110     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  select @CMTrxType = CMTrxType from CM20100 (UPDLOCK) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 0  select @CurrDate = convert(varchar(12),getdate())  select @CURNCYID = CURNCYID,  @ACTINDX = ACTINDX  from CM00100 (nolock) where CHEKBKID = @I_vCHEKBKID  select @FUNLCURR = FUNLCURR from MC40000 (nolock)  select @FUNCURRNIDX = CURRNIDX from DYNAMICS..MC40200 (nolock) where CURNCYID = @FUNLCURR  if (@FUNLCURR = '') begin  select @O_iErrorState = 7611    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @DECPLCURFun = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @FUNLCURR  if (@I_vOption not in(3,4)) begin  select @O_iErrorState = 7612     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vCMTrxNum = '') begin  select @O_iErrorState = 7613     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRequesterTrx < 0) or (@I_vRequesterTrx > 1)) begin  select @O_iErrorState = 7614     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vOption = 3) begin  if (exists(select 1 from CM20200 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 1))  begin  select @O_iErrorState = 7615     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else begin  if (exists(select 1 from CM20300 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 1))  begin  select @O_iErrorState = 8111     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  if (@I_vOption = 3) begin  select @CMTranTble = rtrim(db_name()) + '.dbo.CM20200'  select @CMTranDexRowID = DEX_ROW_ID from CM20200 (nolock) where CMRECNUM = @I_vCMDNUMWK end else begin  select @CMTranTble = rtrim(db_name()) + '.dbo.CM20300'  select @CMTranDexRowID = DEX_ROW_ID from CM20300 (nolock) where CMRECNUM = @I_vCMDNUMWK end  if (not exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @CMTranTble and row_id = @CMTranDexRowID and session_id = @@spid)) begin  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 1,  @I_vtable_path_name = @CMTranTble,   @I_vrow_id = @CMTranDexRowID,    @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@DexLockErrorState <> 0) or (@iError <> 0) or (@iStatus <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7704    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vOption = 3) begin  select @TRXDATE = TRXDATE,  @GLPOSTDT = GLPOSTDT,  @SOURCDOC = SOURCDOC,  @RTCLCMTD = RTCLCMTD,  @XCHGRATE = XCHGRATE,  @RATETPID = RATETPID,  @EXGTBLID = EXGTBLID,  @EXCHDATE = EXCHDATE,  @TIME1 = TIME1,  @ORIGAMT = ORIGAMT  from CM20200 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 0 end else begin  select @TRXDATE = receiptdate,  @GLPOSTDT = GLPOSTDT,  @SOURCDOC = SOURCDOC,  @RTCLCMTD = RTCLCMTD,  @XCHGRATE = XCHGRATE,  @RATETPID = RCVGRATETPID,  @EXGTBLID = EXGTBLID,  @EXCHDATE = EXCHDATE,  @TIME1 = TIME1,  @ORIGAMT = ORIGAMT,  @CURNCYID = CURNCYID  from CM20300 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 0 end  select @CURRNIDX = CURRNIDX,  @DECPLCUR = DECPLCUR - 1  from DYNAMICS..MC40200 (nolock) where CURNCYID = @CURNCYID  if (@CURNCYID = '') begin  select @DECPLCUR = @DECPLCURFun end  if (@SOURCDOC <> @source) begin  select @O_iErrorState = 8107    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vVOIDDATE = '') begin  select @I_vVOIDDATE = @TRXDATE end  if (@I_vGLPOSTDT = '') begin  if (@TRXDATE = @GLPOSTDT)  begin  select @I_vGLPOSTDT = @I_vVOIDDATE  end  else  begin  select @I_vGLPOSTDT = @GLPOSTDT  end end  exec @iStatus = taGetTrxSourceNumber  2,  @source,  1,  @AUDITTRAIL output,  @AUDITTRAILErrState output select @iError = @@error if ((@iStatus <> 0) or (@AUDITTRAILErrState <> 0 or @AUDITTRAIL = '')) begin  if (@AUDITTRAILErrState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @AUDITTRAILErrState  end  select @O_iErrorState = 7616    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vBACHNUMB = '') begin  select @I_vBACHNUMB = @AUDITTRAIL end  if ((@CURNCYID <> '') and (@CURNCYID <> @FUNLCURR)) begin  select @ISMCTRX = 1   if (@RTCLCMTD = 0)  begin  update CM20400 set  DEBITAMT = round(ORDBTAMT * @XCHGRATE, @DECPLCURFun),  CRDTAMNT = round(ORCRDAMT * @XCHGRATE, @DECPLCURFun)  where CMDNUMWK = @DistCMDNUMWK and VOIDED = 1  if (@@error <> 0)  begin  select @O_iErrorState = 7617    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  if (@RTCLCMTD = 1)  begin  update CM20400 set  DEBITAMT = round(ORDBTAMT / @XCHGRATE, @DECPLCURFun),  CRDTAMNT = round(ORCRDAMT / @XCHGRATE, @DECPLCURFun)  where CMDNUMWK = @DistCMDNUMWK and VOIDED = 1  if (@@error <> 0)  begin  select @O_iErrorState = 7618    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end end  if (@I_vOption = 3) begin  update CM00100 set  CURRBLNC =  case  when @CMTrxType = 5  then CURRBLNC - @ORIGAMT  else CURRBLNC + @ORIGAMT  end,  MODIFDT = @CurrDate  where CHEKBKID = @I_vCHEKBKID  if (@@error <> 0)  begin  select @O_iErrorState = 7626    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vVOIDDESC is null) begin  if (@I_vOption = 3)  begin  select @I_vVOIDDESC = DSCRIPTN from CM20200 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 0  end  else  begin  select @I_vVOIDDESC = DSCRIPTN from CM20300 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 0  end end  if (@I_vOption = 3) begin  update CM20200 set  Recond = 1,  VOIDED = 1,  VOIDDATE = @I_vVOIDDATE,  VOIDPDATE = @I_vGLPOSTDT,  VOIDDESC = @I_vVOIDDESC  where CMRECNUM = @I_vCMDNUMWK  if (@@error <> 0)  begin  select @O_iErrorState = 7627    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else begin  update CM20300 set  VOIDED = 1,  VOIDDATE = @I_vVOIDDATE,  VOIDPDATE = @I_vGLPOSTDT,  VOIDDESC = @I_vVOIDDESC  where CMRECNUM = @I_vCMDNUMWK  if (@@error <> 0)  begin  select @O_iErrorState = 8112    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vCreateDist = 1) begin  select @maxDSTSQNUM = max(DSTSQNUM) from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 0   select @maxDSTSQNUM = isnull(@maxDSTSQNUM - 1,0)   update CM20400 set  DSTSQNUM = DSTSQNUM + @maxDSTSQNUM  where CMDNUMWK = @DistCMDNUMWK  if (@@error <> 0)  begin  select @O_iErrorState = 7628    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  insert CM20100 (  CMDNUMWK,  RecNumControl,  VOIDED,  CNTRLTYP,  AUDITTRAIL,  CHEKBKID,  CMTrxType,  CMTrxNum,  CMERRMSG  )  select  @I_vCMDNUMWK,    @I_vCMDNUMWK * -1,   1,       case      when @I_vOption = 3  then 1  else 2  end,  @AUDITTRAIL,    @I_vCHEKBKID,    @CMTrxType,     @I_vCMTrxNum,    0      if (@@error <> 0) begin  select @O_iErrorState = 7619    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@ISMCTRX = 1) begin  select @OrigRoundSTSQNUM = DSTSQNUM  from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 0 and (((DEBITAMT > 0) or (CRDTAMNT > 0)) and ((ORCRDAMT = 0) and (ORDBTAMT = 0))) end  if (@I_vCreateDist = 1) begin  insert CM20400 (  CMDNUMWK,  VOIDED,  DSTSQNUM,  ACTINDX,  DEBITAMT,  CRDTAMNT,  DistRef,  GLPOSTDT,  ORCRDAMT,  ORDBTAMT  )  select  CMDNUMWK,    1,      DSTSQNUM,    ACTINDX,    CRDTAMNT,    DEBITAMT,    DistRef,    @I_vGLPOSTDT,   ORDBTAMT,    ORCRDAMT    from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 0 and DSTSQNUM <> @OrigRoundSTSQNUM  if (@@error <> 0)  begin  select @O_iErrorState = 7620    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else begin  insert CM20400 (  CMDNUMWK,  VOIDED,  DSTSQNUM,  ACTINDX,  DEBITAMT,  CRDTAMNT,  DistRef,  GLPOSTDT,  ORCRDAMT,  ORDBTAMT  )  select  CMDNUMWK,    1,      DSTSQNUM,    ACTINDX,    CRDTAMNT,    DEBITAMT,    case     when @I_vDistRef is null  then DistRef  else @I_vDistRef  end,  @I_vGLPOSTDT,   ORDBTAMT,    ORCRDAMT    from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 0 and DSTSQNUM = 1  if (@@error <> 0)  begin  select @O_iErrorState = 7621    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  update CM20400 set  CMDNUMWK = @I_vCMDNUMWK,  GLPOSTDT = @I_vGLPOSTDT  where CMDNUMWK = @DistCMDNUMWK if (@@error <> 0) begin  select @O_iErrorState = 7624    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vOption = 3) begin  select @paidtorcvdfrom = paidtorcvdfrom from CM20200 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 1 end else begin  select @paidtorcvdfrom = RcvdFrom from CM20300 (nolock) where CMRECNUM = @I_vCMDNUMWK and VOIDED = 1 end  exec @iStatus = glGetNextJournalEntry  1,  0,  @JRNENTRY output,  @O_tOUTOK output,  @iJrnlEntryErrState output select @iError = @@error  if ((@iStatus <> 0) or (@iJrnlEntryErrState <> 0) or (@O_tOUTOK <> 1) or (@iError <> 0)) begin  select @O_iErrorState = 7641    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@ISMCTRX = 1) begin  select @sumdebit = isnull(sum(DEBITAMT),0),  @sumcredit = isnull(sum(CRDTAMNT),0),  @ROUNDDSTSQNUM = max(DSTSQNUM) + 1  from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 1   if (@sumdebit <> @sumcredit)  begin  select @RNDDIFF = RNDDIFF from MC40201 (nolock) where CURNCYID = @CURNCYID   if (@RNDDIFF = 0)  begin  select @RNDDIFF = ACTINDX from SY01100 (nolock) where SERIES = 2 and SEQNUMBR = 900  end   if (@RNDDIFF = 0)  begin  select @O_iErrorState = 7732    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert CM20400 (  CMDNUMWK,  VOIDED,  DSTSQNUM,  ACTINDX,  DEBITAMT,  CRDTAMNT,  DistRef,  GLPOSTDT,  ORCRDAMT,  ORDBTAMT  )  select  @I_vCMDNUMWK,    1,     @ROUNDDSTSQNUM,    @RNDDIFF,    case     when @sumcredit > @sumdebit  then @sumcredit - @sumdebit  else 0  end,  case     when @sumdebit > @sumcredit  then @sumdebit - @sumcredit  else 0  end,  'ROUND',    @I_vGLPOSTDT,    0,     0     if (@@error <> 0)  begin  select @O_iErrorState = 7731    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if (((select sum(DEBITAMT) from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 1) <>  (select sum(CRDTAMNT) from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 1)) or  ((select sum(ORCRDAMT) from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 1) <>  (select sum(ORDBTAMT) from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 1))) begin  select @O_iErrorState = 7649     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  declare PostBankTrx INSENSITIVE cursor for select  CMDNUMWK,  DSTSQNUM,  ACTINDX,  DistRef,  GLPOSTDT,  ORCRDAMT,  ORDBTAMT  from CM20400 (nolock) where CMDNUMWK = @I_vCMDNUMWK and VOIDED = 1  order by DSTSQNUM  open PostBankTrx select @iCursorError = @@cursor_rows  if (@iCursorError > 0) begin  fetch next from PostBankTrx into  @cCMDNUMWK,  @cDSTSQNUM,  @cACTINDX,  @cDistRef,  @cGLPOSTDT,  @cORCRDAMT,  @cORDBTAMT  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 7642    deallocate PostBankTrx  return (@O_iErrorState)  end   if (@cDistRef = '')  begin  select @cDistRef = 'Bank Transaction Entry'  end   exec @iStatus = taGLTransactionLineInsert  @I_vBACHNUMB = @I_vBACHNUMB,  @I_vJRNENTRY = @JRNENTRY,  @I_vSQNCLINE = @SQNCLINE,  @I_vACTINDX = @cACTINDX,  @I_vCRDTAMNT = @cORCRDAMT,  @I_vDEBITAMT = @cORDBTAMT,  @I_vDSCRIPTN = @cDistRef,  @I_vORCTRNUM = @cCMDNUMWK,  @I_vORDOCNUM = @I_vCMTrxNum,  @I_vORMSTRID = @I_vCHEKBKID,  @I_vORMSTRNM = @paidtorcvdfrom,  @I_vOrigSeqNum = @cDSTSQNUM,  @I_vORTRXDESC = @I_vVOIDDESC,  @O_iErrorState = @iGLTrxLineInsertErrState output,  @oErrString = @iGLTrxLineInsertErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iGLTrxLineInsertErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGLTrxLineInsertErrString  select @O_iErrorState = 7643    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  deallocate PostBankTrx  return (@O_iErrorState)  end   select @SQNCLINE = @SQNCLINE + 16384   fetch next from PostBankTrx into  @cCMDNUMWK,  @cDSTSQNUM,  @cACTINDX,  @cDistRef,  @cGLPOSTDT,  @cORCRDAMT,  @cORDBTAMT  end end  deallocate PostBankTrx  if (@I_vVOIDDESC = '') begin  select @REFRENCE = 'Bank Transaction Entry' end else begin  select @REFRENCE = @I_vVOIDDESC end  exec @iStatus = taGLTransactionHeaderInsert  @I_vBACHNUMB = @I_vBACHNUMB,  @I_vJRNENTRY = @JRNENTRY,  @I_vREFRENCE = @REFRENCE,  @I_vTRXDATE = @I_vGLPOSTDT,  @I_vTRXTYPE = 0,  @I_vSQNCLINE = 16384,  @I_vSOURCDOC = @source,  @I_vCURNCYID = 'ECONNECT1',    @O_iErrorState = @iGLTrxHdrInsertErrState output,  @oErrString = @iGLTrxHdrInsertErrString output select @iError = @@error if ((@iStatus <> 0) or (@iGLTrxHdrInsertErrState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGLTrxHdrInsertErrString  select @O_iErrorState = 7644    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @DTAREF = substring(cast(DTA_Index as varchar),1,9)+substring(cast(DTA_Index as varchar),11,5) from GL10000 (nolock) where JRNENTRY = @JRNENTRY  delete DTA10100 where DTASERIES = 2 and substring(DTAREF,1,14) = @DTAREF if (@@error <> 0) begin  select @O_iErrorState = 7645    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  delete DTA10200 where DTASERIES = 2 and substring(DTAREF,1,14) = @DTAREF if (@@error <> 0) begin  select @O_iErrorState = 7646    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  update GL10000 set  SQNCLINE = 16384,  USWHPSTD = @I_vUSERID,  ORPSTDDT = @CurrDate,  ORTRXSRC = @AUDITTRAIL,  DTAControlNum = @I_vCMDNUMWK,  DTATRXType =  case  when @CMTrxType = 2  then 2  when @CMTrxType = 3  then 3  when @CMTrxType = 4  then 4  when @CMTrxType = 5  then 5  when @CMTrxType = 6  then 6  else 0  end,  CURNCYID =  case  when @ISMCREG = 1  then @CURNCYID  else ''  end,  CURRNIDX =  case  when @ISMCREG = 1  then @CURRNIDX  else 0  end,  RATETPID = @RATETPID,  EXGTBLID = @EXGTBLID,  XCHGRATE = @XCHGRATE,  TIME1 = @TIME1,  RTCLCMTD = @RTCLCMTD,  GLHDRVAL = 0,  OPENYEAR = 0,  Tax_Date = ''  where JRNENTRY = @JRNENTRY if (@@error <> 0) begin  select @O_iErrorState = 7647    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  update GL10001 set  GLLINVAL = 0,  ORTRXTYP =  case  when @CMTrxType = 2  then 2  when @CMTrxType = 3  then 3  when @CMTrxType = 4  then 4  when @CMTrxType = 5  then 5  when @CMTrxType = 6  then 6  else 0  end,  CURRNIDX =  case  when @ISMCREG = 1  then @FUNCURRNIDX  else 0  end,  DTA_GL_Status = 40,  XCHGRATE =  case  when @ROUNDDSTSQNUM <> OrigSeqNum  then @XCHGRATE  else 0  end,  RATETPID =  case  when @ROUNDDSTSQNUM <> OrigSeqNum  then @RATETPID  else ''  end,  EXGTBLID =  case  when @ROUNDDSTSQNUM <> OrigSeqNum  then @EXGTBLID  else ''  end,  TIME1 =  case  when @ROUNDDSTSQNUM <> OrigSeqNum  then @TIME1  else ''  end,  RTCLCMTD =  case  when @ROUNDDSTSQNUM <> OrigSeqNum  then @RTCLCMTD  else 0  end,  CRDTAMNT =  case  when @ROUNDDSTSQNUM = OrigSeqNum and (@sumdebit > @sumcredit)  then @sumdebit - @sumcredit  when @ISMCTRX = 1 and @RTCLCMTD = 0  then round(ORCRDAMT * @XCHGRATE, @DECPLCURFun)  when @ISMCTRX = 1 and @RTCLCMTD = 1  then round(ORCRDAMT / @XCHGRATE, @DECPLCURFun)  else ORCRDAMT  end,  DEBITAMT =  case  when @ROUNDDSTSQNUM = OrigSeqNum and (@sumcredit > @sumdebit)  then @sumcredit - @sumdebit  when @ISMCTRX = 1 and @RTCLCMTD = 0  then round(ORDBTAMT * @XCHGRATE, @DECPLCURFun)  when @ISMCTRX = 1 and @RTCLCMTD = 1  then round(ORDBTAMT / @XCHGRATE, @DECPLCURFun)  else ORDBTAMT  end,  LNESTAT =  case  when @ROUNDDSTSQNUM = OrigSeqNum  then 258  else LNESTAT  end,  PSTNGTYP = 0  where JRNENTRY = @JRNENTRY if (@@error <> 0) begin  select @O_iErrorState = 7648    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @TRXTOTAL1 = isnull(sum(CRDTAMNT),0),  @TRXTOTAL2 = isnull(sum(DEBITAMT),0)  from GL10001 a (nolock), GL10000 b (nolock)  where b.BACHNUMB = @I_vBACHNUMB and b.BCHSOURC = 'GL_Normal' and a.ACCTTYPE <> 2 and a.JRNENTRY = b.JRNENTRY and b.JRNENTRY = @JRNENTRY  select @TRXTOTAL = @TRXTOTAL1 + @TRXTOTAL2  update SY00500 set  BCHCOMNT = 'Bank Transaction Entry',  BCHTOTAL = BCHTOTAL + @TRXTOTAL,  BRKDNALL = 1  where BCHSOURC = 'GL_Normal' and BACHNUMB = @I_vBACHNUMB if (@@error <> 0) begin  select @O_iErrorState = 7701    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 3,   @I_vtable_path_name = @CMTranTble,   @I_vrow_id = @CMTranDexRowID,    @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output select @iError = @@error if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0)) begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 7705    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  exec @iStatus = taBRBankTransactionVoidPost  @I_vOption,  @I_vVOIDDATE,  @I_vCHEKBKID,  @I_vCMTrxNum,  @I_vVOIDDESC,  @I_vUSERID,  @I_vGLPOSTDT,  @I_vDistRef,  @I_vCreateDist,  @I_vCMDNUMWK,  @I_vBACHNUMB,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 7622    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taBRBankTransactionVoid] TO [DYNGRP]
GO
