SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 Create Procedure [dbo].[seeivPrintStockStatus]   @PrintSerialLot Tinyint,   @InclNegativeQty Tinyint,   @InclZeroQty Tinyint,   @FromItemNumber Varchar(31),  @ToItemNumber Varchar(31),  @FromDescription Varchar(101),  @ToDescription Varchar(101),  @FromGenericDesc Varchar(11),  @ToGenericDesc Varchar(11),  @FromBin Varchar(21),  @ToBin Varchar(21),  @FromUDF_1 Varchar(11),  @ToUDF_1 Varchar(11),  @FromUDF_2 Varchar(11),  @ToUDF_2 Varchar(11),  @FromUDF_3 Varchar(11),  @ToUDF_3 Varchar(11),  @FromUDF_4 Varchar(11),  @ToUDF_4 Varchar(11),  @FromUDF_5 Varchar(11),  @ToUDF_5 Varchar(11),  @FromUDF_6 Varchar(11),  @ToUDF_6 Varchar(11),  @FromAccountNumber Varchar(100),  @SegmentName Varchar(15),  @FromSegment Varchar(15),  @ToSegment Varchar(15),  @SortBy Varchar(30),  @SortBySegment Tinyint As  Declare @TotalValue As Money Declare @SQL As Varchar(8000) Declare @GetSegment As Varchar(8000) Declare @SegmentID Tinyint Declare @Where As Char(1) Declare @SegmentField Varchar(12) Declare @SortBySegmentName Varchar(15)  Create Table #ttSegment (AcctNo Varchar(100), Segment Varchar(15)) Create Table #ttSegmentSort (AcctNo Varchar(100), Segment Varchar(15))  Select @SegmentID = SGMTNUMB From SY00300 Where SGMTNAME = @SegmentName Set @SegmentField = 'ACTNUMBR_' + Cast(@SegmentID As Char(1)) Set @GetSegment = 'Select ACTNUMST As [AcctNo], ' + @SegmentField + ' As [Segment] From GL00105' Insert Into #ttSegment Exec(@GetSegment) Insert Into #ttSegmentSort Exec(@GetSegment)  If @SortBySegment IS NOT NULL Begin  Set @SegmentField = 'ACTNUMBR_' + Cast(@SortBySegment As Char(1))  Set @GetSegment = 'Select ACTNUMST As [AcctNo], ' + @SegmentField + ' As [Segment] From GL00105'  Insert Into #ttSegmentSort Exec(@GetSegment) End  Set @FromItemNumber = Case When @FromItemNumber Is Null Or @FromItemNumber = '' Then 'ALL' Else @FromItemNumber End Set @ToItemNumber = Case When @ToItemNumber Is Null Or @ToItemNumber = '' Then 'ALL' Else @ToItemNumber End Set @FromDescription = Case When @FromDescription Is Null Or @FromDescription = '' Then 'ALL' Else @FromDescription End Set @ToDescription = Case When @ToDescription Is Null Or @ToDescription = '' Then 'ALL' Else @ToDescription End Set @FromGenericDesc = Case When @FromGenericDesc Is Null Or @FromGenericDesc = '' Then 'ALL' Else @FromGenericDesc End Set @ToGenericDesc = Case When @ToGenericDesc Is Null Or @ToGenericDesc = '' Then 'ALL' Else @ToGenericDesc End Set @FromBin = Case When @FromBin Is Null Or @FromBin = '' Then 'ALL' Else @FromBin End Set @ToBin = Case When @ToBin Is Null Or @ToBin = '' Then 'ALL' Else @ToBin End Set @FromUDF_1 = Case When @FromUDF_1 Is Null Or @FromUDF_1 = '' Then 'ALL' Else @FromUDF_1 End Set @ToUDF_1 = Case When @ToUDF_1 Is Null Or @ToUDF_1 = '' Then 'ALL' Else @ToUDF_1 End Set @FromUDF_2 = Case When @FromUDF_2 Is Null Or @FromUDF_2 = '' Then 'ALL' Else @FromUDF_2 End Set @ToUDF_2 = Case When @ToUDF_2 Is Null Or @ToUDF_2 = '' Then 'ALL' Else @ToUDF_2 End Set @FromUDF_3 = Case When @FromUDF_3 Is Null Or @FromUDF_3 = '' Then 'ALL' Else @FromUDF_3 End Set @ToUDF_3 = Case When @ToUDF_3 Is Null Or @ToUDF_3 = '' Then 'ALL' Else @ToUDF_3 End Set @FromUDF_4 = Case When @FromUDF_4 Is Null Or @FromUDF_4 = '' Then 'ALL' Else @FromUDF_4 End Set @ToUDF_4 = Case When @ToUDF_4 Is Null Or @ToUDF_4 = '' Then 'ALL' Else @ToUDF_4 End Set @FromUDF_5 = Case When @FromUDF_5 Is Null Or @FromUDF_5 = '' Then 'ALL' Else @FromUDF_5 End Set @ToUDF_5 = Case When @ToUDF_5 Is Null Or @ToUDF_5 = '' Then 'ALL' Else @ToUDF_5 End Set @FromUDF_6 = Case When @FromUDF_6 Is Null Or @FromUDF_6 = '' Then 'ALL' Else @FromUDF_6 End Set @ToUDF_6 = Case When @ToUDF_6 Is Null Or @ToUDF_6 = '' Then 'ALL' Else @ToUDF_6 End Set @FromAccountNumber = Case When @FromAccountNumber Is Null Or @FromAccountNumber = '' Then 'ALL' Else @FromAccountNumber End Select o.* Into #ttResult From (  Select Case When IV_ItemMasterQTY.LOCNCODE Is Null OR IV_ItemMasterQTY.LOCNCODE = '' Then 'Header'  Else 'Detail' End As RecStatus,  IV_ItemMaster.ITEMNMBR As [ItemNo],   IV_ItemMasterQTY.BINNMBR As [BinNo],   IV_ItemMasterQTY.LOCNCODE As [LocCode],   IV_ItemMaster.ITEMDESC As [LongDesc],   IV_ItemMaster.ITMGEDSC As [GenDesc],   IV_ItemMaster.VCTNMTHD As [ValMethod],   IV_ItemMasterQTY.QTYBKORD As [QtyBackOrdered],   IV_ItemMasterQTY.QTYONORD As [QtyOnOrder],   IV_ItemMasterQTY.QTYRQSTN As [QtyReq],    Case When IV_ItemMaster.ITMTRKOP = 3 Then (IV_LotMaster.QTYRECVD - IV_LotMaster.QTYSOLD)   Else IV_ItemMasterQTY.QTYONHND   End As [QtyOnHand],    IV_ItemMasterQTY.ATYALLOC As [QtyAlloc],   IV_ItemMaster.CURRCOST As [CurrCost],   IV_ItemMaster.STNDCOST As [StdCost],   IV_ItemMaster.ITMTRKOP As [ItemTrackOption],   Case When IV_ItemMaster.ITMTRKOP = 2 Then IV_SerialNoMaster.SERLNMBR   When IV_ItemMaster.ITMTRKOP = 3 Then IV_LotMaster.LOTNUMBR   Else IV_SerialNoMaster.SERLNMBR  End As [SerialLot],    Case When IV_ItemMaster.ITMTRKOP = 2 Then IV_SerialNoMaster.RCTSEQNM   When IV_ItemMaster.ITMTRKOP = 3 Then IV_LotMaster.RCTSEQNM   Else IV_SerialNoMaster.RCTSEQNM  End As SeqNo,  Case When IV_ItemMaster.VCTNMTHD = 3   Then IV_ItemMasterQTY.QTYONHND * IV_ItemMaster.CURRCOST  When IV_ItemMaster.VCTNMTHD In (4,5)   Then IV_ItemMasterQTY.QTYONHND * IV_ItemMaster.STNDCOST  Else IV_PurchaseReceipts.InventoryValue  End As [InventoryValue],   IV_ItemMaster.USCATVLS_1 As [UDF_1],   IV_ItemMaster.USCATVLS_2 As [UDF_2],   IV_ItemMaster.USCATVLS_3 As [UDF_3],  IV_ItemMaster.USCATVLS_4 As [UDF_4],  IV_ItemMaster.USCATVLS_5 As [UDF_5],  IV_ItemMaster.USCATVLS_6 As [UDF_6],  IV_ItemMaster.IVIVINDX As [IVIndex],   GL_AcctMaster.ACTNUMST As [AcctNo],  Cast('' As Varchar(15)) As [SegmentRange],  Cast ('' As Varchar(15)) As [SegmentSort]  From IV00101 As IV_ItemMaster  Left Join IV00102 As IV_ItemMasterQTY On IV_ItemMaster.ITEMNMBR = IV_ItemMasterQTY.ITEMNMBR  Left Join GL00105 As GL_AcctMaster On IV_ItemMaster.IVIVINDX = GL_AcctMaster.ACTINDX  Left Join ( Select ITEMNMBR, LOCNCODE, DATERECD, RCTSEQNM, SERLNMBR  From IV00200  Where QTYTYPE = 1 ) As IV_SerialNoMaster   On IV_ItemMaster.ITEMNMBR = IV_SerialNoMaster.ITEMNMBR  And IV_ItemMasterQTY.LOCNCODE = IV_SerialNoMaster.LOCNCODE   Left Join (Select ITEMNMBR, LOCNCODE, RCTSEQNM, LOTNUMBR, QTYRECVD, QTYSOLD  From IV00300  Where QTYTYPE = 1) As IV_LotMaster  On IV_ItemMaster.ITEMNMBR = IV_LotMaster.ITEMNMBR  And IV_ItemMasterQTY.LOCNCODE = IV_LotMaster.LOCNCODE    Left Join (Select ITEMNMBR, TRXLOCTN, SUM((QTYRECVD - QTYSOLD) * UNITCOST) As InventoryValue  From IV10200   Where QTYTYPE = 1  Group By ITEMNMBR, TRXLOCTN) As IV_PurchaseReceipts   On IV_PurchaseReceipts.ITEMNMBR = IV_ItemMaster.ITEMNMBR  And IV_PurchaseReceipts.TRXLOCTN = IV_ItemMasterQTY.LOCNCODE ) As o  Where ( @FromItemNumber = 'ALL' Or ([ItemNo] >= @FromItemNumber) )  And ( @ToItemNumber = 'ALL' Or ([ItemNo] <= @ToItemNumber) )  And ( @FromDescription = 'ALL' Or ([LongDesc] >= @FromDescription) )  And ( @ToDescription = 'ALL' Or ([LongDesc] <= @ToDescription) )  And ( @FromGenericDesc = 'ALL' Or ([GenDesc] >= @FromGenericDesc) )  And ( @ToGenericDesc = 'ALL' Or ([GenDesc] <= @ToGenericDesc) )  And ( @FromBin = 'ALL' Or ([BinNo] >= @FromBin) )  And ( @ToBin = 'ALL' Or ([BinNo] <= @ToBin) )  And ( @FromUDF_1 = 'ALL' Or ([UDF_1] >= @FromUDF_1) )  And ( @ToUDF_1 = 'ALL' Or ([UDF_1] <= @ToUDF_1) )  And ( @FromUDF_2 = 'ALL' Or ([UDF_2] >= @FromUDF_2) )  And ( @ToUDF_2 = 'ALL' Or ([UDF_2] <= @ToUDF_2) )  And ( @FromUDF_3 = 'ALL' Or ([UDF_3] >= @FromUDF_3) )  And ( @ToUDF_3 = 'ALL' Or ([UDF_3] <= @ToUDF_3) )  And ( @FromUDF_4 = 'ALL' Or ([UDF_4] >= @FromUDF_4) )  And ( @ToUDF_4 = 'ALL' Or ([UDF_4] <= @ToUDF_4) )  And ( @FromUDF_5 = 'ALL' Or ([UDF_5] >= @FromUDF_5) )  And ( @ToUDF_5 = 'ALL' Or ([UDF_5] <= @ToUDF_5) )  And ( @FromUDF_6 = 'ALL' Or ([UDF_6] >= @FromUDF_6) )  And ( @ToUDF_6 = 'ALL' Or ([UDF_6] <= @ToUDF_6) )  And ( @FromAccountNumber = 'ALL' Or ([AcctNo] = @FromAccountNumber) )  Update hdr Set hdr.InventoryValue = CASE WHEN dtl.InventoryValue IS NULL THEN 0.00 ELSE dtl.InventoryValue END From #ttResult As hdr  Inner Join (Select ItemNo, Sum(InventoryValue) As InventoryValue  From (Select Distinct ItemNo, LocCode, InventoryValue From #ttResult Where RecStatus = 'Detail') As o  Group By ItemNo)   As dtl On hdr.ItemNo = dtl.ItemNo  Update r Set r.InventoryValue = 0 From #ttResult As r Where r.RecStatus = 'Detail'  Delete From #ttResult Where RecStatus = 'Detail' And SerialLot Is Null  Update hdr Set hdr.QtyOnHand = dtl.QtyOnHand From #ttResult As hdr Inner Join (Select ItemNo, Sum(QtyOnHand) As QtyOnHand  From (Select Distinct RecStatus, ItemNo, LocCode, QtyOnHand From #ttResult Where RecStatus = 'Detail') As t  Group By ItemNo) As dtl  On hdr.ItemNo = dtl.ItemNo Where hdr.RecStatus = 'Header'  Set @SQL = 'Select * From #ttResult ' Set @Where = 'N'  If @InclNegativeQty = 0  And @InclZeroQty = 0  Delete From #ttResult   Where ItemNo Not In (Select ItemNo From #ttResult Where QtyOnHand > 0 Or InventoryValue > 0) Else If @InclNegativeQty = 1  And @InclZeroQty = 0  Delete From #ttResult   Where ItemNo Not In (Select ItemNo From #ttResult Where QtyOnHand <> 0 Or InventoryValue <> 0) Else If @InclNegativeQty = 0  And @InclZeroQty = 1  Delete From #ttResult   Where ItemNo Not In (Select ItemNo From #ttResult Where QtyOnHand >= 0 Or InventoryValue >= 0)  Update r Set r.SegmentRange = t.Segment From #ttResult As r Inner Join #ttSegment As t On r.AcctNo = t.AcctNo  Update r Set r.SegmentSort = t.Segment From #ttResult As r Inner Join #ttSegmentSort As t On r.AcctNo = t.AcctNo  If @FromSegment <> '' Or @ToSegment <> '' Begin  If @Where = 'Y'  Set @SQL = @SQL + ' And [SegmentRange] Between ''' + @FromSegment + ''' And ''' + @ToSegment + ''''  Else Begin  Set @SQL = @SQL + ' Where [SegmentRange] Between ''' + @FromSegment + ''' And ''' + @ToSegment + ''''  Set @Where = 'Y'  End End   If @SortBy = 'Segment'  Set @SQL = @SQL + ' Order By [SegmentSort], ItemNo, [SerialLot], [RecStatus] Desc' Else If @SortBy = 'ItemNo'   Set @SQL = @SQL + ' Order By ItemNo, [SerialLot], [RecStatus] Desc, [SegmentSort] ' Else  Set @SQL = @SQL + ' Order By ' + @SortBy + ', ItemNo, [SerialLot], [RecStatus] Desc, [SegmentSort] '  Exec (@SQL)   
GO
GRANT EXECUTE ON  [dbo].[seeivPrintStockStatus] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[seeivPrintStockStatus] TO [rpt_materials manager]
GO
GRANT EXECUTE ON  [dbo].[seeivPrintStockStatus] TO [rpt_operations manager]
GO
GRANT EXECUTE ON  [dbo].[seeivPrintStockStatus] TO [rpt_power user]
GO
GRANT EXECUTE ON  [dbo].[seeivPrintStockStatus] TO [rpt_production manager]
GO
GRANT EXECUTE ON  [dbo].[seeivPrintStockStatus] TO [rpt_warehouse manager]
GO
