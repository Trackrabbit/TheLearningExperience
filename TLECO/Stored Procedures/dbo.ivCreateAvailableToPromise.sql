SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[ivCreateAvailableToPromise]    (@tcsITEMNMBR Char(30),  @tcsLOCNCODE Char(10),  @tcsCU_Conv_Factor Decimal(19,5),  @tcsCU_Unalloc_Orders Decimal(19,5) Output,  @tcsCU_ABOM Decimal(19,5) Output,  @tcsCU_Pending_Recpts Decimal(19,5) Output,  @tcsCU_Returns Decimal(19,5) Output,  @OSName varchar(31) Output,  @POPendingReceipts Decimal(19,5) Output,  @MaxATPQty Decimal(19,5) Output) AS  DECLARE @tcsLOCU_WORK_BALANCE decimal (19,5)  DECLARE @loIN_DEX_ROW_ID integer DECLARE @loCUQTY_In decimal(19,5)    DECLARE @loCUQTY_Out decimal(19,5)    DECLARE @loCUALLOCATED decimal(19,5)   DECLARE @loCUBACKORDER decimal(19,5)   DECLARE @loCUABOM decimal(19,5)    DECLARE @loCU_Transaction_Type char(4)  DECLARE @sql_statement as varchar(8000) DECLARE @AVAILABLEQTY decimal(19,5) DECLARE @TEMP_ATP decimal(19,5) DECLARE @TEMP_ATP2 decimal(19,5) DECLARE @TEMP_DEXROWID integer DECLARE @FIRST_RECORD smallint DECLARE @TempPRMDATE datetime DECLARE @NegInv tinyint  CREATE TABLE [dbo].[#WorkTable] (  [ITEMNMBR] [char] (31) NOT NULL ,  [LOCNCODE] [char] (11) NOT NULL ,  [PRMDATE] [datetime] NOT NULL ,  [TABLETYPE] [smallint] NOT NULL ,  [SOPTYPE] [smallint] NOT NULL ,  [DOCTYPE] [smallint] NOT NULL ,  [DOCNUMBR] [char] (21) NOT NULL ,  [LNITMSEQ] [int] NOT NULL ,  [CUSTVNDR] [char] (15) NOT NULL ,  [CUSTNAME] [char] (65) NOT NULL ,  [QTYIN] [numeric](19, 5) NOT NULL ,  [QTYOUT] [numeric](19, 5) NOT NULL ,  [QTYBKORD] [numeric](19, 5) NOT NULL ,  [ATYALLOC] [numeric](19, 5) NOT NULL ,  [UOFM] [char] (9) NOT NULL ,  [UMQTYINB] [numeric](19, 5) NOT NULL ,  [QTYBALANCE] [numeric](19, 5) NOT NULL ,  [TRXTYPESTRING] [char] (5) NOT NULL ,  [CUMULATIVEATV] [numeric](19, 5) NOT NULL ,  [DEX_ROW_ID] [int] IDENTITY (1, 1) NOT NULL , ) ON [PRIMARY]  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,   QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_SOP WHERE  (ATP_SOP.ITEMNMBR = @tcsITEMNMBR)  AND  (ATP_SOP.LOCNCODE = @tcsLOCNCODE)  AND NOT EXISTS(SELECT * FROM SOP30300  WHERE SOPTYPE = ATP_SOP.SOPTYPE   AND SOPNUMBE = ATP_SOP.DOCNUMBER   AND LNITMSEQ = ATP_SOP.LNITMSEQ)  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,   QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_POP WHERE  (ATP_POP.ITEMNMBR = @tcsITEMNMBR)  AND (ATP_POP.LOCNCODE = @tcsLOCNCODE)  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,  QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_STK_OUT WHERE  (ATP_STK_OUT.ITEMNMBR = @tcsITEMNMBR)  AND (ATP_STK_OUT.LOCNCODE = @tcsLOCNCODE) AND NOT EXISTS(SELECT * FROM IV30300  WHERE DOCTYPE = ATP_STK_OUT.DOCTYPE  AND DOCNUMBR = ATP_STK_OUT.DOCNUMBER  AND LNSEQNBR = ATP_STK_OUT.LNITMSEQ)  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,  QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_STK_IN WHERE  (ATP_STK_IN.ITEMNMBR = @tcsITEMNMBR)  AND (ATP_STK_IN.LOCNCODE = @tcsLOCNCODE) AND NOT EXISTS(SELECT * FROM IV30300  WHERE DOCTYPE = ATP_STK_IN.DOCTYPE  AND DOCNUMBR = ATP_STK_IN.DOCNUMBER  AND LNSEQNBR = ATP_STK_IN.LNITMSEQ)  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,   QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_BOM WHERE (ATP_BOM.ITEMNMBR = @tcsITEMNMBR)  AND (ATP_BOM.LOCNCODE = @tcsLOCNCODE)  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,   QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_BOMWIP WHERE  (ATP_BOMWIP.ITEMNMBR = @tcsITEMNMBR)  AND (ATP_BOMWIP.LOCNCODE = @tcsLOCNCODE)  INSERT INTO #WorkTable  (ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT,  QTYBKORD, ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV) SELECT ITEMNMBR, LOCNCODE, EXPDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBER, LNITMSEQ, DBCRID, DBCRNAME, QUANTITY,   QUANTITY, BACKORDER, ALLOCATED, UOFM, QTYBSUOM, BALANCE, TYPE, 0 FROM  ATP_POP_REC WHERE  (ATP_POP_REC.ITEMNMBR = @tcsITEMNMBR)  AND (ATP_POP_REC.LOCNCODE = @tcsLOCNCODE)  INSERT INTO #WorkTable   ( ITEMNMBR,   LOCNCODE,   PRMDATE,   TABLETYPE,   SOPTYPE,   DOCTYPE,   DOCNUMBR,   LNITMSEQ,   CUSTVNDR,   CUSTNAME,   QTYIN,   QTYOUT,   QTYBKORD,   ATYALLOC,   UOFM,   UMQTYINB,   QTYBALANCE,   TRXTYPESTRING,   CUMULATIVEATV  )   SELECT ITEMNMBR,   LOCNCODE,   EXPDATE,   TABLETYPE,   SOPTYPE,   DOCTYPE,   DOCNUMBER,   LNITMSEQ,   DBCRID,   DBCRNAME,   QUANTITY,    QUANTITY,   BACKORDER,   ALLOCATED,   UOFM,   QTYBSUOM,   BALANCE,   TYPE,   0   FROM  ATP_IVXFR_VIA   WHERE  (ATP_IVXFR_VIA.ITEMNMBR = @tcsITEMNMBR) AND (ATP_IVXFR_VIA.LOCNCODE = @tcsLOCNCODE)   INSERT INTO #WorkTable   ( ITEMNMBR,   LOCNCODE,   PRMDATE,   TABLETYPE,   SOPTYPE,   DOCTYPE,   DOCNUMBR,   LNITMSEQ,   CUSTVNDR,   CUSTNAME,   QTYIN,   QTYOUT,   QTYBKORD,   ATYALLOC,   UOFM,   UMQTYINB,   QTYBALANCE,   TRXTYPESTRING,   CUMULATIVEATV  )   SELECT ITEMNMBR,   LOCNCODE,   EXPDATE,   TABLETYPE,   SOPTYPE,   DOCTYPE,   DOCNUMBER,   LNITMSEQ,   DBCRID,   DBCRNAME,   QUANTITY,    0,    BACKORDER,   ALLOCATED,   UOFM,   QTYBSUOM,   BALANCE,   TYPE,   0   FROM  ATP_IVXFR_IN  WHERE  (ATP_IVXFR_IN.ITEMNMBR = @tcsITEMNMBR) AND (ATP_IVXFR_IN.LOCNCODE = @tcsLOCNCODE)   select @sql_statement = '' select @sql_statement = @sql_statement + 'INSERT INTO #WorkTable ' select @sql_statement = @sql_statement + ' select ITEMNMBR as ITEMNMBR, LOCNCODE as LOCNCODE, PRMDATE as PRMDATE, TABLETYPE as TABLETYPE, ' select @sql_statement = @sql_statement + ' SOPTYPE as SOPTYPE, DOCTYPE as DOCTYPE, DOCNUMBR as DOCNUMBR, LNITMSEQ as LNITMSEQ, ' select @sql_statement = @sql_statement + ' CUSTVNDR as CUSTVNDR, CUSTNAME as CUSTNAME, QTYIN as QTYIN, QTYOUT as QTYOUT, ' select @sql_statement = @sql_statement + ' QTYBKORD as QTYBKORD, ATYALLOC as ATYALLOC, UOFM as UOFM, UMQTYINB as UMQTYINB, ' select @sql_statement = @sql_statement + ' QTYBALANCE as QTYBALANCE, TRXTYPESTRING as TRXTYPESTRING, CUMULATIVEATP as CUMULATIVEATP from ' + @OSName exec (@sql_statement)  select @sql_statement = '' select @sql_statement = 'delete from ' + @OSName exec (@sql_statement)  SELECT @tcsLOCU_WORK_BALANCE = isnull((select QTYONHND FROM IV00102 WHERE (IV00102.ITEMNMBR = @tcsITEMNMBR) AND  (IV00102.LOCNCODE = @tcsLOCNCODE)),0)  SET @tcsLOCU_WORK_BALANCE = @tcsLOCU_WORK_BALANCE / @tcsCU_Conv_Factor  SET @tcsCU_Unalloc_Orders = 0 SET @tcsCU_ABOM = 0 SET @tcsCU_Pending_Recpts = 0 SET @tcsCU_Returns = 0   SET @POPendingReceipts = 0  DECLARE tcsINVSP00011_Create_FSEnq_TEMP_Cursor CURSOR FOR  SELECT DEX_ROW_ID,   QTYIN =   CASE  WHEN (TABLETYPE = 1 and SOPTYPE = 4) or TABLETYPE = 2 or TABLETYPE = 5 or TABLETYPE = 6 or TABLETYPE = 7   THEN  (QTYIN * UMQTYINB) / @tcsCU_Conv_Factor   WHEN TABLETYPE = 9 and DOCTYPE = 3   THEN (QTYIN * UMQTYINB) / @tcsCU_Conv_Factor  WHEN TABLETYPE = 9   THEN  QTYIN  ELSE  0  END,  QTYOUT =  CASE   WHEN  (TABLETYPE = 1 and SOPTYPE = 4) or TABLETYPE = 2 or TABLETYPE = 5 or TABLETYPE = 6  or TABLETYPE = 7   THEN  0   WHEN TABLETYPE = 8   THEN  QTYOUT   ELSE  (QTYOUT * UMQTYINB) / @tcsCU_Conv_Factor  END,  ATYALLOC =  CASE  WHEN TABLETYPE = 8 or TABLETYPE = 9   THEN  ATYALLOC   WHEN ATYALLOC < 0   THEN  ((ATYALLOC * -1) * UMQTYINB) / @tcsCU_Conv_Factor  ELSE  (ATYALLOC * UMQTYINB) / @tcsCU_Conv_Factor  END,  (QTYBKORD* UMQTYINB) / @tcsCU_Conv_Factor,   Trans_Type =  CASE  WHEN TABLETYPE = 1 AND SOPTYPE = 2 THEN  'SORD'  WHEN TABLETYPE = 1 AND SOPTYPE = 3 THEN  'SINV'  WHEN TABLETYPE = 1 AND SOPTYPE = 4 THEN  'SRET'  WHEN TABLETYPE = 1 AND SOPTYPE = 5 THEN  'SBKO'  WHEN TABLETYPE = 1 AND SOPTYPE = 6 THEN  'SFFL'   WHEN TABLETYPE = 2 THEN  'PORD'   WHEN TABLETYPE = 3 AND DOCTYPE = 1 THEN  'IVA'  WHEN TABLETYPE = 3 AND DOCTYPE = 2 THEN  'IVV'  WHEN TABLETYPE = 3 AND DOCTYPE = 3 THEN  'IVT'   WHEN TABLETYPE = 4 THEN  'BOM'   WHEN TABLETYPE = 5 THEN  'ABOM'   WHEN TABLETYPE = 6 AND DOCTYPE = 1 THEN  'IVA'  WHEN TABLETYPE = 6 AND DOCTYPE = 2 THEN  'IVV'  WHEN TABLETYPE = 6 AND DOCTYPE = 3 THEN  'IVT'  WHEN TABLETYPE =7 THEN  'PREC'   WHEN TABLETYPE =9 AND DOCTYPE = 3 THEN  'IVT'  WHEN TABLETYPE = 8 or TABLETYPE = 9 THEN    TRXTYPESTRING   END  FROM   #WorkTable  ORDER BY ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE, DOCNUMBR, LNITMSEQ  OPEN tcsINVSP00011_Create_FSEnq_TEMP_Cursor  FETCH tcsINVSP00011_Create_FSEnq_TEMP_Cursor  INTO @loIN_DEX_ROW_ID, @loCUQTY_In, @loCUQTY_Out, @loCUALLOCATED, @loCUBACKORDER, @loCU_Transaction_Type  WHILE @@FETCH_STATUS = 0 BEGIN   set @NegInv = 0   IF @loCUQTY_Out < 0 AND @loCU_Transaction_Type = 'SINV'  BEGIN  SET @loCUQTY_In = (@loCUQTY_Out * -1)  SET @loCUQTY_Out = 0  set @NegInv = 1  END  ELSE  BEGIN  SET @loCUQTY_Out = @loCUQTY_Out  END   IF (@loCU_Transaction_Type = 'SORD' OR @loCU_Transaction_Type = 'SINV' OR @loCU_Transaction_Type = 'SFFL')   AND (@loCUALLOCATED + @loCUBACKORDER) < @loCUQTY_Out and @NegInv = 0   BEGIN  SET @tcsCU_Unalloc_Orders = @tcsCU_Unalloc_Orders + (@loCUQTY_Out - @loCUALLOCATED - @loCUBACKORDER)  END   IF  @loCU_Transaction_Type = 'ABOM'   BEGIN  SET @tcsCU_ABOM = @tcsCU_ABOM + @loCUQTY_In  END   IF @loCU_Transaction_Type = 'SINV' and @NegInv = 1   BEGIN  SET @tcsCU_Returns = @tcsCU_Returns + @loCUQTY_In  END   IF @loCU_Transaction_Type = 'SRET'   BEGIN  SET @tcsCU_Returns = @tcsCU_Returns + @loCUQTY_In  END   IF (@loCU_Transaction_Type = 'IVA'  or @loCU_Transaction_Type = 'IVV' or @loCU_Transaction_Type =  'IVT' ) and @loCUQTY_In > 0  BEGIN  SET @tcsCU_Pending_Recpts = @tcsCU_Pending_Recpts + @loCUQTY_In  END   IF (@loCU_Transaction_Type =  'PREC') and @loCUQTY_In > 0  BEGIN  SET @POPendingReceipts = @POPendingReceipts + @loCUQTY_In  END   if not(@loCUQTY_In = 0 and @loCUQTY_Out > 0 and @loCUQTY_Out = @loCUALLOCATED)  BEGIN  IF ( @loCU_Transaction_Type = 'IVA') and @loCUQTY_Out < 0   SET @tcsLOCU_WORK_BALANCE = @tcsLOCU_WORK_BALANCE + (@loCUQTY_In - abs(@loCUQTY_Out))  ELSE  SET @tcsLOCU_WORK_BALANCE = @tcsLOCU_WORK_BALANCE + (@loCUQTY_In - @loCUQTY_Out)  END   UPDATE #WorkTable  SET    #WorkTable.QTYBALANCE =  @tcsLOCU_WORK_BALANCE,  #WorkTable.ATYALLOC = @loCUALLOCATED,  #WorkTable.QTYIN = @loCUQTY_In,  #WorkTable.QTYOUT = @loCUQTY_Out,  #WorkTable.QTYBKORD = @loCUBACKORDER,  #WorkTable.TRXTYPESTRING = @loCU_Transaction_Type  WHERE #WorkTable.DEX_ROW_ID = @loIN_DEX_ROW_ID   FETCH tcsINVSP00011_Create_FSEnq_TEMP_Cursor  INTO  @loIN_DEX_ROW_ID, @loCUQTY_In, @loCUQTY_Out, @loCUALLOCATED, @loCUBACKORDER, @loCU_Transaction_Type  END  CLOSE tcsINVSP00011_Create_FSEnq_TEMP_Cursor DEALLOCATE tcsINVSP00011_Create_FSEnq_TEMP_Cursor  delete from #WorkTable where QTYIN = 0 and QTYOUT > 0 and QTYOUT = ATYALLOC  declare CalculateTempATP cursor for  select ITEMNMBR, LOCNCODE, QTYIN, QTYOUT, ATYALLOC, TRXTYPESTRING, DEX_ROW_ID  from #WorkTable  order by PRMDATE, QTYIN desc, QTYOUT desc  set @TEMP_ATP = 0 set @TEMP_DEXROWID = 0 set @loCUALLOCATED = 0 set @FIRST_RECORD = 1  select @AVAILABLEQTY = isnull((select (QTYONHND - ATYALLOC)  from IV00102   where ITEMNMBR = @tcsITEMNMBR  and LOCNCODE = @tcsLOCNCODE),0)/ @tcsCU_Conv_Factor  OPEN CalculateTempATP  FETCH CalculateTempATP  INTO @tcsITEMNMBR, @tcsLOCNCODE, @loCUQTY_In, @loCUQTY_Out, @loCUALLOCATED, @loCU_Transaction_Type, @loIN_DEX_ROW_ID  WHILE @@FETCH_STATUS = 0 BEGIN  if @loCUQTY_In = 0   begin  if @FIRST_RECORD = 1  begin  set @TEMP_DEXROWID = @loIN_DEX_ROW_ID   IF ( @loCU_Transaction_Type = 'IVA') and @loCUQTY_Out < 0   set @TEMP_ATP = @AVAILABLEQTY - (abs(@loCUQTY_Out) - @loCUALLOCATED)  ELSE   set @TEMP_ATP = @AVAILABLEQTY - (@loCUQTY_Out - @loCUALLOCATED)  set @FIRST_RECORD = 0  end  else  begin  IF ( @loCU_Transaction_Type = 'IVA') and @loCUQTY_Out < 0   set @TEMP_ATP = @TEMP_ATP - (abs(@loCUQTY_Out) - @loCUALLOCATED)  ELSE   set @TEMP_ATP = @TEMP_ATP - (@loCUQTY_Out - @loCUALLOCATED)  end  end  else   begin  if @FIRST_RECORD = 1  begin  set @TEMP_DEXROWID = @loIN_DEX_ROW_ID  set @TEMP_ATP = @AVAILABLEQTY + (@loCUQTY_In - @loCUQTY_Out)  set @FIRST_RECORD = 0  end  else  begin  update #WorkTable  set CUMULATIVEATV = @TEMP_ATP  where DEX_ROW_ID = @TEMP_DEXROWID   set @TEMP_ATP = @loCUQTY_In - @loCUQTY_Out  set @TEMP_DEXROWID = @loIN_DEX_ROW_ID  end  end   FETCH CalculateTempATP  INTO @tcsITEMNMBR, @tcsLOCNCODE, @loCUQTY_In, @loCUQTY_Out, @loCUALLOCATED, @loCU_Transaction_Type, @loIN_DEX_ROW_ID END  update #WorkTable set CUMULATIVEATV = @TEMP_ATP where DEX_ROW_ID = @TEMP_DEXROWID  CLOSE CalculateTempATP DEALLOCATE CalculateTempATP  declare AdjustNegativeTempATP scroll cursor for  select CUMULATIVEATV, DEX_ROW_ID  from #WorkTable  order by PRMDATE, QTYIN desc, QTYOUT desc  set @TEMP_ATP = 0 set @TEMP_ATP2 = 0  OPEN AdjustNegativeTempATP   FETCH LAST FROM AdjustNegativeTempATP  INTO @TEMP_ATP, @loIN_DEX_ROW_ID  WHILE @@FETCH_STATUS = 0 BEGIN  if @TEMP_ATP < 0   begin  set @TEMP_ATP2 = @TEMP_ATP2 + @TEMP_ATP   update #WorkTable  set CUMULATIVEATV = 0  where DEX_ROW_ID = @loIN_DEX_ROW_ID  end  else  begin  if @TEMP_ATP2 < 0   begin  set @TEMP_ATP2 = @TEMP_ATP2 + @TEMP_ATP   if @TEMP_ATP2 < 0   begin  update #WorkTable  set CUMULATIVEATV = 0  where DEX_ROW_ID = @loIN_DEX_ROW_ID  end  else  begin  update #WorkTable  set CUMULATIVEATV = @TEMP_ATP2  where DEX_ROW_ID = @loIN_DEX_ROW_ID   set @TEMP_ATP2 = 0  end   end  end   FETCH PRIOR FROM AdjustNegativeTempATP  INTO @TEMP_ATP, @loIN_DEX_ROW_ID END  if @TEMP_ATP2 < 0  update #WorkTable  set CUMULATIVEATV = CUMULATIVEATV + @TEMP_ATP2  where DEX_ROW_ID = @loIN_DEX_ROW_ID  CLOSE AdjustNegativeTempATP DEALLOCATE AdjustNegativeTempATP  declare CalculateCumulativeATP cursor for  select CUMULATIVEATV, PRMDATE  from #WorkTable  order by PRMDATE, QTYIN desc, QTYOUT desc  set @TEMP_ATP = 0 set @TEMP_ATP2 = 0  OPEN CalculateCumulativeATP   FETCH FROM CalculateCumulativeATP  INTO @TEMP_ATP, @TempPRMDATE  WHILE @@FETCH_STATUS = 0 BEGIN  set @TEMP_ATP2 = @TEMP_ATP2 + @TEMP_ATP   update #WorkTable  set CUMULATIVEATV = @TEMP_ATP2  where PRMDATE = @TempPRMDATE   FETCH FROM CalculateCumulativeATP  INTO @TEMP_ATP, @TempPRMDATE END  CLOSE CalculateCumulativeATP DEALLOCATE CalculateCumulativeATP  UPDATE #WorkTable SET    #WorkTable.QTYOUT = #WorkTable.QTYOUT - #WorkTable.ATYALLOC  WHERE #WorkTable.TRXTYPESTRING in ('SORD', 'SINV', 'SFFL') AND #WorkTable.ATYALLOC > 0  select @MaxATPQty = (select MAX(CUMULATIVEATV) from #WorkTable)  select @sql_statement = '' select @sql_statement = 'insert into ' + @OSName  select @sql_statement = @sql_statement + ' select ITEMNMBR, LOCNCODE, PRMDATE, TABLETYPE, SOPTYPE, DOCTYPE,' select @sql_statement = @sql_statement + ' DOCNUMBR, LNITMSEQ, CUSTVNDR, CUSTNAME, QTYIN, QTYOUT, QTYBKORD,' select @sql_statement = @sql_statement + ' ATYALLOC, UOFM, UMQTYINB, QTYBALANCE, TRXTYPESTRING, CUMULATIVEATV'  select @sql_statement = @sql_statement + ' from #WorkTable order by ITEMNMBR, LOCNCODE, PRMDATE,QTYIN,QTYOUT' exec (@sql_statement)    
GO
GRANT EXECUTE ON  [dbo].[ivCreateAvailableToPromise] TO [DYNGRP]
GO
