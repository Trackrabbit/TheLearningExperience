SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glmcSetAccountCurrencyStatus] @I_iSQLSessionID int  = NULL, @I_sAllocationType smallint = NULL, @I_tPosting tinyint = NULL, @I_cFuncCurrencyID char(15) = NULL, @IO_bLineMessages2 binary(4) = NULL output, @O_iErrorState int   = NULL output  as  declare  @tLoop tinyint,  @cMinCurrencyID char(15),  @cNextCurrencyID char(15),  @tTransaction tinyint,   @BAL_SHEET int,  @FALSE int,  @HISTORY int,  @MS_ITEM_1 int,  @MS_ITEM_2 int,  @MS_ITEM_3 int,  @MS_ITEM_4 int,  @MS_ITEM_24 int,  @POST_ACCT int,  @POST_ALLOC_ACCOUNT int,  @TRUE int,  @UNIT_ALLOC_ACCOUNT int,  @YEAR_END_CLOSE int  select  @O_iErrorState = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end  while (@tLoop is NULL) begin  select @tLoop = 1   if  @I_iSQLSessionID is NULL  or @I_sAllocationType is NULL  or @I_tPosting is NULL  or @I_cFuncCurrencyID is NULL  or @IO_bLineMessages2 is NULL  begin  select @O_iErrorState = 20793  return  end   select  @BAL_SHEET = 0,  @FALSE = 0,  @HISTORY = 2,  @MS_ITEM_1 = power(2,24),  @MS_ITEM_2 = power(2,25),  @MS_ITEM_3 = power(2,26),  @MS_ITEM_4 = power(2,27),  @MS_ITEM_24 = power(2,15),  @POST_ACCT = 1,  @POST_ALLOC_ACCOUNT = 3,  @TRUE = 1,  @UNIT_ALLOC_ACCOUNT = 4,  @YEAR_END_CLOSE = 3   select @cMinCurrencyID = NULL   select   @cMinCurrencyID = min(cCurrencyID)  from  #AcctCurrency  where  tVerified = @FALSE  and sAccountType = @POST_ACCT  and cCurrencyID <> @I_cFuncCurrencyID   while @cMinCurrencyID is not NULL  begin   update  #AcctCurrency  set  bLineMessages2 = ( bLineMessages2 | @MS_ITEM_3 )  where  sAccountType = @POST_ACCT  and tVerified = @FALSE  and cCurrencyID = @cMinCurrencyID  and iAccountIndex  not in (  select  ACTINDX  from  #AcctCurrency,  MC00200  where  #AcctCurrency.iAccountIndex = MC00200.ACTINDX  and MC00200.CURNCYID = @cMinCurrencyID  and sAccountType = @POST_ACCT  and #AcctCurrency.tVerified = @FALSE  )   if @@rowcount > 0  begin   select @IO_bLineMessages2 = (@IO_bLineMessages2 | @MS_ITEM_3)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20794  break  end     end    select @cNextCurrencyID = NULL  select   @cNextCurrencyID = min(cCurrencyID)  from  #AcctCurrency  where  tVerified = @FALSE  and sAccountType = @POST_ACCT  and cCurrencyID > @cMinCurrencyID  and cCurrencyID <> @I_cFuncCurrencyID   select @cMinCurrencyID = @cNextCurrencyID   end    if @I_sAllocationType = @YEAR_END_CLOSE  begin   delete from  #Distributions  where  CurrencyID = '0'  and AllocationType = @YEAR_END_CLOSE   insert into  #Distributions (  SQLSessionID,  AllocationIndex,   DistributionIndex,  Percentage,  LineMessage,  LineMessages2,  AccountType,  Active,  Debit,  Credit,  OriginatingDebit,  OriginatingCredit,  PostingType,  AllocationType,  Segment,  UnitDecimalPlaces,  CurrencyID,  Verified  )  select  @I_iSQLSessionID,  ACTINDX,  DSTINDX,  PRCNTAGE,  0x00000000,  0x00000000,  @POST_ACCT,  @TRUE,  0.0,  0.0,  0.0,  0.0,  @BAL_SHEET,  @I_sAllocationType,  '',  0,  cCurrencyID,  @FALSE  from   #AcctCurrency,  GL00103  where  #AcctCurrency.tVerified = @FALSE  and ( #AcctCurrency.sAccountType = @POST_ALLOC_ACCOUNT  or #AcctCurrency.sAccountType = @UNIT_ALLOC_ACCOUNT )  and #AcctCurrency.iAccountIndex = GL00103.ACTINDX   end    select  @cMinCurrencyID = min( CurrencyID )  from  #Distributions  where  Verified = @FALSE  and ( AllocationType = @HISTORY  or AllocationType = @YEAR_END_CLOSE )   while @cMinCurrencyID is not null  begin  update  #Distributions  set  LineMessages2 = ( LineMessages2 | @MS_ITEM_4 )  where  Verified = @FALSE  and SQLSessionID = @I_iSQLSessionID  and ( AllocationType = @HISTORY  or AllocationType = @YEAR_END_CLOSE )  and CurrencyID = @cMinCurrencyID  and  DistributionIndex  not in (   select  ACTINDX  from  #Distributions,  MC00200  where  #Distributions.DistributionIndex = MC00200.ACTINDX  and MC00200.CURNCYID = @cMinCurrencyID  and #Distributions.Verified = @FALSE  and #Distributions.SQLSessionID = @I_iSQLSessionID  and ( AllocationType = @HISTORY  or AllocationType = @YEAR_END_CLOSE )  and #Distributions.CurrencyID = @cMinCurrencyID  and (#Distributions.LineMessage & @MS_ITEM_24) <> @MS_ITEM_24  )  if @@rowcount > 0  begin  select @IO_bLineMessages2 = (@IO_bLineMessages2 | @MS_ITEM_4)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20795  break  end     end    select @cNextCurrencyID = NULL   select   @cNextCurrencyID = min(CurrencyID)  from  #Distributions  where  Verified = @FALSE  and CurrencyID > @cMinCurrencyID  and ( AllocationType = @HISTORY  or AllocationType = @YEAR_END_CLOSE )   select @cMinCurrencyID = @cNextCurrencyID   end    update  #AcctCurrency  set  bLineMessages2 = ( bLineMessages2 | @MS_ITEM_4 )  from  #AcctCurrency,  #Distributions  where  tVerified = @FALSE  and #AcctCurrency.iAccountIndex = #Distributions.AllocationIndex  and #AcctCurrency.cCurrencyID= #Distributions.CurrencyID  and (#Distributions.LineMessages2 & @MS_ITEM_4) = @MS_ITEM_4  and ( #Distributions.AllocationType = @HISTORY  or #Distributions.AllocationType = @YEAR_END_CLOSE )   update  #AcctCurrency  set  tVerified = @TRUE  where  tVerified = @FALSE   update  #Distributions  set  Verified = @TRUE  where  Verified = @FALSE  and ( #Distributions.AllocationType = @HISTORY  or #Distributions.AllocationType = @YEAR_END_CLOSE )  end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return    
GO
GRANT EXECUTE ON  [dbo].[glmcSetAccountCurrencyStatus] TO [DYNGRP]
GO
