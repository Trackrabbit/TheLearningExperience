SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[SVC_RET_Cancel_Revenue_Recognition_Lines] (  @CONSTS                 Smallint,  @CONTNBR          Char(11),  @LNSEQNBR          Numeric(19,5),  @TransactionDate     datetime,  @UserID        Varchar(30),   @ErrorCondition      integer = 0 OUTPUT ) as declare @StartDate              datetime,  @EndDate                datetime,  @YEAR1                  smallint,  @PERIODID               smallint,  @DexRow                 integer,  @TotalRevenue           numeric(19,5),@OrigTotalRevenue           numeric(19,5),  @TotalPostedRevenue           numeric(19,5),@OrigTotalPostedRevenue           numeric(19,5),  @SourceModule Char(3),  @SourceDocument      Varchar(255),  @BackOneMonth           tinyint,  @NegativeAmount         tinyint,  @I_sRateCalcMethod      smallint ,     @I_sViewMode            smallint,     @I_nExchangeRate        numeric(15,7),    @I_nDenomExchangeRate   numeric(15,7),        @I_sMCTrxState          smallint,     @O_iErrorState int,   @I_sDecimalPlaces       smallint,   @ContractLineStartDate  datetime,  @Total                  numeric(19,5), @OrigTotal                  numeric(19,5),  @TransactionAmount     Numeric(19,5),@OrigTransactionAmount     Numeric(19,5),  @DiscountRemaining      numeric(19,5),@OrigDiscountRemaining      numeric(19,5),  @TotalInvoice           numeric(19,5),@OrigTotalInvoice           numeric(19,5),  @AmountToBeAdjusted     numeric(19,5), @OrigAmountToBeAdjusted numeric(19,5),  @TotalNetRevenue        numeric(19,5),@OrigTotalNetRevenue        numeric(19,5),  @TotalDiscount          numeric(19,5),@OrigTotalDiscount          numeric(19,5),  @PostedRevenue           numeric(19,5) , @OrigPostedRevenue           numeric(19,5)  declare @MinDate datetime declare @PostedAmount numeric(19,5), @OrigPostedAmount numeric(19,5),  @CreditAmount numeric(19,5),          @OrigCreditAmount numeric(19,5) declare @ReverseDone tinyint, @RevenueLine int, @PreTransactionDate   datetime  set nocount on exec smGetMinDate @MinDate output   select   @DiscountRemaining = DSCDLRAM / TOTAL,   @OrigDiscountRemaining = ORDDLRAT / ORIGTOTAL,  @ContractLineStartDate = STRTDATE,  @I_sRateCalcMethod = RATECALC,   @I_sViewMode = 4,                    @I_nExchangeRate = XCHGRATE,   @I_sDecimalPlaces = DECPLACS,   @I_nDenomExchangeRate = DENXRATE,   @I_sMCTrxState = MCTRXSTT  from SVC00601 WITH (NOLOCK) where SVC00601.CONSTS = @CONSTS and  SVC00601.CONTNBR = @CONTNBR and  SVC00601.LNSEQNBR = @LNSEQNBR select  @TransactionAmount = ROUND(SUM(IsNull(SVC00603.DOCAMNT,0) - (IsNull(SVC00603.SVC_Invoice_Credit_Amoun,0) / (1.00000 - @DiscountRemaining))),2),  @OrigTransactionAmount = ROUND(SUM(IsNull(SVC00603.ORDOCAMT,0) - (IsNull(SVC00603.OrigInvCreditAmt,0) / (1.00000 - @OrigDiscountRemaining))),2),  @TotalInvoice = ROUND(SUM(IsNull(SVC00603.DOCAMNT,0) - IsNull(SVC00603.DSCDLRAM,0) - IsNull(SVC00603.SVC_Invoice_Credit_Amoun,0)),2),  @OrigTotalInvoice = ROUND(SUM(IsNull(SVC00603.ORDOCAMT,0) - IsNull(SVC00603.ORDDLRAT,0) - IsNull(SVC00603.OrigInvCreditAmt,0)),2),  @Total = SUM(IsNull(SVC00603.DOCAMNT,0) ),  @OrigTotal = SUM(IsNull(SVC00603.ORDOCAMT,0) ),  @TotalDiscount = SUM(IsNull(SVC00603.DSCDLRAM,0)),  @OrigTotalDiscount = SUM(IsNull(SVC00603.ORDDLRAT,0)) from SVC00603  where SVC00603.CONSTS = @CONSTS and  SVC00603.CONTNBR = @CONTNBR and  SVC00603.LNSEQNBR = @LNSEQNBR  select  @TransactionAmount = isnull(@TotalInvoice,0), @OrigTransactionAmount = isnull(@OrigTotalInvoice,0) if not exists(select * from SVC00604 where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and SVC00604.LNSEQNBR = @LNSEQNBR and Status = 1 )  and @TransactionAmount = 0 BEGIN  delete SVC00604 where SVC00604.CONSTS = @CONSTS and SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR and  Status = 0   return END  exec SVC_GetFiscalPeriodDates @UserID, @TransactionDate,@StartDate OUTPUT,  @EndDate OUTPUT, @YEAR1 OUTPUT,  @PERIODID OUTPUT   select @StartDate = MAX(SVC_Coverage_End_Date)   from SVC00604 WITH (NOLOCK)  where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR and  SVC00604.YEAR1 <= @YEAR1 and  SVC00604.PERIODID < @PERIODID   select @StartDate = IsNull(@StartDate,@ContractLineStartDate)  select @StartDate = DateAdd(d,1,@StartDate)  if @StartDate > @EndDate  select @StartDate = @EndDate  select @DexRow = MAX(DEX_ROW_ID) from SVC00604  where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR  and   SVC00604.YEAR1 = @YEAR1 and  SVC00604.PERIODID = @PERIODID  select @TotalPostedRevenue = SUM(PSTDAMNT),@OrigTotalPostedRevenue = SUM(Originating_PostedAmount) from SVC00604 WITH (NOLOCK) where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR and Status = 1 and  SVC00604.DEX_ROW_ID <= @DexRow   select @TotalRevenue = SUM(Net_Transaction_Amount),@OrigTotalRevenue = SUM(OrigNetTransactionAmount),  @TotalNetRevenue = SUM(Net_Transaction_Amount), @OrigTotalNetRevenue = SUM(OrigNetTransactionAmount)  from SVC00604 WITH (NOLOCK)  where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR and Status = 0 and  SVC00604.DEX_ROW_ID <= @DexRow  select @TotalRevenue = IsNull(@TotalRevenue,0) + isnull(@TotalPostedRevenue,0),  @OrigTotalRevenue = IsNull(@OrigTotalRevenue,0)+ isnull(@OrigTotalPostedRevenue,0) select @AmountToBeAdjusted = @TransactionAmount - @TotalRevenue,  @OrigAmountToBeAdjusted = @OrigTransactionAmount - @OrigTotalRevenue  delete SVC00604   where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR and   SVC00604.DEX_ROW_ID > @DexRow and Status = 0   if ((select  MAX(SVC_Coverage_End_Date) from SVC00604  where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR ) = @TransactionDate)  and(select count(*) from SVC00603 where SVC_Coverage_Start_Date in (select PERIODDT from SY40100)  and CONSTS = @CONSTS and CONTNBR = @CONTNBR) > 0  begin  select @ErrorCondition = 1113   return  end  if (@DexRow = 0  or @DexRow is null) and (select SVC_Evergreen_Contract from SVC00600 where CONSTS = @CONSTS and CONTNBR = @CONTNBR) = 0  delete SVC00604 where SVC00604.CONSTS = @CONSTS and  SVC00604.CONTNBR = @CONTNBR and  SVC00604.LNSEQNBR = @LNSEQNBR and Status = 0   if (select SVC_Evergreen_Contract from SVC00600 where CONSTS = @CONSTS and CONTNBR = @CONTNBR) = 1  select @PostedRevenue = SUM(Net_Transaction_Amount), @OrigPostedRevenue = SUM(OrigNetTransactionAmount)  from SVC00604 WITH (NOLOCK) where CONSTS = @CONSTS and CONTNBR = @CONTNBR and LNSEQNBR = @LNSEQNBR  else  select @PostedRevenue = SUM(PSTDAMNT), @OrigPostedRevenue = SUM(Originating_PostedAmount)  from SVC00604 WITH (NOLOCK) where CONSTS = @CONSTS and CONTNBR = @CONTNBR and LNSEQNBR = @LNSEQNBR  and Status = 1  select @PostedRevenue = IsNull(@PostedRevenue,0),  @OrigPostedRevenue = IsNull(@OrigPostedRevenue,0) if @OrigPostedRevenue > @OrigTotalRevenue  select @AmountToBeAdjusted = @TransactionAmount - @PostedRevenue,  @OrigAmountToBeAdjusted = @OrigTransactionAmount - @OrigPostedRevenue if @OrigAmountToBeAdjusted < 0  exec SVC_GetFiscalPeriodDates @UserID, @TransactionDate,@StartDate OUTPUT,  @EndDate OUTPUT, @YEAR1 OUTPUT,  @PERIODID OUTPUT select @AmountToBeAdjusted = ROUND(@AmountToBeAdjusted,2), @OrigAmountToBeAdjusted = ROUND(@OrigAmountToBeAdjusted,2) select @SourceModule = 'CAL',  @SourceDocument = CONVERT(varchar(1),@CONSTS) + '-' + RTRIM(CONVERT(varchar(20),@CONTNBR)) + '-' +  CONVERT(varchar(20),@LNSEQNBR) IF @OrigAmountToBeAdjusted is not null and @OrigAmountToBeAdjusted <> 0 BEGIN   if @AmountToBeAdjusted < 0   begin  delete from SVC00604 where CONSTS = @CONSTS and CONTNBR = @CONTNBR and LNSEQNBR = @LNSEQNBR and SVC_Coverage_Start_Date > @TransactionDate and Status = 0  if (select count(*) from SVC00604  where SVC00604.CONSTS = @CONSTS and SVC00604.CONTNBR = @CONTNBR  and SVC00604.LNSEQNBR = @LNSEQNBR  and  SVC00604.DEX_ROW_ID >= @DexRow and Status = 0 ) = 1  begin  if exists(select 1 from SVC00604  where CONSTS = @CONSTS and CONTNBR = @CONTNBR  and LNSEQNBR = @LNSEQNBR and SVC_Coverage_Start_Date > @TransactionDate and Status = 1)   Begin  delete from SVC00604 where CONSTS = @CONSTS and CONTNBR = @CONTNBR and LNSEQNBR = @LNSEQNBR and DEX_ROW_ID >= @DexRow and Status = 0  End  else   Begin  if @I_nExchangeRate <> 0 or @I_nExchangeRate <> 1.0  begin  select @AmountToBeAdjusted = (@OrigAmountToBeAdjusted/@OrigTotalNetRevenue ) * @TotalNetRevenue  end  UPDATE SVC00604 with (ROWLOCK)  set Transaction_Amount = @AmountToBeAdjusted + Transaction_Amount,  OrigTransactionAmount = @OrigAmountToBeAdjusted + OrigTransactionAmount,  Net_Transaction_Amount = @AmountToBeAdjusted + Net_Transaction_Amount,  OrigNetTransactionAmount = @OrigAmountToBeAdjusted + OrigNetTransactionAmount,  ORDDLRAT = 0, DSCDLRAM = 0  where SVC00604.CONSTS = @CONSTS and SVC00604.CONTNBR = @CONTNBR  and SVC00604.LNSEQNBR = @LNSEQNBR  and SVC00604.DEX_ROW_ID >= @DexRow and Status = 0  return  End  end  select @ReverseDone = 0  declare ReverseAmount cursor for select PSTDAMNT, Originating_PostedAmount,  SVC_Coverage_Start_Date, SVC_Coverage_End_Date, YEAR1, PERIODID  from SVC00604  where SVC00604.CONSTS = @CONSTS and   SVC00604.CONTNBR = @CONTNBR and SVC00604.LNSEQNBR = @LNSEQNBR  and  SVC00604.DEX_ROW_ID >= @DexRow order by DEX_ROW_ID desc   open ReverseAmount  fetch next from ReverseAmount into @PostedAmount, @OrigPostedAmount, @StartDate, @EndDate, @YEAR1, @PERIODID  while @@FETCH_STATUS = 0 and @ReverseDone = 0  begin  if @OrigPostedAmount + @OrigAmountToBeAdjusted < 0  select @AmountToBeAdjusted = @PostedAmount + @AmountToBeAdjusted,   @OrigAmountToBeAdjusted = @OrigPostedAmount + @OrigAmountToBeAdjusted,   @CreditAmount = @PostedAmount,  @OrigCreditAmount = @OrigPostedAmount,  @TransactionAmount = 0,  @OrigTransactionAmount =0  else  begin  select @OrigTransactionAmount = 0, @TransactionAmount = 0,   @OrigCreditAmount = (-1) *@OrigAmountToBeAdjusted, @ReverseDone = 1   if @I_nExchangeRate <> 0 or @I_nExchangeRate <> 1.0  select @CreditAmount = (@OrigAmountToBeAdjusted/@OrigPostedAmount ) * @PostedAmount * (-1)   else  select @CreditAmount = @AmountToBeAdjusted * (-1)   select @OrigAmountToBeAdjusted  = 0, @AmountToBeAdjusted = 0  end   select @RevenueLine = MAX(ISNull(LNITMSEQ,0)) + 1 from SVC00604 WITH (NOLOCK)  where CONSTS = @CONSTS and CONTNBR = @CONTNBR and  LNSEQNBR = @LNSEQNBR and YEAR1 = @YEAR1 and PERIODID = @PERIODID   IF @RevenueLine is null     select @RevenueLine = 1  INSERT INTO SVC00604 with (ROWLOCK)  (CONSTS,CONTNBR,LNSEQNBR,  YEAR1, PERIODID, LNITMSEQ, Status, POSTEDDT,   Transaction_Date, USERID, PSTDAMNT, Originating_PostedAmount,   Source_Trx_Document_Type, SourceTrxDocumentNumber,   SVC_Coverage_Start_Date,  SVC_Coverage_End_Date,   SVC_Invoice_Credit_Amoun, OrigInvCreditAmt,   Transaction_Amount,       OrigTransactionAmount,   DSCDLRAM,      ORDDLRAT,   Net_Transaction_Amount,   OrigNetTransactionAmount)  VALUES (@CONSTS,    @CONTNBR, @LNSEQNBR, @YEAR1, @PERIODID,   @RevenueLine, 0,  @MinDate,   @TransactionDate,    @UserID, 0, 0,   @SourceModule,     @SourceDocument ,   @StartDate,      @EndDate,   @CreditAmount,          @OrigCreditAmount,   @TransactionAmount,    @OrigTransactionAmount,   0,       0,   @TransactionAmount-@CreditAmount, @OrigTransactionAmount - @OrigCreditAmount)   if @EndDate = @TransactionDate or @StartDate = @TransactionDate  begin  select @ReverseDone = 1, @ErrorCondition = 1113   end  else if @StartDate <= @TransactionDate and @OrigAmountToBeAdjusted < 0   begin  select @OrigTransactionAmount = @OrigAmountToBeAdjusted, @CreditAmount = 0,  @OrigCreditAmount = 0, @ReverseDone = 1  if @I_nExchangeRate <> 0 or @I_nExchangeRate <> 1.0  select @TransactionAmount = (@OrigAmountToBeAdjusted/@OrigPostedAmount ) * @PostedAmount  else  select @TransactionAmount = @AmountToBeAdjusted   select @PreTransactionDate = dateadd(dd, -1, @TransactionDate), @RevenueLine = @RevenueLine + 1  exec SVC_GetFiscalPeriodDates @UserID, @PreTransactionDate,@StartDate OUTPUT,  @EndDate OUTPUT, @YEAR1 OUTPUT,  @PERIODID OUTPUT  INSERT INTO SVC00604 with (ROWLOCK)  (CONSTS,CONTNBR,LNSEQNBR,  YEAR1, PERIODID, LNITMSEQ, Status, POSTEDDT,   Transaction_Date, USERID, PSTDAMNT, Originating_PostedAmount,   Source_Trx_Document_Type, SourceTrxDocumentNumber,   SVC_Coverage_Start_Date,  SVC_Coverage_End_Date,   SVC_Invoice_Credit_Amoun, OrigInvCreditAmt,   Transaction_Amount,       OrigTransactionAmount,   DSCDLRAM,      ORDDLRAT,   Net_Transaction_Amount,   OrigNetTransactionAmount)  VALUES (@CONSTS,    @CONTNBR, @LNSEQNBR, @YEAR1, @PERIODID,   @RevenueLine, 0,  @MinDate,   @PreTransactionDate,   @UserID, 0, 0,   @SourceModule,     @SourceDocument ,   @StartDate,      @EndDate,   @CreditAmount,          @OrigCreditAmount,   @TransactionAmount,    @OrigTransactionAmount,   0,       0,   @TransactionAmount-@CreditAmount, @OrigTransactionAmount - @OrigCreditAmount)  end    fetch next from ReverseAmount into @PostedAmount, @OrigPostedAmount, @StartDate, @EndDate, @YEAR1, @PERIODID  end  deallocate ReverseAmount  end   else  begin  select @StartDate = MAX(SVC_Coverage_End_Date) from SVC00604 WITH (NOLOCK)  where SVC00604.CONSTS = @CONSTS and CONTNBR = @CONTNBR and LNSEQNBR = @LNSEQNBR  select @StartDate = DateAdd(d,1,@StartDate)  select @StartDate = IsNull(@StartDate,@ContractLineStartDate) , @EndDate = @TransactionDate  exec SVC_RET_Create_Revenue_Recognition_Lines  -1,   -1,  @CONSTS,  @CONTNBR,  @LNSEQNBR ,  -1,  @MinDate,  @SourceModule,  @SourceDocument ,  @TransactionDate,  @AmountToBeAdjusted,  @UserID ,  @StartDate,  @EndDate,  @DiscountRemaining,  @ErrorCondition OUTPUT   end END return    
GO
GRANT EXECUTE ON  [dbo].[SVC_RET_Cancel_Revenue_Recognition_Lines] TO [DYNGRP]
GO
