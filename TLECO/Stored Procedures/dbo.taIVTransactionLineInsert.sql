SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taIVTransactionLineInsert]  @I_vIVDOCNBR char(17),      @I_vIVDOCTYP smallint,     @I_vITEMNMBR char(30),     @I_vReason_Code char(15)= '',   @I_vLNSEQNBR numeric(19,5) = 0,   @I_vUOFM char(8) = '',     @I_vTRXQTY numeric(19,5) = 0,   @I_vUNITCOST numeric(19,5) = null,  @I_vTRXLOCTN char(10),     @I_vIVIVINDX int = 0,     @I_vInventoryAccount varchar(75) = '',  @I_vIVIVOFIX int = 0,     @I_vInventoryAccountOffSet varchar(75) = '',  @I_vOverrideQty tinyint = 1,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',      @I_vUSRDEFND2 char(50) = '',      @I_vUSRDEFND3 char(50) = '',      @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,    @oErrString varchar(255) output    with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @TRXQTY numeric (19,5),  @ITEMTYPE tinyint,  @AdjVarType tinyint,  @LNSEQNBR int,      @FUNCUR smallint,  @DECPLCUR smallint,     @DECPLQTY smallint,     @QTYBSUOM numeric (19,5),   @iStatus int,  @SERIALOT int,  @QtyAvailable numeric (19,5),  @ALADJOVR tinyint,    @SUMSERIAL numeric (19,5),   @Location_Segment char(67),  @ACSGFLOC smallint,  @ACCNT_STRING char(100),  @LOFSGMNT int,  @MAXSEG int,  @LOFSGMNTEND int,  @LOFSGMNTALL int,  @NEW_ACCNT_STRING varchar(100),  @ACTINDX int,  @O_oErrorState int,  @iCustomState int,  @iCustomErrString varchar(255),  @UOMSCHDL char(10),  @INACTIVE tinyint,  @INACTIVEReason tinyint,  @Adjustment tinyint,  @Variance tinyint,  @RCOFFINDX int,    @iError int,     @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select  @TRXQTY = 0,  @ITEMTYPE = 0,  @AdjVarType = 0,  @LNSEQNBR = 0,  @DECPLCUR = 0,  @DECPLQTY = 0,  @QTYBSUOM = 0,  @iStatus = 0,  @O_oErrorState = 0,  @SERIALOT = 0,  @QtyAvailable = 0,  @ALADJOVR = 0,  @SUMSERIAL = 0,  @UOMSCHDL = '',  @Location_Segment = '',  @ACSGFLOC = 0,  @ACCNT_STRING = '',  @LOFSGMNT = 0,  @MAXSEG = 0,  @LOFSGMNTEND = 0,  @LOFSGMNTALL = 0,  @NEW_ACCNT_STRING = '',  @ACTINDX = 0,  @INACTIVE = 0,  @INACTIVEReason = 0,  @Adjustment = 0,  @Variance = 0,  @RCOFFINDX = 0,  @O_iErrorState = 0,    @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taIVTransactionLineInsertPre  @I_vIVDOCNBR  output,  @I_vIVDOCTYP  output,  @I_vITEMNMBR  output,  @I_vReason_Code output,  @I_vLNSEQNBR  output,  @I_vUOFM output,  @I_vTRXQTY output,  @I_vUNITCOST output,  @I_vTRXLOCTN  output,  @I_vIVIVINDX output,  @I_vInventoryAccount output,  @I_vIVIVOFIX output,  @I_vInventoryAccountOffSet output,  @I_vOverrideQty output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus = 0) and (@iError <> 0)) begin  select @iStatus = @iError end if ((@iStatus <> 0) or (@iCustomState <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 281    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vIVDOCNBR is null or  @I_vIVDOCTYP is null or  @I_vITEMNMBR is null or  @I_vLNSEQNBR is null or  @I_vUOFM is null or  @I_vTRXQTY is null or  @I_vTRXLOCTN is null or  @I_vIVIVINDX is null or  @I_vInventoryAccount is null or  @I_vIVIVOFIX is null or  @I_vInventoryAccountOffSet is null or  @I_vOverrideQty is null or  @I_vRequesterTrx is null) begin  select @O_iErrorState = 282    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vTRXLOCTN = UPPER(@I_vTRXLOCTN),  @I_vIVDOCNBR = UPPER(@I_vIVDOCNBR)  select @DECPLCUR = DECPLCUR,  @DECPLQTY = DECPLQTY,  @ITEMTYPE = ITEMTYPE,  @INACTIVE = INACTIVE,  @SERIALOT = ITMTRKOP,  @UOMSCHDL = UOMSCHDL  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  select @ALADJOVR = ALADJOVR from IV40100 (nolock) select @FUNCUR = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID in (select FUNLCURR from MC40000 (nolock))  if (@I_vUOFM <> '') begin  if not exists(select 1 from IV00106 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM)  begin  select @O_iErrorState = 6353     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else if (@I_vUOFM = '') begin  select @I_vUOFM = BASEUOFM from IV40201 (nolock) where UOMSCHDL = @UOMSCHDL   if (@I_vUOFM = '')  begin  select @O_iErrorState = 1363    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  select @QTYBSUOM = QTYBSUOM from IV00106 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM select @TRXQTY = round(@I_vTRXQTY * @QTYBSUOM,@DECPLQTY - 1)  if ((@I_vTRXQTY > 0) and (@INACTIVE = 1) and (@I_vIVDOCTYP = 1)) begin  select @O_iErrorState = 11760    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vTRXQTY > 0) and (@I_vUNITCOST is null))  begin  select @I_vUNITCOST =  case  when VCTNMTHD in (4,5) then (STNDCOST * @QTYBSUOM)  else (CURRCOST * @QTYBSUOM)  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR end else  if (@I_vTRXQTY < 0) begin  select @I_vUNITCOST =  case  when VCTNMTHD in (4,5) then (STNDCOST * @QTYBSUOM)  else (CURRCOST * @QTYBSUOM)  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR end  if (@ITEMTYPE = 0) begin  select @O_iErrorState = 2266     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@ITEMTYPE not in (1,2)) begin  select @O_iErrorState = 4733     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vIVDOCTYP not in (1,2)) begin  select @O_iErrorState = 284    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRXQTY = 0) begin  select @O_iErrorState = 285     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN) begin  select @O_iErrorState = 287     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if not exists (select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN) begin  select @O_iErrorState = 1788     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN)  if (@I_vTRXLOCTN <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11825     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vTRXLOCTN <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11826     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRequesterTrx < 0) or (@I_vRequesterTrx > 1)) begin  select @O_iErrorState = 3701     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRXQTY < 0) begin  select @QtyAvailable = QTYONHND - ATYALLOC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN   if ((@ALADJOVR = 1) and ((@TRXQTY * -1) > @QtyAvailable) and (@I_vOverrideQty = 0))  begin  select @I_vTRXQTY = round(@QtyAvailable / @QTYBSUOM, @DECPLQTY - 1, 1) * -1   select @TRXQTY = @QTYBSUOM * @I_vTRXQTY   end  else  if (((@TRXQTY * -1) > @QtyAvailable) and ((@ALADJOVR = 0) or (@SERIALOT in(2,3))))   begin  select @O_iErrorState = 1789     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vLNSEQNBR = 0) begin  select @LNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10001 a (nolock) where a.IVDOCTYP = @I_vIVDOCTYP and a.IVDOCNBR = @I_vIVDOCNBR end else begin  select @LNSEQNBR = @I_vLNSEQNBR end  if exists (select 1 from IV10001 (nolock) where IVDOCNBR = @I_vIVDOCNBR and LNSEQNBR = @LNSEQNBR and IVDOCTYP = @I_vIVDOCTYP  ) begin  select @O_iErrorState = 288     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vReason_Code <> '') begin  if (not exists(select 1 from IV40300 (nolock) where Reason_Code = @I_vReason_Code))  begin  select @O_iErrorState = 11705     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  select  @AdjVarType = Types_of_Adj_Var,  @INACTIVEReason = INACTIVE,  @Adjustment = Adjustment,  @Variance = Variance,   @RCOFFINDX = OFFINDX  from IV40300 (nolock) where Reason_Code = @I_vReason_Code   if (@INACTIVEReason = 1)  begin  select @O_iErrorState = 11706     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vIVDOCTYP = 1 and @Adjustment = 0)  begin  select @O_iErrorState = 11707     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  if (@I_vIVDOCTYP = 2 and @Variance = 0)  begin  select @O_iErrorState = 11708     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vTRXQTY < 0 and @AdjVarType = 2)  begin  select @O_iErrorState = 11709     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vTRXQTY > 0 and @AdjVarType = 3)  begin  select @O_iErrorState = 11710     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vInventoryAccount <> '') begin  select @I_vIVIVINDX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vInventoryAccount   if (@I_vIVIVINDX = 0)  begin  select @O_iErrorState = 478     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if @I_vIVIVINDX <> 0  begin  if not exists(select 1 from GL00105 (nolock) where ACTINDX = @I_vIVIVINDX)  begin  select @O_iErrorState = 477     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  select @I_vIVIVINDX = IVIVINDX from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   if (@I_vIVIVINDX = 0)  begin  select @I_vIVIVINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 100    if (@I_vIVIVINDX = 0)  begin  select @O_iErrorState = 436     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   select @Location_Segment = Location_Segment from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN  select @ACSGFLOC = ACSGFLOC from IV40100 (nolock) where SETUPKEY = 1   if ((@I_vIVIVINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0))  begin  select  @MAXSEG = max(SGMTNUMB) from SY00300 (nolock)  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @I_vIVIVINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT) + (@MAXSEG - 1) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING, 1, @LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING, @LOFSGMNTALL - @LOFSGMNTEND + 1, @LOFSGMNTALL)  end   select @ACTINDX = isnull(ACTINDX, 0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  select @I_vIVIVINDX = @ACTINDX  end  end end  if (@I_vInventoryAccountOffSet <> '') begin  select @I_vIVIVOFIX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vInventoryAccountOffSet   if (@I_vIVIVOFIX = 0)  begin  select @O_iErrorState = 437     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if (@I_vIVIVOFIX <> 0)  begin  if not exists(select 1 from GL00105 (nolock) where ACTINDX = @I_vIVIVOFIX)  begin  select @O_iErrorState = 438     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin   if ((@I_vReason_Code <> '') and @RCOFFINDX <> 0)    begin  select @I_vIVIVOFIX = @RCOFFINDX  end  else  begin  if (@I_vIVDOCTYP = 1)  begin  select @I_vIVIVOFIX = IVIVOFIX from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  end  else  begin  select @I_vIVIVOFIX = IVVARIDX from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  end   if ((@I_vIVIVOFIX = 0) and (@I_vIVDOCTYP = 1))  begin  select @I_vIVIVOFIX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 200  end   if ((@I_vIVIVOFIX = 0) and (@I_vIVDOCTYP = 2))  begin  select @I_vIVIVOFIX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = 1000  end   if (@I_vIVIVOFIX = 0)  begin  select @O_iErrorState = 439     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   select @Location_Segment = Location_Segment from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN  select @ACSGFLOC = ACSGFLOC from IV40100 (nolock) where SETUPKEY = 1   if ((@I_vIVIVOFIX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0))  begin  select  @MAXSEG = max(SGMTNUMB) from SY00300 (nolock)  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @I_vIVIVOFIX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT) + (@MAXSEG - 1) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING, 1, @LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING, @LOFSGMNTALL - @LOFSGMNTEND + 1, @LOFSGMNTALL)  end   select @ACTINDX = isnull(ACTINDX, 0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  select @I_vIVIVOFIX = @ACTINDX  end  end end  if (@SERIALOT = 2 or @SERIALOT = 3) begin  if (@TRXQTY < 0)  begin  select @SUMSERIAL = isnull(sum(SERLTQTY),0) * -1 from IV10002 (nolock) where IVDOCNBR = @I_vIVDOCNBR and ITEMNMBR = @I_vITEMNMBR and IVDOCTYP = @I_vIVDOCTYP and LNSEQNBR = @LNSEQNBR     end  else  begin  select @SUMSERIAL = isnull(sum(SERLTQTY),0) from IV10002 (nolock) where IVDOCNBR = @I_vIVDOCNBR and ITEMNMBR = @I_vITEMNMBR and IVDOCTYP = @I_vIVDOCTYP and LNSEQNBR = @LNSEQNBR    end    if (@SUMSERIAL <> @TRXQTY)  begin  select @O_iErrorState = 1581     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if exists(select 1 from IV10002 (nolock) where IVDOCNBR = @I_vIVDOCNBR and IVDOCTYP = @I_vIVDOCTYP and ITEMNMBR = @I_vITEMNMBR )  begin  select @O_iErrorState = 1629     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'IV_Transaction',  @I_vINDEX1 = @I_vIVDOCNBR,  @I_vINDEX2 = @I_vIVDOCTYP,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus = 0) and (@iError <> 0))  begin  select @iStatus = @iError  end  if ((@iStatus <> 0) or (@iCustomState <> 0))  begin  select @O_iErrorState = 2920   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  insert into IV10001  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  LNSEQNBR,  UOFM,  QTYBSUOM,  TRXQTY,  UNITCOST,  EXTDCOST,  TRXLOCTN,  TRNSTLOC,  TRFQTYTY,  TRTQTYTY,  IVIVINDX,  IVIVOFIX,  DECPLCUR,  DECPLQTY,  USAGETYPE,  Reason_Code  )  select  @I_vIVDOCNBR,     @I_vIVDOCTYP,     @I_vITEMNMBR,     @LNSEQNBR,       @I_vUOFM,      @QTYBSUOM,      @I_vTRXQTY,      @I_vUNITCOST,     case        when @I_vTRXQTY < 0  then 0  else round(@I_vTRXQTY * @I_vUNITCOST,@FUNCUR)  end,  @I_vTRXLOCTN,     '',        0,        0,        @I_vIVIVINDX,     @I_vIVIVOFIX,     @DECPLCUR,       @DECPLQTY,               0,        @I_vReason_Code    if (@@error <> 0) begin  select @O_iErrorState = 289    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vTRXQTY < 0) begin  update IV00102 set ATYALLOC = ATYALLOC - @TRXQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN  if (@@error <> 0)  begin  select @O_iErrorState = 1786     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set ATYALLOC = ATYALLOC - @TRXQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 1787     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  exec @iStatus = taIVTransactionLineInsertPost  @I_vIVDOCNBR,  @I_vIVDOCTYP,  @I_vITEMNMBR,  @I_vReason_Code,  @I_vLNSEQNBR,  @I_vUOFM,  @I_vTRXQTY,  @I_vUNITCOST,  @I_vTRXLOCTN,  @I_vIVIVINDX,  @I_vInventoryAccount,  @I_vIVIVOFIX,  @I_vInventoryAccountOffSet,  @I_vOverrideQty,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus = 0) and (@iError <> 0)) begin  select @iStatus = @iError end if ((@iStatus <> 0) or (@iCustomState <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 290    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'IV_Transaction',  @I_vINDEX1 = @I_vIVDOCNBR,  @I_vINDEX2 = @I_vIVDOCTYP,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus = 0) and (@iError <> 0))  begin  select @iStatus = @iError  end  if ((@iStatus <> 0) or (@iCustomState <> 0))  begin  select @O_iErrorState = 2921   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taIVTransactionLineInsert] TO [DYNGRP]
GO
