SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taIVTransferSerialInsert] @I_vIVDOCNBR char(17),     @I_vITEMNMBR char(30),    @I_vSERLNMBR char(20),    @I_vLNSEQNBR numeric(19,5) = 0,  @I_vLOCNCODE char(10)= '',   @I_vAUTOCREATESERIAL int = 0,  @I_vQTYTYPE tinyint = 1,   @I_vBIN char(15) = '',    @I_vTOBIN char(15) = '',   @I_vTOLOCNCODE char(10) = '',  @I_vCreateBin tinyint = 0,   @I_vOverrideBin tinyint = 0,  @I_vRequesterTrx smallint = 0,  @I_vUSRDEFND1 char(50) = '',  @I_vUSRDEFND2 char(50) = '',  @I_vUSRDEFND3 char(50) = '',  @I_vUSRDEFND4 varchar(8000) = '', @I_vUSRDEFND5 varchar(8000) = '', @O_iErrorState int output,   @oErrString varchar(255) output   with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare   @IVDOCTYP smallint,     @SLTSQNUM int,     @OVRSERLT smallint,    @DATERECD datetime,    @ITMTRKOP smallint,    @UNITCOST numeric(19,5),   @DTSEQNUM numeric(19,5),   @RCTSEQNM int,  @iAddCodeErrState int,    @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @O_oErrorState int,  @iError int,     @ENABLEMULTIBIN tinyint,  @DECPLQTY tinyint,  @QtyAvailBin numeric(19,5),  @sCompanyID int,  @NOTEINDX numeric(19,5),  @iGetNextNoteIdxErrState int,  @USEEXISTINGSNLOTS tinyint,  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select  @IVDOCTYP = 3,      @SLTSQNUM = 0,  @OVRSERLT = 0,  @DATERECD = convert(varchar(12),getdate()),   @ITMTRKOP = 0,  @UNITCOST = 0,  @DTSEQNUM = 0,  @RCTSEQNM = 0,     @iStatus = 0,  @O_iErrorState = 0,    @ENABLEMULTIBIN = 0,  @DECPLQTY = 0,  @QtyAvailBin = 0,  @sCompanyID = 0,  @NOTEINDX  = 0,  @iGetNextNoteIdxErrState = 0,  @USEEXISTINGSNLOTS = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taIVTransferSerialInsertPre  @I_vIVDOCNBR output,  @I_vITEMNMBR output,  @I_vSERLNMBR output,  @I_vLNSEQNBR output,  @I_vLOCNCODE output,  @I_vAUTOCREATESERIAL output,  @I_vQTYTYPE output,  @I_vBIN output,  @I_vTOBIN output,  @I_vTOLOCNCODE output,  @I_vCreateBin output,  @I_vOverrideBin output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 1554    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if ( @I_vIVDOCNBR is null or  @I_vITEMNMBR is null or  @I_vSERLNMBR is null or  @I_vLNSEQNBR is null or  @I_vLOCNCODE is null or  @I_vAUTOCREATESERIAL is null or  @I_vQTYTYPE is null or  @I_vBIN is null or  @I_vTOBIN is null or  @I_vTOLOCNCODE is null or  @I_vCreateBin is null or  @I_vOverrideBin is null or  @I_vRequesterTrx is null or  @I_vUSRDEFND1 is null or  @I_vUSRDEFND2 is null or  @I_vUSRDEFND3 is null or  @I_vUSRDEFND4 is null or  @I_vUSRDEFND5 is null) begin  select @O_iErrorState = 1544    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vIVDOCNBR = '' or  @I_vITEMNMBR = '' or  @I_vSERLNMBR = ''  ) begin  select @O_iErrorState = 1545    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vSERLNMBR = UPPER(@I_vSERLNMBR),  @I_vIVDOCNBR = upper(@I_vIVDOCNBR),  @I_vBIN      = upper(@I_vBIN),  @I_vTOBIN    = upper(@I_vTOBIN)  select @ITMTRKOP = ITMTRKOP,  @DECPLQTY = DECPLQTY  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  if (@I_vITEMNMBR <> '') begin  if (not exists(select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR))  begin  select @O_iErrorState = 2269    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  if (@I_vLOCNCODE <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11837     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vLOCNCODE <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11838     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vAUTOCREATESERIAL < 0 or @I_vAUTOCREATESERIAL > 1)  begin  select @O_iErrorState = 3614     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vRequesterTrx < 0 or @I_vRequesterTrx > 1 ) begin  select @O_iErrorState = 3615     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vAUTOCREATESERIAL = 0 and @I_vSERLNMBR <> '' ) begin   if exists (select 1 from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and SERLNMBR = @I_vSERLNMBR and SERLNSLD = 1)  begin  select @O_iErrorState = 1546    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if ( @I_vAUTOCREATESERIAL = 0 and @I_vSERLNMBR <> '' ) begin   if not exists (select 1 from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and SERLNMBR = @I_vSERLNMBR )  begin  select @O_iErrorState = 1547     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@ITMTRKOP <> 2) begin  select @O_iErrorState = 1548    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @ENABLEMULTIBIN = ENABLEMULTIBIN,  @USEEXISTINGSNLOTS = USEEXISTINGSNLOTS  from IV40100 (nolock)  if (@ENABLEMULTIBIN = 0) begin  select @I_vBIN = '', @I_vTOBIN = '' end  if (@ENABLEMULTIBIN = 1) begin  select @I_vBIN = BIN from IV00200 (nolock)  where ITEMNMBR = @I_vITEMNMBR and SERLNMBR = @I_vSERLNMBR   if (@I_vBIN = '')  begin  select @I_vBIN = 'AUTOCREATE'  end   if (@I_vTOBIN = '')  begin  select @I_vTOBIN = 'AUTOCREATE'  end   if (@I_vOverrideBin not in (0,1))  begin  select @O_iErrorState = 5969     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin not in (0,1))  begin  select @O_iErrorState = 5970     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((@I_vTOLOCNCODE = '') and (@I_vCreateBin = 1))  begin  select @O_iErrorState = 5971     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vAUTOCREATESERIAL = 0)  begin  if not exists (select 1 from IV00200 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  SERLNMBR = @I_vSERLNMBR and  QTYTYPE  = @I_vQTYTYPE and  SERLNSLD = 0 and  BIN = @I_vBIN)  begin  select @O_iErrorState = 5972    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   select @sCompanyID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()  if not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN)  begin  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5973     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin = 1)  begin  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 5974   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @I_vLOCNCODE, @I_vBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 5975     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vTOLOCNCODE and BIN = @I_vTOBIN)  begin  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5976     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin = 1)  begin  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 5977   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @I_vTOLOCNCODE, @I_vTOBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 5978     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = @I_vQTYTYPE)  begin  if (@I_vCreateBin = 1)  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN, @I_vQTYTYPE,0,0  if (@@error <> 0)  begin  select @O_iErrorState = 5979     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5980     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if (@I_vAUTOCREATESERIAL = 0)  begin  select @QtyAvailBin = (QUANTITY - ATYALLOC) from IV00112 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE   if ((@QtyAvailBin < 1) and (@I_vOverrideBin = 0))  begin  select @O_iErrorState = 5981    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  select @UNITCOST =  case  when VCTNMTHD in (4,5) then STNDCOST  else CURRCOST  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  select @DTSEQNUM = isnull(max(DTSEQNUM),0)+1 from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and DATERECD = @DATERECD and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE  if (@I_vRequesterTrx=0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='IV_Transaction',  @I_vINDEX1=@I_vIVDOCNBR,  @I_vINDEX2=@IVDOCTYP,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @O_iErrorState = 2765   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ( @I_vAUTOCREATESERIAL = 1 and @I_vSERLNMBR <> '' ) begin  if not exists( select 1 from IV00200 (nolock) where ITEMNMBR = @I_vITEMNMBR and SERLNMBR = @I_vSERLNMBR )  begin     if ( @I_vLOCNCODE = '' )  begin  select @O_iErrorState = 1556     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@USEEXISTINGSNLOTS = 1)  begin  select @O_iErrorState = 8676    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   select @OVRSERLT = 1    insert IV00200  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  SERLNMBR,  FGDITMNM,  FGSERNBR,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  CMPFINGD,  SERLNSLD,  QTYTYPE,  BIN  )  select  @I_vITEMNMBR,     @I_vLOCNCODE,     convert(varchar(12),getdate()),   @DTSEQNUM,     @I_vSERLNMBR,     '',      '',      @UNITCOST,     @RCTSEQNM,     '',      0,      1,      @I_vQTYTYPE,     @I_vBIN      if (@@error <> 0)  begin  select @O_iErrorState = 1549    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set QTYONHND = QTYONHND + 1 where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 1550     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set QTYONHND = QTYONHND + 1 where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''   if (@@error <> 0)  begin  select @O_iErrorState = 1551    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@ENABLEMULTIBIN = 1)  begin  if (exists(select 1 from IV00112 (nolock)  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE))  begin  update IV00112 set QUANTITY = QUANTITY + 1  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE  end  else  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN, @I_vQTYTYPE,1,0  end  if (@@error <> 0)  begin  select @O_iErrorState = 5982     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end end  select @UNITCOST = UNITCOST,  @DATERECD = DATERECD,  @DTSEQNUM = DTSEQNUM,  @I_vLOCNCODE = LOCNCODE  from IV00200 (nolock)   where ITEMNMBR = @I_vITEMNMBR and   SERLNMBR = @I_vSERLNMBR and  SERLNSLD = 0  if (@I_vLNSEQNBR = 0) begin  select @I_vLNSEQNBR = LNSEQNBR from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  ITEMNMBR = @I_vITEMNMBR   if (@I_vLNSEQNBR = 0)  begin  select @I_vLNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR  end end  if (@SLTSQNUM = 0) begin  select @SLTSQNUM = isnull(max(SLTSQNUM),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR end  if not exists(select 1 from IV10002 (nolock)  where   IVDOCTYP = @IVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  SLTSQNUM = @SLTSQNUM) begin  insert IV10002  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  SERLTNUM,  SERLTQTY,  LNSEQNBR,  SLTSQNUM,  DATERECD,  DTSEQNUM,  OVRSERLT,  QTYSCRAPPED,  FROMBIN,  TOBIN,  MFGDATE,    EXPNDATE    )  select  @I_vIVDOCNBR,    @IVDOCTYP,    @I_vITEMNMBR,    @I_vSERLNMBR,    1,     @I_vLNSEQNBR,    @SLTSQNUM,    @DATERECD,    @DTSEQNUM,    @OVRSERLT,    0,     @I_vBIN,    @I_vTOBIN,    '',     ''      if (@@error <> 0)  begin  select @O_iErrorState = 1552    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00200 set SERLNSLD = 1  where ITEMNMBR = @I_vITEMNMBR and   LOCNCODE = @I_vLOCNCODE and   DATERECD = @DATERECD and  DTSEQNUM = @DTSEQNUM and  QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 1553    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@ENABLEMULTIBIN = 1 and @I_vQTYTYPE = 1)   begin  update IV00112 set ATYALLOC = ATYALLOC + 1  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 5983     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  exec @iStatus = taIVTransferSerialInsertPost  @I_vIVDOCNBR,  @I_vITEMNMBR,  @I_vSERLNMBR,  @I_vLNSEQNBR,  @I_vLOCNCODE,  @I_vAUTOCREATESERIAL,  @I_vQTYTYPE,  @I_vBIN,  @I_vTOBIN,  @I_vTOLOCNCODE,  @I_vCreateBin,  @I_vOverrideBin,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 1555    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx=0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='IV_Transaction',  @I_vINDEX1=@I_vIVDOCNBR,  @I_vINDEX2=@IVDOCTYP,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @O_iErrorState = 2766   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taIVTransferSerialInsert] TO [DYNGRP]
GO
