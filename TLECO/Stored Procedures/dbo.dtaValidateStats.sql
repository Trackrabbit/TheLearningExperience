SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS OFF
GO
 create procedure [dbo].[dtaValidateStats]  @I_cReferenceNumber char(25) = NULL,  @I_sSeries smallint        = NULL,  @I_iAccountIndex        int             = NULL,  @I_iSequenceNumber int  = NULL,  @I_mPostingAmount numeric(19,5) = NULL,  @I_tPostedInSummary tinyint  = NULL,  @I_tRealtimePosting tinyint  = NULL,  @O_tRecordsOK tinyint  = NULL output,  @O_tOptionalNoStats tinyint  = NULL output,  @O_tDistHasMDA tinyint  = NULL output,  @O_tZeroAmtMDAExists tinyint  = NULL output,  @O_cErrorGroupID char(15) = NULL output,  @O_cDocumentNumber char(21) = NULL output,  @O_iErrorState int  = NULL  output  as  declare  @tTransaction tinyint,  @tLoop tinyint,  @iError int,  @iStatus int,  @nGroupAmount numeric(19,5),  @TRUE tinyint,  @FALSE tinyint,  @DTA_STATUS_FIXED smallint,  @DTA_STATUS_REQUIRED smallint,  @DTA_STATUS_OPTIONAL smallint,  @DTA_STATUS_NONE smallint  select  @O_tRecordsOK = 0,  @O_tOptionalNoStats = 0,  @O_tDistHasMDA = 0,  @O_tZeroAmtMDAExists = 0,  @O_iErrorState = 0,  @O_cErrorGroupID = '',  @O_cDocumentNumber = ''  select  @TRUE = 1,  @FALSE = 0,  @iStatus = 0  if @@trancount = 0 begin  select @tTransaction = @TRUE  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if @I_cReferenceNumber is NULL or  @I_sSeries is NULL or  @I_iAccountIndex is NULL or  @I_iSequenceNumber is NULL or  @I_mPostingAmount is NULL or  @I_tRealtimePosting is NULL or  @I_tPostedInSummary is NULL  begin  select @O_iErrorState = 20916  break   end    exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'DTA_STATUS_FIXED',  @DTA_STATUS_FIXED output,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'DTA_STATUS_REQUIRED',  @DTA_STATUS_REQUIRED output,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'DTA_STATUS_OPTIONAL',  @DTA_STATUS_OPTIONAL output,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'DTA_STATUS_NONE',  @DTA_STATUS_NONE output,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   select  @O_cErrorGroupID = min(GROUPID)  from  DTA00300  where  DTA00300.ACTINDX = @I_iAccountIndex  and  (DTA00300.ACCTSTAT  = @DTA_STATUS_FIXED      or DTA00300.ACCTSTAT  = @DTA_STATUS_REQUIRED)   and  NOT EXISTS(  select  1  from  DTA10100  where  DTA10100.DTAREF    = @I_cReferenceNumber  and DTA10100.DTASERIES = @I_sSeries  and DTA10100.SEQNUMBR  = @I_iSequenceNumber  and DTA10100.ACTINDX   = @I_iAccountIndex  and DTA10100.GROUPID   = DTA00300.GROUPID )   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if @O_cErrorGroupID is not NULL  begin  if @I_tRealtimePosting = @TRUE  select @O_iErrorState = -20917   break  end   select  @O_cErrorGroupID = min(GROUPID)  from  DTA00300  where  ACTINDX = @I_iAccountIndex  and  DTA00300.ACCTSTAT  = @DTA_STATUS_NONE   and  EXISTS(  select  1  from  DTA10100  where  DTA10100.DTAREF    = @I_cReferenceNumber  and DTA10100.DTASERIES = @I_sSeries  and DTA10100.ACTINDX   = @I_iAccountIndex  and DTA10100.SEQNUMBR  = @I_iSequenceNumber  and DTA10100.GROUPID   = DTA00300.GROUPID )   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if @O_cErrorGroupID is not NULL  begin  if @I_tRealtimePosting = @TRUE  select @O_iErrorState = -20918   break  end   update  DTA10100  set  GROUPAMT = (select  isnull(sum(CODEAMT),0.00)  from  DTA10200  where  DTAREF    = @I_cReferenceNumber  and DTASERIES = @I_sSeries  and ACTINDX   = @I_iAccountIndex  and SEQNUMBR  = @I_iSequenceNumber  and DTA10100.GROUPID = DTA10200.GROUPID)  where  DTAREF    = @I_cReferenceNumber  and DTASERIES = @I_sSeries  and ACTINDX   = @I_iAccountIndex  and SEQNUMBR  = @I_iSequenceNumber   if @@rowcount > 0  select @O_tDistHasMDA = @TRUE   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if @I_tPostedInSummary = @FALSE  begin  select  @O_cErrorGroupID = min(A.GROUPID)  from  DTA10100 A  LEFT OUTER JOIN DTA00300 B ON (A.GROUPID = B.GROUPID and A.ACTINDX = B.ACTINDX)  where  A.DTAREF    = @I_cReferenceNumber  and A.DTASERIES = @I_sSeries  and A.ACTINDX   = @I_iAccountIndex  and A.SEQNUMBR  = @I_iSequenceNumber  and  ((ISNULL(B.ACCTSTAT,3) <> @DTA_STATUS_OPTIONAL   and A.GROUPAMT <> @I_mPostingAmount )  or  (ISNULL(B.ACCTSTAT,3) = @DTA_STATUS_OPTIONAL   and A.GROUPAMT <> 0.00  and A.GROUPAMT <> @I_mPostingAmount ))   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if @O_cErrorGroupID is not NULL  begin  if @I_tRealtimePosting = @TRUE  select @O_iErrorState = -20919   break  end  end     else   begin  set ROWCOUNT 1   select  @nGroupAmount = ISNULL(A.GROUPAMT,0.00)  from  DTA10100 A  LEFT OUTER JOIN DTA00300 B ON (A.GROUPID = B.GROUPID and A.ACTINDX = B.ACTINDX)  where  A.DTAREF    = @I_cReferenceNumber  and A.DTASERIES = @I_sSeries  and A.ACTINDX   = @I_iAccountIndex  and A.SEQNUMBR  = @I_iSequenceNumber  and  (ISNULL(B.ACCTSTAT,3) <> @DTA_STATUS_OPTIONAL   or  (ISNULL(B.ACCTSTAT,3) = @DTA_STATUS_OPTIONAL   and A.GROUPAMT <> 0) )  ORDER BY  A.DTASERIES,A.DTAREF,A.ACTINDX,A.SEQNUMBR, A.GROUPID   select  @O_cErrorGroupID = A.GROUPID,  @O_cDocumentNumber = A.DOCNUMBR  from  DTA10100 A  LEFT OUTER JOIN DTA00300 B ON (A.GROUPID = B.GROUPID and A.ACTINDX = B.ACTINDX)  where  A.DTAREF    = @I_cReferenceNumber  and A.DTASERIES = @I_sSeries  and A.ACTINDX   = @I_iAccountIndex  and A.SEQNUMBR  = @I_iSequenceNumber  and A.GROUPAMT  <> @nGroupAmount  and  (ISNULL(B.ACCTSTAT,3) <> @DTA_STATUS_OPTIONAL   or  (ISNULL(B.ACCTSTAT,3) = @DTA_STATUS_OPTIONAL   and A.GROUPAMT <> 0) )   set ROWCOUNT 0   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if @O_cErrorGroupID is not NULL  begin  if @I_tRealtimePosting = @TRUE  select @O_iErrorState = -20978   break  end   set ROWCOUNT 1   select  @O_cErrorGroupID = A.GROUPID,  @O_cDocumentNumber = A.DOCNUMBR  from  DTA10100 A  LEFT OUTER JOIN DTA00300 B ON (A.GROUPID = B.GROUPID and A.ACTINDX = B.ACTINDX)  where  A.DTAREF    = @I_cReferenceNumber  and A.DTASERIES = @I_sSeries  and A.ACTINDX   = @I_iAccountIndex  and A.SEQNUMBR  = @I_iSequenceNumber  and  ISNULL(B.ACCTSTAT,3) <> @DTA_STATUS_OPTIONAL   and A.GROUPAMT = 0.00   set ROWCOUNT 0   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if @O_cErrorGroupID is not NULL  begin  if @I_tRealtimePosting = @TRUE  select @O_iErrorState = -20977   break  end   end    if exists(select  1  from  DTA10100 A  LEFT OUTER JOIN DTA00300 B ON (A.GROUPID = B.GROUPID and A.ACTINDX = B.ACTINDX)  where  A.DTAREF    = @I_cReferenceNumber  and A.DTASERIES = @I_sSeries  and A.ACTINDX   = @I_iAccountIndex  and A.SEQNUMBR  = @I_iSequenceNumber  and  ISNULL(B.ACCTSTAT,3) = @DTA_STATUS_OPTIONAL   and A.GROUPAMT = 0.00)  begin  select @O_tOptionalNoStats = 1  end   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   if exists(select  1  from  DTA10100 A  LEFT OUTER JOIN DTA10200 B ON  (B.DTASERIES = A.DTASERIES  and B.DTAREF = A.DTAREF  and B.ACTINDX = A.ACTINDX  and B.SEQNUMBR = A.SEQNUMBR  and B.GROUPID = A.GROUPID)  where  A.DTAREF    = @I_cReferenceNumber  and A.DTASERIES = @I_sSeries  and A.ACTINDX   = @I_iAccountIndex  and A.SEQNUMBR  = @I_iSequenceNumber  and ISNULL(B.CODEAMT,0.00) = 0.00 )  begin  select @O_tZeroAmtMDAExists = 1  end   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0  break   select @O_tRecordsOK = @TRUE  end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[dtaValidateStats] TO [DYNGRP]
GO
