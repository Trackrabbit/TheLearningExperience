SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taCreateSOPDistributions]  @I_vSOPTYPE smallint, @I_vSOPNUMBE char(21), @I_vCUSTNMBR char(15), @I_vCURRNIDX int, @I_vORDOCAMT numeric(19,5), @I_vORACTAMT numeric(19,5), @I_vORMISCAMT numeric(19,5), @I_vORFRTAMT numeric(19,5), @I_vORDISTKN numeric(19,5), @I_vORDAVAMT numeric(19,5), @I_vORDISRTD numeric(19,5), @I_vCURNCYID char(15), @I_vCMPANYID    smallint = 0,   @I_vINTERID char(5) = '',   @I_vRTCLCMTD  smallint = -1,   @I_vXCHGRATE  numeric(19,7)=0,  @I_vTIME1  datetime = '',   @I_vRATETPID  char(15)='',   @I_vEXGTBLID  char(15) = '',   @I_vEXCHDATE  datetime = '',   @I_vTRXSORCE char(13) = '',   @I_vCREATEDIST  int = 1,   @I_vDECPLCUR int = 0,   @I_vORDECPLCUR int, @I_vFNDECPLCUR int, @O_iErrorState int = NULL output, @oErrString varchar(255) output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare   @ORUnitCost numeric(19,5),  @OAMTPAID numeric(19,5),  @DEPINDEX int,  @TRXSORCE char(13),  @O_oErrorState int,  @cDTYPE int,  @cDTAMT numeric(19,5),  @cCTAMT numeric(19,5),  @cORDTAMT numeric(19,5),  @cORCTAMT numeric(19,5),  @iCursorError int,  @cINDEX int,  @iStatus int,  @iError int,  @PYMTTYPE smallint,  @RMDTYPAL smallint,  @CARDNAME char(15),  @CashAccount int,  @CHEKBKID char(15),  @OnHandAccount int,  @ReturnAccount int,  @InUseAccount int,  @InServiceAccount int,  @DamagedAccount int,  @CogsAccount int,  @Quantity numeric(19,5),  @QuantityOnHand numeric(19,5),  @QuantityReturned numeric(19,5),  @QuantityInUse numeric(19,5),  @QuantityInService numeric(19,5),  @QuantityDamaged numeric(19,5),  @OrBoTax numeric(19,5),  @RMTRKDAV int,  @round   numeric(19,5),  @ORround numeric(19,5),  @SEQNUMBR int,  @DistRef char(31),  @CURRNIDX int,  @RNDDIFF int,  @DECPLCUR  int,  @FUNDECPLCUR int,  @FUNLCURR  char(15),  @XCHGRATE  numeric(19,7),  @RTCLCMTD tinyint,  @aaSubLedgerHdrID int,  @ISMCTRX  smallint,  @O_iErrorStateAASub int,  @O_iErrorStringAASub varchar(255),  @itaProcessAnalyticsErrState int,  @itaProcessAnalyticsErrString varchar(8000)  select  @O_iErrorState = 0,  @ORUnitCost = 0,  @OAMTPAID = 0,  @DEPINDEX = 0,  @TRXSORCE = '',  @O_oErrorState = 0,  @cDTYPE = 0,  @cDTAMT = 0,  @cCTAMT = 0,  @cORDTAMT = 0,  @cORCTAMT = 0,  @iCursorError = 0,  @cINDEX = 0,  @iStatus = 0,  @iError = 0,  @PYMTTYPE = 0,  @RMDTYPAL = 0,  @CARDNAME = '',  @CashAccount = 0,  @CHEKBKID = '',  @OnHandAccount = 0,  @ReturnAccount = 0,  @InUseAccount = 0,  @InServiceAccount = 0,  @DamagedAccount = 0,  @CogsAccount = 0,  @Quantity = 0,  @QuantityOnHand = 0,  @QuantityReturned = 0,  @QuantityInUse = 0,  @QuantityInService = 0,  @QuantityDamaged = 0,  @OrBoTax = 0,  @RMTRKDAV = 0,  @round = 0,  @ORround=0,  @DistRef = '',  @SEQNUMBR = 0,  @CURRNIDX=0,  @RNDDIFF = 0,  @DECPLCUR = 0,  @FUNDECPLCUR = 0,  @FUNLCURR = '',  @XCHGRATE = 0,  @aaSubLedgerHdrID = 0,  @ISMCTRX = 1,  @O_iErrorStateAASub = 0,  @O_iErrorStringAASub = '',  @itaProcessAnalyticsErrState = 0,  @itaProcessAnalyticsErrString = ''  if (  @I_vSOPTYPE is null or  @I_vSOPNUMBE is null or  @I_vCUSTNMBR is null or  @I_vCURRNIDX is null or  @I_vORDOCAMT is null or  @I_vORACTAMT is null or  @I_vORMISCAMT is null or  @I_vORFRTAMT is null or  @I_vORDISTKN is null or  @I_vORDAVAMT is null or  @I_vORDISRTD is null or  @I_vCURNCYID is null or  @I_vCMPANYID is null or  @I_vINTERID is null or  @I_vRTCLCMTD is null or  @I_vXCHGRATE is null or  @I_vTIME1 is null or  @I_vRATETPID is null or  @I_vEXGTBLID is null or  @I_vEXCHDATE is null or  @I_vTRXSORCE is null or  @I_vCREATEDIST is null or  @I_vDECPLCUR is null or  @I_vORDECPLCUR is null or  @I_vFNDECPLCUR is null  ) begin  select @O_iErrorState = 130    return (@O_iErrorState) end  if( @I_vCUSTNMBR = '' or  @I_vSOPTYPE  = 0  or  @I_vSOPNUMBE = '') begin  select @O_iErrorState = 132     return (@O_iErrorState) end  select @I_vSOPNUMBE = UPPER(@I_vSOPNUMBE),  @I_vCUSTNMBR = UPPER(@I_vCUSTNMBR)  select @RMTRKDAV = RMTRKDAV from RM40101 (nolock) where SETUPKEY = 1  create table #temp (  DTYPE int, DTAMT numeric(19,5), CTAMT numeric(19,5), ORDTAMT numeric(19,5), ORCTAMT numeric(19,5), DTINDEX int,  ACTNUMST char(129) default '',DEX_ROW_ID int IDENTITY (1, 1)) if (@@error <> 0) begin  select @O_iErrorState = 907    return (@O_iErrorState) end  if (@I_vCREATEDIST = 1) begin  if (@I_vSOPTYPE in (3,6))  begin   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select  9,   0,  0,  case    when isnull(sum(ORSLSTAX+ORFRTTAX+ORMSCTAX), 0) < 0  then isnull(sum(ORSLSTAX+ORFRTTAX+ORMSCTAX), 0) * -1  else 0  end,  case   when isnull(sum(ORSLSTAX+ORFRTTAX+ORMSCTAX), 0) >= 0  then isnull(sum(ORSLSTAX+ORFRTTAX+ORMSCTAX), 0)  else 0  end,  ACTINDX  from SOP10105 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and LNITMSEQ = 0  group by SOPTYPE, SOPNUMBE, ACTINDX   if (@I_vORACTAMT > 0)  begin  if ((@I_vORDISTKN > @I_vORDAVAMT) or (@RMTRKDAV <> 1))  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 2, 0, 0, @I_vORACTAMT, 0, 0  end  else  begin   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 2, 0, 0, @I_vORACTAMT - @I_vORDAVAMT + @I_vORDISTKN, 0, 0  end  end  else  begin  if ((@I_vORDISTKN > @I_vORDAVAMT) or (@RMTRKDAV <> 1))  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 2, 0, 0, 0, (@I_vORACTAMT) * -1, 0  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select  2, 0, 0, 0,  case  when @I_vORDOCAMT < 0  then (@I_vORACTAMT) * -1  else (@I_vORACTAMT - @I_vORDAVAMT + @I_vORDISTKN) * -1  end,  0  end  end   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and (LNITMSEQ not in (0,2147483645,2147483646))))  begin  if (@I_vSOPTYPE in (1,2,4,5))  begin   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 1, 0, 0, 0, isnull(sum(ORBKTSLS + round(ORMRKDAM*QUANTITY,@I_vORDECPLCUR)),0), SLSINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, SLSINDX  end  else   begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 1,   0,   0,    case   when isnull(sum(ORBKTSLS + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)),0) < 0  then isnull(sum(ORBKTSLS + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR))*-1,0)  else   0  end,   case   when isnull(sum(ORBKTSLS + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)),0) > 0   then isnull(sum(ORBKTSLS + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)),0)  else 0  end,   SLSINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, SLSINDX  end   end  else  begin  select @OrBoTax = isnull(sum(ORSLSTAX),0) from SOP10105 (nolock)  where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and BKOUTTAX = 1 and LNITMSEQ <> 0  if (@I_vSOPTYPE in (1,2,4,5))  begin   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 1,  0,  0,  case   when isnull(sum(OXTNDPRC + round(ORMRKDAM*QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0) < 0  then isnull(sum(OXTNDPRC + round(ORMRKDAM*QUANTITY,@I_vORDECPLCUR))*-1 - @OrBoTax,0)  else 0  end,  case   when isnull(sum(OXTNDPRC + round(ORMRKDAM*QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0) > 0  then isnull(sum(OXTNDPRC + round(ORMRKDAM*QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0)  else 0  end,  SLSINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, SLSINDX  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 1,  0,  0,  case   when isnull(sum(OXTNDPRC + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)) - @OrBoTax,0) < 0  then isnull(sum(OXTNDPRC + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR))*-1 - @OrBoTax,0)  else 0  end,  case   when isnull(sum(OXTNDPRC + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)) - @OrBoTax,0) > 0  then isnull(sum(OXTNDPRC + round(ORMRKDAM*(QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)) - @OrBoTax,0)  else 0  end,  SLSINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, SLSINDX  end  end   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and LNITMSEQ = 2147483646))  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 7,  0,  0,  0,  case  when ORBKTFRT > 0  then ORBKTFRT  else @I_vORFRTAMT  end,  0  from SOP10100 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 7,   0,   0,  case   when @I_vORFRTAMT < 0  then @I_vORFRTAMT * -1  else 0  end,  case   when @I_vORFRTAMT >= 0  then @I_vORFRTAMT  else 0  end,  0  end   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and LNITMSEQ = 2147483645))  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 8,  0,  0,  0,  case  when ORBKTMSC > 0  then ORBKTMSC  else @I_vORMISCAMT  end,  0  from SOP10100 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 8,   0,   0,  case   when @I_vORMISCAMT < 0  then @I_vORMISCAMT * -1  else 0  end,  case   when @I_vORMISCAMT >= 0  then @I_vORMISCAMT  else 0  end,  0  end   if ((@I_vORDOCAMT >= 0 ) and (@RMTRKDAV = 1))   begin   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 5, 0, 0, @I_vORDAVAMT - @I_vORDISTKN, 0, 0   end   declare CashAcct INSENSITIVE cursor for  select TRXSORCE,RMDTYPAL,DEPINDEX,PYMTTYPE,CARDNAME,CHEKBKID,OAMTPAID  from SOP10103 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE   open CashAcct  if (@@cursor_rows > 0)  begin  fetch next from CashAcct into @TRXSORCE,@RMDTYPAL,@DEPINDEX,@PYMTTYPE,@CARDNAME,@CHEKBKID,@OAMTPAID  while (@@fetch_status <> -1)  begin  select @CashAccount = 0  if not (@RMDTYPAL = 0 and @TRXSORCE <> '')  begin   if (@PYMTTYPE in (3,6))  begin  select @CashAccount = isnull(ACTINDX,0) from SY03100 (nolock) where CARDNAME = @CARDNAME and RCVBGRBX = 1  if ((@CashAccount = 0) or (@CashAccount is null))  begin  select @CashAccount = isnull(c.ACTINDX,0) from SY03100 s (nolock), CM00100 c (nolock)  where s.CARDNAME = @CARDNAME  and s.RCVBGRBX <> 1  and s.CKBKNUM1 = c.CHEKBKID  end  end  else  begin  select @CashAccount = isnull(RMCSHACC,0) from RM00101 (nolock) where CUSTNMBR = @I_vCUSTNMBR and DEFCACTY = 1  if ((@CashAccount = 0) or (@CashAccount is null))  begin  select @CashAccount = isnull(ACTINDX,0) from CM00100 (nolock) where CHEKBKID = @CHEKBKID  end  end   if ((@CashAccount = 0) or (@CashAccount is null))  begin  select @CashAccount = isnull(ACTINDX,0) from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 50  if (@CashAccount is null)  begin  select @CashAccount = 0  end  end  end   if (@RMDTYPAL <> 0 and @TRXSORCE = '')  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 3 and DTINDEX = @CashAccount))  begin  update #temp set ORDTAMT = ORDTAMT + @OAMTPAID where DTYPE = 3 and DTINDEX = @CashAccount  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX) select 3, 0, 0, @OAMTPAID, 0, @CashAccount  end  end  else  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 21 and DTINDEX = @DEPINDEX ))  begin  update #temp set ORDTAMT = ORDTAMT + @OAMTPAID where DTYPE = 21 and DTINDEX = @DEPINDEX  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX) select 21, 0, 0, @OAMTPAID, 0, @DEPINDEX  end  end  fetch next from CashAcct into @TRXSORCE,@RMDTYPAL,@DEPINDEX,@PYMTTYPE,@CARDNAME,@CHEKBKID,@OAMTPAID   select @CashAccount = 0  end  end  deallocate CashAcct   if (@I_vSOPTYPE in (1,2,4,5))  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 10,  0,  0,   case   when sum(ORMRKDAM) >= 0  then isnull(sum(round(ORMRKDAM * QUANTITY ,@I_vORDECPLCUR)),0)  else 0  end,  case   when sum(ORMRKDAM) < 0  then isnull(sum(round((ORMRKDAM * -1) * QUANTITY ,@I_vORDECPLCUR)),0)  else 0  end,  MKDNINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE   group by SOPTYPE, SOPNUMBE, MKDNINDX  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 10,  0,  0,   case   when sum(ORMRKDAM) >= 0 and sum(QUANTITY-QTYCANCE-QTYTBAOR) >= 0   then isnull(sum(round(ORMRKDAM * (QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)),0)  else 0  end,  case   when sum(ORMRKDAM) < 0   then isnull(sum(round((ORMRKDAM * -1) * (QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)),0)  when sum(ORMRKDAM) > 0 and sum(QUANTITY-QTYCANCE-QTYTBAOR) < 0   then isnull(sum(round((ORMRKDAM * -1) * (QUANTITY-QTYCANCE-QTYTBAOR),@I_vORDECPLCUR)),0)  else 0  end,  MKDNINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE   group by SOPTYPE, SOPNUMBE, MKDNINDX  end   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and (LNITMSEQ not in (0,2147483645,2147483645))))  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 6, 0, 0, isnull(sum(OrigBackoutTradeDisc),0), 0, 0   from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end  else  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 6,  0,  0,  case   when isnull(sum(ORTDISAM),0) > 0  then isnull(sum(ORTDISAM),0)  else 0  end,  case   when isnull(sum(ORTDISAM),0) < 0  then isnull(sum(ORTDISAM)*-1,0)  else 0  end,  0  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 4, 0, 0, @I_vORDISTKN, 0, 0   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 11,   0,  0,  case   when isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0) > 0  then isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0)  else 0  end,  case   when isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0) < 0  then isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR))*-1,0)  else 0  end,  0  from SOP10101 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 12,  0,  0,  case  when isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0) < 0  then isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR))*-1,0)  else 0  end,  case  when isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0) > 0  then isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0)  else 0  end,  0  from SOP10101 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end   if (@I_vSOPTYPE = 4)  begin   if (@I_vORACTAMT < 0)  begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 2, 0, 0, @I_vORACTAMT * -1, 0, 0  end  else   begin  insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 2, 0, 0, 0, @I_vORACTAMT, 0  end   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and (LNITMSEQ not in (0,2147483645,2147483645))))  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)   select 1,   0,   0,   case   when isnull (sum(ORBKTSLS + round(ORMRKDAM * QUANTITY, @I_vORDECPLCUR)),0) < 0  then isnull (sum(ORBKTSLS + round(ORMRKDAM * QUANTITY, @I_vORDECPLCUR)),0) * -1  else 0  end,  case   when isnull (sum(ORBKTSLS + round(ORMRKDAM * QUANTITY, @I_vORDECPLCUR)),0) > 0  then isnull (sum(ORBKTSLS + round(ORMRKDAM * QUANTITY, @I_vORDECPLCUR)),0)   else 0  end,   SLSINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, SLSINDX    end   else  begin  select @OrBoTax = isnull(sum(ORSLSTAX),0) from SOP10105 (nolock)  where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and BKOUTTAX = 1 and LNITMSEQ <> 0   insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)   select 1,   0,   0,   case  when isnull(sum(OXTNDPRC + round(ORMRKDAM * QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0) < 0  then isnull(sum(OXTNDPRC + round(ORMRKDAM * QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0) * -1  else 0   end,   case  when isnull(sum(OXTNDPRC + round(ORMRKDAM * QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0) > 0   then isnull(sum(OXTNDPRC + round(ORMRKDAM * QUANTITY,@I_vORDECPLCUR)) - @OrBoTax,0)  else 0  end,   SLSINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, SLSINDX  end   declare ReturnType INSENSITIVE cursor for  select QUANTITY, ORUNTCST, CSLSINDX,  QTYONHND, QTYRTRND, QTYINUSE, QTYINSVC, QTYDMGED,  INVINDX, RTNSINDX, INUSINDX, INSRINDX, DMGDINDX  from SOP10200 a (nolock), IV00101 b (nolock)  where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and a.ITEMNMBR = b.ITEMNMBR and b.ITEMTYPE not in (3,5)     open ReturnType  if @@cursor_rows > 0  begin  fetch next from ReturnType into  @Quantity, @ORUnitCost, @CogsAccount,  @QuantityOnHand, @QuantityReturned, @QuantityInUse, @QuantityInService, @QuantityDamaged,  @OnHandAccount, @ReturnAccount, @InUseAccount, @InServiceAccount, @DamagedAccount  while (@@fetch_status <> -1)  begin  if (@QuantityOnHand > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 15 and DTINDEX = @OnHandAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityOnHand * @ORUnitCost, @I_vORDECPLCUR)   where DTYPE = 15 and DTINDEX = @OnHandAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 15, 0, 0, 0, round(@QuantityOnHand * @ORUnitCost, @I_vORDECPLCUR), @OnHandAccount  end  end   if (@QuantityReturned > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 16 and DTINDEX = @ReturnAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityReturned * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 16 and DTINDEX = @ReturnAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 16, 0, 0, 0, round(@QuantityReturned * @ORUnitCost, @I_vORDECPLCUR), @ReturnAccount  end  end   if (@QuantityInUse > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 17 and DTINDEX = @InUseAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityInUse * @ORUnitCost,@I_vORDECPLCUR)  where DTYPE = 17 and DTINDEX = @InUseAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 17, 0, 0, 0, round(@QuantityInUse * @ORUnitCost, @I_vORDECPLCUR), @InUseAccount  end  end   if (@QuantityInService > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 18 and DTINDEX = @InServiceAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityInService * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 18 and DTINDEX = @InServiceAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 18, 0, 0, 0, round(@QuantityInService * @ORUnitCost, @I_vORDECPLCUR), @InServiceAccount  end  end   if (@QuantityDamaged > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 19 and DTINDEX = @DamagedAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityDamaged * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 19 and DTINDEX = @DamagedAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 19, 0, 0, 0, round(@QuantityDamaged * @ORUnitCost, @I_vORDECPLCUR), @DamagedAccount  end  end   if (exists (select 1 from #temp (nolock) where DTYPE = 14 and DTINDEX = @CogsAccount))  begin  update #temp set ORCTAMT = ORCTAMT + round(@Quantity * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 14 and DTINDEX = @CogsAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 14, 0, 0, @Quantity * @ORUnitCost,0, @CogsAccount  end   fetch next from ReturnType into  @Quantity, @ORUnitCost, @CogsAccount,  @QuantityOnHand, @QuantityReturned, @QuantityInUse, @QuantityInService, @QuantityDamaged,  @OnHandAccount, @ReturnAccount, @InUseAccount, @InServiceAccount, @DamagedAccount  end   if ((select sum(ORDTAMT - ORCTAMT) from #temp where DTYPE in (14,15,16,17,18,19)) <> 0)  begin  update a set a.ORDTAMT = a.ORDTAMT - t3.diff  from #temp a, (select sum(ORDTAMT - ORCTAMT) as diff from #temp where DTYPE in (14,15,16,17,18,19)) t3,  (select max(DEX_ROW_ID) as row from #temp where DTYPE = 15) t2  where a.DTYPE = 15 and a.DEX_ROW_ID = t2.row  end  end  deallocate ReturnType   declare ReturnType INSENSITIVE cursor for  select QUANTITY, ORUNTCST, CSLSINDX,  QTYONHND, QTYRTRND, QTYINUSE, QTYINSVC, QTYDMGED,  INVINDX, RTNSINDX, INUSINDX, INSRINDX, DMGDINDX  from SOP10200 (nolock)  where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and NONINVEN = 1  open ReturnType  if @@cursor_rows > 0  begin  fetch next from ReturnType into  @Quantity, @ORUnitCost, @CogsAccount,  @QuantityOnHand, @QuantityReturned, @QuantityInUse, @QuantityInService, @QuantityDamaged,  @OnHandAccount, @ReturnAccount, @InUseAccount, @InServiceAccount, @DamagedAccount  while (@@fetch_status <> -1)  begin  if (@QuantityOnHand > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 15 and DTINDEX = @OnHandAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityOnHand * @ORUnitCost, @I_vORDECPLCUR)   where DTYPE = 15 and DTINDEX = @OnHandAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 15, 0, 0, 0, round(@QuantityOnHand * @ORUnitCost, @I_vORDECPLCUR), @OnHandAccount  end  end   if (exists (select 1 from #temp (nolock) where DTYPE = 14 and DTINDEX = @CogsAccount))  begin  update #temp set ORCTAMT = ORCTAMT + round(@Quantity * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 14 and DTINDEX = @CogsAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 14, 0, 0, round(@Quantity * @ORUnitCost,@I_vORDECPLCUR), 0, @CogsAccount  end   fetch next from ReturnType into  @Quantity, @ORUnitCost, @CogsAccount,  @QuantityOnHand, @QuantityReturned, @QuantityInUse, @QuantityInService, @QuantityDamaged,  @OnHandAccount, @ReturnAccount, @InUseAccount, @InServiceAccount, @DamagedAccount  end   if ((select sum(ORDTAMT - ORCTAMT) from #temp where DTYPE in (14,15,16,17,18,19)) <> 0)  begin  update a set a.ORDTAMT = a.ORDTAMT - t3.diff  from #temp a, (select sum(ORDTAMT - ORCTAMT) as diff from #temp where DTYPE in (14,15,16,17,18,19)) t3,  (select max(DEX_ROW_ID) as row from #temp where DTYPE = 15) t2  where a.DTYPE = 15 and a.DEX_ROW_ID = t2.row  end  end  deallocate ReturnType   declare ReturnTypeKit INSENSITIVE cursor for  select QUANTITY, ORUNTCST, CSLSINDX,  QTYONHND, QTYRTRND, QTYINUSE, QTYINSVC, QTYDMGED,  INVINDX, RTNSINDX, INUSINDX, INSRINDX, DMGDINDX  from SOP10200 a (nolock), IV00101 b (nolock)  where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and a.ITEMNMBR = b.ITEMNMBR and CMPNTSEQ <> 0 and b.ITEMTYPE = 3   open ReturnTypeKit  if @@cursor_rows > 0  begin  fetch next from ReturnTypeKit into  @Quantity, @ORUnitCost, @CogsAccount,  @QuantityOnHand, @QuantityReturned, @QuantityInUse, @QuantityInService, @QuantityDamaged,  @OnHandAccount, @ReturnAccount, @InUseAccount, @InServiceAccount, @DamagedAccount  while (@@fetch_status <> -1)  begin  if (@QuantityOnHand > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 15 and DTINDEX = @OnHandAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityOnHand * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 15 and DTINDEX = @OnHandAccount   end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 15, 0, 0, 0, round(@QuantityOnHand * @ORUnitCost, @I_vORDECPLCUR), @OnHandAccount  end  end   if (@QuantityReturned > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 16 and DTINDEX = @ReturnAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityReturned * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 16 and DTINDEX = @ReturnAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)   select 16, 0, 0, 0, round(@QuantityReturned * @ORUnitCost, @I_vORDECPLCUR), @ReturnAccount  end  end   if (@QuantityInUse > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 17 and DTINDEX = @InUseAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityInUse * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 17 and DTINDEX = @InUseAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 17, 0, 0, 0, round(@QuantityInUse * @ORUnitCost, @I_vORDECPLCUR), @InUseAccount  end  end   if (@QuantityInService > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 18 and DTINDEX = @InServiceAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityInService * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 18 and DTINDEX = @InServiceAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 18, 0, 0, 0, round(@QuantityInService * @ORUnitCost, @I_vORDECPLCUR), @InServiceAccount  end  end   if (@QuantityDamaged > 0)  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 19 and DTINDEX = @DamagedAccount))  begin  update #temp set ORDTAMT = ORDTAMT + round(@QuantityDamaged * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 19 and DTINDEX = @DamagedAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 19, 0, 0, 0, round(@QuantityDamaged * @ORUnitCost, @I_vORDECPLCUR), @DamagedAccount  end  end   if (exists (select 1 from #temp (nolock) where DTYPE = 14 and DTINDEX = @CogsAccount))  begin  update #temp set ORCTAMT = ORCTAMT + round(@Quantity * @ORUnitCost, @I_vORDECPLCUR)  where DTYPE = 14 and DTINDEX = @CogsAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 14, 0, 0, round(@Quantity * @ORUnitCost, @I_vORDECPLCUR), 0, @CogsAccount  end   fetch next from ReturnTypeKit into  @Quantity, @ORUnitCost, @CogsAccount,  @QuantityOnHand, @QuantityReturned, @QuantityInUse, @QuantityInService, @QuantityDamaged,  @OnHandAccount, @ReturnAccount, @InUseAccount, @InServiceAccount, @DamagedAccount  end   if ((select sum(ORDTAMT - ORCTAMT) from #temp where DTYPE in (14,15,16,17,18,19)) <> 0)  begin  update a set a.ORDTAMT = a.ORDTAMT - t3.diff  from #temp a, (select sum(ORDTAMT - ORCTAMT) as diff from #temp where DTYPE in (14,15,16,17,18,19)) t3,  (select max(DEX_ROW_ID) as row from #temp where DTYPE = 15) t2  where a.DTYPE = 15 and a.DEX_ROW_ID = t2.row  end  end  deallocate ReturnTypeKit   insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX, ACTNUMST)   select 9, 0, 0,   case   when isnull(sum(a.ORSLSTAX + a.ORFRTTAX + a.ORMSCTAX), 0)<0 then isnull(sum(a.ORSLSTAX + a.ORFRTTAX + a.ORMSCTAX), 0)*-1  when isnull(sum(a.ORSLSTAX + a.ORFRTTAX + a.ORMSCTAX), 0)>0 then 0  else 0  end,   case   when isnull(sum(a.ORSLSTAX + a.ORFRTTAX + a.ORMSCTAX), 0)>0 then isnull(sum(a.ORSLSTAX + a.ORFRTTAX + a.ORMSCTAX), 0)  when isnull(sum(a.ORSLSTAX + a.ORFRTTAX + a.ORMSCTAX), 0)<0 then 0  else 0  end,  a.ACTINDX, b.ACTNUMST  from SOP10105 a(nolock), GL00105 b (nolock) where a.SOPNUMBE = @I_vSOPNUMBE and a.SOPTYPE = @I_vSOPTYPE and   a.LNITMSEQ = 0 and a.ACTINDX = b.ACTINDX  group by a.SOPTYPE, a.SOPNUMBE, a.ACTINDX, b.ACTNUMST order by b.ACTNUMST   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and (LNITMSEQ not in (0,2147483646))))  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 7, 0, 0, 0,  case  when ORBKTFRT > 0  then ORBKTFRT  else @I_vORFRTAMT  end,  0  from SOP10100 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 7, 0, 0, 0, @I_vORFRTAMT, 0  end   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and (LNITMSEQ not in (0,2147483645))))  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 8, 0, 0, 0,  case  when ORBKTMSC > 0  then ORBKTMSC  else @I_vORMISCAMT  end,  0  from SOP10100 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 8, 0, 0, 0, @I_vORMISCAMT, 0  end   declare CashAcct INSENSITIVE cursor for select TRXSORCE,RMDTYPAL,DEPINDEX,PYMTTYPE,CARDNAME,CHEKBKID,OAMTPAID  from SOP10103 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE   open CashAcct  if @@cursor_rows > 0  begin  fetch next from CashAcct into @TRXSORCE,@RMDTYPAL,@DEPINDEX,@PYMTTYPE,@CARDNAME,@CHEKBKID,@OAMTPAID  while (@@fetch_status <> -1)  begin  if not (@RMDTYPAL = 0 and @TRXSORCE <> '')  begin  if (@PYMTTYPE in (3,6))  begin  select @CashAccount = 0  select @CashAccount = isnull(ACTINDX,0) from SY03100 (nolock) where CARDNAME = @CARDNAME and RCVBGRBX = 1  if ((@CashAccount = 0) or (@CashAccount is null))  begin  select @CashAccount = isnull(c.ACTINDX,0) from SY03100 s (nolock), CM00100 c (nolock)  where s.CARDNAME = @CARDNAME  and s.RCVBGRBX <> 1  and s.CKBKNUM1 = c.CHEKBKID  end  end  else  begin  select @CashAccount = isnull(RMCSHACC,0) from RM00101 (nolock) where CUSTNMBR = @I_vCUSTNMBR and DEFCACTY = 1  if ((@CashAccount = 0) or (@CashAccount is null))  begin  select @CashAccount = isnull(ACTINDX,0) from CM00100 (nolock) where CHEKBKID = @CHEKBKID  end  end   if ((@CashAccount = 0) or (@CashAccount is null))  begin  select @CashAccount = isnull(ACTINDX,0) from SY01100 (nolock) where SERIES = 3 and SEQNUMBR = 50  if (@CashAccount is null)  begin  select @CashAccount = 0  end  end  end   if not (@RMDTYPAL = 0 and @TRXSORCE <> '')  begin   if (exists (select 1 from #temp (nolock) where DTYPE = 3 and DTINDEX = @CashAccount))  begin  update #temp set ORCTAMT = ORCTAMT + @OAMTPAID where DTYPE = 3 and DTINDEX = @CashAccount  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 3, 0, 0, @OAMTPAID, 0, @CashAccount  end  end  else  begin  if (exists (select 1 from #temp (nolock) where DTYPE = 21 and DTINDEX = @DEPINDEX ))  begin  update #temp set ORCTAMT = ORCTAMT + @OAMTPAID where DTYPE = 21 and DTINDEX = @DEPINDEX  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 21, 0, 0, @OAMTPAID, 0, @DEPINDEX  end  end   fetch next from CashAcct into @TRXSORCE,@RMDTYPAL,@DEPINDEX,@PYMTTYPE,@CARDNAME,@CHEKBKID,@OAMTPAID   select @CashAccount = 0  end  end  deallocate CashAcct   insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 10,   0,  0,   case   when SUM(ORMRKDAM) >= 0  then isnull(sum(round(ORMRKDAM * QUANTITY, @I_vORDECPLCUR)),0)  else 0  end,  case   when SUM(ORMRKDAM) < 0  then isnull(sum(round((ORMRKDAM * -1) * QUANTITY, @I_vORDECPLCUR)),0)  else 0  end,  MKDNINDX  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  group by SOPTYPE, SOPNUMBE, MKDNINDX   if (exists(select 1 from SOP10105 (nolock) where BKOUTTAX = 1 and SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE and (LNITMSEQ not in (0,2147483645,2147483646))))  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 6, 0, 0, sum(OrigBackoutTradeDisc), 0, 0   from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end  else  begin  insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 6, 0, 0, isnull(sum(ORTDISAM),0), 0, 0  from SOP10200 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end   insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 4, 0, 0, @I_vORDISRTD, 0, 0   insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 11, 0, 0, isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0), 0, 0  from SOP10101 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE   insert #temp (DTYPE, CTAMT, DTAMT, ORCTAMT, ORDTAMT, DTINDEX)  select 12, 0, 0, 0, isnull(sum(round(OCOMMAMT,@I_vORDECPLCUR)),0), 0  from SOP10101 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  end   delete #temp where (ORDTAMT + ORCTAMT = 0.00) or (ORDTAMT is NULL and ORCTAMT is NULL)   if @I_vRTCLCMTD not in (0,1)  begin  if (select COUNT(DTINDEX) from #temp where DTYPE = 14) > 0  begin  update #temp set ORCTAMT = round(ORCTAMT, @I_vORDECPLCUR)  where DTYPE = 14   end  end   update #temp set   ORDTAMT = ROUND(ORDTAMT,@I_vORDECPLCUR),  ORCTAMT = ROUND (ORCTAMT,@I_vORDECPLCUR),  DTAMT =  case  when (@I_vRTCLCMTD = 0)  then round(ORDTAMT * @I_vXCHGRATE,@I_vFNDECPLCUR)  when (@I_vRTCLCMTD = 1)  then round(ORDTAMT / @I_vXCHGRATE,@I_vFNDECPLCUR)  else ROUND(ORDTAMT,@I_vORDECPLCUR)   end,  CTAMT =  case  when (@I_vRTCLCMTD = 0)  then round(ORCTAMT * @I_vXCHGRATE,@I_vFNDECPLCUR)  when (@I_vRTCLCMTD = 1)  then round(ORCTAMT / @I_vXCHGRATE,@I_vFNDECPLCUR)  else ROUND (ORCTAMT,@I_vORDECPLCUR)   end   if (select sum(CTAMT) - ROUND(sum(CTAMT), @I_vFNDECPLCUR) from #temp where DTYPE = 14) <> 0  begin  update #temp set CTAMT = ROUND(CTAMT, @I_vFNDECPLCUR) from #temp where DTYPE = 14  end  if (select sum(CTAMT) - ROUND(sum(CTAMT), @I_vFNDECPLCUR) from #temp where DTYPE = 15) <> 0  begin  update #temp set CTAMT = ROUND(CTAMT, @I_vFNDECPLCUR) from #temp where DTYPE = 15  end   if (select sum(DTAMT) - ROUND(sum(DTAMT), @I_vFNDECPLCUR) from #temp where DTYPE = 15) <> 0  begin  update #temp set DTAMT = ROUND(DTAMT, @I_vFNDECPLCUR) from #temp where DTYPE = 15  end  if (select COUNT(DTINDEX) from #temp where DTYPE = 14) > 0  begin  update #temp set ORCTAMT = round(ORCTAMT, @I_vORDECPLCUR)  where DTYPE = 14   end   if (@I_vRTCLCMTD in(0,1))  begin  select @round = isnull(sum(DTAMT - CTAMT),0) from #temp  if (@round <> 0)  begin  select @RNDDIFF = RNDDIFF from MC40201 (nolock) where CURNCYID = @I_vCURNCYID  if (@RNDDIFF = 0)  begin  select @RNDDIFF = ACTINDX from SY01100 (nolock) where SERIES = 2 and SEQNUMBR = 900  end   insert #temp (DTYPE, DTAMT, CTAMT, ORDTAMT, ORCTAMT, DTINDEX)  select 22,  case  when @round < 0  then @round * -1  else 0  end,  case  when @round > 0  then @round  else 0  end,  0,  0,  @RNDDIFF  end  end   declare DistLine INSENSITIVE cursor for select  DTYPE,  DTAMT,  CTAMT,  ORDTAMT,  ORCTAMT,  DTINDEX   from #temp    open DistLine  select @iCursorError = @@cursor_rows   if (@iCursorError > 0)  begin  fetch next from DistLine into  @cDTYPE,  @cDTAMT,  @cCTAMT,  @cORDTAMT,  @cORCTAMT,  @cINDEX  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 20988    break  end   exec @iStatus = taSopDistributionBuild  @I_vSOPTYPE,  @I_vSOPNUMBE,  @I_vCUSTNMBR,  '',  @cINDEX,  @cDTAMT,  @cCTAMT,  @cORDTAMT,  @cORCTAMT,  @cDTYPE,  @I_vCURRNIDX,  @O_oErrorState output,  @oErrString  output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_oErrorState <> 0)  begin  if (@iStatus <> 0)  begin  select @O_iErrorState = 1404    end  else  begin  select @O_iErrorState = @O_oErrorState  end   deallocate DistLine  return (@O_iErrorState)  end   fetch next from DistLine into  @cDTYPE,  @cDTAMT,  @cCTAMT,  @cORDTAMT,  @cORCTAMT,  @cINDEX   end  end  deallocate DistLine end else if (@I_vCREATEDIST = 0) begin  if (@I_vRTCLCMTD in(0,1))   begin  select @round = isnull(sum(DEBITAMT - CRDTAMNT),0),@ORround = isnull(sum(ORDBTAMT - ORCRDAMT),0), @SEQNUMBR = (MAX(SEQNUMBR)+ 16384) from SOP10102 where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE  if (@round <> 0)and @ORround = 0  begin  select @RNDDIFF = RNDDIFF from MC40201 (nolock) where CURNCYID = @I_vCURNCYID  if (@RNDDIFF = 0)  begin  select @RNDDIFF = ACTINDX from SY01100 (nolock) where SERIES = 2 and SEQNUMBR = 900  end   insert SOP10102  (  ACTINDX,  CRDTAMNT,  CURRNIDX,  DEBITAMT,  DistRef,  DISTTYPE,  ORCRDAMT,  ORDBTAMT,  POSTED,  SEQNUMBR,  SOPNUMBE,  SOPTYPE,  TRXSORCE  )  select  @RNDDIFF,  case  when @round > 0  then @round  else 0  end,  @I_vCURRNIDX,  case  when @round < 0  then @round * -1  else 0  end,  @DistRef,  22,  0,  0,  0,  @SEQNUMBR,  @I_vSOPNUMBE,  @I_vSOPTYPE,  ''  if (@@error <> 0)   begin  select @O_iErrorState = 11463    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return(@O_iErrorState)  end  end  end end  if exists(select 1 from DYNAMICS..sysobjects (nolock) where name  = 'AAG00102') begin  if exists(select 1 from DYNAMICS..AAG00102 (nolock) where CMPANYID = @I_vCMPANYID)  begin   if @I_vRTCLCMTD not in (0,1)  begin  select @I_vXCHGRATE = 0, @I_vXCHGRATE = 0, @I_vTIME1 = '', @ISMCTRX = 0   end  exec @iStatus = aagCreateSubWorkDist  @aaSubLedgerHdrID out,  0,   @I_vSOPTYPE,   @I_vSOPNUMBE,  '',   10102,  11,   @I_vCMPANYID,   0,  @I_vCURNCYID,   @I_vCURRNIDX,   @I_vRATETPID,   @I_vEXGTBLID,   @I_vXCHGRATE,   @I_vEXCHDATE,   @I_vTIME1,  @I_vRTCLCMTD,   0,  0,   @I_vDECPLCUR,   1,   @I_vINTERID,   0,   0,  @I_vTRXSORCE,  @O_iErrorStateAASub output,  @O_iErrorStringAASub output   if (@@error <> 0)   begin  select @O_iErrorState = 8200    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return(@O_iErrorState)  end  if @aaSubLedgerHdrID <> 0  begin  exec @iStatus = taProcessAnalytics  @I_vDOCNMBR = @I_vSOPNUMBE,  @I_vKey = @I_vSOPNUMBE,  @I_vDOCTYPE = 0,  @O_iErrorState = @itaProcessAnalyticsErrState output,  @oErrString = @itaProcessAnalyticsErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@itaProcessAnalyticsErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @itaProcessAnalyticsErrString  select @O_iErrorState = 8201    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return(@O_iErrorState)  end  end  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taCreateSOPDistributions] TO [DYNGRP]
GO
