SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpBatchCleanup]  @I_iSQLSessionID int   = NULL,  @I_cBatchSource char(15) = NULL,  @I_cBatchNumber char(15) = NULL,  @I_cTransactionSource char(25) = NULL,  @I_sTransactionType smallint = NULL,  @I_tPosting tinyint  = NULL,  @I_cUserID char(15) = NULL,  @I_sWindowType smallint = NULL,  @I_cCompanyName char(64) = NULL,  @I_tCalculateGLTaxes tinyint  = NULL,  @O_iErrorState int   = NULL output as  set deadlock_priority low  set arithabort off set nocount on  declare  @TRUE tinyint,  @FALSE tinyint,  @BATCH_AVAILABLE smallint,  @BUSINESS_FORM smallint,  @BUDGET_TRX smallint,   @BATCH_UPDATING smallint,  @BATCH_PRINTING smallint,  @BATCH_UPDATING_INCOMPLETE smallint,  @BATCH_PRINTING_INCOMPLETE smallint,  @BATCH_RECURRING_INCOMPLETE smallint,  @FINANCIAL smallint,  @SERIES_WINDOW smallint,  @MASTER_WINDOW smallint,  @RECOVERY_WINDOW smallint,  @TRACKING_COMPLETE smallint,  @TRACKING_ERROR smallint,  @DELETE_REPORT smallint,  @DISPLAY_REPORT smallint,  @DISPLAY_RECURRING_REPORT smallint,  @SINGLE_USE smallint,  @tMultipleBatches tinyint,  @cBatchNumber char(15),  @tContinue tinyint,  @tLoop tinyint,  @tTransaction tinyint,  @iStatus int,  @iErrorState int,  @iError int,  @sActivityTracking smallint,  @sBatchFrequency smallint,  @tDeleteBatch tinyint,  @sMiscBatchDays smallint,  @iControlTransactions int,  @mControlTotal numeric(19,5),  @mNoteIndex numeric(19,5),  @dLastRecurringPostedDate datetime,  @sActualPostings smallint,  @iNumberOfTransactions int,  @bBatchValid binary(4),  @mBatchTotal numeric(19,5),  @bBatchMessages1 binary(4),  @bBatchMessages2 binary(4),  @sBatchStatus smallint,  @cLockVariable char(15),  @I_sCompanyID smallint,  @RULE_RESERVESTATE smallint  select  @O_iErrorState  = 0,  @iStatus        = 0  if @@trancount <> 0 begin  select @O_iErrorState = 20543  return end  if      @I_iSQLSessionID        is NULL or  @I_cBatchSource         is NULL or  @I_cBatchNumber         is NULL or  @I_cTransactionSource   is NULL or  @I_sTransactionType     is NULL or  @I_tPosting             is NULL or  @I_cUserID              is NULL or  @I_sWindowType          is NULL or  @I_cCompanyName         is NULL begin  select @O_iErrorState = 20487  return end   select  @TRUE     = 1,  @FALSE     = 0,  @BATCH_AVAILABLE  = 0,  @BATCH_UPDATING   = 6,  @BATCH_PRINTING   = 5,  @BATCH_UPDATING_INCOMPLETE = 9,  @BATCH_PRINTING_INCOMPLETE = 8,  @BATCH_RECURRING_INCOMPLETE = 10,   @BUSINESS_FORM    = 5,  @BUDGET_TRX     = 4,   @FINANCIAL     = 2,  @SERIES_WINDOW    = 3,  @MASTER_WINDOW    = 4,  @RECOVERY_WINDOW   = 5,  @TRACKING_COMPLETE   = 2,  @TRACKING_ERROR    = 3,  @DELETE_REPORT    = 1,  @DISPLAY_REPORT    = 0,  @DISPLAY_RECURRING_REPORT = -1,  @SINGLE_USE     = 1  exec @iStatus = DYNAMICS..smGetConstantInt  'RULE_RESERVESTATE',  @RULE_RESERVESTATE output,  @O_iErrorState    output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus) select @I_sCompanyID = (select CMPANYID from DYNAMICS.dbo.SY01500 where CMPNYNAM = @I_cCompanyName)  if @I_cBatchNumber = ''  select @tMultipleBatches = @TRUE else  select @tMultipleBatches = @FALSE   if @tMultipleBatches = @TRUE begin     update SY00500  set  BCHSTTUS = @BATCH_UPDATING  where  BCHSOURC = @I_cBatchSource   and BACHNUMB in (select RSRCID from DYNAMICS.dbo.SY00801  where RULEID  = @RULE_RESERVESTATE  and RSRCSBID = @I_cBatchSource  and CMPANYID = @I_sCompanyID  and USERID  = @I_cUserID  and RSRDESC  = str(@I_iSQLSessionID) )  and MKDTOPST = @TRUE  and USERID = @I_cUserID  and (BCHSTTUS = @BATCH_PRINTING  or BCHSTTUS = @BATCH_UPDATING_INCOMPLETE  or BCHSTTUS = @BATCH_PRINTING_INCOMPLETE)   declare  BatchCleanupCursor   insensitive cursor for select  BACHNUMB,  BACHFREQ,  DELBACH,  MSCBDINC,  CNTRLTRX,  CNTRLTOT,  NOTEINDX,  RCLPSTDT,  NOFPSTGS,  NUMOFTRX,  GLBCHVAL,  BCHTOTAL,  BCHEMSG1,  BCHEMSG2  from  SY00500  where   BCHSOURC = @I_cBatchSource  and BACHNUMB in (select RSRCID from DYNAMICS.dbo.SY00801  where RULEID  = @RULE_RESERVESTATE  and RSRCSBID = @I_cBatchSource  and CMPANYID = @I_sCompanyID  and USERID  = @I_cUserID  and   ( RSRDESC = str(@I_iSQLSessionID)  or RSRDESC not in (select session_id from tempdb..DEX_SESSION) ) )  and MKDTOPST = @TRUE  and USERID  = @I_cUserID  and BCHSTTUS = @BATCH_UPDATING  order by BACHNUMB   open BatchCleanupCursor   if @@cursor_rows = 0  begin  select @O_iErrorState = 20488  deallocate BatchCleanupCursor  return  end end   else begin  if @I_tPosting = @TRUE  begin  update SY00500  set  BCHSTTUS = @BATCH_UPDATING  where  BCHSOURC = @I_cBatchSource   and     BACHNUMB = @I_cBatchNumber  and BACHNUMB in (select RSRCID from DYNAMICS.dbo.SY00801  where RULEID  = @RULE_RESERVESTATE  and RSRCID  = @I_cBatchNumber  and RSRCSBID = @I_cBatchSource  and CMPANYID = @I_sCompanyID  and USERID  = @I_cUserID  and RSRDESC  = str(@I_iSQLSessionID) )  and     (BCHSTTUS = @BATCH_PRINTING  or      BCHSTTUS = @BATCH_UPDATING_INCOMPLETE  or      BCHSTTUS = @BATCH_PRINTING_INCOMPLETE)   if @@rowcount <> 1  begin  select @O_iErrorState = 20486  return  end    end     else  begin  update SY00500  set  BCHSTTUS = @BATCH_AVAILABLE  where  BCHSOURC = @I_cBatchSource   and     BACHNUMB = @I_cBatchNumber  and BACHNUMB in (select RSRCID from DYNAMICS.dbo.SY00801  where RULEID  = @RULE_RESERVESTATE  and RSRCID  = @I_cBatchNumber  and RSRCSBID = @I_cBatchSource  and CMPANYID = @I_sCompanyID  and USERID  = @I_cUserID  and RSRDESC  = str(@I_iSQLSessionID) )  and     BCHSTTUS = @BATCH_PRINTING   if @@rowcount <> 1  begin  select @O_iErrorState = 20820  return  end    end  end   select @tContinue = @TRUE  while (@tContinue = @TRUE) begin  if @tMultipleBatches = @TRUE  begin  fetch next from  BatchCleanupCursor  into  @cBatchNumber,  @sBatchFrequency,  @tDeleteBatch,  @sMiscBatchDays,  @iControlTransactions,  @mControlTotal,  @mNoteIndex,  @dLastRecurringPostedDate,  @sActualPostings,  @iNumberOfTransactions,  @bBatchValid,  @mBatchTotal,  @bBatchMessages1,  @bBatchMessages2   if @@fetch_status <> 0  begin  if @@fetch_status = -1  begin  select @tContinue = @FALSE   break  end  else  begin  select @O_iErrorState = 20819  break  end  end     else  select   @iStatus = 0,  @O_iErrorState = 0,  @tLoop = NULL    end   else  begin  select  @sBatchFrequency         = BACHFREQ,  @tDeleteBatch            = DELBACH,  @sMiscBatchDays          = MSCBDINC,  @iControlTransactions    = CNTRLTRX,  @mControlTotal           = CNTRLTOT,  @mNoteIndex              = NOTEINDX,  @dLastRecurringPostedDate = RCLPSTDT,  @sActualPostings            = NOFPSTGS,  @iNumberOfTransactions  = NUMOFTRX,  @bBatchValid                = GLBCHVAL,  @mBatchTotal                = BCHTOTAL,  @bBatchMessages1   = BCHEMSG1,  @bBatchMessages2   = BCHEMSG2   from  SY00500  where  BCHSOURC = @I_cBatchSource   and BACHNUMB = @I_cBatchNumber  and BACHNUMB in (select RSRCID from DYNAMICS.dbo.SY00801  where RULEID  = @RULE_RESERVESTATE  and RSRCID  = @I_cBatchNumber  and RSRCSBID = @I_cBatchSource  and CMPANYID = @I_sCompanyID  and USERID  = @I_cUserID  and RSRDESC  = str(@I_iSQLSessionID) )   select @cBatchNumber = @I_cBatchNumber   end     begin transaction    select   @cLockVariable =BA.BACHNUMB   from   DYNAMICS.dbo.SY00800 BA with (ROWLOCK XLOCK HOLDLOCK)  where  BA.BCHSOURC = @I_cBatchSource  and     BA.BACHNUMB = ''   select   @cLockVariable = BH.BACHNUMB  from  SY00500 BH with (ROWLOCK XLOCK HOLDLOCK)  where  BH.BACHNUMB =  @I_cBatchNumber   while (@tLoop is NULL)  begin   select @tLoop = 1   delete  DYNAMICS.dbo.SY00801  where  RULEID  = @RULE_RESERVESTATE  and RSRCID  = @cBatchNumber  and RSRCSBID = @I_cBatchSource  and CMPANYID = @I_sCompanyID  and USERID  = @I_cUserID  and RSRDESC  = str(@I_iSQLSessionID)  if @I_tPosting = @TRUE  begin  if @I_sTransactionType = @BUSINESS_FORM  exec @iStatus = glpUpdateQuickBatch  @I_iSQLSessionID,  @I_cBatchSource,  @cBatchNumber,  @O_iErrorState output   else if @I_sTransactionType = @BUDGET_TRX  exec @iStatus = glpUpdateBudgetBatch  @I_iSQLSessionID,  @I_cBatchSource,  @cBatchNumber,  @O_iErrorState output   else  exec @iStatus = glpUpdateBatch  @I_iSQLSessionID,  @I_cBatchSource,  @cBatchNumber,  @I_sTransactionType,   @sBatchFrequency,  @tDeleteBatch,  @sMiscBatchDays,  @iControlTransactions,  @mControlTotal,  @mNoteIndex,  @dLastRecurringPostedDate,  @sActualPostings,  @iNumberOfTransactions,  @I_tCalculateGLTaxes,  @bBatchValid,  @mBatchTotal,  @sBatchStatus output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus =  @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   delete   DYNAMICS.dbo.SY00800  where  BCHSOURC = @I_cBatchSource  and     BACHNUMB = @cBatchNumber  and     WINTYPE  = @I_sWindowType  and     CMPNYNAM = @I_cCompanyName   if @@rowcount <> 1   begin  select @O_iErrorState = 20544  break  end    end    else if @I_sTransactionType = @BUDGET_TRX  begin  update   GL12000  set  GLHDRMSG = 0x00000000,  GLHDRMS2 = 0x00000000  where  BCHSOURC        = @I_cBatchSource  and     BACHNUMB        = @cBatchNumber   if @@rowcount < 1   begin  select @O_iErrorState = 21117  break  end   end    else if @I_sTransactionType <> @BUSINESS_FORM  begin  update   GL10000  set  GLHDRMSG = 0x00000000,  GLHDRMS2 = 0x00000000  where  BCHSOURC        = @I_cBatchSource  and     BACHNUMB        = @cBatchNumber   if @@rowcount < 1   begin  select @O_iErrorState = 20957  break  end   end    if @iStatus = 0 and   @O_iErrorState = 0 and  @I_tPosting = @TRUE  exec @iStatus = smAddPostingSecurityRecord  @FINANCIAL,  @I_cTransactionSource,  @cBatchNumber,  @I_cUserID,  @I_cCompanyName,  @FALSE,  @TRACKING_COMPLETE,  @I_iSQLSessionID,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus =  @iError   end    if @iStatus <> 0 or @O_iErrorState <> 0  begin  rollback transaction   exec @iStatus = glpUpdateBatchStatus  @I_iSQLSessionID,  @cBatchNumber,  @I_cBatchSource,  @BATCH_UPDATING_INCOMPLETE,   @I_cTransactionSource,    @FALSE,       @I_cUserID,      @I_cCompanyName,    @I_sWindowType,     @FALSE,       @TRACKING_ERROR,    @bBatchMessages1,  @bBatchMessages2,  @TRUE,        @tDeleteBatch,  @I_tPosting,  @O_iErrorState,     @iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus =  @iError   if (@O_iErrorState = 0) and (@iErrorState <> 0)  select @O_iErrorState = @iErrorState   end   else   begin  update  PJOURNAL  set   REPORT = @DELETE_REPORT  where  BCHSOURC = @I_cBatchSource  and BACHNUMB = @cBatchNumber  and REPORT = @DISPLAY_REPORT   commit transaction   end    if @tMultipleBatches = @FALSE  select @tContinue = @FALSE  end   if @tMultipleBatches = @TRUE  deallocate BatchCleanupCursor  set deadlock_priority normal set arithabort on set nocount off  return (@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[glpBatchCleanup] TO [DYNGRP]
GO
