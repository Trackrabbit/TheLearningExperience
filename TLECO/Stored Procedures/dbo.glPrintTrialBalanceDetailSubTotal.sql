SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glPrintTrialBalanceDetailSubTotal]  @I_cTableNameDetail char(25) = NULL,  @I_tDateRangeByPeriod tinyint  = NULL,  @I_dStartingDate datetime = NULL,  @I_dEndingDate datetime = NULL,  @I_iStartingPeriod int  = NULL,  @I_iEndingPeriod int  = NULL,  @I_iYear int  = NULL,  @I_tKeepingSummary tinyint  = NULL,  @I_tHistoryYear tinyint  = NULL,  @I_tSubtotalBy tinyint  = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_sPrintCurrencyIn smallint = NULL,  @I_nReportingExchangeRate numeric(15,7) = NULL,  @I_sReportingRateCalcMethod smallint = NULL,  @I_sReportingDecimalPlaces smallint = NULL,  @I_tIncludeMCInfo tinyint  = NULL,  @I_cStartingCurrID char(15) = NULL,  @I_cEndingCurrID char(15) = NULL,  @I_IncludeLedgersStatement char(10) = NULL,   @O_SQL_Error_State                      int             = NULL   output as   declare         @TRUE                   int,  @UNIT_ACCT int,  @FALSE int,  @iStatus int,  @iError int,  @iMsgNum int,  @tPeriodID tinyint,  @tNumberOfMonths tinyint,  @dStartingDate datetime,  @dEndingDate datetime,  @dYearStartingDate datetime,  @dYearEndingDate datetime,  @cDBName char(5),  @cGeneral_Entry char(55),  @cMonthName char(30),  @vInsertStatement1 varchar(255),  @vInsertStatement2 varchar(255),  @vInsertStatement3 varchar(255),  @vInsertStatement4 varchar(900),  @vInsertStatement5 varchar(255),  @vInsertStatement6 varchar(255),  @vUpdateStatement1 varchar(255),  @FINANCIAL int  select @O_SQL_Error_State = 0  if ( @I_tDateRangeByPeriod is NULL   or  @I_dStartingDate is NULL   or  @I_dEndingDate is NULL   or  @I_iStartingPeriod is NULL   or  @I_iEndingPeriod is NULL   or  @I_iYear is NULL   or  @I_tKeepingSummary is NULL   or  @I_tHistoryYear is NULL   or  @I_tSubtotalBy is NULL or  @I_tMCRegistered is NULL or  @I_sPrintCurrencyIn is NULL  or  @I_nReportingExchangeRate is NULL  or  @I_sReportingRateCalcMethod is NULL  or  @I_sReportingDecimalPlaces is NULL or  @I_tIncludeMCInfo is NULL or  @I_IncludeLedgersStatement is NULL)  begin  select          @O_SQL_Error_State = 21021  return end  exec    @iStatus = DYNAMICS..smGetConstantString   'TRX_SOURCE_GL_GENERAL_ENTRY',   @cGeneral_Entry output,   @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'TRUE',  @TRUE                   output,  @O_SQL_Error_State          output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'FINANCIAL',  @FINANCIAL                 output,  @O_SQL_Error_State          output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'UNIT_ACCT',  @UNIT_ACCT                  output,  @O_SQL_Error_State          output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  create table #Period( PeriodName char(21) not null,  PeriodIndex smallint not null,  PeriodStartDate datetime not null,  PeriodEndDate datetime not null)  if @I_tSubtotalBy = 2  begin   select  @dYearStartingDate  = FSTFSCDY,  @dYearEndingDate = LSTFSCDY   from  SY40101  where  YEAR1 = @I_iYear   if @I_dStartingDate > @dYearStartingDate  select @dYearStartingDate = @I_dStartingDate   if @I_dEndingDate < @dYearEndingDate  select @dYearEndingDate = @I_dEndingDate   select @tPeriodID = 1,  @tNumberOfMonths = DATEDIFF(mm,@dYearStartingDate,@dYearEndingDate) + 1   select @cDBName = db_name()   while @tPeriodID <= @tNumberOfMonths   begin   if @tPeriodID = 1  select @dStartingDate = @dYearStartingDate  else   select @dStartingDate = DATEADD(dd,1,@dEndingDate)   if @tPeriodID = @tNumberOfMonths   select @dEndingDate = @dYearEndingDate  else  begin  select @dEndingDate = DATEADD(mm,1,@dStartingDate)  if @tPeriodID = 1  select @dEndingDate = DATEADD(dd,  - DATEPART(dd,@dEndingDate),  @dEndingDate)  else  select @dEndingDate = DATEADD(dd,-1,@dEndingDate)  end   select @iMsgNum = 18617 + DATEPART(mm, @dStartingDate)   exec    @iStatus = DYNAMICS..smGetMsgString   @iMsgNum,  @cDBName,  @cMonthName output,   @O_SQL_Error_State output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)   insert into #Period  select  rtrim(@cMonthName),  @tPeriodID,  @dStartingDate,  @dEndingDate   select @tPeriodID = @tPeriodID + 1  end  end else if @I_tSubtotalBy = 3  begin  create table #Period_Table (  fiscal_year smallint NULL,  fiscal_period smallint NULL,  period_start_date datetime NULL,  period_end_date datetime NULL,  period_closed tinyint NULL  )  exec sm_Build_Period_Table   insert into #Period  select  ISNULL(PERNAME,''),  fiscal_period,  period_start_date,  period_end_date  from  #Period_Table left outer join SY40100 on (fiscal_period = PERIODID   and fiscal_year = YEAR1   and ODESCTN = @cGeneral_Entry  and SERIES = @FINANCIAL)  where  fiscal_year  =  @I_iYear  and fiscal_period  >=  @I_iStartingPeriod  and  fiscal_period  <=  @I_iEndingPeriod    update  #Period  set  PeriodStartDate = @I_dStartingDate  where  PeriodIndex = @I_iStartingPeriod   update  #Period  set  PeriodEndDate = @I_dEndingDate  where  PeriodIndex = @I_iEndingPeriod  end  if @I_tIncludeMCInfo = @TRUE  begin  if @I_tHistoryYear = @TRUE  begin  select @vInsertStatement1 = 'insert into ' + @I_cTableNameDetail + ' select HSTYEAR,JRNENTRY,RCTRXSEQ,SOURCDOC,REFRENCE,  DSCRIPTN,TRXDATE,TRXSORCE,ACTINDX,POLLDTRX,LASTUSER,LSTDTEDT,'  select @vInsertStatement2 = 'USWHPSTD,ORGNTSRC,ORGNATYP,QKOFSET,SERIES,ORTRXTYP,ORCTRNUM,ORMSTRID,ORMSTRNM,  ORDOCNUM,ORPSTDDT,ORTRXSRC,OrigDTASeries,OrigSeqNum,SEQNUMBR,DTA_GL_Status,DTA_Index,CURNCYID,CURRNIDX,  RATETPID,EXGTBLID,XCHGRATE,EXCHDATE,TIME1,RTCLCMTD,NOTEINDX,'  select @vInsertStatement3 = 'ICTRX,ORCOMID,ORIGINJE,PERIODID,CRDTAMNT,DEBITAMT,ORCRDAMT,ORDBTAMT,DOCDATE,PSTGNMBR,PPSGNMBR,DENXRATE,MCTRXSTT,CorrespondingUnit,  #Period.PeriodIndex,#Period.PeriodName,CURNCYID, Ledger_ID  from  GL30000,  #Period,  #TrialBalance'  select @vInsertStatement4 = ' where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and   ((' + str(@I_tSubtotalBy) + ' = 3    and (  (GL30000.PERIODID = #Period.PeriodIndex)   or   (GL30000.PERIODID = 0   and GL30000.TRXDATE >= #Period.PeriodStartDate   and GL30000.TRXDATE <= #Period.PeriodEndDate   and #Period.PeriodIndex = (  select min(PERIODID) from SY40100 where YEAR1 = ' + str(@I_iYear) + '   and SERIES = ' + str(@FINANCIAL) + '   and ODESCTN = ''' + @cGeneral_Entry + '''   and GL30000.TRXDATE >= PERIODDT   and GL30000.TRXDATE <= PERDENDT  )  )  )   )  or  (  ' + str(@I_tSubtotalBy) + ' < 3   and GL30000.TRXDATE between #Period.PeriodStartDate and #Period.PeriodEndDate  )  )  and GL30000.HSTYEAR = '+ ltrim(str(@I_iYear)) +  ' and GL30000.Ledger_ID in ( ' + RTRIM(@I_IncludeLedgersStatement) + ' )'  select @vInsertStatement5 = 'and (GL30000.CURNCYID between '+ '''' + RTRIM(@I_cStartingCurrID) + '''' + ' and '+ '''' + RTRIM(@I_cEndingCurrID) + ''''  select @vInsertStatement6 = ' or #TrialBalance.AccountType = ' + ltrim(str(@UNIT_ACCT)) + ')'  end   else  begin  select @vInsertStatement1 = 'insert into ' + @I_cTableNameDetail + ' select OPENYEAR,JRNENTRY,RCTRXSEQ,SOURCDOC,REFRENCE,  DSCRIPTN,TRXDATE,TRXSORCE,ACTINDX,POLLDTRX,LASTUSER,LSTDTEDT,'  select @vInsertStatement2 = 'USWHPSTD,ORGNTSRC,ORGNATYP,QKOFSET,SERIES,ORTRXTYP,ORCTRNUM,ORMSTRID,ORMSTRNM,  ORDOCNUM,ORPSTDDT,ORTRXSRC,OrigDTASeries,OrigSeqNum,SEQNUMBR,DTA_GL_Status,DTA_Index,CURNCYID,CURRNIDX,  RATETPID,EXGTBLID,XCHGRATE,EXCHDATE,TIME1,RTCLCMTD,NOTEINDX'  select @vInsertStatement3 = ',ICTRX,ORCOMID,ORIGINJE,PERIODID,CRDTAMNT,DEBITAMT,ORCRDAMT,ORDBTAMT,DOCDATE,PSTGNMBR,PPSGNMBR,DENXRATE,MCTRXSTT,CorrespondingUnit,  #Period.PeriodIndex,#Period.PeriodName,CURNCYID, Ledger_ID  from  GL20000,  #Period,  #TrialBalance'  select @vInsertStatement4 = ' where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and   (  (  ' + str(@I_tSubtotalBy) + ' = 3    and (  (GL20000.PERIODID = #Period.PeriodIndex)   or   (GL20000.PERIODID = 0 and GL20000.TRXDATE >= #Period.PeriodStartDate   and GL20000.TRXDATE <= #Period.PeriodEndDate   and #Period.PeriodIndex = (  select min(PERIODID) from SY40100 where YEAR1 = ' + str(@I_iYear) + '   and SERIES = ' + str(@FINANCIAL) + '   and ODESCTN = ''' + @cGeneral_Entry + '''   and GL20000.TRXDATE >= PERIODDT   and GL20000.TRXDATE <= PERDENDT  )  )  )   )  or  (  ' + str(@I_tSubtotalBy) + ' < 3   and GL20000.TRXDATE between #Period.PeriodStartDate and #Period.PeriodEndDate  )  )  and GL20000.OPENYEAR = ' + ltrim(str(@I_iYear)) +   ' and GL20000.Ledger_ID in ( ' + RTRIM(@I_IncludeLedgersStatement) + ' )'  select @vInsertStatement5 = 'and (GL20000.CURNCYID between '+ '''' + RTRIM(@I_cStartingCurrID) + '''' + ' and '+ '''' + RTRIM(@I_cEndingCurrID) + ''''  select @vInsertStatement6 = ' or #TrialBalance.AccountType = ' + ltrim(str(@UNIT_ACCT)) + ')'  end end else  begin  if @I_tHistoryYear = @TRUE  begin  select @vInsertStatement1 = 'insert into ' + @I_cTableNameDetail + ' select HSTYEAR,JRNENTRY,RCTRXSEQ,SOURCDOC,REFRENCE,  DSCRIPTN,TRXDATE,TRXSORCE,ACTINDX,POLLDTRX,LASTUSER,LSTDTEDT,'  select @vInsertStatement2 = 'USWHPSTD,ORGNTSRC,ORGNATYP,QKOFSET,SERIES,ORTRXTYP,ORCTRNUM,ORMSTRID,ORMSTRNM,  ORDOCNUM,ORPSTDDT,ORTRXSRC,OrigDTASeries,OrigSeqNum,SEQNUMBR,DTA_GL_Status,DTA_Index,CURNCYID,CURRNIDX,  RATETPID,EXGTBLID,XCHGRATE,EXCHDATE,TIME1,RTCLCMTD,NOTEINDX,'  select @vInsertStatement3 = 'ICTRX,ORCOMID,ORIGINJE,PERIODID,CRDTAMNT,DEBITAMT,ORCRDAMT,ORDBTAMT,DOCDATE,PSTGNMBR,PPSGNMBR,DENXRATE,MCTRXSTT,CorrespondingUnit,  #Period.PeriodIndex,#Period.PeriodName,'''', Ledger_ID  from  GL30000,  #Period,  #TrialBalance'  select @vInsertStatement4 = ' where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and   (  (  ' + str(@I_tSubtotalBy) + ' = 3    and ((GL30000.PERIODID = #Period.PeriodIndex) or (GL30000.PERIODID = 0 and GL30000.TRXDATE >= #Period.PeriodStartDate and GL30000.TRXDATE <= #Period.PeriodEndDate and #Period.PeriodIndex = (select min(PERIODID) from SY40100 where YEAR1 = ' + str(@I_iYear) + ' and SERIES = ' + str(@FINANCIAL) + ' and ODESCTN = ''' + @cGeneral_Entry + ''' and GL30000.TRXDATE >= PERIODDT and GL30000.TRXDATE <= PERDENDT)))   )  or  (  ' + str(@I_tSubtotalBy) + ' < 3   and GL30000.TRXDATE between #Period.PeriodStartDate and #Period.PeriodEndDate  )  )  and GL30000.HSTYEAR = ' + ltrim(str(@I_iYear))  select @vInsertStatement5 = ' and GL30000.Ledger_ID in ( ' + RTRIM(@I_IncludeLedgersStatement) + ' )'   end   else  begin  select @vInsertStatement1 = 'insert into ' + @I_cTableNameDetail + ' select OPENYEAR,JRNENTRY,RCTRXSEQ,SOURCDOC,REFRENCE,  DSCRIPTN,TRXDATE,TRXSORCE,ACTINDX,POLLDTRX,LASTUSER,LSTDTEDT,'  select @vInsertStatement2 = 'USWHPSTD,ORGNTSRC,ORGNATYP,QKOFSET,SERIES,ORTRXTYP,ORCTRNUM,ORMSTRID,ORMSTRNM,  ORDOCNUM,ORPSTDDT,ORTRXSRC,OrigDTASeries,OrigSeqNum,SEQNUMBR,DTA_GL_Status,DTA_Index,CURNCYID,CURRNIDX,  RATETPID,EXGTBLID,XCHGRATE,EXCHDATE,TIME1,RTCLCMTD,NOTEINDX,'  select @vInsertStatement3 = 'ICTRX,ORCOMID,ORIGINJE,PERIODID,CRDTAMNT,DEBITAMT,ORCRDAMT,ORDBTAMT,DOCDATE,PSTGNMBR,PPSGNMBR,DENXRATE,MCTRXSTT,CorrespondingUnit,  #Period.PeriodIndex,#Period.PeriodName,'''', Ledger_ID  from  GL20000,  #Period,  #TrialBalance'  select @vInsertStatement4 = ' where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and   (  (  ' + str(@I_tSubtotalBy) + ' = 3    and ((GL20000.PERIODID = #Period.PeriodIndex) or (GL20000.PERIODID = 0 and GL20000.TRXDATE >= #Period.PeriodStartDate and GL20000.TRXDATE <= #Period.PeriodEndDate and #Period.PeriodIndex = (select min(PERIODID) from SY40100 where YEAR1 = ' + str(@I_iYear) + ' and SERIES = ' + str(@FINANCIAL) + ' and ODESCTN = ''' + @cGeneral_Entry + ''' and GL20000.TRXDATE >= PERIODDT and GL20000.TRXDATE <= PERDENDT)))   )  or  (  ' + str(@I_tSubtotalBy) + ' < 3   and GL20000.TRXDATE between #Period.PeriodStartDate and #Period.PeriodEndDate  )  )  and GL20000.OPENYEAR = ' + ltrim(str(@I_iYear))  select @vInsertStatement5 = ' and GL20000.Ledger_ID in ( ' + RTRIM(@I_IncludeLedgersStatement) + ' )'  end end  exec (@vInsertStatement1 + @vInsertStatement2 + @vInsertStatement3 + @vInsertStatement4 + @vInsertStatement5 + @vInsertStatement6)  if @I_tIncludeMCInfo = @TRUE  begin  select @vUpdateStatement1 = 'update ' + @I_cTableNameDetail + '  set CURIDKEY = ''''  from ' + @I_cTableNameDetail + ' A, GL00100 B  where B.ACTINDX = A.ACTINDX   and B.ACCTTYPE = 2'   exec (@vUpdateStatement1) end  return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceDetailSubTotal] TO [DYNGRP]
GO
