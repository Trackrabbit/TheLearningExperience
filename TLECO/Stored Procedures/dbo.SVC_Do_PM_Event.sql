SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Do_PM_Event]   (@EquipID integer,  @PMDetailID char(9),  @ScheduleID char(9),  @Frequency integer,  @CheckInterval numeric(19,5),  @CheckDate datetime,  @CurrentDate datetime,  @AnnualPMDate datetime,  @PMType smallint,  @MeterType smallint,  @ServiceType char(11))  AS declare @Meter integer, @NoOfDays integer,@MeterReading integer,@DailyUsage numeric(19,5),  @NewLevel integer,@Valid tinyint,@Performed tinyint,@Level integer,@DateDiff integer,  @Multiplier integer,@WorkingDate datetime,@EquipPMDate datetime declare @YearDiff integer,@CurrentYearDiff integer declare @msg varchar(255) declare @NeedInterval integer declare @AddYear tinyint  declare @LastMeterDate datetime declare @FirstPM tinyint  select @Meter = 1,@Level = 0,@AddYear = 0,  @NoOfDays = DATEDIFF(dd,@CurrentDate,@CheckDate)  IF @MeterType <> 5  BEGIN                                                                      exec SVC_Get_Last_PMDate @EquipID,@PMDetailID,  @ScheduleID,@Frequency,@PMType,  @AnnualPMDate,@EquipPMDate OUTPUT          if exists(select * from SVC00305 where EQUIPID = @EquipID and SCHEDID = @ScheduleID and PMDTLID = @PMDetailID)  select @FirstPM = 0  else  select @FirstPM = 1   select @WorkingDate = @EquipPMDate  if @WorkingDate > @CheckDate  return   select @CurrentYearDiff = DATEDIFF(yy,@CheckDate,@CurrentDate)  select @YearDiff = DATEDIFF(yy,@CurrentDate,@WorkingDate)    if @YearDiff < 0 and @FirstPM = 1  BEGIN  select @AddYear =1   select @WorkingDate = DATEADD(yy,(-@YearDiff),@WorkingDate)  select @YearDiff = DATEDIFF(yy,@CurrentDate,@WorkingDate)   END  if @YearDiff = 0  BEGIN  select @DateDiff = DATEDIFF(dd,@CurrentDate,@WorkingDate)   END  if @AddYear =1 and @DateDiff > 0  begin  select @WorkingDate = DATEADD(yy,-1,@WorkingDate)  select @DateDiff = DATEDIFF(dd,@CurrentDate,@WorkingDate)  end  if @YearDiff = 0 and @DateDiff < 0  BEGIN  select @NeedInterval = CASE       WHEN @MeterType = 1 THEN (-1*@DateDiff ) / (@CheckInterval)  WHEN @MeterType = 2 THEN (-1*@DateDiff /7) / (@CheckInterval)  WHEN @MeterType = 3 THEN (-1*@DateDiff /30)/ (@CheckInterval)  END   if @NeedInterval <= 0 select @NeedInterval=1  else   begin   if @MeterType = 1 begin if @NeedInterval * 1 * @CheckInterval < (-1*@DateDiff) select @NeedInterval = @NeedInterval + 1 end  if @MeterType = 2 begin if @NeedInterval * 7 * @CheckInterval < (-1*@DateDiff) select @NeedInterval = @NeedInterval + 1 end  if @MeterType = 3 begin if @NeedInterval * 30* @CheckInterval < (-1*@DateDiff)-(@NeedInterval*@CheckInterval) select @NeedInterval = @NeedInterval + 1 end  end   select @WorkingDate = CASE   WHEN @MeterType = 1 THEN DATEADD(dd,(@NeedInterval* @CheckInterval),@WorkingDate)  WHEN @MeterType = 2 THEN DATEADD(wk,(@NeedInterval* @CheckInterval),@WorkingDate)  WHEN @MeterType = 3 THEN DATEADD(mm,(@NeedInterval* @CheckInterval),@WorkingDate)  WHEN @MeterType = 4 THEN DATEADD(yy,@CheckInterval,@WorkingDate)  END   if @WorkingDate < @CurrentDate   begin  select @WorkingDate = CASE   WHEN @MeterType = 1 THEN DATEADD(dd,@CheckInterval,@WorkingDate)  WHEN @MeterType = 2 THEN DATEADD(wk, @CheckInterval,@WorkingDate)  WHEN @MeterType = 3 THEN DATEADD(mm, @CheckInterval,@WorkingDate)  WHEN @MeterType = 4 THEN DATEADD(yy,@CheckInterval,@WorkingDate)  END   end  END  else   BEGIN  select @WorkingDate = CASE   WHEN @MeterType = 1 THEN DATEADD(dd,@CheckInterval,@WorkingDate)  WHEN @MeterType = 2 THEN DATEADD(wk,@CheckInterval,@WorkingDate)  WHEN @MeterType = 3 THEN DATEADD(mm,@CheckInterval,@WorkingDate)  WHEN @MeterType = 4 THEN DATEADD(yy,@CheckInterval,@WorkingDate)  END   END  if @WorkingDate > @CheckDate  return    select @NewLevel = 0, @CheckDate = @WorkingDate   if @Frequency = 1                   begin  IF exists( select * from SVC00305 where EQUIPID = @EquipID and  PMDTLID = @PMDetailID and  SCHEDID = @ScheduleID)   return  end   exec SVC_Create_PM_Edit @EquipID,@ServiceType,@PMDetailID,@ScheduleID,@Level,0,@CurrentDate,@CheckDate   return   END   ELSE        BEGIN   exec SVC_Get_Last_Meter @EquipID,@Meter,@MeterReading OUTPUT,   @DailyUsage OUTPUT,   @LastMeterDate OUTPUT   IF @MeterReading is null or @MeterReading = 0   return   select @NoOfDays = DATEDIFF(dd,@LastMeterDate,@CheckDate)  if @NoOfDays <= 0 return  select @NewLevel = (@DailyUsage * @NoOfDays) + @MeterReading   exec SVC_Get_PM_Performed @EquipID,@PMDetailID,@ScheduleID,               @Frequency,@PMType,@MeterType,   @CheckDate,@CheckInterval,@NewLevel,   @Performed OUTPUT,@Level OUTPUT   END  IF @Performed <> 1                      exec SVC_Create_PM_Edit @EquipID,@ServiceType,@PMDetailID,@ScheduleID,@Level,0,@CurrentDate,@CheckDate return(0)    
GO
GRANT EXECUTE ON  [dbo].[SVC_Do_PM_Event] TO [DYNGRP]
GO
