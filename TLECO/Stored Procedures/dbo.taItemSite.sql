SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taItemSite]  @I_vITEMNMBR char(30),    @I_vLOCNCODE char(10),    @I_vBINNMBR char(20) = null,   @I_vPRIMVNDR char(15) = null,   @I_vLanded_Cost_Group_ID char(15) = null, @I_vQTYRQSTN numeric(19,5) = null,  @I_vUpdateIfExists tinyint=1,   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',   @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output, @oErrString varchar(255) output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @ORDERPOLICY smallint,  @NMBROFDYS smallint,  @INCLDDINPLNNNG tinyint,  @ReplenishmentLevel smallint,  @POPOrderMethod smallint,  @POPVendorSelection smallint,  @POPPricingSelection smallint,  @IncludeAllocations tinyint,  @IncludeBackorders tinyint,  @IncludeRequisitions tinyint,  @ORDERMULTIPLE numeric(19,5),  @REPLENISHMENTMETHOD smallint,  @FRCSTCNSMPTNPRD smallint,  @ExistingBINNMBR char(20),  @ExistingPRIMVNDR char(15),  @ExistingLanded_Cost_Group_ID char(15),  @ExistingQTYRQSTN numeric(19,5),  @ExistingTotalQTYRQSTN numeric(19,5),  @DECPLQTY smallint,  @iStatus int,    @iCustomState int,  @iCustomErrString varchar(255),  @iError int,    @O_oErrorState int,  @ITEMSITEINACTIVE tinyint  select  @ORDERPOLICY = 1,  @NMBROFDYS = 1,  @INCLDDINPLNNNG = 1,  @ReplenishmentLevel = 1,  @POPOrderMethod = 1,  @POPVendorSelection = 1,  @POPPricingSelection = 1,  @IncludeAllocations = 1,  @IncludeBackorders = 1,  @IncludeRequisitions = 1,  @ORDERMULTIPLE = 1,  @REPLENISHMENTMETHOD = 2,  @FRCSTCNSMPTNPRD = 3,  @DECPLQTY = 0,  @ExistingPRIMVNDR = '',  @ExistingLanded_Cost_Group_ID= '',  @ExistingQTYRQSTN = 0,  @ExistingTotalQTYRQSTN = 0,  @iStatus = 0,  @iCustomState = 0,  @iCustomErrString = '',  @O_iErrorState = 0,  @O_oErrorState = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is null) begin  select @oErrString = '' end  exec @iStatus = taItemSitePre  @I_vITEMNMBR output,  @I_vLOCNCODE output,  @I_vBINNMBR output,  @I_vPRIMVNDR output,  @I_vLanded_Cost_Group_ID output,  @I_vQTYRQSTN output,  @I_vUpdateIfExists output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if (@iError <> 0 or @iStatus <> 0 or @iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + rtrim(@iCustomErrString)  select @O_iErrorState = 1642    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vITEMNMBR is null or  @I_vLOCNCODE is null or  @I_vUpdateIfExists is null  ) begin  select @O_iErrorState = 1638    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select  @I_vITEMNMBR = upper(@I_vITEMNMBR),  @I_vLOCNCODE = upper(@I_vLOCNCODE),  @I_vPRIMVNDR = upper(@I_vPRIMVNDR),  @I_vLanded_Cost_Group_ID = upper(@I_vLanded_Cost_Group_ID)  if (not exists (select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR)) begin  select @O_iErrorState = 1619     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (not exists (select 1 from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE)) begin  select @O_iErrorState = 1616     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vPRIMVNDR is not null and not exists (select 1 from PM00200 (nolock) where VENDORID = @I_vPRIMVNDR)) begin  select @O_iErrorState = 973     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vLanded_Cost_Group_ID is not null and not exists (select 1 from IV41101 (nolock) where Landed_Cost_Group_ID = @I_vLanded_Cost_Group_ID)) begin  select @O_iErrorState = 974     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vQTYRQSTN < 0) begin  select @O_iErrorState = 975     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @DECPLQTY = DECPLQTY - 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR if ((@I_vQTYRQSTN * power(10,@DECPLQTY)) <> (floor(@I_vQTYRQSTN * power(10,@DECPLQTY)))) begin  select @O_iErrorState = 976     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vUpdateIfExists < 0) or (@I_vUpdateIfExists > 1)) begin  select @O_iErrorState = 1759     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@O_iErrorState = 0) begin  select @ExistingBINNMBR = BINNMBR,  @ExistingPRIMVNDR = PRIMVNDR,  @ExistingLanded_Cost_Group_ID = Landed_Cost_Group_ID,  @ExistingQTYRQSTN = QTYRQSTN  from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE   if (@ExistingBINNMBR is null)  begin  insert IV00102  (  ITEMNMBR,  LOCNCODE,  BINNMBR,  PRIMVNDR,  Landed_Cost_Group_ID,  QTYRQSTN,  RCRDTYPE,  ORDERPOLICY,  NMBROFDYS,  INCLDDINPLNNNG,  ReplenishmentLevel,  POPOrderMethod,  POPVendorSelection,  POPPricingSelection,  IncludeAllocations,  IncludeBackorders,  IncludeRequisitions,  ORDERMULTIPLE,  REPLENISHMENTMETHOD,  FRCSTCNSMPTNPRD,  PICKTICKETITEMOPT,    ITMFRFLG,  BGNGQTY,  LSORDQTY,  LRCPTQTY,  LSTORDDT,  LSORDVND,  LSRCPTDT,  QTYONORD,  QTYBKORD,  QTY_Drop_Shipped,  QTYINUSE,  QTYINSVC,  QTYRTRND,  QTYDMGED,  QTYONHND,  ATYALLOC,  QTYCOMTD,  QTYSOLD,  NXTCNTDT,  NXTCNTTM,  LSTCNTDT,  LSTCNTTM,  STCKCNTINTRVL,  BUYERID,  PLANNERID,  FXDORDRQTY,  ORDRPNTQTY,  MNMMORDRQTY,  MXMMORDRQTY,  SHRINKAGEFACTOR,  PRCHSNGLDTM,  MNFCTRNGFXDLDTM,  MNFCTRNGVRBLLDTM,  STAGINGLDTME,  PLNNNGTMFNCDYS,  DMNDTMFNCPRDS,  CALCULATEATP,  AUTOCHKATP,  PLNFNLPAB,  ORDRUPTOLVL,  SFTYSTCKQTY,  REORDERVARIANCE,  PORECEIPTBIN,  PORETRNBIN,  SOFULFILLMENTBIN,  SORETURNBIN,  BOMRCPTBIN,  MATERIALISSUEBIN,  MORECEIPTBIN,  REPAIRISSUESBIN,  MasterLocationCode,  PurchasePrice,  INCLDMRPMOVEIN,  INCLDMRPMOVEOUT,  INCLDMRPCANCEL,  Move_Out_Fence,  INACTIVE  )  select  @I_vITEMNMBR,     @I_vLOCNCODE,     case      when @I_vBINNMBR is null   then ''  else @I_vBINNMBR  end,  case      when @I_vPRIMVNDR is null   then ''  else @I_vPRIMVNDR  end,  case      when @I_vLanded_Cost_Group_ID is null   then ''  else @I_vLanded_Cost_Group_ID  end,  case      when @I_vQTYRQSTN is null   then 0  else @I_vQTYRQSTN  end,  2,        @ORDERPOLICY,     @NMBROFDYS,     @INCLDDINPLNNNG,    @ReplenishmentLevel,    @POPOrderMethod,    @POPVendorSelection,    @POPPricingSelection,    @IncludeAllocations,    @IncludeBackorders,    @IncludeRequisitions,    @ORDERMULTIPLE,     @REPLENISHMENTMETHOD,    @FRCSTCNSMPTNPRD,    0,      0,      0,      0,      0,      '',      '',      '',      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      '',      '',      '',      '',      0,      '',      '',      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      '',      '',      '',      '',      '',      '',      '',      '',      '',      0,      0,      0,      0,      0,      @ITEMSITEINACTIVE    if (@@error <> 0)  begin  select @O_iErrorState = 977    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  if (@I_vUpdateIfExists = 1)  begin  update IV00102 set  BINNMBR =   case when @I_vBINNMBR is null then @ExistingBINNMBR  else @I_vBINNMBR  end,  PRIMVNDR =  case when @I_vPRIMVNDR is null then @ExistingPRIMVNDR  else @I_vPRIMVNDR  end,  Landed_Cost_Group_ID =  case when @I_vLanded_Cost_Group_ID is null then @ExistingLanded_Cost_Group_ID  else @I_vLanded_Cost_Group_ID  end,  QTYRQSTN =  case when @I_vQTYRQSTN is null then @ExistingQTYRQSTN  else @I_vQTYRQSTN  end  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 978    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  select @O_iErrorState = 979     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   select @ExistingTotalQTYRQSTN = QTYRQSTN  from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''   if (@ExistingTotalQTYRQSTN is null)  begin  insert IV00102   (  ITEMNMBR,  LOCNCODE,  BINNMBR,  PRIMVNDR,  Landed_Cost_Group_ID,  QTYRQSTN,  RCRDTYPE,  ORDERPOLICY,  NMBROFDYS,  INCLDDINPLNNNG,  ReplenishmentLevel,  POPOrderMethod,  POPVendorSelection,  POPPricingSelection,  IncludeAllocations,  IncludeBackorders,  IncludeRequisitions,  ORDERMULTIPLE,  REPLENISHMENTMETHOD,  FRCSTCNSMPTNPRD,  PICKTICKETITEMOPT,     ITMFRFLG,  BGNGQTY,  LSORDQTY,  LRCPTQTY,  LSTORDDT,  LSORDVND,  LSRCPTDT,  QTYONORD,  QTYBKORD,  QTY_Drop_Shipped,  QTYINUSE,  QTYINSVC,  QTYRTRND,  QTYDMGED,  QTYONHND,  ATYALLOC,  QTYCOMTD,  QTYSOLD,  NXTCNTDT,  NXTCNTTM,  LSTCNTDT,  LSTCNTTM,  STCKCNTINTRVL,  BUYERID,  PLANNERID,  FXDORDRQTY,  ORDRPNTQTY,  MNMMORDRQTY,  MXMMORDRQTY,  SHRINKAGEFACTOR,  PRCHSNGLDTM,  MNFCTRNGFXDLDTM,  MNFCTRNGVRBLLDTM,  STAGINGLDTME,  PLNNNGTMFNCDYS,  DMNDTMFNCPRDS,  CALCULATEATP,  AUTOCHKATP,  PLNFNLPAB,  ORDRUPTOLVL,  SFTYSTCKQTY,  REORDERVARIANCE,  PORECEIPTBIN,  PORETRNBIN,  SOFULFILLMENTBIN,  SORETURNBIN,  BOMRCPTBIN,  MATERIALISSUEBIN,  MORECEIPTBIN,  REPAIRISSUESBIN,  MasterLocationCode,  PurchasePrice,  INCLDMRPMOVEIN,  INCLDMRPMOVEOUT,  INCLDMRPCANCEL,  Move_Out_Fence,  INACTIVE  )  select  @I_vITEMNMBR,     '',      '',      '',       '',      case      when @I_vQTYRQSTN is null   then 0  else @I_vQTYRQSTN  end,  1,         @ORDERPOLICY,     @NMBROFDYS,     @INCLDDINPLNNNG,    @ReplenishmentLevel,    @POPOrderMethod,    @POPVendorSelection,    @POPPricingSelection,    @IncludeAllocations,    @IncludeBackorders,    @IncludeRequisitions,    @ORDERMULTIPLE,     @REPLENISHMENTMETHOD,    @FRCSTCNSMPTNPRD,    3,      0,      0,      0,      0,      '',      '',      '',      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      '',      '',      '',      '',      0,      '',      '',      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      '',      '',      '',      '',      '',      '',      '',      '',      '',      0,      0,      0,      0,      0,      @ITEMSITEINACTIVE    if (@@error <> 0)  begin  select @O_iErrorState = 3765    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  update IV00102 set  QTYRQSTN =  case when @I_vQTYRQSTN is null then @ExistingTotalQTYRQSTN  else @ExistingTotalQTYRQSTN + (@I_vQTYRQSTN - @ExistingQTYRQSTN)  end  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 3766    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if @O_iErrorState <> 0  return (@O_iErrorState)  exec @iStatus = taItemSitePost  @I_vITEMNMBR,  @I_vLOCNCODE,  @I_vBINNMBR,  @I_vPRIMVNDR,  @I_vLanded_Cost_Group_ID,  @I_vQTYRQSTN,  @I_vUpdateIfExists,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if (@iError <> 0 or @iStatus <> 0 or @iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 1522    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taItemSite] TO [DYNGRP]
GO
