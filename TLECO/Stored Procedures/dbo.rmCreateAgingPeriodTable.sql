SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[rmCreateAgingPeriodTable]  @I_dAgingDate datetime = NULL,  @O_iErrorState                  int             = NULL output as  declare  @sNumOfPeriods   int,  @tLoopControl tinyint,  @iStatus int,  @sEndingPeriodDays1 smallint,  @sEndingPeriodDays2 smallint,  @sEndingPeriodDays3 smallint,  @sEndingPeriodDays4 smallint,  @sEndingPeriodDays5 smallint,  @sEndingPeriodDays6 smallint,  @sEndingPeriodDays7 smallint,  @dMinDate datetime,  @dMaxDate datetime  select  @iStatus = 0,  @O_iErrorState = 0  while @tLoopControl is NULL begin  select @tLoopControl = 1   select  @sNumOfPeriods = AGPERUSD,  @sEndingPeriodDays1 = AGPEREND_1,  @sEndingPeriodDays2 = AGPEREND_2,  @sEndingPeriodDays3 = AGPEREND_3,  @sEndingPeriodDays4 = AGPEREND_4,  @sEndingPeriodDays5 = AGPEREND_5,  @sEndingPeriodDays6 = AGPEREND_6,  @sEndingPeriodDays7 = AGPEREND_7  from  RM40101 with (NOLOCK)   exec smGetMinDate @dMinDate out  exec smGetMaxDate @dMaxDate out   if @sNumOfPeriods > 1  insert into #EndingPeriodDates  values(1, 0, dateadd(dd,-@sEndingPeriodDays1,@I_dAgingDate), @dMaxDate)  else if @sNumOfPeriods = 1  begin  insert into #EndingPeriodDates  values(1, 0, @dMinDate, @dMaxDate)  break  end   if @sNumOfPeriods > 2  insert into #EndingPeriodDates  values(2, 0, dateadd(dd,-@sEndingPeriodDays2,@I_dAgingDate), dateadd(dd,-(@sEndingPeriodDays1 + 1),@I_dAgingDate) )  else if @sNumOfPeriods = 2  begin  insert into #EndingPeriodDates  values(2, 0, @dMinDate, dateadd(dd,-(@sEndingPeriodDays1 + 1),@I_dAgingDate))  break  end   if @sNumOfPeriods > 3  insert into #EndingPeriodDates  values(3, 0, dateadd(dd,-@sEndingPeriodDays3,@I_dAgingDate), dateadd(dd,-(@sEndingPeriodDays2 + 1),@I_dAgingDate) )  else if @sNumOfPeriods = 3  begin  insert into #EndingPeriodDates  values(3, 0, @dMinDate, dateadd(dd,-(@sEndingPeriodDays2 + 1),@I_dAgingDate) )  break  end   if @sNumOfPeriods > 4  insert into #EndingPeriodDates  values(4, 0, dateadd(dd,-@sEndingPeriodDays4,@I_dAgingDate), dateadd(dd,-(@sEndingPeriodDays3 + 1),@I_dAgingDate) )  else if @sNumOfPeriods = 4  begin  insert into #EndingPeriodDates  values(4, 0, @dMinDate, dateadd(dd,-(@sEndingPeriodDays3 + 1),@I_dAgingDate))  break  end   if @sNumOfPeriods > 5  insert into #EndingPeriodDates  values(5, 0, dateadd(dd,-@sEndingPeriodDays5,@I_dAgingDate), dateadd(dd,-(@sEndingPeriodDays4 + 1),@I_dAgingDate))  else if @sNumOfPeriods = 5  begin  insert into #EndingPeriodDates  values(5, 0, @dMinDate, dateadd(dd,-(@sEndingPeriodDays4 + 1),@I_dAgingDate))  break  end   if @sNumOfPeriods > 6  insert into #EndingPeriodDates  values(6, 0, dateadd(dd,-@sEndingPeriodDays6,@I_dAgingDate), dateadd(dd,-(@sEndingPeriodDays5 + 1),@I_dAgingDate))  else if @sNumOfPeriods = 6  begin  insert into #EndingPeriodDates  values(6, 0, @dMinDate, dateadd(dd,-(@sEndingPeriodDays5 + 1),@I_dAgingDate))  break  end   if @sNumOfPeriods > 7  insert into #EndingPeriodDates  values(7, 0, dateadd(dd,-@sEndingPeriodDays7,@I_dAgingDate), dateadd(dd,-(@sEndingPeriodDays6 + 1),@I_dAgingDate))  else if @sNumOfPeriods = 7  begin  insert into #EndingPeriodDates  values(7, 0, @dMinDate, dateadd(dd,-(@sEndingPeriodDays6 + 1),@I_dAgingDate))  break  end  end   insert into #EndingPeriodDates  values(1, 1, @dMinDate, @dMaxDate)  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[rmCreateAgingPeriodTable] TO [DYNGRP]
GO
