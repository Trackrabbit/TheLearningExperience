SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 Create   procedure [dbo].[aagMLStep5]  @iStoredProcIdx smallint = 0,   @iExpColTable varchar(64) = '',  @iDebug tinyint = 0,   @oQueryTableCmd char(255) = '' out,  @oStatus  smallint = 0 out,  @iBBFFilter varchar(4000) = '' as  set nocount on set dateformat ymd  if @iDebug = 1  begin  print ''  print '************************'  print '** aagMLStep5 started **'  print '************************'  print '' end  declare @retCode int,  @execCmd nvarchar(4000),  @execCmd1 nvarchar(4000),  @execCmd2 nvarchar(4000),  @whereCmd varchar(2000),  @codeNames nvarchar(4000),  @cellNames nvarchar(4000),  @cmd varchar(512),  @levels smallint,  @count smallint,  @cols smallint,  @col smallint,  @rowOrder int,  @colID smallint,  @colDataType smallint,  @basePeriod smallint,  @truncateTo smallint,  @ClearIfNull tinyint,  @decPlaces smallint,  @year smallint,  @p char(1),  @aaOrder int,  @aaBudgetID int,  @dsplLvl int,  @rowOrdernext int,  @colIDs integer,  @aaColDataType int,  @decl nvarchar(4000),  @Cells nvarchar(4000),  @upd nvarchar(4000),  @totQue1 nvarchar(4000),  @totQue nvarchar(4000),  @execCmd3 varchar(8000),  @execCmd4 nvarchar(4000),  @loop   integer,  @loopcount integer,  @Lcodes varchar(8000)  if (@iStoredProcIdx = 5) goto DONE  select  @retCode   = 0,  @oStatus   = 0,  @oQueryTableCmd = '',  @execCmd   = N'',  @execCmd1   = N'',  @execCmd2   = N'',  @whereCmd        = '',  @codeNames = N'',  @cellNames = N'',  @cmd  = '',  @levels  = 0,  @count          = 0,  @cols  = 0,  @col   = 0,  @rowOrder = 0,  @colID  = 0,  @colDataType  = 0,  @basePeriod = 0,  @truncateTo = 0,  @ClearIfNull  = 0,  @decPlaces = 0,  @year  = 0,  @p  = '''',  @dsplLvl = 0,  @rowOrdernext = 0,  @execCmd3       = '',  @Lcodes = ''  if exists(select name from tempdb..sysobjects where name = '##RowCols'    and type = 'U') drop table ##RowCols if exists(select name from tempdb..sysobjects where name = '##CellImport' and type = 'U') drop table ##CellImport  if dbo.aagMLCancelled() = 1 goto DONE  if @iDebug = 1 print '** copy into ##ExpCols **' if not exists(select name from tempdb..sysobjects where name = '##ExpCols'    and type = 'U')  begin  select @execCmd = N'select * into ##ExpCols from ' + @iExpColTable  if @iDebug = 1 print @execCmd  exec @retCode = sp_executesql @execCmd  if (@retCode <> 0) return @retCode end   select @cols = count(*) from ##ExpCols  select @levels = count(*) from ##Lvl  select @truncateTo = aaTruncateTo , @year = YEAR1 , @ClearIfNull = aaClearEmptyCells from ##Options  if dbo.aagMLCancelled() = 1 goto DONE  if @iDebug = 1 print '** initialize ##RowCols **'  select @execCmd =  N'create table ##RowCols(rowOrder int not null, colID int not null, col smallint not null,' + '  colDataType smallint not null, basePeriod smallint not null, aaOrder int,aaBudgetID int ,whereCmd varchar(2000) not null'  if (select aaCodeSpreadUsed from ##Options) = 1  begin  select @execCmd = @execCmd + ',L0_codeID varchar(50) not null'  select @codeNames = ',L0_codeID'  select @whereCmd = ' and ##RowCols.L0_codeID = ##PreCalc.L0_codeID' end   declare c cursor fast_forward for select aaColumn from ##Lvl order by aaOrder  open c  fetch next from c into @col  while (@@fetch_status <> -1)  begin  select @count = @count +1   if @col <> -1   begin  select @execCmd = @execCmd + ',L' + convert(nvarchar(3), @count) + '_codeID varchar(50) not null'   select @codeNames = @codeNames + ',L' + convert(nvarchar(3), @count) + '_codeID'   select @whereCmd = @whereCmd + ' and ##RowCols.L' + convert(varchar(3), @count) + '_codeID = ##PreCalc.L' + convert(varchar(3), @count) + '_codeID'   end   fetch next from c into @col  end  close c  deallocate c  if dbo.aagMLCancelled() = 1 goto DONE   select @execCmd = @execCmd + ' CONSTRAINT U_Budget UNIQUE NONCLUSTERED (rowOrder, colID,aaBudgetID)) ' +  N'insert ##RowCols(rowOrder, colID, col, colDataType, basePeriod, aaOrder ,aaBudgetID,whereCmd' + @codeNames + ')' +  '  select rowOrder, aaColID, aaColumn, aaColDataType,' +  '    case when basePeriod <> 0 then basePeriod else aaBasePeriod end,aaOrder,aaBudgetID,'  if @whereCmd = '' select @execCmd = @execCmd + @p + '' + @p + @codeNames  else select @execCmd = @execCmd + @p + @whereCmd + @p + @codeNames  select @execCmd = @execCmd +  N' from ##Rows, ##ExpCols where lvl = ' + convert(nvarchar(3), @levels) + ' and attachNext = 1' +  '  order by rowOrder, aaColID'   if @iDebug = 1 print @execCmd exec @retCode = sp_executesql @execCmd if (@retCode <> 0) return @retCode  if dbo.aagMLCancelled() = 1 goto DONE  if @iDebug = 1 print '** initialize ##CellImport **'  select @execCmd = N'create table ##CellImport(rowOrder int not null PRIMARY KEY'  select @count = 1 while @count <= @cols begin  if @count <= 149  select @execCmd = @execCmd + ',cell' + convert(nvarchar(3), @count) + ' numeric(19,5) null'  else   select @execCmd2 = @execCmd2 + ',cell' + convert(nvarchar(3), @count) + ' numeric(19,5) null'   select @cellNames = @cellNames + ',cell' + convert(nvarchar(3), @count)  select @count = @count +1 end  if @cols <= 149 select @execCmd = @execCmd + ')' else select @execCmd2 = @execCmd2 + ')'  if @iDebug = 1 begin  print '@execCmd = ' + @execCmd  print '@execCmd2 = ' + @execCmd2  print '@cellNames = ' + @cellNames end if LEN(@execCmd) = 4000  begin   select @oStatus = -30   return @oStatus  end  if LEN(@execCmd2) = 4000  begin   select @oStatus = -30   return @oStatus  end  exec (@execCmd + @execCmd2)  insert ##CellImport(rowOrder)  select rowOrder from ##Rows order by rowOrder   if dbo.aagMLCancelled() = 1 goto DONE  if @iDebug = 1 print '** run cell calculation **'  exec @retCode= aagMLCalcCellAlt @year, @truncateTo, @whereCmd, @ClearIfNull  if @iBBFFilter <> ''  begin  EXEC @retCode = aagMLforBBFAlt  END  if (@retCode <> 0) or (@oStatus <> 0) begin close r deallocate r return @retCode end  declare r cursor fast_forward for select ##RowCols.rowOrder, ##RowCols.colID, ##RowCols.col, ##RowCols.colDataType, ##RowCols.basePeriod, ##RowCols.aaOrder, ##RowCols.aaBudgetID, ##RowCols.whereCmd   from ##RowCols, ##ExpCols where ##ExpCols.aaColID = ##RowCols.colID and aaColFlag <> 0  order by ##RowCols.rowOrder, ##RowCols.colID open r fetch next from r into @rowOrder, @colID, @col, @colDataType, @basePeriod,@aaOrder ,@aaBudgetID,@whereCmd while (@@fetch_status <> -1) and (dbo.aagMLCancelled() = 0) begin  if @iDebug = 1 print '** row: ' + rtrim(convert(varchar(9), @rowOrder)) + ', colID: ' + convert(varchar(3), @colID) +   + ', col: ' + convert(varchar(3), @col) + ' **'   exec @retCode = aagMLCalcCell @rowOrder, @colID, @col, @colDataType,@aaOrder, @aaBudgetID,   @whereCmd, @year, @basePeriod,@truncateTo, @decPlaces,   @ClearIfNull, @iDebug, @oStatus out   if (@retCode <> 0) or (@oStatus <> 0) begin close r deallocate r return @retCode end   fetch next from r into @rowOrder, @colID, @col, @colDataType, @basePeriod, @aaOrder,@aaBudgetID,@whereCmd end close r deallocate r  if exists(select name from tempdb..sysobjects where name = '##CellImport'    and type = 'U')  begin  select @retCode = count(rowOrder) from ##CellImport  if (@retCode = 0)   begin   select @oStatus = -50   return @oStatus   end  end  if @ClearIfNull <> 1  begin  declare r1 cursor fast_forward for select aaColID from ##ExpCols where aaColFlag = 0  order by aaColID  open r1  fetch next from r1 into @colID  while (@@fetch_status <> -1 )  begin  select @execCmd4 =  N'update ##CellImport set cell' + ltrim(str(@colID)) + ' = 0 where cell' + ltrim(str(@colID)) + ' is null ' +  ' and rowOrder in(Select distinct rowOrder from ##PreCellImport where AtcellVal is not null)'  exec (@execCmd4)  fetch next from r1 into @colID  end  close r1  deallocate r1 end if exists(select * from tempdb..sysobjects where name = '##PreCellImport'    and type = 'U') drop table ##PreCellImport  select @loop=(@cols/51.1) +1 select @loopcount=1 while (@loopcount <= @loop) begin  select  @decl='',  @Cells='',   @upd='',  @totQue1='',  @totQue=''  declare p cursor fast_forward for select aaColID,aaColDataType from ##ExpCols where aaColDataType<>3 and aaColID between (((@loopcount-1)*51) +1)  and ((@loopcount)*51) order by aaColID  open p  fetch next from p into @colIDs,@aaColDataType  while (@@fetch_status <> -1)   begin  if @decl <> '' begin select @decl=@decl + ',' end  select @decl=@decl + '@tot' + ltrim(str(@colIDs))+ ' numeric(19,5)'  if @Cells <> '' begin select @Cells=@Cells + ',' end  select @Cells=@Cells + '@tot' + ltrim(str(@colIDs))+ '=isnull(sum(cell' + ltrim(str(@colIDs)) + '),0)'  if @upd <> '' begin select @upd=@upd + ',' end  select @upd=@upd + 'cell' + ltrim(str(@colIDs))+ '=@tot' + ltrim(str(@colIDs))   select @totQue1=@totQue1 +  ',cell' + ltrim(str(@colIDs))  if @ClearIfNull = 1   select @totQue=@totQue +  ',sum(cell' + ltrim(str(@colIDs))+')'  else  select @totQue=@totQue +  ',isnull(sum(cell' + ltrim(str(@colIDs))+'), 0)'  fetch next from p into @colIDs,@aaColDataType  end  close p  deallocate p   if @totQue1=''  begin   if @loopcount = 1   begin  Insert into ##CellImport(rowOrder) Select Max(rowOrder)+1  from ##CellImport  Break   end  end   else  begin  set @retCode  = 0  if @loopcount =1  begin  select @execCmd3 = N' Insert into ##CellImport(rowOrder'+ ltrim(rtrim(@totQue1)) + ')'  select @execCmd3 = @execCmd3 +'Select Max(rowOrder)+1 '+ ltrim(rtrim(@totQue)) + ' from ##CellImport'  end  else  begin  select @execCmd3=N'declare ' + ltrim(rtrim(@decl))  select @execCmd3=@execCmd3 + ' select '+ltrim(rtrim(@Cells))+' from ##CellImport '  select @execCmd3 = @execCmd3 + ' update ##CellImport set '+ ltrim(rtrim(@upd)) + ' where rowOrder = (Select Max(rowOrder) from ##CellImport)'  end   set @oStatus = 0  if LEN(@execCmd3) = 8000   begin   select @oStatus = -30   return @oStatus   end   exec (@execCmd3)   declare r cursor fast_forward for select rowOrder,dsplLvl  from ##RowImport where totals<>0 order by rowOrder  open r  fetch next from r into @rowOrder, @dsplLvl  while (@@fetch_status =0) and (dbo.aagMLCancelled() = 0)  begin  if exists(select top 1 dsplLvl from ##RowImport where dsplLvl = @dsplLvl and rowOrder>@rowOrder)  select Top 1 @rowOrdernext=rowOrder from ##RowImport where dsplLvl=@dsplLvl and rowOrder>@rowOrder  else  select @rowOrdernext=Max(rowOrder) from ##RowImport  select @execCmd3=N'declare ' + ltrim(rtrim(@decl))  select @execCmd3=@execCmd3 + ' select '+ltrim(rtrim(@Cells))+' from ##CellImport where rowOrder  between '+ltrim(str(@rowOrder)) +' and '+ltrim(str(@rowOrdernext))  select @execCmd3 = @execCmd3 + ' update ##CellImport set '+ ltrim(rtrim(@upd)) + ' where rowOrder = ' +ltrim(str(@rowOrder))  set @oStatus = 0  if LEN(@execCmd3) = 8000   begin   select @oStatus = -30   return @oStatus   end   exec (@execCmd3)    fetch next from r into @rowOrder, @dsplLvl  end  close r  deallocate r  end select @loopcount=@loopcount+1 end  if @ClearIfNull = 1 begin  declare p cursor fast_forward for select aaColID,aaColDataType from ##ExpCols order by aaColID  open p  fetch next from p into @colIDs,@aaColDataType  while (@@fetch_status <> -1)   begin  if @aaColDataType<>3  begin  select @execCmd3 = N'update ##CellImport set cell' + ltrim(str(@colIDs))+ ' = NULL where cell' + ltrim(str(@colIDs))+ ' = 0'  set @oStatus = 0  if LEN(@execCmd3) = 8000   begin   select @oStatus = -30   return @oStatus   end   exec (@execCmd3)  end  fetch next from p into @colIDs,@aaColDataType  end  close p  deallocate p end  DONE:  if exists(select name from tempdb..sysobjects where name = '##CellImport'    and type = 'U')  select @oQueryTableCmd = 'select * from ##CellImport order by rowOrder'   if @iDebug = 1   begin  print ''  print '*************************'  print '** aagMLStep5 finished **'  print '*************************'  print ''  end  set nocount off  return 0    
GO
GRANT EXECUTE ON  [dbo].[aagMLStep5] TO [DYNGRP]
GO
