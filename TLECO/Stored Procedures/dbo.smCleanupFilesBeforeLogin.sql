SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[smCleanupFilesBeforeLogin]  @I_iSQLSessionID int  = NULL,  @I_cUserID char(15) = NULL,  @I_cCompanyName char(64) = NULL,  @I_tCleanupEmailStmtStatusReport tinyint = NULL,  @I_tProcessed tinyint output,  @O_sRecovered smallint = NULL output,  @O_tReceivingBatchRecovered tinyint  = NULL output,  @O_tICReceivingBatchRecovered tinyint  = NULL output,  @O_tPMTrxRecovered tinyint  = NULL output,  @O_tRMTrxRecovered tinyint  = NULL output,  @O_tSOPTrxRecovered tinyint  = NULL output,  @O_iErrorState int  = NULL output as  declare  @cBatchNumber char(15),  @cBatchSource char(15),  @sBatchStatus smallint,  @sTempStatus smallint,  @cBatchActivityKey char(50),  @tTransaction tinyint,  @tLoop tinyint,  @iError int,  @iStatus int,  @cNormal varchar(255),  @cClearing varchar(255),  @cXGL_Clearing varchar(255),  @cXGL_Normal varchar(255),  @cXGL_Business varchar(255),  @cQuick varchar(255),  @cTransactionSource varchar(255),  @cSOPEntry varchar(255),  @cXSOPEntry varchar(255),  @cSOPVoid varchar(255),  @cXPM_Cchecks varchar(255),   @cPM_Trxent varchar(255),   @cPM_Payment varchar(255),   @cXPM_Trxent varchar(255),   @cRM_Sales varchar(255),   @cRM_Cash varchar(255),   @cXRM_Sales varchar(255),   @cXRM_Cash varchar(255),   @iSQLSessionID int,  @TRUE tinyint,  @FALSE tinyint,  @DELETE_REPORT smallint,  @DISPLAY_REPORT smallint,  @FINANCIAL smallint,  @TRACKING_ERROR smallint,  @POSTED smallint,  @BATCH_RECOVERED smallint,  @REALTIME_RECOVERED smallint,  @BATCH_AVAILABLE smallint,  @BATCH_POSTING smallint,  @BATCH_PRINTING smallint,  @BATCH_UPDATING smallint,  @BATCH_RECEIVING smallint,  @BATCH_POSTING_INCOMPLETE smallint,  @BATCH_PRINTING_INCOMPLETE smallint,  @BATCH_UPDATING_INCOMPLETE smallint,  @CHECK_PROCESSING smallint,   @CHECK_ALIGNMENT smallint,   @CHECK_PRINTING smallint,   @CHECK_REPRINT_ALIGNMENT smallint,   @CHECK_VOIDING smallint,   @CHECK_REPRINTING smallint,   @REMITTANCE_PROCESSING smallint,   @REMITTANCE_ALIGNMENT smallint,   @REMITTANCE_PRINTING smallint,   @CHECK_PROCESSING_INTERRUPTED smallint,   @CHECK_ALIGNMENT_INTERRUPTED smallint,   @CHECK_PRINTING_INTERRUPTED smallint,   @CHK_REPRINT_ALIGNMENT_INTERR smallint,   @CHECK_VOIDING_INTERRUPTED smallint,   @CHECK_REPRINTING_INTERRUPTED smallint,   @REMITTANCE_PROCESSING_INTERR smallint,   @REMITTANCE_ALIGNMENT_INTERR smallint,   @REMITTANCE_PRINTING_INTERR smallint,   @PURCHASING smallint,   @SALES smallint,  @sSeries smallint,  @sPurchasing smallint,   @sWinType smallint,   @sCompanyID smallint,   @tPosting    tinyint,   @cUserID char(15),  @iRowCount integer  select  @O_sRecovered = 0,  @O_tReceivingBatchRecovered = 0,  @O_tICReceivingBatchRecovered = 0,  @O_iErrorState = 0,  @tTransaction = 0,  @O_tPMTrxRecovered = 0,  @O_tRMTrxRecovered = 0,  @O_tSOPTrxRecovered = 0,  @sCompanyID = (select   CMPANYID   from   DYNAMICS..SY01500   where   CMPNYNAM = @I_cCompanyName)  if @I_iSQLSessionID is NULL or  @I_cUserID is NULL or  @I_cCompanyName is NULL or   @I_tCleanupEmailStmtStatusReport is NULL begin  select @O_iErrorState = 20648  return end   select @tLoop = 0 while (@tLoop = 0) begin  select   @TRUE = 1,  @FALSE = 0,  @tLoop = 1   exec @iStatus = DYNAMICS..smGetConstantInt  'DELETE_REPORT',  @DELETE_REPORT output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'DISPLAY_REPORT',  @DISPLAY_REPORT output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_AVAILABLE',  @BATCH_AVAILABLE output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'FINANCIAL',  @FINANCIAL output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'TRACKING_ERROR',  @TRACKING_ERROR output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_POSTING',  @BATCH_POSTING output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_PRINTING',  @BATCH_PRINTING output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_UPDATING',  @BATCH_UPDATING output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_RECEIVING',  @BATCH_RECEIVING output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_POSTING_INCOMPLETE',  @BATCH_POSTING_INCOMPLETE output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_PRINTING_INCOMPLETE',  @BATCH_PRINTING_INCOMPLETE output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_UPDATING_INCOMPLETE',  @BATCH_UPDATING_INCOMPLETE output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'POSTED',  @POSTED output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'BATCH_RECOVERED',  @BATCH_RECOVERED output,  @O_iErrorState   output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REALTIME_RECOVERED',  @REALTIME_RECOVERED output,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_PROCESSING',  @CHECK_PROCESSING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_ALIGNMENT',  @CHECK_ALIGNMENT output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_PRINTING',  @CHECK_PRINTING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_REPRINT_ALIGNMENT',  @CHECK_REPRINT_ALIGNMENT output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_VOIDING',  @CHECK_VOIDING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_REPRINTING',  @CHECK_REPRINTING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REMITTANCE_PROCESSING',  @REMITTANCE_PROCESSING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REMITTANCE_ALIGNMENT',  @REMITTANCE_ALIGNMENT output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REMITTANCE_PRINTING',  @REMITTANCE_PRINTING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_PROCESSING_INTERRUPTED',  @CHECK_PROCESSING_INTERRUPTED output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_ALIGNMENT_INTERRUPTED',  @CHECK_ALIGNMENT_INTERRUPTED output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_PRINTING_INTERRUPTED',  @CHECK_PRINTING_INTERRUPTED output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_REPRINT_ALIGNMENT_INTERRUPTED',  @CHK_REPRINT_ALIGNMENT_INTERR output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_VOIDING_INTERRUPTED',  @CHECK_VOIDING_INTERRUPTED output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'CHECK_REPRINTING_INTERRUPTED',  @CHECK_REPRINTING_INTERRUPTED output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REMITTANCE_PROCESSING_INTERRUPTED',  @REMITTANCE_PROCESSING_INTERR output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REMITTANCE_ALIGNMENT_INTERRUPTED',  @REMITTANCE_ALIGNMENT_INTERR output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'REMITTANCE_PRINTING_INTERRUPTED',  @REMITTANCE_PRINTING_INTERR output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'PURCHASING',  @PURCHASING output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantInt  'SALES',  @SALES output,  @O_iErrorState    output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break end  if @iStatus = 0 and @iError <> 0   select @iStatus = @iError if @iStatus <> 0 or @O_iErrorState <> 0  return(@iStatus)  select @tLoop = 0  while (@tLoop = 0) begin   select @tLoop = 1  exec @iStatus = DYNAMICS..smGetConstantString  'GL_NORMAL_STR',   @cNormal output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'XGL_NORMAL_STR',   @cXGL_Normal output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'GL_CLEARING_STR',   @cClearing output,  @O_iErrorState output  select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break  exec @iStatus = DYNAMICS..smGetConstantString  'XGL_CLEARING_STR',   @cXGL_Clearing output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'GL_BUSINESS_STR',   @cQuick output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'XGL_BUSINESS_STR',   @cXGL_Business output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'XPM_CCHECKS_STR',   @cXPM_Cchecks output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'PM_TRXENT_STR',   @cPM_Trxent output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'PM_PAYMENT_STR',   @cPM_Payment output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'XXPM_TRXENT_STR',   @cXPM_Trxent output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'RM_SALES_STR',   @cRM_Sales output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'RM_CASH_STR',   @cRM_Cash output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'XRM_SALES_STR',   @cXRM_Sales output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'XRM_CASH_STR',   @cXRM_Cash output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break   exec @iStatus = DYNAMICS..smGetConstantString  'BATCH_SOURCE_SOP_ENTRY',      @cSOPEntry output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break  select @cXSOPEntry = '*'+@cSOPEntry    exec @iStatus = DYNAMICS..smGetConstantString  'BATCH_SOURCE_SOP_VOID',      @cSOPVoid output,  @O_iErrorState output   select @iError = @@error  if @iStatus <> 0 or @iError <> 0 or @O_iErrorState <> 0  break end  if @iStatus = 0 and @iError <> 0   select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  return(@iStatus)  delete  SY00500 where  BCHSOURC = @I_cUserID  delete  GL10000 where  BCHSOURC = @I_cUserID  delete   SY02800 where  USERID = @I_cUserID  delete   DYNAMICS..UPR10300 where  CMPANYID = @sCompanyID  and  USERID = @I_cUserID   delete   CM00002 where  USERID = @I_cUserID  delete   GL50400 where  USERID = @I_cUserID  delete   DYNAMICS..SY01301 where  USERID = @I_cUserID  delete   AF50000 where  USERID = @I_cUserID  delete   AF50001 where  USERID = @I_cUserID  delete   AF50300 where  USERID = @I_cUserID  delete   AF50004 where  USERID = @I_cUserID  delete   DYNAMICS..SY00801 where  USERID = @I_cUserID and  CMPANYID = @sCompanyID  delete   PM81000 where  USERID = @I_cUserID and  CMPNYNAM = @I_cCompanyName  delete   RM50100 where  USERID = @I_cUserID  if @I_tCleanupEmailStmtStatusReport =  @TRUE begin  delete   RM50101  where  USERID = @I_cUserID   delete   RM50102  where  USERID = @I_cUserID end  delete  SY04912 where  Identity_Column in (select Identity_Column from SY04911  where  USERID = @I_cUserID)  delete   SY04911 where  USERID = @I_cUserID  delete   POP70200 where  USERID = @I_cUserID delete   SOP50700 where  USERID = @I_cUserID  delete   PM80950 where  USERID = @I_cUserID delete   PM80960 where  USERID = @I_cUserID  update   GL70500 set  GL70500.ACCLSTAT = GL70500.USEACCEL from  AF40202 where  (AF40202.USERID = @I_cUserID) and  (GL70500.RPTGRIND = 1) and  (GL70500.RTPACHIN = 1) and  (GL70500.REPORTID = AF40202.REPORTID)  delete   AF40204 from   AF40202 where  (AF40202.USERID = @I_cUserID) and  (AF40204.REPORTID = AF40202.REPORTID)  delete   AF40202 where  USERID = @I_cUserID  delete DYNAMICS..SY04000 where  USERID  = @I_cUserID and CMPNYNAM = @I_cCompanyName  declare Batch_Activity_Cursor insensitive cursor for  select   WINTYPE,  BACHNUMB,   BCHSOURC,  POSTING  from  DYNAMICS..SY00800  where  USERID = @I_cUserID and  CMPNYNAM = @I_cCompanyName   open Batch_Activity_Cursor  fetch next from   Batch_Activity_Cursor  into  @sWinType,  @cBatchNumber,   @cBatchSource,  @tPosting  while @@fetch_status = 0  begin  select @tLoop = NULL   if @@trancount = 0  begin  select @tTransaction = 1  begin transaction  end    if @cBatchSource in (@cRM_Sales,@cRM_Cash,@cSOPEntry,@cXSOPEntry,@cSOPVoid)  select @cUserID  =  @I_cUserID  else  select @cUserID = ''   while (@tLoop is NULL)  begin  select @tLoop = 1   if (@cBatchSource = @cNormal or @cBatchSource = @cClearing or @cBatchSource = @cQuick)  begin  select @sSeries = @FINANCIAL   if @cBatchSource = @cNormal  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_GENERAL_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if @cBatchSource = @cClearing   begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_CLEARING_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if @cBatchSource = @cQuick  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_QUICK_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  end  else if @cBatchSource in (@cXPM_Cchecks,@cPM_Trxent,@cPM_Payment)   begin  select @sSeries = @PURCHASING   if @cBatchSource = @cXPM_Cchecks  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_PM_COMPUTER',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if @cBatchSource = @cPM_Trxent   begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_PM_TRX_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if @cBatchSource = @cPM_Payment  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_PM_MANUAL',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  end  else if @cBatchSource in (@cRM_Sales,@cRM_Cash,@cSOPEntry,@cXSOPEntry,@cSOPVoid)   begin  select @sSeries = @SALES  if @cBatchSource = @cRM_Sales  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_RM_SALES_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if @cBatchSource = @cRM_Cash  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_RM_CASH_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if (@cBatchSource = @cSOPEntry) or (@cBatchSource = @cXSOPEntry)  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_SOP_ENTRY',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  else if (@cBatchSource = @cSOPVoid)  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_SOP_VOID',   @cTransactionSource output,  @O_iErrorState output   select @iError = @@error  end  end   if @iStatus <> 0 or @O_iErrorState <> 0 or @iError <> 0   break   select  @sBatchStatus = BCHSTTUS  from  SY00500  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber   select @iRowCount = @@rowcount   if @iRowCount = 1   begin  if @tPosting = @TRUE  begin  if @cBatchSource in (@cRM_Sales,@cRM_Cash,@cXPM_Cchecks,@cPM_Trxent)  begin  if @sBatchStatus = 0 or @sBatchStatus = @BATCH_POSTING_INCOMPLETE  begin   exec @iStatus = smAddPostingSecurityRecord  @sSeries,  @cTransactionSource,  @cBatchNumber,  @I_cUserID,  @I_cCompanyName,  @FALSE,  1,   @I_iSQLSessionID,  @O_iErrorState  output   select @iError = @@error  if @iStatus <> 0 or @O_iErrorState <> 0 or @iError <> 0   break  end  end  end   if (@cBatchSource = @cNormal)  or (@cBatchSource = @cClearing)  or (@cBatchSource = @cQuick)  or (@cBatchSource = @cXPM_Cchecks)  or (@cBatchSource = @cPM_Trxent)  or (@cBatchSource = @cXPM_Trxent)  or (@cBatchSource = @cPM_Payment)  or (@cBatchSource = @cRM_Sales)  or (@cBatchSource = @cRM_Cash)  or (@cBatchSource = @cXRM_Sales)  or (@cBatchSource = @cXRM_Cash)  or (@cBatchSource = @cSOPEntry)  or (@cBatchSource = @cXSOPEntry)  or (@cBatchSource = @cSOPVoid)  begin  if @tPosting = @TRUE  begin  update  SY00500  set  BCHSTTUS = (case @sBatchStatus  when @CHECK_PROCESSING then  @CHECK_PROCESSING_INTERRUPTED  when @CHECK_ALIGNMENT then  @CHECK_ALIGNMENT_INTERRUPTED  when @CHECK_PRINTING then  @CHECK_PRINTING_INTERRUPTED  when @CHECK_REPRINT_ALIGNMENT then  @CHK_REPRINT_ALIGNMENT_INTERR   when @CHECK_VOIDING then  @CHECK_VOIDING_INTERRUPTED  when @CHECK_REPRINTING then  @CHECK_REPRINTING_INTERRUPTED  when @REMITTANCE_PROCESSING then  @REMITTANCE_PROCESSING_INTERR   when @REMITTANCE_ALIGNMENT then  @REMITTANCE_ALIGNMENT_INTERR   when @REMITTANCE_PRINTING then  @REMITTANCE_PRINTING_INTERR   when @BATCH_POSTING then  @BATCH_POSTING_INCOMPLETE  when @BATCH_PRINTING then  @BATCH_PRINTING_INCOMPLETE  when @BATCH_UPDATING then  @BATCH_UPDATING_INCOMPLETE  when @BATCH_RECEIVING then  @BATCH_AVAILABLE  else  @BATCH_POSTING_INCOMPLETE  end),  MKDTOPST = @FALSE,  USERID = @cUserID  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber   if @@rowcount <> 1  begin  select @O_iErrorState = 20650  break  end   if (@cBatchSource = @cXPM_Trxent)  select @O_tPMTrxRecovered = 1   if (@cBatchSource = @cXRM_Sales or @cBatchSource = @cXRM_Cash)  select @O_tRMTrxRecovered = 1   if (@cBatchSource = @cXSOPEntry or @cBatchSource = @cSOPVoid)  select @O_tSOPTrxRecovered = 1   if @sBatchStatus = @BATCH_RECEIVING  begin  if exists(  select  1  from  GL10000  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber  and ORCOMID <> '')  begin  select @O_tICReceivingBatchRecovered = @TRUE  end  else  begin  select @O_tReceivingBatchRecovered = @TRUE  end  end  else if (@cBatchSource <> @cXPM_Trxent) and   (@cBatchSource <> @cXRM_Sales) and   (@cBatchSource <> @cXRM_Cash) and   (@cBatchSource <> @cXSOPEntry) and   (@cBatchSource <> @cSOPVoid)   select @O_sRecovered = @BATCH_RECOVERED   if (@cBatchSource <> @cXPM_Trxent) and   (@cBatchSource <> @cXRM_Sales) and   (@cBatchSource <> @cXRM_Cash) and   (@cBatchSource <> @cXSOPEntry) and   (@cBatchSource <> @cSOPVoid) and   (@sBatchStatus <> @BATCH_RECEIVING)  begin  exec @iStatus = smAddPostingSecurityRecord  @sSeries,  @cTransactionSource,  @cBatchNumber,  @I_cUserID,  @I_cCompanyName,  @FALSE,  @TRACKING_ERROR,  @I_iSQLSessionID,  @O_iErrorState  output   select @iError = @@error   if @iStatus <> 0 or @O_iErrorState <> 0 or @iError <> 0   break  end   end    else   begin  update  SY00500  set  BCHSTTUS = (case @sBatchStatus  when @CHECK_PROCESSING then  @CHECK_PROCESSING_INTERRUPTED  when @CHECK_ALIGNMENT then  @CHECK_ALIGNMENT_INTERRUPTED  when @CHECK_PRINTING then  @CHECK_PRINTING_INTERRUPTED  when @CHECK_REPRINT_ALIGNMENT then  @CHK_REPRINT_ALIGNMENT_INTERR  when @CHECK_VOIDING then  @CHECK_VOIDING_INTERRUPTED  when @CHECK_REPRINTING then  @CHECK_REPRINTING_INTERRUPTED  when @REMITTANCE_PROCESSING then  @REMITTANCE_PROCESSING_INTERR  when @REMITTANCE_ALIGNMENT then  @REMITTANCE_ALIGNMENT_INTERR  when @REMITTANCE_PRINTING then  @REMITTANCE_PRINTING_INTERR  when @BATCH_POSTING then  @BATCH_POSTING_INCOMPLETE  when @BATCH_PRINTING then  @BATCH_PRINTING_INCOMPLETE  when @BATCH_UPDATING then  @BATCH_UPDATING_INCOMPLETE  else  @BATCH_AVAILABLE  end),  MKDTOPST = @FALSE,  USERID = @cUserID  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber   if @@rowcount <> 1  begin  select @O_iErrorState = 20650  break  end   if @sBatchStatus = @CHECK_PROCESSING or   @sBatchStatus = @CHECK_ALIGNMENT or  @sBatchStatus = @CHECK_PRINTING or  @sBatchStatus = @CHECK_REPRINT_ALIGNMENT or  @sBatchStatus = @CHECK_VOIDING or  @sBatchStatus = @CHECK_REPRINTING or  @sBatchStatus = @REMITTANCE_PROCESSING or  @sBatchStatus = @REMITTANCE_ALIGNMENT or  @sBatchStatus = @REMITTANCE_PRINTING  begin  select @O_sRecovered = @BATCH_RECOVERED  end   if (@cBatchSource = @cNormal)  or (@cBatchSource = @cClearing)  or (@cBatchSource = @cQuick)  begin  update  PJOURNAL  set REPORT = @DELETE_REPORT  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber  and REPORT = @DISPLAY_REPORT  end  end    end    end    if  (@cBatchSource = @cXGL_Normal)  or (@cBatchSource = @cXGL_Clearing)  begin  if @cBatchSource = @cXGL_Normal  begin  delete  GL10001  where  JRNENTRY =   (select  JRNENTRY  from  GL10000  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber  and PSTGSTUS <> @POSTED )  end   if @@rowcount > 0  select @O_sRecovered = @REALTIME_RECOVERED   if @cBatchSource = @cXGL_Clearing  begin  delete  GL10002  where  JRNENTRY =   (select  JRNENTRY  from  GL10000  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber  and PSTGSTUS <> @POSTED )  end   if @@rowcount > 0  select @O_sRecovered = @REALTIME_RECOVERED   delete  GL10000  where  BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber  and PSTGSTUS <> @POSTED   if @@rowcount > 0  begin  select @O_sRecovered = @REALTIME_RECOVERED  end   delete  SY00500  where   BCHSOURC = @cBatchSource  and BACHNUMB = @cBatchNumber  end   delete DYNAMICS..SY00800    where  USERID   = @I_cUserID and  CMPNYNAM = @I_cCompanyName and  BACHNUMB  = @cBatchNumber and  BCHSOURC = @cBatchSource and  WINTYPE  = @sWinType    if @@rowcount <> 1  begin  select @O_iErrorState = 20651  break  end  end    if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @tTransaction = 1  begin  select  @tTransaction = 0   if (@O_iErrorState <> 0)  or (@iStatus <> 0)  begin  rollback transaction  break  end   else  begin  commit transaction  end  end    else if (@O_iErrorState <> 0)  or (@iStatus <> 0)  return(@iStatus)   fetch next from   Batch_Activity_Cursor   into  @sWinType,  @cBatchNumber,   @cBatchSource,  @tPosting  end   close Batch_Activity_Cursor deallocate Batch_Activity_Cursor  if @O_iErrorState <> 0 or @iStatus <> 0   return(@iStatus)  update   PM00400 set  DCSTATUS = -1 from  (PM00400 join PM10300  on CNTRLNUM = PMNTNMBR) where  PM00400.BCHSOURC = @cXPM_Cchecks and   PM00400.DCSTATUS = 0 and  PM00400.USERID = @I_cUserID  if @@Rowcount > 0   select @O_tPMTrxRecovered = 1  delete  PM00400 where  (BCHSOURC = @cXPM_Cchecks and   DCSTATUS = 0 and  USERID = @I_cUserID)  update  PM00400 set  DCSTATUS = -1 from   PM00400 join PM10000  on CNTRLNUM = VCHNUMWK where  PM00400.BCHSOURC in (@cXPM_Trxent, @cPM_Trxent) and  PM00400.DCSTATUS = 0 and  PM00400.USERID = @I_cUserID and  PM00400.CNTRLTYP = 0  if @@Rowcount > 0   select @O_tPMTrxRecovered = 1  delete  PM00400 where  (BCHSOURC = @cPM_Trxent or  BCHSOURC = @cXPM_Trxent) and  DCSTATUS = 0 and  USERID = @I_cUserID and  CNTRLTYP = 0 and  CNTRLNUM not in   (select   CCAMPYNM   from  PM10000  where  CCAMPYNM = CNTRLNUM and  CARDNAME in  (select   CARDNAME   from  SY03100  where  PYBLGRBX = 0 and  CBPAYBLE = 1)) delete  PM00400 where  (BCHSOURC = @cPM_Trxent or  BCHSOURC = @cXPM_Trxent) and  DCSTATUS = 0 and  USERID = @I_cUserID and  CNTRLTYP = 1 and  CNTRLNUM not in   (select   CAMPYNBR   from  PM10000  where  CNTRLNUM = CAMPYNBR) and   CNTRLNUM not in   (select   CAMPMTNM   from  PM10000  where  CNTRLNUM = CAMPMTNM) and   CNTRLNUM not in   (select   CCAMPYNM  from  PM10000  where  CNTRLNUM = CCAMPYNM  and  CARDNAME in  (select   CARDNAME   from  SY03100  where  PYBLGRBX = 1 and  CBPAYBLE = 1))  return   
GO
GRANT EXECUTE ON  [dbo].[smCleanupFilesBeforeLogin] TO [DYNGRP]
GO
