SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taGetPMNextVoucherNumber]  @O_vCNTRLNUM varchar(21) = '' output, @I_sCNTRLTYP smallint = 0, @O_iErrorState int = NULL output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @bInsideLoop binary(1),    @iLoopCounter integer,      @vUpdatedCntrlNum varchar(21),  @PAY_ALIGNMENT_CONTROL_TYPE smallint,  @VOUCHER_NUMBER_CONTROL_TYPE  smallint,  @PURCHASING smallint,  @SCHEDULE_DOC smallint,  @iStatus int,  @cDBName char(5),  @vAlignment00 varchar(255),  @vAlignment99 varchar(255),  @iError integer,  @iValidationStatus int,  @bValidateExisting tinyint,  @I_sDOCTYPE smallint    select  @O_iErrorState = 0,  @bValidateExisting = 0,  @I_sDOCTYPE = 0,  @O_vCNTRLNUM = ''  if   @O_vCNTRLNUM is null or  @I_sCNTRLTYP is null or  @I_sDOCTYPE is null begin  select @O_iErrorState = 9281   return (@O_iErrorState) end   select  @iValidationStatus = 4,    @iLoopCounter = 0  exec @iStatus = DYNAMICS..smGetConstantInt  'PAYMENT_ALIGNMENT_CONTROL_TYPE',  @PAY_ALIGNMENT_CONTROL_TYPE output,  @O_iErrorState  output select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0) begin  select @O_iErrorState = 9282   return (@O_iErrorState) end  exec @iStatus = DYNAMICS..smGetConstantInt  'VOUCHER_NUMBER_CONTROL_TYPE',  @VOUCHER_NUMBER_CONTROL_TYPE output,  @O_iErrorState  output select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0) begin  select @O_iErrorState = 9283   return (@O_iErrorState) end  exec @iStatus = DYNAMICS..smGetConstantInt  'PURCHASING',  @PURCHASING output,  @O_iErrorState output select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0) begin  select @O_iErrorState = 9567   return (@O_iErrorState) end  exec @iStatus = DYNAMICS..smGetConstantInt  'PM_DOC_SCHEDULE',  @SCHEDULE_DOC output,  @O_iErrorState  output select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0) begin  select @O_iErrorState = 9568   return (@O_iErrorState) end  select @cDBName = db_name()  exec @iStatus = DYNAMICS..smGetMsgString  11047,     @cDBName,  @vAlignment00 output,  @O_iErrorState output select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0) begin  select @O_iErrorState = 9569   return (@O_iErrorState) end  select @vAlignment00 = rtrim(@vAlignment00)  exec @iStatus = DYNAMICS..smGetMsgString  11046,     @cDBName,  @vAlignment99 output,  @O_iErrorState output select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0) begin  select @O_iErrorState = 9570   return (@O_iErrorState) end  select @vAlignment99 = rtrim(@vAlignment99)  if (@bValidateExisting = 0) and (@I_sCNTRLTYP <> @PAY_ALIGNMENT_CONTROL_TYPE) begin  if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE)  if @I_sDOCTYPE = @SCHEDULE_DOC   select @O_vCNTRLNUM= PMNXTSCHDNBR from PM40100 with (tablockx holdlock)  else  select @O_vCNTRLNUM= NTVCHNUM from PM40100 with (tablockx holdlock)  else  select @O_vCNTRLNUM= PMNPYNBR from PM40100 with (tablockx holdlock)  if @@rowcount <> 1  begin  select @iValidationStatus = 1  select @O_iErrorState = 9571   return (@O_iErrorState)  end  select @O_vCNTRLNUM = rtrim(@O_vCNTRLNUM) end if (@bValidateExisting = 0) and (@I_sCNTRLTYP = @PAY_ALIGNMENT_CONTROL_TYPE) begin  select @O_vCNTRLNUM= isnull(max(CNTRLNUM),@vAlignment00)   from PM00400 (nolock)  where CNTRLTYP=@PAY_ALIGNMENT_CONTROL_TYPE and   CNTRLNUM between @vAlignment00 and @vAlignment99   select @O_vCNTRLNUM = rtrim (@O_vCNTRLNUM)   exec ivNumber_Inc_Dec 1,@O_vCNTRLNUM output, @O_iErrorState output   if (@O_iErrorState <> 0)  or (@@error <> 0)  begin  select @iValidationStatus = 4  select @O_iErrorState = 9572   return (@O_iErrorState)  end end while @iLoopCounter < 1000 begin  select @bInsideLoop = 1   while @bInsideLoop = 1   begin  if exists(select 1 from PM00400 (nolock) where  CNTRLNUM = @O_vCNTRLNUM and  CNTRLTYP = @I_sCNTRLTYP)  begin  select @iValidationStatus = 3  break  end   if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE) and  exists(select 1 from DTA10100 (nolock) where  DTASERIES = @PURCHASING and   DTAREF =  (rtrim(@O_vCNTRLNUM) +  replicate(' ',(20 - datalength(@O_vCNTRLNUM))) +   ltrim(str(0))))  begin  select @iValidationStatus = 2  break  end  if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE) and  exists(select 1 from TX30000 (nolock) where  DOCNUMBR = rtrim(@O_vCNTRLNUM) and  DOCTYPE = @I_sDOCTYPE and  SERIES = @PURCHASING and  RCTRXSEQ = 0)  begin  select @iValidationStatus = 5  break  end  if exists(select 1 from PM00400 (nolock) where  CNTRLNUM = @O_vCNTRLNUM and  CNTRLTYP = @I_sCNTRLTYP)   begin  select @iValidationStatus = 3  break  end  select @bInsideLoop = 0  end  if @bInsideLoop = 1   begin  if (@bValidateExisting = 0)   begin  select @iLoopCounter = @iLoopCounter + 1  exec ivNumber_Inc_Dec 1,@O_vCNTRLNUM output, @O_iErrorState output   if (@O_iErrorState <> 0) or (@O_vCNTRLNUM = '')   begin  select @O_iErrorState = 9573   select @iValidationStatus = 4  break  end  end  else  break  end  else   begin  if (@bValidateExisting = 0) and (@I_sCNTRLTYP <> @PAY_ALIGNMENT_CONTROL_TYPE)   begin  select @vUpdatedCntrlNum = rtrim(@O_vCNTRLNUM)  exec ivNumber_Inc_Dec 1, @vUpdatedCntrlNum output, @O_iErrorState output  if (@O_iErrorState = 0) and (@vUpdatedCntrlNum > @O_vCNTRLNUM)  begin  if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE)  if @I_sDOCTYPE = @SCHEDULE_DOC  begin  update PM40100 set PMNXTSCHDNBR = @vUpdatedCntrlNum  if (@@error <> 0)  begin  select @O_iErrorState = 9574   end  end  else  begin  update PM40100 set NTVCHNUM = @vUpdatedCntrlNum  if (@@error <> 0)  begin  select @O_iErrorState = 9575   end  end  else  begin  update PM40100 set PMNPYNBR = @vUpdatedCntrlNum  if (@@error <> 0)  begin  select @O_iErrorState = 9576   end  end  end  end  select @iValidationStatus = 0  break   end end  return (@O_iErrorState)    
GO
GRANT EXECUTE ON  [dbo].[taGetPMNextVoucherNumber] TO [DYNGRP]
GO
