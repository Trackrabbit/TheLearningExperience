SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glPrintTrialBalanceReport]  @I_cAcctListTable char(25) = NULL,  @I_tDateRangeByPeriod tinyint  = NULL,  @I_cTableName char(25) = NULL,   @I_cTableNameDetail char(25) = NULL,   @I_tInactiveAccounts tinyint  = NULL,  @I_iPostingAccounts int  = NULL,  @I_iUnitAccounts int  = NULL,  @I_tIncludeUnitAccounts tinyint  = NULL,  @I_tIncludeZeroBalance tinyint  = NULL,  @I_cStartingAccountNumber varchar(128) = NULL,   @I_cEndingAccountNumber varchar(128) = NULL,  @I_dStartingDate datetime = NULL,  @I_dEndingDate datetime = NULL,  @I_iStartingPeriod int  = NULL,  @I_iEndingPeriod int  = NULL,  @I_dStartingPeriodDate datetime = NULL,  @I_tKeepingSummary tinyint  = NULL,  @I_iYear int  = NULL,  @I_dFirstDayOfYear datetime = NULL,  @I_tHistoryYear tinyint  = NULL,  @I_iReportType int  = NULL,  @I_tSubtotalBy tinyint  = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_sPrintCurrencyIn smallint = NULL,  @I_nReportingExchangeRate numeric(15,7) = NULL,  @I_sReportingRateCalcMethod smallint = NULL,  @I_sReportingDecimalPlaces smallint = NULL,  @I_iRangeByAccount int  = NULL,  @I_tIncludeMCInfo tinyint  = NULL,  @I_cStartingCurrID char(15) = NULL,  @I_cEndingCurrID char(15) = NULL,  @I_UseReportingLedgers binary(4) = NULL,  @O_mUnitAccountTotal numeric(19,5) = NULL output,  @O_SQL_Error_State                      int             = NULL   output as   declare         @TRUE int,  @DETAIL int,  @UNIT_ACCT int,  @BEGINNING_BALANCE int,  @FALSE int,  @iStatus int,  @iError int,  @mTotalDebitAmount numeric(19,5),  @mTotalCreditAmount numeric(19,5),  @dStartingDate datetime,  @DEFAULT_DATE datetime,  @tSegment tinyint,  @cStartingSegment char(66),  @cEndingSegment char(66),  @tSegmentLength tinyint,  @tNumberSegments tinyint,  @tPosition tinyint,  @vCompare1 varchar(255),  @vCompare2 varchar(255),  @vCompare3 varchar(255),  @vCompare4 varchar(255),  @vCompare5 varchar(255),  @vCompare6 varchar(255),  @vInsertStatement1 varchar(255),  @vInsertStatement2 varchar(255),  @vInsertStatement3 varchar(255),  @vInsertStatement4 varchar(255),  @iRelationID int,  @sUserLevel smallint,  @iAccessAllAccounts int,  @tALSRegistered int,  @IncludeLedgerBase int,  @IncludeLedgerIFRS int,  @IncludeLedgerLocal int,  @IncludeLedgersStatement char(10),   @vAccountfiltertable varchar(255),  @vWhere1 varchar(255),  @cCompanyID char(5),  @tCalculateUsingSummary tinyint,  @mTotalOrigDebitAmount numeric(19,5),  @mTotalOrigCreditAmount numeric(19,5),  @vGroupBy varchar(255)  select @O_mUnitAccountTotal = 0.00,  @O_SQL_Error_State = 0  select  @TRUE = 1,  @FALSE = 0  select @tCalculateUsingSummary = @I_tKeepingSummary  if exists (select * from dbo.sysobjects where id =   Object_id('dbo.#TrialBalance') and type in ('U','S')) begin  drop table dbo.#TrialBalance end  create table #TrialBalance(  AccountIndex int not null,  BegBalance numeric(19,5) not null,  EndBalance numeric(19,5) not null,  TotalCreditAmount numeric(19,5) null,  TotalDebitAmount numeric(19,5) null,  Year int not null,  StartingDate datetime not null,  EndingDate datetime not null,  AccountType smallint not null,  AccountString char(129) not null,  PeriodName char(21) not null,  PeriodIndex smallint not null,  CreditAmount numeric(19,5) null,  DebitAmount numeric(19,5) null,  NetAmount numeric(19,5) not null,  OrigTotalCreditAmt numeric(19,5) null,  OrigTotalDebitAmt numeric(19,5) null,  OrigNetAmount numeric(19,5) not null,  CurrencyID char(15) not null,  CurrencyIndex smallint not null,  AccountsExist tinyint not null )  create table #UnitAccount(  AccountIndex int not null)  if (  @I_tDateRangeByPeriod is NULL   or  @I_cTableName is NULL   or  @I_cTableNameDetail is NULL or  @I_tInactiveAccounts is NULL   or  @I_iPostingAccounts is NULL   or  @I_iUnitAccounts is NULL   or  @I_tIncludeUnitAccounts is NULL   or  @I_tIncludeZeroBalance is NULL   or  @I_cStartingAccountNumber is NULL   or  @I_cEndingAccountNumber is NULL   or  @I_dStartingDate is NULL   or  @I_dEndingDate is NULL   or  @I_iStartingPeriod is NULL   or  @I_iEndingPeriod is NULL   or  @I_dStartingPeriodDate is NULL  or  @I_tKeepingSummary is NULL   or  @I_iYear is NULL   or  @I_dFirstDayOfYear is NULL or  @I_tHistoryYear is NULL or  @I_iReportType is NULL or  @I_tSubtotalBy is NULL or  @I_tMCRegistered is NULL or  @I_sPrintCurrencyIn is NULL  or  @I_nReportingExchangeRate is NULL  or  @I_sReportingRateCalcMethod is NULL  or  @I_sReportingDecimalPlaces is NULL or  @I_iRangeByAccount is NULL or  @I_tIncludeMCInfo is NULL or  @I_cStartingCurrID is NULL or  @I_cEndingCurrID is NULL or   @I_UseReportingLedgers is NULL)  begin  select          @O_SQL_Error_State = 20836  return end  select @IncludeLedgerBase = power(2,24),   @IncludeLedgerIFRS = power(2,25),   @IncludeLedgerLocal = power(2,26)   select @IncludeLedgerBase = @IncludeLedgerBase & @I_UseReportingLedgers select @IncludeLedgerIFRS = @IncludeLedgerIFRS & @I_UseReportingLedgers select @IncludeLedgerLocal = @IncludeLedgerLocal & @I_UseReportingLedgers  select @IncludeLedgersStatement = ' ' if @IncludeLedgerBase <> 0  begin  select @IncludeLedgerBase = 1  select @IncludeLedgersStatement = ltrim(STR(@IncludeLedgerBase)) + ','  end if @IncludeLedgerIFRS <> 0  begin  select @IncludeLedgerIFRS = 2  select @IncludeLedgersStatement = rtrim(@IncludeLedgersStatement) + ltrim(STR(@IncludeLedgerIFRS)) + ','  end if @IncludeLedgerLocal <> 0  begin  select @IncludeLedgerLocal = 3  select @IncludeLedgersStatement = rtrim(@IncludeLedgersStatement) + ltrim(STR(@IncludeLedgerLocal)) + ','  end  select @IncludeLedgersStatement = SUBSTRING(@IncludeLedgersStatement, 0, LEN(@IncludeLedgersStatement))   exec @iStatus = DYNAMICS..smGetConstantInt  'DETAIL',  @DETAIL                   output,  @O_SQL_Error_State         output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'UNIT_ACCT',  @UNIT_ACCT                  output,  @O_SQL_Error_State          output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'BEGINNING_BALANCE',  @BEGINNING_BALANCE output,  @O_SQL_Error_State      output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantString  'DEFAULT_DATE',  @DEFAULT_DATE             output,  @O_SQL_Error_State         output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  select  @iRelationID  = 0,  @sUserLevel  = 0,  @iAccessAllAccounts = 0,  @tALSRegistered  = 0  select  @vCompare1 = ' and ',  @vCompare2 = '',  @vCompare3 = '',  @vCompare4 = '',  @vCompare5 = '',  @vCompare6 = ''  if @I_iRangeByAccount = 2 begin  select   @tNumberSegments = count(SGMTNUMB)  from  SY00300   select  @tSegment = 1,  @tPosition = 1   while @tSegment <= @tNumberSegments   begin   select  @tSegmentLength = LOFSGMNT  from  SY00300  where  SGMTNUMB = @tSegment   if @@rowcount <> 1  begin  select @O_SQL_Error_State = 20838  return  end   if @tSegment <= 2  begin   select @vCompare1 = @vCompare1 +   'A.ACTNUMBR_' + ltrim(str(@tSegment))   + ' >= substring(@cSA,' +   ltrim(str(@tPosition))  + ',' + ltrim(str(@tSegmentLength)) + ') and A.ACTNUMBR_' +   ltrim(str(@tSegment))  + ' <= substring(@cEA,' +   ltrim(str(@tPosition)) +   ',' + ltrim(str(@tSegmentLength)) + ')'   if @tSegment <> @tNumberSegments   select @vCompare1 = @vCompare1 + ' and '  end  else if @tSegment <= 4  begin   select @vCompare2 = @vCompare2 +   'A.ACTNUMBR_' + ltrim(str(@tSegment))   + ' >= substring(@cSA,' +   ltrim(str(@tPosition))  + ',' + ltrim(str(@tSegmentLength)) + ') and A.ACTNUMBR_' +   ltrim(str(@tSegment))  + ' <= substring(@cEA,' +   ltrim(str(@tPosition)) +   ',' + ltrim(str(@tSegmentLength)) + ')'   if @tSegment <> @tNumberSegments   select @vCompare2 = @vCompare2 + ' and '  end  else if @tSegment <= 6  begin   select @vCompare3 = @vCompare3 +   'A.ACTNUMBR_' + ltrim(str(@tSegment))   + ' >= substring(@cSA,' +   ltrim(str(@tPosition))  + ',' + ltrim(str(@tSegmentLength)) + ') and A.ACTNUMBR_' +   ltrim(str(@tSegment))  + ' <= substring(@cEA,' +   ltrim(str(@tPosition)) +   ',' + ltrim(str(@tSegmentLength)) + ')'   if @tSegment <> @tNumberSegments   select @vCompare3 = @vCompare3 + ' and '  end   else if @tSegment <= 8  begin   select @vCompare4 = @vCompare4 +   'A.ACTNUMBR_' + ltrim(str(@tSegment))   + ' >= substring(@cSA,' +   ltrim(str(@tPosition))  + ',' + ltrim(str(@tSegmentLength)) + ') and A.ACTNUMBR_' +   ltrim(str(@tSegment))  + ' <= substring(@cEA,' +   ltrim(str(@tPosition)) +   ',' + ltrim(str(@tSegmentLength)) + ')'   if @tSegment <> @tNumberSegments   select @vCompare4 = @vCompare4 + ' and '  end   else if @tSegment <= 10  begin   select @vCompare5 = @vCompare5 +   'A.ACTNUMBR_' + ltrim(str(@tSegment))   + ' >= substring(@cSA,' +   ltrim(str(@tPosition))  + ',' + ltrim(str(@tSegmentLength)) + ') and A.ACTNUMBR_' +   ltrim(str(@tSegment))  + ' <= substring(@cEA,' +   ltrim(str(@tPosition)) +   ',' + ltrim(str(@tSegmentLength)) + ')'   if @tSegment <> @tNumberSegments   select @vCompare5 = @vCompare5 + ' and '  end   else if @tSegment <= 12  begin   select @vCompare6 = @vCompare6 +   'A.ACTNUMBR_' + ltrim(str(@tSegment))   + ' >= substring(@cSA,' +   ltrim(str(@tPosition))  + ',' + ltrim(str(@tSegmentLength)) + ') and A.ACTNUMBR_' +   ltrim(str(@tSegment))  + ' <= substring(@cEA,' +   ltrim(str(@tPosition)) +   ',' + ltrim(str(@tSegmentLength)) + ')'   if @tSegment <> @tNumberSegments   select @vCompare6 = @vCompare6 + ' and '  end   select  @tSegment  = @tSegment + 1,  @tPosition  = @tPosition + @tSegmentLength + 1  end end else begin  select @vCompare1 = @vCompare1 + '(B.ACTNUMST >= @cSA and B.ACTNUMST <= @cEA)' end  select @cCompanyID = db_name()  exec @iStatus = DYNAMICS..smGetAccountLevelSecurityInfo  @cCompanyID,  @iRelationID output,  @sUserLevel  output,  @iAccessAllAccounts output,  @tALSRegistered output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iAccessAllAccounts = @TRUE  begin  if @I_cAcctListTable = ''  begin  select @vAccountfiltertable = 'GL00100 A '  select @vWhere1 = ''  end  else  begin  select @vAccountfiltertable = 'GL00100 A JOIN ' + @I_cAcctListTable + ' Z ON (Z.ACTINDX = A.ACTINDX)'  select @vWhere1 = ''  end   end else  begin  if @I_cAcctListTable = ''  begin  select @vWhere1 = ' and A.ACTINDX = filter.ACTINDX and filter.RELID = ' + ltrim(str(@iRelationID))  select @vAccountfiltertable =   case when @sUserLevel = 0 then  'GL00100 A, GL00100F1 filter '  else  'GL00100 A, GL00100F' + str(@sUserLevel,1) + ' filter '  end  end  else  begin  select @vWhere1 = ' and A.ACTINDX = filter.ACTINDX and filter.RELID = ' + ltrim(str(@iRelationID))  select @vAccountfiltertable =   case when @sUserLevel = 0 then  'GL00100 A JOIN ' + @I_cAcctListTable + ' Z ON (Z.ACTINDX = A.ACTINDX), GL00100F1 filter '  else  'GL00100 A JOIN ' + @I_cAcctListTable + ' Z ON (Z.ACTINDX = A.ACTINDX), GL00100F' + str(@sUserLevel,1) + ' filter '  end  end  end  if @I_tIncludeMCInfo = @TRUE AND @I_iReportType <> @DETAIL  begin  select @vInsertStatement1 = 'insert into  #TrialBalance  select  A.ACTINDX,  0.00,  0.00,  NULL,  NULL,' +  ltrim(str(@I_iYear)) + ',''' +  convert(char(12),@I_dStartingDate,102) + ''',''' +  convert(char(12),@I_dEndingDate,102) + ''',' +  'A.ACCTTYPE,  B.ACTNUMST,  '''',  0,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  C.CURNCYID,  C.CURRNIDX,  0'   select @vInsertStatement4 = 'from '   + @vAccountfiltertable + ', GL00105 B'   if @I_tHistoryYear = @TRUE  select @vInsertStatement3 = ', GL30000 C '  else  select @vInsertStatement3 = ', GL20000 C '   select @vInsertStatement2 =' where  (A.ACCTTYPE = ' + ltrim(str(@I_iPostingAccounts)) + ')  and A.ACTINDX = B.ACTINDX   and A.ACTINDX = C.ACTINDX' + @vWhere1  select @vGroupBy = ' group by A.ACTINDX, A.ACCTTYPE, B.ACTNUMST, C.CURNCYID, C.CURRNIDX'  select @vGroupBy = @vGroupBy + ' having C.CURNCYID between ' +''''+ RTRIM(@I_cStartingCurrID) +'''' +  ' and '+ '''' + RTRIM(@I_cEndingCurrID) + '''' end else begin  select @vInsertStatement1 = 'insert into  #TrialBalance  select  A.ACTINDX,  0.00,  0.00,  NULL,  NULL,' +  ltrim(str(@I_iYear)) + ',''' +  convert(char(12),@I_dStartingDate,102) + ''',''' +  convert(char(12),@I_dEndingDate,102) + ''',' +  'A.ACCTTYPE,  B.ACTNUMST,  '''',  0,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  '''',  0,  0 '   select @vInsertStatement4 = ' from '   + @vAccountfiltertable + ', GL00105 B'   select @vInsertStatement3 = ''   select @vInsertStatement2 =' where  (A.ACCTTYPE = ' + ltrim(str(@I_iPostingAccounts)) +  ' or A.ACCTTYPE = ' + ltrim(str(@I_iUnitAccounts)) + ')  and A.ACTINDX = B.ACTINDX' + @vWhere1   select @vGroupBy = '' end  exec ('declare @cSA varchar(128), @cEA varchar(128) select @cSA = ''' + @I_cStartingAccountNumber + ''', @cEA = ''' + @I_cEndingAccountNumber + '''' + @vInsertStatement1 + @vInsertStatement4 + @vInsertStatement3 + @vInsertStatement2 +  @vCompare1 + @vCompare2 + @vCompare3 + @vCompare4 + @vCompare5 + @vCompare6  + @vGroupBy)  if @I_tIncludeMCInfo = @TRUE AND @I_iReportType <> @DETAIL  begin  select @vInsertStatement1 = 'insert into  #TrialBalance  select  A.ACTINDX,  0.00,  0.00,  NULL,  NULL,' +  ltrim(str(@I_iYear)) + ',''' +  convert(char(12),@I_dStartingDate,102) + ''',''' +  convert(char(12),@I_dEndingDate,102) + ''',' +  'A.ACCTTYPE,  B.ACTNUMST,  '''',  0,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  '''',  0,  0 '   select @vInsertStatement4 = ' from '   + @vAccountfiltertable + ', GL00105 B'   select @vInsertStatement3 = ''   select @vInsertStatement2 =' where  (A.ACCTTYPE = ' + ltrim(str(@I_iPostingAccounts)) +  ' or A.ACCTTYPE = ' + ltrim(str(@I_iUnitAccounts)) + ')  and A.ACTINDX = B.ACTINDX' + @vWhere1   select @vGroupBy = ''   exec ('declare @cSA varchar(128), @cEA varchar(128) select @cSA = ''' + @I_cStartingAccountNumber +  ''', @cEA = ''' + @I_cEndingAccountNumber + '''' + @vInsertStatement1 + @vInsertStatement4 + @vInsertStatement3 + @vInsertStatement2 +   @vCompare1 + @vCompare2 + @vCompare3 + @vCompare4 + @vCompare5 + @vCompare6  + @vGroupBy)  end  if @I_tIncludeMCInfo = @TRUE AND @I_tIncludeUnitAccounts = @TRUE AND @I_iReportType <> @DETAIL AND @I_tSubtotalBy = 1 begin  select @vInsertStatement1 = 'insert into  #TrialBalance  select  A.ACTINDX,  0.00,  0.00,  NULL,  NULL,' +  ltrim(str(@I_iYear)) + ',''' +  convert(char(12),@I_dStartingDate,102) + ''',''' +  convert(char(12),@I_dEndingDate,102) + ''',' +  'A.ACCTTYPE,  B.ACTNUMST,  '''',  0,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00,  '''',  2,  0 '   select @vInsertStatement4 = ' from '   + @vAccountfiltertable + ', GL00105 B'   select @vInsertStatement3 = ''   select @vInsertStatement2 =' where  A.ACCTTYPE = ' + ltrim(str(@I_iUnitAccounts)) + '  and A.ACTINDX = B.ACTINDX' + @vWhere1   select @vGroupBy = ''   exec ('declare @cSA varchar(128), @cEA varchar(128) select @cSA = ''' + @I_cStartingAccountNumber +  ''', @cEA = ''' + @I_cEndingAccountNumber + '''' + @vInsertStatement1 + @vInsertStatement4 + @vInsertStatement3 + @vInsertStatement2 +   @vCompare1 + @vCompare2 + @vCompare3 + @vCompare4 + @vCompare5 + @vCompare6  + @vGroupBy) end  create index mbsTB1 on #TrialBalance (AccountIndex,CurrencyIndex) create index mbsTB2 on #TrialBalance (BegBalance, AccountIndex)  if @tCalculateUsingSummary = @TRUE  begin  if @I_tHistoryYear = @TRUE  begin  update  #TrialBalance  set  BegBalance = ( select   ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then   case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.PERDBLNC * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.PERDBLNC / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.PERDBLNC  end)),0.00)   from  GL10111 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL10111.ACTINDX  and GL10111.PERIODID >= @BEGINNING_BALANCE  and GL10111.PERIODID <= (@I_iStartingPeriod - 1)  and GL10111.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and GL10111.YEAR1 = @I_iYear  and #TrialBalance.CurrencyIndex = 0),  AccountsExist =   ISNULL((select   top 1 1  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0),0)  end  else   begin  update  #TrialBalance  set  BegBalance = ( select   ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then   case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.PERDBLNC * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.PERDBLNC / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.PERDBLNC  end)),0.00)   from  GL10110 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL10110.ACTINDX  and GL10110.PERIODID >= @BEGINNING_BALANCE  and GL10110.PERIODID <= (@I_iStartingPeriod - 1)  and GL10110.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and GL10110.YEAR1 = @I_iYear  and #TrialBalance.CurrencyIndex = 0),  AccountsExist =   ISNULL((select   top 1 1  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0),0)  end end  if @tCalculateUsingSummary = @FALSE or @I_tDateRangeByPeriod = @FALSE  begin  if @tCalculateUsingSummary = @TRUE   begin  select @dStartingDate = @I_dStartingPeriodDate  end  else  begin  select @dStartingDate = @DEFAULT_DATE  end   if @I_tHistoryYear = @TRUE  begin  update  #TrialBalance  set  BegBalance =  BegBalance  +  (select   ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end)  -  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) ),0.00)  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @dStartingDate  and GL30000.TRXDATE < @I_dStartingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0),   AccountsExist = AccountsExist +  ISNULL((select   top 1 1  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0),0)  end  else   begin  update  #TrialBalance  set  BegBalance =  BegBalance  +  (select   ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end)  -  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) ),0.00)  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @dStartingDate  and GL20000.TRXDATE < @I_dStartingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0),  AccountsExist =  AccountsExist +   ISNULL((select   top 1 1  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0),0)  end end  if @I_tIncludeMCInfo = @TRUE or (@I_iReportType = @DETAIL and @I_tInactiveAccounts = @FALSE) begin   if @I_tHistoryYear = @TRUE  begin  update  #TrialBalance  set  EndBalance =  ISNULL((BegBalance),0.00)  +  (select   ISNULL(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  sum(ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00) -   ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00))  else  sum(ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00) -   ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00))  end  else  ISNULL(sum((GL30000.DEBITAMT)-(GL30000.CRDTAMNT) ),0.00)  end)  ,0.00)  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0)  end  else   begin  update  #TrialBalance  set  EndBalance =  ISNULL(BegBalance,0.00)  +  (select   ISNULL(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  sum(ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00) -   ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00))  else  sum(ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00) -   ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00))  end  else  ISNULL(sum((GL20000.DEBITAMT)-(GL20000.CRDTAMNT) ),0.00)  end)  ,0.00)  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and #TrialBalance.CurrencyIndex = 0)  end end    if @I_iReportType = @DETAIL and @I_tIncludeZeroBalance = @FALSE begin  if @I_tHistoryYear = @TRUE   begin  delete from #TrialBalance   where BegBalance = 0.00  and AccountIndex not in (select distinct ACTINDX from GL30000  where  GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  end  else  begin  delete from #TrialBalance   where  BegBalance = 0.00   and AccountIndex not in (select   distinct ACTINDX   from   GL20000  where  GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  end end   if @I_iReportType = @DETAIL and @I_tInactiveAccounts = @FALSE  begin  if @I_tHistoryYear = @TRUE   begin  delete from #TrialBalance   where  EndBalance = 0.00  and AccountIndex in (select   distinct GL00100.ACTINDX  from  GL00100 join GL30000  on  GL00100.ACTINDX = GL30000.ACTINDX  where  GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and GL00100.ACTIVE = 0)  end  else  begin  delete from #TrialBalance   where  EndBalance = 0.00  and AccountIndex in (select   distinct GL00100.ACTINDX   from   GL00100 join GL20000  on  GL00100.ACTINDX = GL20000.ACTINDX  where  GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and GL00100.ACTIVE = 0)  end end  if @I_iReportType = @DETAIL AND @I_tSubtotalBy > 1 begin  exec @iStatus = glPrintTrialBalanceDetailSubTotal  @I_cTableNameDetail,  @I_tDateRangeByPeriod,  @I_dStartingDate,  @I_dEndingDate,  @I_iStartingPeriod,  @I_iEndingPeriod,  @I_iYear,  @tCalculateUsingSummary,  @I_tHistoryYear,  @I_tSubtotalBy,  @I_tMCRegistered,  @I_sPrintCurrencyIn,  @I_nReportingExchangeRate,  @I_sReportingRateCalcMethod,  @I_sReportingDecimalPlaces,  @I_tIncludeMCInfo,  @I_cStartingCurrID,  @I_cEndingCurrID,  @IncludeLedgersStatement,  @O_SQL_Error_State output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_SQL_Error_State  <> 0)  return (@iStatus) end  if @I_tIncludeMCInfo = @TRUE begin  if @I_iReportType <> @DETAIL   begin  if @I_tSubtotalBy < 2  begin   if @tCalculateUsingSummary = @TRUE  begin  if @I_tHistoryYear = @TRUE  begin  update  #TrialBalance  set  TotalDebitAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) )  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and  #TrialBalance.AccountType <> @UNIT_ACCT  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  GL30000.CURNCYID = #TrialBalance.CurrencyID),  TotalCreditAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) )  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and  #TrialBalance.AccountType <> @UNIT_ACCT  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  GL30000.CURNCYID = #TrialBalance.CurrencyID)   update  #TrialBalance  set  TotalDebitAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) )  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)),  TotalCreditAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) )  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  where  #TrialBalance.AccountType = @UNIT_ACCT  and #TrialBalance.CurrencyIndex <> 0  update  #TrialBalance  set  OrigTotalDebitAmt =  (select   sum(GL30000.ORDBTAMT)  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and  #TrialBalance.AccountType <> @UNIT_ACCT  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  GL30000.CURNCYID = #TrialBalance.CurrencyID),  OrigTotalCreditAmt =  (select   sum(GL30000.ORCRDAMT)  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and  #TrialBalance.AccountType <> @UNIT_ACCT  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  GL30000.CURNCYID = #TrialBalance.CurrencyID)  end  else   begin  update  #TrialBalance  set  TotalDebitAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) )  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and (GL20000.CURNCYID = #TrialBalance.CurrencyID  and  #TrialBalance.AccountType <> @UNIT_ACCT)),  TotalCreditAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) )  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  (GL20000.CURNCYID = #TrialBalance.CurrencyID  and  #TrialBalance.AccountType <> @UNIT_ACCT))   update  #TrialBalance  set  TotalDebitAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) )  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)),  TotalCreditAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) )  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  where  #TrialBalance.AccountType = @UNIT_ACCT  and #TrialBalance.CurrencyIndex <> 0   update  #TrialBalance  set  OrigTotalDebitAmt =   (select   sum(GL20000.ORDBTAMT)  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and  #TrialBalance.AccountType <> @UNIT_ACCT  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  GL20000.CURNCYID = #TrialBalance.CurrencyID),  OrigTotalCreditAmt =   (select   sum(GL20000.ORCRDAMT)  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and  #TrialBalance.AccountType <> @UNIT_ACCT  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  and  GL20000.CURNCYID = #TrialBalance.CurrencyID)  end   end   end   else   begin  exec @iStatus = glPrintTrialBalanceSubTotal  @I_tDateRangeByPeriod,  @I_dStartingDate,  @I_dEndingDate,  @I_iStartingPeriod,  @I_iEndingPeriod,  @I_iYear,  @tCalculateUsingSummary,  @I_tHistoryYear,  @I_tSubtotalBy,  @I_tMCRegistered,  @I_sPrintCurrencyIn,  @I_nReportingExchangeRate,  @I_sReportingRateCalcMethod,  @I_sReportingDecimalPlaces,  @I_tIncludeMCInfo,  @I_tIncludeUnitAccounts,  @IncludeLedgerBase,   @IncludeLedgerIFRS,   @IncludeLedgerLocal,  @O_SQL_Error_State output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_SQL_Error_State  <> 0)  return (@iStatus)  end   end  end else  begin  if @I_iReportType <> @DETAIL   begin  if @I_tSubtotalBy < 2  begin   if @tCalculateUsingSummary = @TRUE and @I_tDateRangeByPeriod = @TRUE  begin  if @I_tHistoryYear = @TRUE  begin  update  #TrialBalance  set  TotalDebitAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then   case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.DEBITAMT  end))  from  GL10111 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL10111.ACTINDX  and GL10111.PERIODID >= @I_iStartingPeriod  and GL10111.PERIODID <= @I_iEndingPeriod  and GL10111.YEAR1 = @I_iYear  and GL10111.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)),  TotalCreditAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then   case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.CRDTAMNT  end))  from  GL10111 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL10111.ACTINDX  and GL10111.PERIODID >= @I_iStartingPeriod  and GL10111.PERIODID <= @I_iEndingPeriod  and GL10111.YEAR1 = @I_iYear  and GL10111.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  end  else   begin  update  #TrialBalance  set  TotalDebitAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then   case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.DEBITAMT  end))  from  GL10110 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL10110.ACTINDX  and GL10110.PERIODID >= @I_iStartingPeriod  and GL10110.PERIODID <= @I_iEndingPeriod  and GL10110.YEAR1 = @I_iYear  and GL10110.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)),  TotalCreditAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then   case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.CRDTAMNT  end))  from  GL10110 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL10110.ACTINDX  and GL10110.PERIODID >= @I_iStartingPeriod  and GL10110.PERIODID <= @I_iEndingPeriod  and GL10110.YEAR1 = @I_iYear  and GL10110.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  end  end  else  begin  if @I_tHistoryYear = @TRUE  begin  update  #TrialBalance  set  TotalDebitAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) )  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)),  TotalCreditAmount =  (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) )  from  GL30000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))   end  else   begin  update  #TrialBalance  set  TotalDebitAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) )  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)),  TotalCreditAmount =   (select sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) )  from  GL20000 with (NOLOCK)  where  #TrialBalance.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal))  end   end   end   else   begin  exec @iStatus = glPrintTrialBalanceSubTotal  @I_tDateRangeByPeriod,  @I_dStartingDate,  @I_dEndingDate,  @I_iStartingPeriod,  @I_iEndingPeriod,  @I_iYear,  @tCalculateUsingSummary,  @I_tHistoryYear,  @I_tSubtotalBy,  @I_tMCRegistered,  @I_sPrintCurrencyIn,  @I_nReportingExchangeRate,  @I_sReportingRateCalcMethod,  @I_sReportingDecimalPlaces,  @I_tIncludeMCInfo,  @I_tIncludeUnitAccounts,  @IncludeLedgerBase,   @IncludeLedgerIFRS,   @IncludeLedgerLocal,   @O_SQL_Error_State output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_SQL_Error_State  <> 0)  return (@iStatus)  end   end  end  if @I_tIncludeUnitAccounts = @TRUE and @I_iReportType = @DETAIL begin  insert into  #UnitAccount  select   AccountIndex  from   #TrialBalance  where  #TrialBalance.AccountType = @UNIT_ACCT   if @I_iReportType <> @DETAIL  begin  select   @O_mUnitAccountTotal =  isnull(sum(TotalDebitAmount),0.00) +  isnull(sum(TotalCreditAmount),0.00)  from  #TrialBalance  where  #TrialBalance.AccountType = @UNIT_ACCT  end  else if @tCalculateUsingSummary = @TRUE and @I_tDateRangeByPeriod = @TRUE and @I_iReportType <> @DETAIL  begin   if @I_tHistoryYear = @TRUE  begin  select   @O_mUnitAccountTotal = ISNULL(sum(GL10111.PERDBLNC),0.00)  from  GL10111 with (NOLOCK),  #UnitAccount  where  #UnitAccount.AccountIndex = GL10111.ACTINDX  and GL10111.PERIODID >= @I_iStartingPeriod  and GL10111.PERIODID <= @I_iEndingPeriod  and GL10111.YEAR1 = @I_iYear  and GL10111.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  end  else   begin  select   @O_mUnitAccountTotal = ISNULL(sum(GL10110.PERDBLNC),0.00)  from  GL10110 with (NOLOCK),  #UnitAccount  where  #UnitAccount.AccountIndex = GL10110.ACTINDX  and GL10110.PERIODID >= @I_iStartingPeriod  and GL10110.PERIODID <= @I_iEndingPeriod  and GL10110.YEAR1 = @I_iYear  and GL10110.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  end  end  else    begin  if @I_tHistoryYear = @TRUE  begin  select   @O_mUnitAccountTotal = ISNULL(sum(GL30000.DEBITAMT - GL30000.CRDTAMNT),0.00)  from  GL30000 with (NOLOCK),  #UnitAccount  where  #UnitAccount.AccountIndex = GL30000.ACTINDX  and GL30000.TRXDATE >= @I_dStartingDate  and GL30000.TRXDATE <= @I_dEndingDate  and GL30000.HSTYEAR = @I_iYear  and GL30000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  end  else   begin  select   @O_mUnitAccountTotal = ISNULL(sum(GL20000.DEBITAMT - GL20000.CRDTAMNT),0.00)  from  GL20000 with (NOLOCK),  #UnitAccount  where  #UnitAccount.AccountIndex = GL20000.ACTINDX  and GL20000.TRXDATE >= @I_dStartingDate  and GL20000.TRXDATE <= @I_dEndingDate  and GL20000.OPENYEAR = @I_iYear  and GL20000.Ledger_ID in (@IncludeLedgerBase, @IncludeLedgerIFRS, @IncludeLedgerLocal)  end   end    select   @O_mUnitAccountTotal = @O_mUnitAccountTotal + ISNULL(sum(BegBalance),0.00)  from  #TrialBalance  where  #TrialBalance.AccountType = @UNIT_ACCT  end   if @I_tIncludeZeroBalance = @FALSE and @I_iReportType <> @DETAIL begin   delete from  #TrialBalance  where  BegBalance  = 0.00  and  EndBalance = 0.00  and TotalDebitAmount is NULL  and  TotalCreditAmount is NULL end  if @I_tInactiveAccounts = @FALSE and @I_iReportType <> @DETAIL begin   delete from  #TrialBalance  where  (BegBalance + ISNULL(TotalDebitAmount,0.00) + (ISNULL(TotalCreditAmount,0.00) * -1)) = 0.00  and (ISNULL(TotalDebitAmount,0.00) <> 0.00  or  ISNULL(TotalCreditAmount,0.00) <> 0.00)  and  AccountIndex in (select   ACTINDX  from  GL00100  where  ACTINDX = AccountIndex  and ACTIVE = 0) end  if @I_tIncludeMCInfo = @TRUE  select @vInsertStatement1 = 'insert into ' + @I_cTableName + ' select GL00105.*, BegBalance,   EndBalance,   Year, StartingDate,EndingDate,ISNULL(TotalDebitAmount,0.00),ISNULL(TotalCreditAmount,0.00)' else   select @vInsertStatement1 = 'insert into ' + @I_cTableName + ' select GL00105.*, BegBalance,   (BegBalance + ISNULL(TotalDebitAmount,0.00) + (ISNULL(TotalCreditAmount,0.00) * -1)),   Year, StartingDate,EndingDate,ISNULL(TotalDebitAmount,0.00),ISNULL(TotalCreditAmount,0.00)'  select @vInsertStatement2 = ',  PeriodName,  PeriodIndex,  ISNULL(DebitAmount,0.00),  ISNULL(CreditAmount,0.00),  ISNULL(NetAmount,0.00),  AccountsExist,  CurrencyID,'  select @vInsertStatement3 = '  CurrencyIndex,  ISNULL(OrigTotalDebitAmt,0.00),  ISNULL(OrigTotalCreditAmt,0.00),  ISNULL(OrigNetAmount,0.00) from #TrialBalance,GL00105 where #TrialBalance.AccountIndex = GL00105.ACTINDX'  exec (@vInsertStatement1 + @vInsertStatement2 + @vInsertStatement3)  return(@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceReport] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceReport] TO [rpt_accounting manager]
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceReport] TO [rpt_bookkeeper]
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceReport] TO [rpt_certified accountant]
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceReport] TO [rpt_power user]
GO
