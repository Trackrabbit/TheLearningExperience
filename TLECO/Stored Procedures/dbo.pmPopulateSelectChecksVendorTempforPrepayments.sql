SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[pmPopulateSelectChecksVendorTempforPrepayments]  @I_cVendorTemp char(40)= NULL,  @I_cStartVendorID char(15)= NULL,   @I_cEndVendorID char(15)= NULL,   @I_cStartVendorName char(65)= NULL,   @I_cEndVendorName char(65)= NULL,   @I_cStartVendorClassID char(11)= NULL,   @I_cEndVendorClassID char(11)= NULL,   @I_cStartPaymentPriority char(3)= NULL,   @I_cEndPaymentPriority char(3)= NULL,   @I_cStartVoucherNumber char(20)= NULL,   @I_cEndVoucherNumber char(20)= NULL,   @I_cStartDocNumber char(20)= NULL,   @I_cEndDocNumber char(20)= NULL,   @I_cStartPONumber char(20)= NULL,   @I_cEndPONumber char(20)= NULL,   @I_iPrintPrevApplDocs tinyint = NULL,    @I_cCheckbookID char(15) = NULL,  @I_iEFTFileFormat smallint = NULL,    @I_iBankTransfer tinyint = NULL,   @I_iPMEFTRegistered tinyint = NULL,   @I_iAllowEFTinChecks tinyint = NULL,   @I_cUserDate char(8)= NULL,  @I_iVendorWFEnabled tinyint = NULL,   @O_iErrorState int  = NULL output  as  declare   @iError int,  @iStatus int,  @TRUE int,  @FALSE int,  @PM_DOC_MISC_CHG int,  @KEYSOURCE_PM char(10),  @cKEYSOURCE_PM char(22),  @cStartVendorID char(82),   @cEndVendorID char(82),   @cStartVendorName char(132),  @cEndVendorName char(132),  @cStartVendorClassID char(42),  @cEndVendorClassID char(42),  @cStartPaymentPriority char(42),  @cEndPaymentPriority char(42),  @cStartVoucherNumber char(42),  @cEndVoucherNumber char(42),  @cStartDocNumber char(42),  @cEndDocNumber char(42),  @cStartPONumber char(42),  @cEndPONumber char(42),  @cUserDate char(18),  @iPrenoteRequired tinyint,  @iBankType smallint,  @iPrenoteGracePeriod smallint,  @iCheckbookFound tinyint   select  @O_iErrorState   = 0,  @iStatus         = 0   if @I_cVendorTemp is NULL  begin  select @O_iErrorState = 21095   return  end    exec @iStatus = DYNAMICS..smGetConstantInt 'TRUE', @TRUE output, @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt 'FALSE', @FALSE output, @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)   exec @iStatus = DYNAMICS..smGetConstantString 'KEYSOURCE_PM', @KEYSOURCE_PM output, @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)   exec @iStatus = DYNAMICS..smGetConstantInt 'PM_DOC_MISC_CHG', @PM_DOC_MISC_CHG output, @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @KEYSOURCE_PM,  @cKEYSOURCE_PM output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartVendorID,  @cStartVendorID output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndVendorID,  @cEndVendorID output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartVendorName,  @cStartVendorName output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndVendorName,  @cEndVendorName output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartVendorClassID,  @cStartVendorClassID output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndVendorClassID,  @cEndVendorClassID output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartPaymentPriority,  @cStartPaymentPriority output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndPaymentPriority,  @cEndPaymentPriority output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartVoucherNumber,  @cStartVoucherNumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndVoucherNumber,  @cEndVoucherNumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartDocNumber,  @cStartDocNumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndDocNumber,  @cEndDocNumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cUserDate,  @cUserDate output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cStartPONumber,  @cStartPONumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   Exec @iStatus = smFormatStringsForExecs  @I_cEndPONumber,  @cEndPONumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@iStatus <> 0) or (@O_iErrorState <> 0)  return (@iStatus)   exec ('delete ' + @I_cVendorTemp)   if @I_iVendorWFEnabled=0  exec('insert into ' + @I_cVendorTemp + '  (VENDORID, VENDNAME, VNDCLSID, USERDEF1, PYMNTPRI, VNRECSTS,   OLDCUBAL, OUPDFCHR, OUAPYBAL, OLDONORDER, OldPrepaymentAmount,  CURRBLNC, UNPDFNCH, CURUNPBN, ONORDAMT, PrepaymentAmount)  select  VENDORID,  VENDNAME,  VNDCLSID,  USERDEF1,  PYMNTPRI,  0,0,0,0,0,0,0,0,0,0,0  from  PM00200 V  where  (  V.VENDORID between ' + @cStartVendorID + ' and ' + @cEndVendorID +   ' and V.VENDNAME between ' + @cStartVendorName + ' and ' + @cEndVendorName +   ' and V.VNDCLSID between ' + @cStartVendorClassID + ' and ' + @cEndVendorClassID +   ' and V.PYMNTPRI between ' + @cStartPaymentPriority + ' and ' + @cEndPaymentPriority +   ')  and (  exists (  select 1 from (select POP10100.VENDORID,POP10100.PONUMBER,POP10170.CURTRXAM,POP10170.DOCNUMBR from POP10170 inner join POP10100 on POP10170.PONUMBER=POP10100.PONUMBER) O   where  O.VENDORID = V.VENDORID  and (  O.PONUMBER between ' + @cStartPONumber + ' and ' + @cEndPONumber + '   and O.DOCNUMBR between ' + @cStartDocNumber + ' and ' + @cEndDocNumber + '   )  and O.CURTRXAM > 0  and O.PONUMBER not in (select PONUMBER from POA40003 where POA_PO_Approval_Status=1)  )  )  ')  else  exec('insert into ' + @I_cVendorTemp + '  (VENDORID, VENDNAME, VNDCLSID, USERDEF1, PYMNTPRI, VNRECSTS,   OLDCUBAL, OUPDFCHR, OUAPYBAL, OLDONORDER, OldPrepaymentAmount,  CURRBLNC, UNPDFNCH, CURUNPBN, ONORDAMT, PrepaymentAmount)  select  VENDORID,  VENDNAME,  VNDCLSID,  USERDEF1,  PYMNTPRI,  0,0,0,0,0,0,0,0,0,0,0  from  PM00200 V  where  (  V.VENDORID between ' + @cStartVendorID + ' and ' + @cEndVendorID +   ' and V.VENDNAME between ' + @cStartVendorName + ' and ' + @cEndVendorName +   ' and V.VNDCLSID between ' + @cStartVendorClassID + ' and ' + @cEndVendorClassID +   ' and V.PYMNTPRI between ' + @cStartPaymentPriority + ' and ' + @cEndPaymentPriority +  ' and V.Workflow_Status not in (1,4,5,7) ' +  ')  and (  exists (  select 1 from (select POP10100.VENDORID,POP10100.PONUMBER,POP10170.CURTRXAM,POP10170.DOCNUMBR   from POP10170 inner join POP10100 on POP10170.PONUMBER=POP10100.PONUMBER) O  where  O.VENDORID = V.VENDORID  and (  O.PONUMBER between ' + @cStartPONumber + ' and ' + @cEndPONumber + '   and O.DOCNUMBR between ' + @cStartDocNumber + ' and ' + @cEndDocNumber + '   )  and O.CURTRXAM > 0  and O.PONUMBER not in (select PONUMBER from POA40003 where POA_PO_Approval_Status=1)  )  )  ')  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[pmPopulateSelectChecksVendorTempforPrepayments] TO [DYNGRP]
GO
