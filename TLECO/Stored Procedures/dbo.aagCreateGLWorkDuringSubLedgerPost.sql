SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create         procedure [dbo].[aagCreateGLWorkDuringSubLedgerPost] @I_nCompanyID smallint, @I_cORTRXSRC char(30), @O_fValidCode tinyint = 1 output, @Jrnl_Entry int, @OptInp_Series smallint, @OptChrBatchNum char(15), @OptRMRefund      char(30)  as  begin  set nocount on  declare  @dtGLPostingDate datetime,  @Series smallint,  @JRNENTRY int,  @HdrRecCreated tinyint,  @DTAControlNum char(21),  @DTATRXType smallint,  @CURNCYID char(15),  @ORDOCNUM char(21),  @ORCTRNUM char(21),  @ORTRXTYP smallint,  @OrigSeqNum int,  @ORTRXDESC char(31),  @aaSubLedgerHdrID int,  @fSuccess tinyint,  @nGLWorkHdrID int,  @INTERID char(5),  @CorrespondingUnit char(5),  @ACTINDX int,  @ACCTTYPE smallint,  @DECPLACS smallint,  @FXDORVAR smallint,  @DEBITAMT numeric(19,5),  @CRDTAMNT numeric(19,5),  @ORDBTAMT numeric(19,5),  @ORCRDAMT numeric(19,5),  @CURRNIDX smallint,  @SQNCLINE numeric(19,5),  @nDistID int,  @nStatus smallint,  @OrigDTASeries smallint,  @BACHNUMB char(15),  @SEQLINE numeric(19,5),  @aaSubLedgerHdrIDtemp int,  @nDistIDtemp int,  @PM_Trxent varchar(50),  @iStatus int,  @iErrorState int,   @aaBrowseType smallint,  @oRequiredFieldEmpty    SMALLINT,  @ClassID int   set @aaSubLedgerHdrIDtemp = 0  set @nDistIDtemp = 0   set @nDistID = 0  set @SEQLINE = 0  SELECT @aaBrowseType = 0, @ClassID = 0  if len(ltrim(rtrim(@I_cORTRXSRC))) = 0   begin  return  end   if @Jrnl_Entry = 0  begin  if @OptInp_Series = 4   begin  declare glWorkLHdr cursor fast_forward for  select JRNENTRY,DTAControlNum, DTATRXType, SERIES, CURNCYID, TRXDATE, OrigDTASeries, BACHNUMB from GL10000  where ORTRXSRC = @I_cORTRXSRC and SERIES = @OptInp_Series order by JRNENTRY   end  else  begin   if ltrim(rtrim(@OptChrBatchNum)) = ''   declare glWorkLHdr cursor fast_forward for   select JRNENTRY,DTAControlNum, DTATRXType, SERIES, CURNCYID, TRXDATE, OrigDTASeries, BACHNUMB from GL10000   where ORTRXSRC = @I_cORTRXSRC order by JRNENTRY   else   declare glWorkLHdr cursor fast_forward for   select JRNENTRY,DTAControlNum, DTATRXType, SERIES, CURNCYID, TRXDATE, OrigDTASeries, BACHNUMB from GL10000   where ORTRXSRC = @I_cORTRXSRC and BACHNUMB = @OptChrBatchNum order by JRNENTRY   end   end  else  begin  declare glWorkLHdr cursor fast_forward for  select JRNENTRY,DTAControlNum, DTATRXType, SERIES, CURNCYID, TRXDATE, OrigDTASeries, BACHNUMB from GL10000  where JRNENTRY = @Jrnl_Entry order by JRNENTRY  end   open glWorkLHdr  fetch next from glWorkLHdr into @JRNENTRY, @DTAControlNum,@DTATRXType,@Series, @CURNCYID, @dtGLPostingDate,@OrigDTASeries,@BACHNUMB   while @@fetch_status = 0  begin  set @nDistID = 0  set @HdrRecCreated = 0   exec @iStatus = DYNAMICS.dbo.smGetConstantString   'PM_TRXENT_STR',   @PM_Trxent output,   @iErrorState output   if exists(select 1 from SY00500 where BCHSOURC = @PM_Trxent and TRXSORCE = @I_cORTRXSRC and (BCHSTTUS between 5 and 60))  begin  set @nGLWorkHdrID = 0  select @nGLWorkHdrID = isnull(aaGLWorkHdrID,0) from AAG10000 where JRNENTRY = @JRNENTRY  delete AAG10003 where aaGLWorkHdrID = @nGLWorkHdrID  delete AAG10002 where aaGLWorkHdrID = @nGLWorkHdrID  delete AAG10001 where aaGLWorkHdrID = @nGLWorkHdrID  end   declare glWorkLine cursor fast_forward for  select ORDOCNUM, ORTRXTYP, OrigSeqNum, ORCTRNUM, ORTRXDESC, INTERID,  CorrespondingUnit, ACTINDX, ACCTTYPE,DECPLACS, FXDORVAR, DEBITAMT,  CRDTAMNT, ORDBTAMT, ORCRDAMT, CURRNIDX, SQNCLINE  from GL10001 where JRNENTRY = @JRNENTRY   order by SQNCLINE  open glWorkLine  fetch next from glWorkLine into @ORDOCNUM, @ORTRXTYP,@OrigSeqNum,@ORCTRNUM,@ORTRXDESC,@INTERID,  @CorrespondingUnit, @ACTINDX, @ACCTTYPE,@DECPLACS, @FXDORVAR,@DEBITAMT,  @CRDTAMNT, @ORDBTAMT, @ORCRDAMT, @CURRNIDX, @SQNCLINE  while @@fetch_status = 0  begin   if @HdrRecCreated = 0  begin   set @nGLWorkHdrID = 0   select @nGLWorkHdrID = aaGLWorkHdrID from AAG10000 where JRNENTRY = @JRNENTRY  if @nGLWorkHdrID is null or @nGLWorkHdrID = 0  begin  exec  DYNAMICS.dbo.aagGetNextID   10000,  @I_nCompanyID,  @nGLWorkHdrID out,  @nStatus out   if not exists(select aaGLWorkHdrID from AAG10000 where aaGLWorkHdrID=@nGLWorkHdrID)  insert into AAG10000(aaGLWorkHdrID,JRNENTRY,RCTRXSEQ,GLPOSTDT,aaTRXType, Ledger_ID)  values (@nGLWorkHdrID, @JRNENTRY,0,@dtGLPostingDate,1, 1)   set @HdrRecCreated = 1  end   end   select @nDistID = isnull(max(aaGLWorkDistID),0), @SEQLINE = isnull(max(SQNCLINE),0)  from AAG10001 WITH (nolock) where aaGLWorkHdrID = @nGLWorkHdrID  set @nDistID = @nDistID + 1  if @ORDOCNUM <> ''  begin    if @Series = 4  and @BACHNUMB not like 'PM%' and @OrigDTASeries=0 and @BACHNUMB not like 'CB%' and @BACHNUMB not like 'BM%'  set @OrigDTASeries = 12  else if @Series = 3  and @BACHNUMB not like 'RM%' and @OrigDTASeries = 0 and @BACHNUMB not like 'CB%' and @BACHNUMB not like 'BM%'  set @OrigDTASeries = 11  else if @OrigDTASeries=0  set @OrigDTASeries = @Series  if @Series = 4 and @OrigDTASeries <> 12  begin  if @ORTRXTYP < 6  set @ORTRXTYP = 0  else  set @ORTRXTYP = 1  select @aaSubLedgerHdrID = aaSubLedgerHdrID from AAG20000  where SERIES = @OrigDTASeries and DOCNUMBR = @ORCTRNUM and DOCTYPE = @ORTRXTYP   end  else  select @aaSubLedgerHdrID = aaSubLedgerHdrID from AAG20000  where SERIES = @OrigDTASeries and DOCNUMBR = @ORDOCNUM and DOCTYPE = @ORTRXTYP  if @OrigDTASeries = 12  begin   if @SQNCLINE > @SEQLINE   begin  exec aagCopyToGLWorkFromSubLedger  @aaSubLedgerHdrID,  @OrigSeqNum,  @nGLWorkHdrID,  @nDistID,  @JRNENTRY,  @dtGLPostingDate,  @SQNCLINE,  @fSuccess output  end  end  else  begin  if @OrigDTASeries=5 and @aaSubLedgerHdrIDtemp <> @aaSubLedgerHdrID  Begin  set @aaSubLedgerHdrIDtemp=@aaSubLedgerHdrID  set @nDistIDtemp = 1  set @OrigSeqNum=@nDistIDtemp  end  else if @OrigDTASeries=5   Begin  set @nDistIDtemp = @nDistIDtemp + 1  set @OrigSeqNum=@nDistIDtemp  end  if @ORTRXDESC like ltrim(rtrim(@OptRMRefund)) + '%'  and @ORTRXDESC <> '' and ltrim(rtrim(@OptRMRefund)) <> ''  Begin  insert AAG10001(aaGLWorkHdrID, aaGLWorkDistID, INTERID, CorrespondingUnit, ACTINDX,  ACCTTYPE, aaBrowseType, DECPLACS, FXDORVAR, DEBITAMT, CRDTAMNT, ORDBTAMT, ORCRDAMT,  CURNCYID, CURRNIDX, SQNCLINE,aaWinWasOpen,aaChangeDate,aaChangeTime,AA_CL_Status )  values(@nGLWorkHdrID, @nDistID,@INTERID, @CorrespondingUnit, @ACTINDX,  @ACCTTYPE, 1, @DECPLACS, @FXDORVAR, @DEBITAMT, @CRDTAMNT, @ORDBTAMT, @ORCRDAMT,  isnull(@CURNCYID,0), @CURRNIDX, @SQNCLINE,1,convert(char(12), getdate(), 102),convert(char(12), getdate(), 108),0)   insert AAG10002(aaGLWorkHdrID, aaGLWorkDistID, aaGLWorkAssignID, aaAssignedPercent,  DEBITAMT, CRDTAMNT, ORDBTAMT, ORCRDAMT)  values(@nGLWorkHdrID, @nDistID,1,10000,  @DEBITAMT, @CRDTAMNT, @ORDBTAMT, @ORCRDAMT)    IF NOT EXISTS  (SELECT 1 FROM AAG10003  WHERE aaGLWorkHdrID = @nGLWorkHdrID  AND aaGLWorkDistID = @nDistID  AND aaGLWorkAssignID = 1)  BEGIN  EXEC aagGLWorkCodeUpdate   @nGLWorkHdrID,   @nDistID,   1,   @ClassID,   @oRequiredFieldEmpty OUTPUT   END  end  else  begin  exec aagCopyToGLWorkFromSubLedger  @aaSubLedgerHdrID,  @OrigSeqNum,  @nGLWorkHdrID,  @nDistID,  @JRNENTRY,  @dtGLPostingDate,  @SQNCLINE,  @fSuccess output  end  end  end  else   begin  exec aagGetClassIDBrowseType @ACTINDX, @ClassID output, @aaBrowseType output   insert AAG10001(aaGLWorkHdrID, aaGLWorkDistID, INTERID, CorrespondingUnit, ACTINDX,  ACCTTYPE, aaBrowseType, DECPLACS, FXDORVAR, DEBITAMT, CRDTAMNT, ORDBTAMT, ORCRDAMT,  CURNCYID, CURRNIDX, SQNCLINE,AA_CL_Status)  values(@nGLWorkHdrID, @nDistID,@INTERID, @CorrespondingUnit, @ACTINDX,  @ACCTTYPE, @aaBrowseType, @DECPLACS, @FXDORVAR, @DEBITAMT, @CRDTAMNT, @ORDBTAMT, @ORCRDAMT,  isnull(@CURNCYID,0), @CURRNIDX, @SQNCLINE,0)   insert AAG10002(aaGLWorkHdrID, aaGLWorkDistID, aaGLWorkAssignID, aaAssignedPercent,  DEBITAMT, CRDTAMNT, ORDBTAMT, ORCRDAMT)  values(@nGLWorkHdrID, @nDistID,1,10000,  @DEBITAMT, @CRDTAMNT, @ORDBTAMT, @ORCRDAMT)  IF @aaBrowseType <> 0   AND NOT EXISTS  (SELECT 1 FROM AAG10003  WHERE aaGLWorkHdrID = @nGLWorkHdrID  AND aaGLWorkDistID = @nDistID  AND aaGLWorkAssignID = 1)  BEGIN  EXEC aagGLWorkCodeUpdate   @nGLWorkHdrID,   @nDistID,   1,   @ClassID,   @oRequiredFieldEmpty OUTPUT   END  end  fetch next from glWorkLine into @ORDOCNUM, @ORTRXTYP,@OrigSeqNum,@ORCTRNUM,@ORTRXDESC,@INTERID,  @CorrespondingUnit, @ACTINDX, @ACCTTYPE,@DECPLACS, @FXDORVAR,@DEBITAMT,  @CRDTAMNT, @ORDBTAMT, @ORCRDAMT, @CURRNIDX, @SQNCLINE  end   close glWorkLine  deallocate glWorkLine   fetch next from glWorkLHdr into @JRNENTRY, @DTAControlNum, @DTATRXType, @Series, @CURNCYID, @dtGLPostingDate,@OrigDTASeries,@BACHNUMB  end  close glWorkLHdr  deallocate glWorkLHdr   set nocount off  return end    
GO
GRANT EXECUTE ON  [dbo].[aagCreateGLWorkDuringSubLedgerPost] TO [DYNGRP]
GO
