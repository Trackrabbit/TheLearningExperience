SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taReverseGlTransaction]  @I_vINTERID char(5), @I_vDTAControlNum char(20), @I_vORMSTRID char(30), @I_vCUSTNAME char(64), @I_vCURNCYID char(15), @I_vCURRNIDX int,  @I_vDECPLCUR int, @I_vTRXDATE datetime, @I_vJRNENTRY int, @I_vTRXSORCE char(13), @I_vTRXSORCE_FROM char(13), @I_vDENXRATE numeric(19,5) = 0, @I_vMCTRXSTT smallint = 0, @I_vDOCDATE datetime = '', @I_vORTRXDESC char(31) = '', @I_vORTRXTYP smallint, @I_vSOURCDOC char(10), @I_vREFRENCE char(30), @I_vBCHSOURC char(15), @I_vSERIES smallint, @I_vDISCOUNTS smallint = 0, @I_vORPSTDDT datetime = '', @O_iErrorState int = NULL output, @oErrString varchar(255) = '' output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare   @aaSubLedgerHdrID int,  @CURNCYID char(15),  @CURRNIDX int,   @DECPLCUR int,  @SEQNUMBR int,  @sCompanyID smallint,  @iGetNextNoteIdxErrState smallint,  @nNextNoteIndex numeric(19,5),  @SQNCLINE int,  @iStatement int,  @incmnt int,  @secondsdgstr varchar(50),  @datedgstr varchar(50),  @DTA_Index numeric (19,5),  @date datetime,  @day int,  @month int,  @hours int,  @year int,  @seconds int,  @secondsdg int,  @datedg int,  @iStatus int,  @iError int,  @O_iBtchHdrErrState int,  @O_oErrorState int,  @iCreateBatchErrString varchar(255),  @DOCAMT numeric(19,5),  @iCursorError int,  @CRDTAMNT numeric(19,5),  @DEBITAMT numeric(19,5),  @ORCRDAMT numeric(19,5),  @ORDBTAMT numeric(19,5),  @DISTTYPE smallint,  @DSTINDX int,  @DSCRIPTN char(30),  @DistRef char(30),  @RATETPID char(15),  @XCHGRATE numeric(19,7),  @EXCHDATE datetime,  @EXPNDATE datetime,  @EXGTBLID char(15),  @TIME1 datetime,  @RTCLCMTD char(2),  @BCHCOMNT char(60),  @PERIODID smallint,  @OPENYEAR smallint,  @ISMCTRX tinyint,  @FUNLCURR char(15)  select   @aaSubLedgerHdrID = 0,  @CURNCYID = '',  @CURRNIDX = 0,   @DECPLCUR = 0,  @sCompanyID = '',  @iGetNextNoteIdxErrState = 0,  @nNextNoteIndex = 0,  @SQNCLINE = 0,  @iStatement = 0,  @O_iErrorState = 0,  @iStatus = 0,  @date = getdate(),  @day = DATEPART(dd, @date),  @month = DATEPART(mm, @date),  @hours = DATEPART(hh, @date),  @year = DATEPART(yy, @date),  @seconds = DATEPART(ss, @date),  @secondsdg = @hours*3600,  @secondsdgstr = str(@secondsdg + @seconds + @month),  @incmnt = 5 - len(@secondsdgstr),  @secondsdgstr = ltrim(@secondsdgstr),  @O_iBtchHdrErrState = 0,  @DOCAMT = 0,  @iCursorError = 0,  @CRDTAMNT = 0,  @DEBITAMT = 0,  @DISTTYPE = 0,  @DSTINDX = 0,  @RATETPID = '',  @XCHGRATE = 0,  @EXCHDATE = '',  @EXPNDATE = '',  @EXGTBLID = '',  @TIME1 = '',  @RTCLCMTD = '',  @BCHCOMNT = '',  @PERIODID = 0,  @OPENYEAR = 0,  @ISMCTRX = 0,   @FUNLCURR = ''  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 c (nolock) where c.INTERID = db_name()  while @incmnt > 0  begin  select @secondsdgstr = '0'+ ltrim(@secondsdgstr)   select @incmnt = @incmnt - 1 end  select @datedg = @day + @month * 31,  @datedgstr = substring(ltrim(str(@datedg)),1,3),  @incmnt = 3 - len(@datedgstr) while @incmnt > 0  begin  select @datedgstr = '0' + ltrim(@datedgstr)  select @incmnt = @incmnt - 1 end  select @datedgstr  = @datedgstr + substring(str(@year),3,2)   select @DTA_Index =   convert(numeric(19,5),ltrim(str(@I_vJRNENTRY)) +  rtrim(ltrim(@secondsdgstr)) +  '.' +  rtrim(ltrim(@datedgstr)))  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @O_mNoteIndex   = @nNextNoteIndex output,  @O_iErrorState  = @iGetNextNoteIdxErrState output select @iError = @@error if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 6241   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return(@O_iErrorState) end  select @FUNLCURR = FUNLCURR from MC40000 (nolock)   if (@I_vCURNCYID <> '') and (@I_vCURNCYID <> @FUNLCURR)  select @ISMCTRX = 1  select @OPENYEAR = YEAR1 from SY40101 a (nolock) where @I_vTRXDATE BETWEEN a.FSTFSCDY and a.LSTFSCDY select TOP(1)@PERIODID = PERIODID from SY40100 a (nolock) where a.YEAR1 = @OPENYEAR and   @I_vTRXDATE between a.PERIODDT and a.PERDENDT and a.SERIES = 2 and a.ODESCTN = 'General Entry' and CLOSED = 0 Order By PERIODID   insert into GL10000 ( NOTEINDX,  BACHNUMB,  BCHSOURC,  JRNENTRY,  SOURCDOC,  REFRENCE,  TRXDATE,  PSTGSTUS,  USWHPSTD,  SQNCLINE,  SERIES,  ORPSTDDT,  ORTRXSRC,  DTAControlNum,  DTATRXType,  DTA_Index,  CURNCYID,  CURRNIDX,  PRNTSTUS,  DENXRATE,     MCTRXSTT,      DOCDATE,     Tax_Date,      VOIDED,      Original_JE,     Original_JE_Year,    Original_JE_Seq_Num,    Correcting_Trx_Type,    OrigDTASeries,  PERIODID,  Ledger_ID  ) select    @nNextNoteIndex,  @I_vTRXSORCE,  @I_vBCHSOURC,  @I_vJRNENTRY,  @I_vSOURCDOC,  @I_vREFRENCE,  @I_vTRXDATE,  1,  'sa',  16384,  @I_vSERIES,  @I_vORPSTDDT,  @I_vTRXSORCE,  @I_vDTAControlNum,  case  when @I_vORTRXTYP = 9  then 9  when @I_vORTRXTYP = 8  then 8  when @I_vORTRXTYP = 7  then 7  else 2  end,  convert(numeric (19,5), @DTA_Index),  @I_vCURNCYID,  @I_vCURRNIDX,  1,  @I_vDENXRATE,  @I_vMCTRXSTT,  @I_vDOCDATE,  case  when substring(@I_vTRXSORCE,1,5) = 'RMAPY' or substring(@I_vTRXSORCE,1,5) = 'RMMSC'     then ''  else @I_vTRXDATE  end,      0,      0,      0,      0,      0,       case  when substring(@I_vTRXSORCE,1,5) = 'RMMSC'   then 3  else 0  end,  @PERIODID,  1 if @@error <> 0 begin  select @O_iErrorState = 6201    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  declare RM10101_LINES INSENSITIVE cursor for select  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  DISTTYPE,  DSTINDX,  SEQNUMBR,  DistRef  from RM10101 (nolock) where   DOCNUMBR = @I_vDTAControlNum and   TRXSORCE = @I_vTRXSORCE and   CUSTNMBR = @I_vORMSTRID   open RM10101_LINES select @iCursorError = @@cursor_rows  if (@iCursorError > 0) begin  fetch next from RM10101_LINES into  @CRDTAMNT,  @DEBITAMT,  @ORCRDAMT,  @ORDBTAMT,  @DISTTYPE,  @DSTINDX,  @SEQNUMBR,  @DistRef  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 6202    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  select  @RATETPID = isnull(RATETPID,''),  @XCHGRATE = isnull(XCHGRATE,0),  @EXCHDATE = isnull(EXCHDATE,''),  @EXGTBLID = isnull(EXGTBLID,''),  @TIME1 = isnull(TIME1,''),  @RTCLCMTD = isnull(RTCLCMTD,0),  @CURRNIDX = isnull(CURRNIDX,0)  from MC020102 nolock where  DOCNUMBR = @DistRef and CUSTNMBR = @I_vORMSTRID    select @DECPLCUR = isnull(DECPLCUR, 0) from DYNAMICS..MC40200 (nolock) where CURNCYID = @CURNCYID   if @DECPLCUR > 0  select @DECPLCUR = @DECPLCUR - 1   if @DISTTYPE = 3  begin  select @DSCRIPTN = 'Accounts Receivable'  end  else  if @DISTTYPE = 1  begin  select @DSCRIPTN = 'Cash'  end  else  if @DISTTYPE = 5  begin  select @DSCRIPTN = 'Term Discounts Available'  end  else  if @DISTTYPE = 2  begin  select @DSCRIPTN = 'Term Discounts Taken'  end  else  if @DISTTYPE = 4  begin  select @DSCRIPTN = 'Write Offs'  end  else  if @DISTTYPE = 8  begin  select @DSCRIPTN = 'Other'  end  else  if @DISTTYPE = 23  begin  select @DSCRIPTN = 'Commissions Expense'  end  else  if @DISTTYPE = 24  begin  select @DSCRIPTN = 'Commissions Payable'  end   else  if @DISTTYPE = 14  begin  select @DSCRIPTN = 'Cost of Goods Sold'  end   else  if @DISTTYPE = 11  begin  select @DSCRIPTN = 'Freight'  end   else  if @DISTTYPE = 15  begin  select @DSCRIPTN = 'Inventory'  end   else  if @DISTTYPE = 13  begin  select @DSCRIPTN = 'Tax'  end   else  if @DISTTYPE = 10  begin  select @DSCRIPTN = 'Trade Discounts'  end   else  if @DISTTYPE = 12  begin  select @DSCRIPTN = 'Miscellaneous'  end   else  if @DISTTYPE = 17  begin  select @DSCRIPTN = 'Sales Returns'  end  else  if @DISTTYPE = 19  begin  select @DSCRIPTN = 'Credit Memos'  end  else  begin  select @DSCRIPTN = 'Other'  end   select @DOCAMT = @DOCAMT + @CRDTAMNT + @DEBITAMT  select @SQNCLINE = @SQNCLINE + 16384  insert into GL10001 (  BACHNUMB,  JRNENTRY,  SQNCLINE,  ACTINDX,  DSCRIPTN,  CURRNIDX,  ACCTTYPE,  DECPLACS,  ORCTRNUM,  ORDOCNUM,  ORMSTRID,  ORMSTRNM,  ORTRXDESC,  DTA_GL_Status,  INTERID,  CRDTAMNT,  ORCRDAMT,  DEBITAMT,  ORDBTAMT,  DENXRATE,  MCTRXSTT,  LNESTAT,  ORTRXTYP,  OrigSeqNum,  EXGTBLID,  RATETPID,  XCHGRATE,  RTCLCMTD  )  select  @I_vTRXSORCE,  @I_vJRNENTRY,  @SQNCLINE,  @DSTINDX,  @DSCRIPTN,  case   when @CURRNIDX = 0  then @I_vCURRNIDX  else @CURRNIDX  end,  1,  case   when @DECPLCUR = 0  then @I_vDECPLCUR  else @DECPLCUR  end,  @I_vDTAControlNum,  @I_vDTAControlNum,  @I_vORMSTRID,  @I_vCUSTNAME,  @I_vORTRXDESC,  40,  @I_vINTERID,  @CRDTAMNT,  case  when @ORCRDAMT = 0  then @CRDTAMNT  else @ORCRDAMT  end,  @DEBITAMT,  case  when @ORDBTAMT = 0  then @DEBITAMT  else @ORDBTAMT  end,  0,  @I_vMCTRXSTT,  5,  @I_vORTRXTYP,  @SEQNUMBR,  @EXGTBLID,  @RATETPID,  @XCHGRATE,  @RTCLCMTD  if @@error <> 0  begin  select @O_iErrorState = 6203    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  fetch next from RM10101_LINES into  @CRDTAMNT,  @DEBITAMT,  @ORCRDAMT,  @ORDBTAMT,  @DISTTYPE,  @DSTINDX,  @SEQNUMBR,  @DistRef  end end deallocate RM10101_LINES  if @O_iErrorState <> 0  return(@O_iErrorState)  select @BCHCOMNT =  case  when substring(@I_vTRXSORCE,1,5) = 'RMAPY'   then 'Receivables Apply Doc.'  else 'Voided Trx Maintenance' end exec @iStatus = taCreateUpdateBatchHeaderRcd  @I_vBCHCOMNT = @BCHCOMNT,  @I_vBACHNUMB = @I_vTRXSORCE,  @I_vSERIES = 2,  @I_vGLPOSTDT = '',  @I_vBCHSOURC = @I_vBCHSOURC,  @I_vDOCAMT = @DOCAMT,  @I_vORIGIN = 1,  @I_vNUMOFTRX = 1,  @I_vEFTFileFormat = 0,  @I_vBRKDNALL = 1,  @I_vUSERID = '',  @O_iErrorState = @O_iBtchHdrErrState output,  @oErrString = @iCreateBatchErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@iStatus <> 0) or (@O_iBtchHdrErrState <> 0) begin  select @oErrString = rtrim(isnull(@oErrString, '')) + ' ' + @iCreateBatchErrString  select @O_iErrorState = 6204   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if exists(select 1 from DYNAMICS..sysobjects (nolock) where name  = 'AAG00102') begin  if exists(select 1 from DYNAMICS..AAG00102 (nolock) where CMPANYID = @sCompanyID)  begin   select @aaSubLedgerHdrID = isnull(aaSubLedgerHdrID,0) from AAG20000 (nolock)  where DOCTYPE = case  when @I_vORTRXTYP = 9  then 9  when @I_vORTRXTYP = 8  then 8  when @I_vORTRXTYP = 7  then 7  else  2  end   and DOCNUMBR = @I_vDTAControlNum   if @aaSubLedgerHdrID <> 0  begin  exec @iStatus = aagCreateVoideRecordInGLForBR   @aaSubLedgerHdrID = @aaSubLedgerHdrID,  @JRNENTRY = @I_vJRNENTRY,  @lastDist = 0,  @GLPOSTDT = @I_vTRXDATE,  @CompanyID = @sCompanyID,  @MCRegistered = @ISMCTRX   if (@@error <> 0)   begin  select @O_iErrorState = 9448    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taReverseGlTransaction] TO [DYNGRP]
GO
