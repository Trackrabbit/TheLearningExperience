SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glCalculateGLPeriod]  @I_sSeries              smallint        = NULL,  @I_cOrigin              char(50)        = NULL,  @I_dDate                datetime        = NULL,  @I_dUserDate datetime = NULL,  @O_sPeriodID            smallint        = NULL  output,  @O_tClosed              tinyint  = NULL  output,  @O_sYear                smallint        = NULL  output,  @O_iOUTErr              int             = NULL  output,  @O_iErrorState          int             = NULL  output  as  declare  @dMaxDate               datetime,  @dMinDate               datetime,  @dMinDate2               datetime,  @dSubstituteDate datetime,  @dTempDate datetime,  @dFirstFiscalDay        datetime,  @dLastFiscalDay         datetime,  @sMaxPeriodID           smallint,  @sMinPeriodID           smallint,  @sMinPeriodID2           smallint,  @sYear                  smallint,  @tMaxClosed             tinyint,  @tMinClosed             tinyint,  @tMinClosed2             tinyint,  @TRUE                   int,  @FALSE                  int,  @iRowCount              int,  @iStatus                int,  @iError int  select          @O_sPeriodID    = DATEPART(mm,@I_dDate),  @O_tClosed      = 0,  @O_sYear        = DATEPART(yy,@I_dDate),  @O_iOUTErr      = 0,  @O_iErrorState  = 0  if      ( (@I_sSeries is NULL) or  (@I_cOrigin is NULL) or   (@I_dDate  is NULL) or  (@I_dUserDate is NULL) ) begin  select          @O_iErrorState = 20018,  @O_iOUTErr = 3  if @I_dDate is NULL  begin  select          @O_sPeriodID = 0,  @O_sYear = 1900  end  return end  select  @TRUE = 1,  @FALSE = 0  select   @dFirstFiscalDay        = FSTFSCDY,  @dLastFiscalDay         = LSTFSCDY,  @sYear          = YEAR1  from   SY40101 where   FSTFSCDY <= @I_dDate  and     LSTFSCDY >= @I_dDate  if @@rowcount <> 1 begin  select  @O_iOUTErr      = 2   exec @iStatus = smGetMinDate @dSubstituteDate output  select @dSubstituteDate = DATEADD(mm, DATEPART(mm, @I_dDate) - 1, @dSubstituteDate)  select @dSubstituteDate = DATEADD(dd, DATEPART(dd, @I_dDate) - 1, @dSubstituteDate)  select @dSubstituteDate = DATEADD(yy, DATEPART(yy, @I_dUserDate) - 1900, @dSubstituteDate)   select   @dFirstFiscalDay  = FSTFSCDY,  @dLastFiscalDay   = LSTFSCDY,  @sYear          = YEAR1   from   SY40101  where   FSTFSCDY <= @dSubstituteDate   and     LSTFSCDY >= @dSubstituteDate  if @@rowcount <> 1  begin  return  end  else  begin  select @dTempDate = @dSubstituteDate  end end else begin  select @dTempDate = @I_dDate end  select  @dMaxDate       = PERIODDT,  @sMaxPeriodID   = PERIODID,  @tMaxClosed     = CLOSED from   SY40100 where  FORIGIN                 = @FALSE  and     PERIODID                > 0  and     YEAR1            = @sYear  and     SERIES          = @I_sSeries  and     ODESCTN         = @I_cOrigin  and     PERIODDT  =   (select   max(PERIODDT)   from   SY40100   where   FORIGIN                 = @FALSE   and     PERIODID                > 0   and     YEAR1            = @sYear   and     SERIES          = @I_sSeries   and     ODESCTN         = @I_cOrigin   and     PERIODDT                <= @dTempDate     ) order by FORIGIN, YEAR1, PERIODID, SERIES, ODESCTN  select @iRowCount = @@rowcount  if @O_iOUTErr = 2    select @tMaxClosed = 0  if ( (@iRowCount < 1 ) and ( @iRowCount > 3 ) ) begin   select          @O_iErrorState  = -20019,  @O_iOUTErr      = 3 end else if  ( @iRowCount = 1 ) begin  select          @O_sPeriodID            = @sMaxPeriodID,  @O_tClosed              = @tMaxClosed,  @O_sYear                        = @sYear end  else if  ( @iRowCount = 2 ) begin   select   @dMinDate       = PERIODDT,  @sMinPeriodID   = PERIODID,  @tMinClosed     = CLOSED  from   SY40100  where  FORIGIN                 = @FALSE   and     PERIODID                = (@sMaxPeriodID - 1)   and     YEAR1            = @sYear   and     SERIES          = @I_sSeries  and     ODESCTN         = @I_cOrigin   and     PERIODDT                = @dMaxDate   if (@@rowcount = 0)  begin  select          @O_iErrorState  = -20019,  @O_iOUTErr      = 3  return  end   if  @tMinClosed = @FALSE   begin  select          @O_sPeriodID    = @sMinPeriodID,  @O_tClosed      = @tMinClosed,  @O_sYear                = @sYear  end  else  begin  select          @O_sPeriodID    = @sMaxPeriodID,  @O_tClosed      = @tMaxClosed,  @O_sYear                = @sYear  end end   else if  ( @iRowCount = 3 )    begin   select   @dMinDate       = PERIODDT,  @sMinPeriodID   = PERIODID,  @tMinClosed     = CLOSED  from   SY40100  where  FORIGIN                 = @FALSE   and     PERIODID                = (@sMaxPeriodID - 2)   and     YEAR1            = @sYear   and     SERIES          = @I_sSeries  and     ODESCTN         = @I_cOrigin   and     PERIODDT                = @dMaxDate   select   @dMinDate2       = PERIODDT,  @sMinPeriodID2   = PERIODID,  @tMinClosed2     = CLOSED  from   SY40100  where  FORIGIN                 = @FALSE   and     PERIODID                = (@sMaxPeriodID - 1)   and     YEAR1            = @sYear   and     SERIES          = @I_sSeries  and     ODESCTN         = @I_cOrigin   and     PERIODDT                = @dMaxDate  if (@@rowcount = 0)  begin  select          @O_iErrorState  = -20019,  @O_iOUTErr      = 3  return  end   if  @tMinClosed = @FALSE   begin  select          @O_sPeriodID    = @sMinPeriodID,  @O_tClosed      = @tMinClosed,  @O_sYear                = @sYear  end  else   begin  if  @tMinClosed2 = @FALSE   begin  select          @O_sPeriodID    = @sMinPeriodID2,  @O_tClosed      = @tMinClosed2,  @O_sYear                = @sYear  end  else  begin  select          @O_sPeriodID    = @sMaxPeriodID,  @O_tClosed      = @tMaxClosed,  @O_sYear                = @sYear  end  end end    if @dSubstituteDate is not NULL begin  select @O_sYear = DATEPART(yy,@I_dDate) + (@O_sYear - DATEPART(yy,@I_dUserDate)) end  return    
GO
GRANT EXECUTE ON  [dbo].[glCalculateGLPeriod] TO [DYNGRP]
GO
