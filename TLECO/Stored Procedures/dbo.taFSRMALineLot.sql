SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taFSRMALineLot] @I_vReturn_Record_Type smallint,  @I_vRETDOCID char(15),    @I_vLNSEQNBR numeric(19,5) = 0,   @I_vQTYTYPE smallint = 1,   @I_vSERLTQTY numeric(19,5) = 1,   @I_vITEMNMBR char(31) = null,   @I_vLOTNUMBR char(21) = null,    @I_vLOCNCODE char(11) = null,   @I_vSLTSQNUM integer = 0,   @I_vBIN char(15) = null,   @I_vDATERECD datetime = null,   @I_vDTSEQNUM numeric(19,5) = 0,   @I_vENTDTE datetime = '',   @I_vReplaceItem smallint = 0,   @I_vAUTOCREATELOT smallint = 0,   @I_vMFGDATE datetime = '',   @I_vEXPNDATE datetime = '',   @I_vUpdateIfExists tinyint = 1,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',     @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @O_TODAY datetime,  @O_DUMMYDT datetime,  @Line_Seq_Exists smallint,  @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @iAddCodeErrState int,    @O_oErrorState int,  @iError int,  @O_vEquipment_ID int,  @O_vTRXSORCE char(13),  @O_vMARKED tinyint,  @O_vPOSTED tinyint,  @iQtySold numeric(19,5),  @O_vSERLTQTY numeric(17,5),  @iValueExists smallint,  @O_vRETCOST numeric(19,5),  @iSTNDCOST numeric(19,5),  @iCURRCOST numeric(19,5),  @iLotSold numeric(19,5),  @iLotAlloc numeric(19,5),  @iLotRecvd numeric(19,5),  @O_PREVITEMNMBR char(31),  @O_PREVLOTNUMBR char(21),  @iPREVLOTQTY numeric(19,5),  @O_PREVDTSEQNUM numeric(19,5),  @O_PREVDATERECD datetime,  @O_vMFGDATE datetime,  @O_vEXPNDATE datetime,  @O_vSVC_Original_Serial tinyint,  @iLotExists tinyint,  @ENABLEMULTIBIN tinyint,  @AmntOverExst numeric(19,5)  select   @O_TODAY = convert(char(11), convert(datetime, getdate()), 101),  @O_DUMMYDT = convert(char(11), convert(datetime, '1900-01-01'), 101),  @Line_Seq_Exists = 0,  @iStatus  = 0,  @iCustomState  = 0,  @iCustomErrString = '',  @iAddCodeErrState  = 0,  @O_oErrorState  = 0,  @iError  = 0,  @O_vEquipment_ID = 0,  @O_vTRXSORCE = '',  @O_vMARKED = 0,  @O_vPOSTED = 0,  @O_iErrorState = 0,  @oErrString = '',  @iQtySold = 0,  @O_vSERLTQTY =1,  @iValueExists = 0,  @O_vRETCOST = 0,  @iSTNDCOST = 0,  @iCURRCOST = 0,  @iLotSold = 0,  @iLotAlloc = 0,  @iLotRecvd = 0,   @O_PREVITEMNMBR = '',  @O_PREVLOTNUMBR = '',  @iPREVLOTQTY = 0,  @O_PREVDTSEQNUM = 0,  @O_PREVDATERECD = @O_DUMMYDT,  @O_vMFGDATE = @O_DUMMYDT,  @O_vEXPNDATE = @O_DUMMYDT,  @O_vSVC_Original_Serial = 1,  @iLotExists = 0,  @ENABLEMULTIBIN = 0,  @AmntOverExst = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taFSRMALineLotPre  @I_vReturn_Record_Type output,  @I_vRETDOCID output,  @I_vLNSEQNBR output,  @I_vQTYTYPE output,  @I_vSERLTQTY output,  @I_vITEMNMBR output,  @I_vLOTNUMBR output,  @I_vLOCNCODE output,  @I_vSLTSQNUM output,  @I_vBIN output,  @I_vDATERECD output,  @I_vDTSEQNUM output,  @I_vENTDTE output,  @I_vReplaceItem output,  @I_vAUTOCREATELOT output,  @I_vMFGDATE output,  @I_vEXPNDATE output,  @I_vUpdateIfExists output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 8835     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vReturn_Record_Type is NULL or  @I_vRETDOCID  is NULL or  @I_vITEMNMBR  is NULL or  @I_vLOCNCODE is NULL or  @I_vQTYTYPE is NULL or  @I_vLOTNUMBR is NULL or  @I_vLNSEQNBR is NULL   ) begin  set @O_iErrorState = 8836    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vReturn_Record_Type=0 or  @I_vRETDOCID='' or  @I_vITEMNMBR = '' or  @I_vLOTNUMBR = '' or  @I_vLOCNCODE = '' or  @I_vLNSEQNBR = 0  ) begin  set @O_iErrorState = 8837    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vLNSEQNBR < 0 or  @I_vSLTSQNUM < 0 or  @I_vQTYTYPE < 0 or  @I_vReplaceItem < 0 or  @O_vRETCOST < 0  ) begin  set @O_iErrorState = 8838    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vUpdateIfExists not in (0,1)) begin  set @O_iErrorState = 8839     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vRETDOCID = UPPER(@I_vRETDOCID),  @I_vITEMNMBR = UPPER(rtrim(@I_vITEMNMBR)),  @I_vLOTNUMBR = UPPER(rtrim(@I_vLOTNUMBR)),  @I_vLOCNCODE = UPPER(rtrim(@I_vLOCNCODE))  if ((@I_vReturn_Record_Type < 1) or (@I_vReturn_Record_Type > 2)) begin  set @O_iErrorState = 8840    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if exists(select 1 from SVC05015 (nolock) where RETDOCID = @I_vRETDOCID and MKDTOPST = 1) begin  set @O_iErrorState = 8841    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vQTYTYPE < 1 or @I_vQTYTYPE > 5) begin  set @O_iErrorState = 8842     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@O_vSVC_Original_Serial < 0 or @I_vQTYTYPE > 1) begin  set @O_iErrorState = 8843     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@I_vReplaceItem = 0)  begin  if (@I_vSLTSQNUM = 0)  begin  select @I_vSLTSQNUM = (isnull(max(SLTSQNUM),0) + 16384) from SVC05255 (nolock)   where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE  end end else  begin  if (@I_vSLTSQNUM = 0)  begin  select @I_vSLTSQNUM = (isnull(max(SLTSQNUM),0) + 16384) from SVC05256 (nolock)   where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE  end end  if (@I_vReplaceItem = 0)  begin  if exists(select 1 from SVC35255 (nolock) where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM)  begin  select @Line_Seq_Exists=1  set @O_iErrorState = 8844    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)   end   set @iValueExists = 0  select @iValueExists = 1, @O_PREVLOTNUMBR = Return_Serial_Number, @iPREVLOTQTY = SERLTQTY from SVC05255 (nolock) where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  and Return_Item_Number = @I_vITEMNMBR   if (@iValueExists = 1)  begin  select @Line_Seq_Exists=1  end   if (@Line_Seq_Exists=1) and (@I_vUpdateIfExists = 0)   begin  set @O_iErrorState = 8845    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else  begin  if exists (select 1 from SVC35256 (nolock) where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM)  begin  select @Line_Seq_Exists=1  set @O_iErrorState = 8846    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)   end   set @iValueExists = 0  select @iValueExists = 1, @O_PREVLOTNUMBR = Replace_Serial_Number, @iPREVLOTQTY = SERLTQTY from SVC05256 (nolock) where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@iValueExists = 1)  begin  select @Line_Seq_Exists=1  end   if (@Line_Seq_Exists=1) and (@I_vUpdateIfExists = 0)   begin  set @O_iErrorState = 8847    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vReplaceItem = 0)  begin  if (@Line_Seq_Exists=1)  begin  select  @I_vITEMNMBR = case  when @I_vITEMNMBR is null then isnull(Return_Item_Number, '')  else @I_vITEMNMBR  end,  @I_vLOTNUMBR = case  when @I_vLOTNUMBR is null then isnull(Return_Serial_Number, '')  else @I_vLOTNUMBR  end,  @O_vSERLTQTY = case  when @I_vSERLTQTY <= 0 then isnull(SERLTQTY, 1)  else @I_vSERLTQTY  end,  @I_vSLTSQNUM = case  when @I_vSLTSQNUM is null then isnull(SLTSQNUM, 0)  else @I_vSLTSQNUM  end,  @I_vBIN = case  when @I_vBIN is null then isnull(BIN, '')  else @I_vBIN  end,  @O_vRETCOST = isnull(RETCOST, 0),  @O_vSVC_Original_Serial = isnull(SVC_Original_Serial, 1),  @I_vDATERECD = case  when @I_vDATERECD is null or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then isnull(DATERECD, @O_DUMMYDT)  else @I_vDATERECD  end,  @I_vDTSEQNUM = case  when @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then 0  when @I_vDTSEQNUM is null or @I_vDTSEQNUM = 0 then isnull(DTSEQNUM, 0)  else @I_vDTSEQNUM  end,  @O_vTRXSORCE = isnull(TRXSORCE, ''),  @O_vMARKED = isnull(MARKED, 0),  @O_vPOSTED = isnull(POSTED, 0)  from SVC05255 (nolock)  where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  end  else  begin  select  @I_vITEMNMBR = case  when @I_vITEMNMBR is null then ''  else @I_vITEMNMBR  end,  @I_vLOTNUMBR = case  when @I_vLOTNUMBR is null then ''  else @I_vLOTNUMBR  end,  @O_vSERLTQTY = case  when @I_vSERLTQTY <= 0 then 1  else @I_vSERLTQTY  end,  @I_vSLTSQNUM = case  when @I_vSLTSQNUM is null then 0  else @I_vSLTSQNUM  end,  @I_vBIN = case  when @I_vBIN is null then ''  else @I_vBIN  end,  @O_vRETCOST = case  when @O_vRETCOST <> 0 then @O_vRETCOST  else 0  end,  @I_vDATERECD = case  when @I_vDATERECD is null or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then @O_DUMMYDT  else @I_vDATERECD  end,  @I_vDTSEQNUM = case  when @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then 0  when @I_vDTSEQNUM is null then 0  else @I_vDTSEQNUM  end,  @O_vTRXSORCE = '',  @O_vMARKED = 0,  @O_vPOSTED = 0  end end  else  begin  if (@Line_Seq_Exists=1)  begin  select  @iPREVLOTQTY = isnull(SERLTQTY, 0),  @O_PREVLOTNUMBR = isnull(Replace_Serial_Number, ''),  @O_PREVITEMNMBR = isnull(Replace_Item_Number, ''),  @I_vITEMNMBR = case  when @I_vITEMNMBR is null then isnull(Replace_Item_Number, '')  else @I_vITEMNMBR  end,  @I_vLOTNUMBR = case  when @I_vLOTNUMBR is null then isnull(Replace_Serial_Number, '')  else @I_vLOTNUMBR  end,  @O_vSERLTQTY = case  when @I_vSERLTQTY <= 0 then isnull(SERLTQTY, 1)  else @I_vSERLTQTY  end,  @I_vSLTSQNUM = case  when @I_vSLTSQNUM is null then isnull(SLTSQNUM, 0)  else @I_vSLTSQNUM  end,  @I_vBIN = case  when @I_vBIN is null then isnull(BIN, '')  else @I_vBIN  end,  @O_vRETCOST = isnull(Replace_Cost, 0),  @O_vSVC_Original_Serial = 1,  @I_vDATERECD = case  when @I_vDATERECD is null or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then @O_TODAY  else @I_vDATERECD  end,  @I_vDTSEQNUM = case  when @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then 0  when @I_vDTSEQNUM is null then 0  else @I_vDTSEQNUM  end  from SVC05256 (nolock)  where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  end  else  begin  select  @I_vITEMNMBR = case  when @I_vITEMNMBR is null then ''  else @I_vITEMNMBR  end,  @I_vLOTNUMBR = case  when @I_vLOTNUMBR is null then ''  else @I_vLOTNUMBR  end,  @O_vSERLTQTY = case  when @I_vSERLTQTY <= 0 then 1  else @I_vSERLTQTY  end,  @I_vSLTSQNUM = case  when @I_vSLTSQNUM is null then 0  else @I_vSLTSQNUM  end,  @I_vBIN = case  when @I_vBIN is null then ''  else @I_vBIN  end,  @O_vRETCOST = case  when @O_vRETCOST <> 0 then @O_vRETCOST  else 0  end,  @O_vSVC_Original_Serial = 1,  @I_vDATERECD = case  when @I_vDATERECD is null or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then @O_TODAY  else @I_vDATERECD  end,  @I_vDTSEQNUM = case  when @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then 0  when @I_vDTSEQNUM is null then 0  else @I_vDTSEQNUM  end  end end  if (@I_vITEMNMBR <> '') begin  set @iValueExists = 0  select @iValueExists = 1, @iSTNDCOST = isnull(STNDCOST, 0.0), @iCURRCOST = isnull(CURRCOST, 0.0)   from IV00101 (nolock) where ITEMNMBR=@I_vITEMNMBR and ITMTRKOP = 3  if (@iValueExists <> 1)  begin  set @O_iErrorState = 8848     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  select @O_vRETCOST = case  when @O_vRETCOST = 0 and @iCURRCOST > 0 then @iCURRCOST  when @O_vRETCOST = 0 and @iSTNDCOST > 0 then @iSTNDCOST  else 0  end  if (@I_vLOCNCODE <> '')  begin  if not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE)  begin  set @O_iErrorState = 8849    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)   end  else   begin  if not exists(select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  begin  set @O_iErrorState = 8850    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if exists(select 1 from SVC05210 (nolock) where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and SLTSQNUM = @I_vSLTSQNUM) begin  set @O_iErrorState = 8851    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@Line_Seq_Exists = 1) and (@I_vSERLTQTY < 0) begin  if (@O_PREVLOTNUMBR <> '' and @O_PREVLOTNUMBR <> @I_vLOTNUMBR)  begin  set @O_iErrorState = 8921     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@I_vReplaceItem = 0)   begin  delete from SVC05255 where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8852     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else   begin  delete from SVC05256 where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8853     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  update IV00301 set IUSCOUNT = IUSCOUNT - @iPREVLOTQTY from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8927     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  return (0) end  if (@I_vLOTNUMBR <> '') begin  set @iLotExists = 0   if (@I_vDTSEQNUM = 0 and (@I_vDATERECD <> '' and @I_vDATERECD <> @O_DUMMYDT))  begin  if (@I_vReplaceItem = 0)  begin   select @I_vDTSEQNUM = isnull(max(DTSEQNUM),0) + 16384  from IV00300 (nolock) where ITEMNMBR=@I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR  and DATERECD = @I_vDATERECD  end  else   begin  select TOP 1 @I_vDTSEQNUM = isnull(DTSEQNUM, 0)  from IV00300 (nolock) where ITEMNMBR=@I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR  and DATERECD = @I_vDATERECD and (QTYRECVD - QTYSOLD - ATYALLOC > 0)  end  end   if (@I_vDTSEQNUM <> 0 and (@I_vDATERECD <> '' and @I_vDATERECD <> @O_DUMMYDT))  begin  select @iLotExists = 1,   @iLotRecvd = isnull(QTYRECVD, 0),  @iLotSold = isnull(QTYSOLD, 0),  @iLotAlloc = isnull(ATYALLOC, 0),  @O_vMFGDATE = isnull(MFGDATE, @O_DUMMYDT),  @O_vEXPNDATE = isnull(EXPNDATE, @O_DUMMYDT)  from IV00300 (nolock) where ITEMNMBR=@I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR  and DATERECD = @I_vDATERECD and DTSEQNUM = @I_vDTSEQNUM  end   if (@I_vReplaceItem <> 0)  begin  if (@iLotExists <> 1) and (@I_vAUTOCREATELOT = 0)  begin  set @O_iErrorState = 8889     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else if (@iLotExists = 0) and (@I_vAUTOCREATELOT = 1)  begin  set @I_vDATERECD = @O_TODAY  select @I_vDTSEQNUM = isnull(max(DTSEQNUM)+16384, 16384) from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and DATERECD = @I_vDATERECD  end  end   select @I_vENTDTE = case   when @I_vENTDTE = '' or @I_vENTDTE = @O_DUMMYDT then @O_TODAY   else @I_vENTDTE   end,  @O_vMFGDATE = case  when @I_vMFGDATE is null or @I_vEXPNDATE = '' or @I_vMFGDATE = @O_DUMMYDT then @O_vMFGDATE  else @I_vMFGDATE  end,  @O_vEXPNDATE = case  when @I_vEXPNDATE is null or @I_vEXPNDATE = '' or @I_vEXPNDATE = @O_DUMMYDT then @O_vEXPNDATE  else @I_vEXPNDATE  end   if (@O_vEXPNDATE <> '' and @O_vEXPNDATE <> @O_DUMMYDT and @O_vEXPNDATE <= @I_vENTDTE)  begin  if not exists(select 1 from IV40100 where ALLEXPLOTSOTHER = 1 and ALLEXPLOTOTHERPASS = '')  begin  set @O_iErrorState = 8856     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if (@I_vDATERECD is NULL or @I_vDATERECD = '')  set @I_vDATERECD = @O_DUMMYDT  if (@I_vDATERECD <> '') and not (datepart(hour,@I_vDATERECD) = 0 and datepart(minute,@I_vDATERECD) = 0 and datepart(second,@I_vDATERECD) = 0   and datepart(millisecond,@I_vDATERECD) = 0) begin  set @O_iErrorState = 8857    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@O_vPOSTED = 1) begin  set @O_iErrorState = 8858     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@O_iErrorState <> '')  return (@O_iErrorState)  if (@Line_Seq_Exists=0) begin  if (@I_vReplaceItem = 0)   begin  insert into SVC05255( Return_Record_Type,  RETDOCID,  LNSEQNBR,  QTYTYPE,  SERLTQTY,  Return_Item_Number,  Return_Serial_Number,  Return_Equipment_ID,  SLTSQNUM,  BIN,  RETCOST,  SVC_Original_Serial,  DATERECD,  DTSEQNUM,  TRXSORCE,  MARKED,  POSTED,  MFGDATE,  EXPNDATE,  CMPNTSEQ  )  select  @I_vReturn_Record_Type,  @I_vRETDOCID,  @I_vLNSEQNBR,  @I_vQTYTYPE,  @O_vSERLTQTY,  @I_vITEMNMBR,  @I_vLOTNUMBR,  @O_vEquipment_ID,  @I_vSLTSQNUM,  @I_vBIN,  @O_vRETCOST,  @O_vSVC_Original_Serial,  @I_vDATERECD,  @I_vDTSEQNUM,  @O_vTRXSORCE,  @O_vMARKED,  @O_vPOSTED,  @O_vMFGDATE,  @O_vEXPNDATE,  0       if (@@error <> 0)  begin  set @O_iErrorState = 8859    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end  else   begin  insert into SVC05256( Return_Record_Type,  RETDOCID,  LNSEQNBR,  QTYTYPE,  SERLTQTY,  Replace_Item_Number,  Replace_Serial_Number,  Replace_Equipment_ID,  SLTSQNUM,  BIN,  Replace_Cost,  MFGDATE,  EXPNDATE,  DATERECD,  DTSEQNUM,  CMPNTSEQ  )  select  @I_vReturn_Record_Type,  @I_vRETDOCID,  @I_vLNSEQNBR,  @I_vQTYTYPE,  @O_vSERLTQTY,  @I_vITEMNMBR,  @I_vLOTNUMBR,  @O_vEquipment_ID,  @I_vSLTSQNUM,  @I_vBIN,  @O_vRETCOST,  @O_vMFGDATE,  @O_vEXPNDATE,  @I_vDATERECD,  @I_vDTSEQNUM,  0       if (@@error <> 0)  begin  set @O_iErrorState = 8860    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end end  else begin  if (@I_vReplaceItem = 0)   begin  if (@I_vUpdateIfExists > 0)  begin  update SVC05255 set  Return_Record_Type = @I_vReturn_Record_Type,  RETDOCID = @I_vRETDOCID,  LNSEQNBR = @I_vLNSEQNBR,  QTYTYPE = @I_vQTYTYPE,  SERLTQTY = @O_vSERLTQTY,  Return_Item_Number = @I_vITEMNMBR,  Return_Serial_Number = @I_vLOTNUMBR,  Return_Equipment_ID = @O_vEquipment_ID,  SLTSQNUM = @I_vSLTSQNUM,  BIN = @I_vBIN,  RETCOST = @O_vRETCOST,  SVC_Original_Serial = @O_vSVC_Original_Serial,  DATERECD = @I_vDATERECD,  DTSEQNUM = @I_vDTSEQNUM,  TRXSORCE = @O_vTRXSORCE,  MARKED = @O_vMARKED,  POSTED = @O_vPOSTED,  MFGDATE = @O_vMFGDATE,  EXPNDATE = @O_vEXPNDATE   where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8861    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end  end   else   begin  if (@I_vUpdateIfExists > 0)  begin  update SVC05256 set  Return_Record_Type = @I_vReturn_Record_Type,  RETDOCID = @I_vRETDOCID,  LNSEQNBR = @I_vLNSEQNBR,  QTYTYPE = @I_vQTYTYPE,  SERLTQTY = @O_vSERLTQTY,  Replace_Item_Number = @I_vITEMNMBR,  Replace_Serial_Number = @I_vLOTNUMBR,  Replace_Equipment_ID = @O_vEquipment_ID,  SLTSQNUM = @I_vSLTSQNUM,  BIN = @I_vBIN,  Replace_Cost = @O_vRETCOST,  MFGDATE = @O_vMFGDATE,  EXPNDATE = @O_vEXPNDATE  where Return_Record_Type = @I_vReturn_Record_Type and RETDOCID = @I_vRETDOCID   and LNSEQNBR = @I_vLNSEQNBR and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8862    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end  end end  if @I_vITEMNMBR <> '' and @I_vLOCNCODE <> ''   and ((@O_PREVLOTNUMBR <> '' and (@O_PREVLOTNUMBR <> @I_vLOTNUMBR)) or (@O_PREVITEMNMBR <> '' and (@O_PREVITEMNMBR <> @I_vITEMNMBR))) begin  update IV00300 set   ATYALLOC = case  when (ATYALLOC - @iPREVLOTQTY >= 0) then ATYALLOC - @iPREVLOTQTY  else ATYALLOC  end  where ITEMNMBR = @O_PREVITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @O_PREVLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8946     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  update IV00301 set IUSCOUNT = IUSCOUNT - @iPREVLOTQTY from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8966     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   set @iPREVLOTQTY = 0 end  if (@I_vLOTNUMBR <> '' and @I_vReplaceItem <> 0) begin  if (@iLotExists <> 1) and (@I_vAUTOCREATELOT = 1)  begin  if (@I_vAUTOCREATELOT = 1)  begin  select @AmntOverExst = isnull(sum(QTYRECVD - QTYSOLD - ATYALLOC),0) - @I_vSERLTQTY from IV00300 (nolock)  where QTYTYPE = 1 and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR  if (@AmntOverExst < 0)  begin  select @AmntOverExst = @AmntOverExst * -1  end  else  begin  select @AmntOverExst = 0  end  end  if ((@I_vAUTOCREATELOT = 1) and (@AmntOverExst >= 0) and (@I_vLOTNUMBR <> ''))  begin  select @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock) where SETUPKEY = 1  if (@ENABLEMULTIBIN = 1) and (@I_vBIN <> '')  begin  if (not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN and QTYTYPE = 1))  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN,1,0,0  if (@@error <> 0)  begin  set @O_iErrorState = 8922     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  update IV00112 set QUANTITY = QUANTITY + @I_vSERLTQTY  from IV00112 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  set @O_iErrorState = 8923     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end   insert IV00300  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  LOTNUMBR,  QTYRECVD,  QTYSOLD,  ATYALLOC,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  LTNUMSLD,  QTYTYPE,  BIN,  MFGDATE,  EXPNDATE  )  select   @I_vITEMNMBR,    @I_vLOCNCODE,    @I_vDATERECD,    @I_vDTSEQNUM,    @I_vLOTNUMBR,    @AmntOverExst,    0,     @I_vSERLTQTY,    @O_vRETCOST,    0,     '',     0,     @I_vQTYTYPE,    case @ENABLEMULTIBIN   when 1 then @I_vBIN  else ''  end,  @I_vMFGDATE,    @I_vEXPNDATE    if (@@error <> 0)  begin  set @O_iErrorState = 8924     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((select isnull(LOTTYPE,'') from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR) <> '')  begin  if not exists(select 1 from IV00301 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR)  begin  insert IV00301  (  ITEMNMBR,  LOTNUMBR,  LOTATRB1,  LOTATRB2,  LOTATRB3,  LOTATRB4,  LOTATRB5,  IUSCOUNT,  RCRDSTTS   )  select  @I_vITEMNMBR,    @I_vLOTNUMBR,    '',     '',     '',     '',     '',     1,     2      if (@@error <> 0)  begin  set @O_iErrorState = 8925      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  update IV00301 set IUSCOUNT = IUSCOUNT + 1 from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8926     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end  update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  set @O_iErrorState = 8928     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  set @O_iErrorState = 8929     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end  else  begin  update IV00300 set ATYALLOC = case  when (ATYALLOC - @iPREVLOTQTY) + @I_vSERLTQTY + QTYSOLD <= QTYRECVD then (ATYALLOC - @iPREVLOTQTY) + @I_vSERLTQTY  when QTYRECVD - QTYSOLD - (ATYALLOC - @iPREVLOTQTY) >= 0 then QTYRECVD - QTYSOLD - (ATYALLOC - @iPREVLOTQTY)  else ATYALLOC  end  where ITEMNMBR = @I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR   AND DATERECD = @I_vDATERECD AND DTSEQNUM = @I_vDTSEQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8965     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end end  exec @iStatus = taFSRMALineLotPost  @I_vReturn_Record_Type,  @I_vRETDOCID,  @I_vLNSEQNBR,  @I_vQTYTYPE,  @I_vSERLTQTY,  @I_vITEMNMBR,  @I_vLOTNUMBR,  @I_vLOCNCODE,  @I_vSLTSQNUM,  @I_vBIN,  @I_vDATERECD,  @I_vDTSEQNUM,  @I_vENTDTE,  @I_vReplaceItem,  @I_vAUTOCREATELOT,  @I_vMFGDATE,  @I_vEXPNDATE,  @I_vUpdateIfExists,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output  select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  set @O_iErrorState = 8863    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taFSRMALineLot] TO [DYNGRP]
GO
