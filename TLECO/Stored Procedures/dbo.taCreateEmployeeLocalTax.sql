SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taCreateEmployeeLocalTax] @I_vEMPLOYID char(15),    @I_vLOCALTAX char(6),    @I_vLCLFGSTS char(6)='',   @I_vAULCLTAX tinyint=1,    @I_vNUMOFEXM smallint=0,   @I_vINACTIVE tinyint=0,    @I_vADTLLOCWTHDNG numeric(19,5)=0,  @I_vUpdateIfExists tinyint=1,   @I_vRequesterTrx smallint=0,   @I_vUSRDEFND1 char(50) = '',       @I_vUSRDEFND2 char(50) = '',       @I_vUSRDEFND3 char(50) = '',       @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @sCompanyID int,  @iCustomState int,  @iStatus int,  @O_oErrorState int,  @nNextNoteIndex numeric(19,5),    @iGetNextNoteIdxErrState int,    @iError int,      @DBName char(50),     @iAddCodeErrState int  select  @O_iErrorState = 0,     @O_oErrorState = 0,  @sCompanyID = CMPANYID from DYNAMICS..SY01500 where INTERID = db_name()  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taCreateEmployeeLocalTaxPre  @I_vEMPLOYID output,  @I_vLOCALTAX output,  @I_vLCLFGSTS output,  @I_vAULCLTAX output,  @I_vNUMOFEXM output,  @I_vINACTIVE output,  @I_vADTLLOCWTHDNG output,  @I_vUpdateIfExists output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @oErrString  output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @O_iErrorState = 1159    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vEMPLOYID is NULL or  @I_vLOCALTAX is NULL or  @I_vLCLFGSTS is NULL or  @I_vAULCLTAX is NULL or  @I_vNUMOFEXM is NULL or  @I_vINACTIVE is NULL or  @I_vADTLLOCWTHDNG is NULL or  @I_vUpdateIfExists is NULL or  @I_vRequesterTrx is NULL or  @I_vUSRDEFND1 is NULL or  @I_vUSRDEFND2 is NULL or  @I_vUSRDEFND3 is NULL or  @I_vUSRDEFND4 is NULL or  @I_vUSRDEFND5 is NULL  ) begin  select @O_iErrorState = 1160    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  select @I_vEMPLOYID =UPPER(@I_vEMPLOYID),  @I_vLOCALTAX = UPPER(@I_vLOCALTAX),  @I_vLCLFGSTS = UPPER(@I_vLCLFGSTS)  if ( @I_vEMPLOYID = '' ) begin  select @O_iErrorState = 1161    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vEMPLOYID <> '' ) begin  if (not exists (select 1 from UPR00100 (nolock) where EMPLOYID = @I_vEMPLOYID ))  begin  select @O_iErrorState = 1162    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  end end  if (@I_vEMPLOYID <> '') and (@I_vINACTIVE = 0) begin  if (exists (select 1 from UPR00100 (nolock) where EMPLOYID = @I_vEMPLOYID and INACTIVE = 1))  begin  select @I_vINACTIVE = 1  end  end   if ( @I_vLOCALTAX = '' ) begin  select @O_iErrorState = 1163    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vLOCALTAX <> '' ) begin  if (not exists (select 1 from UPR41400 (nolock) where LOCALTAX = @I_vLOCALTAX ))  begin  select @O_iErrorState = 1164    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  end end  if ( @I_vAULCLTAX < 0 or @I_vAULCLTAX > 1 ) begin  select @O_iErrorState = 1165     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vNUMOFEXM < 0 or @I_vNUMOFEXM > 99 ) begin  select @O_iErrorState = 1166     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vINACTIVE < 0 or @I_vINACTIVE > 1 ) begin  select @O_iErrorState = 1167     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vLCLFGSTS <> '' ) and ( @I_vLCLFGSTS <> 'MAR' ) and ( @I_vLCLFGSTS <> 'SINGLE' ) begin  select @O_iErrorState = 1173     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vUpdateIfExists < 0 or @I_vUpdateIfExists > 1 ) begin  select @O_iErrorState = 1168     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if ( @I_vRequesterTrx < 0 or @I_vRequesterTrx > 1)  begin  select @O_iErrorState = 3686     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if @O_iErrorState <> 0  return (@O_iErrorState)  exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @nNextNoteIndex output,  @O_iErrorState  = @iGetNextNoteIdxErrState output select @iError = @@error if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iGetNextNoteIdxErrState))  select @O_iErrorState = 1169   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if not exists(select 1 from UPR00800 where EMPLOYID = @I_vEMPLOYID and LOCALTAX = @I_vLOCALTAX) begin  insert UPR00800(  EMPLOYID,  LOCALTAX,  LCLFGSTS,  AULCLTAX,  NUMOFEXM,  INACTIVE,  NOTEINDX,  ADTLLOCWTHDNG  )  select  @I_vEMPLOYID,    @I_vLOCALTAX,     @I_vLCLFGSTS,    @I_vAULCLTAX,    @I_vNUMOFEXM,    @I_vINACTIVE,    @nNextNoteIndex,   @I_vADTLLOCWTHDNG   if (@@error <> 0)  begin  select @O_iErrorState = 1170    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  end end else if ( @I_vUpdateIfExists = 1 ) begin  update UPR00800 set  LCLFGSTS = @I_vLCLFGSTS,  AULCLTAX = @I_vAULCLTAX,  NUMOFEXM = @I_vNUMOFEXM,  INACTIVE = @I_vINACTIVE,  ADTLLOCWTHDNG = @I_vADTLLOCWTHDNG  where EMPLOYID = @I_vEMPLOYID and LOCALTAX = @I_vLOCALTAX  if (@@error <> 0)  begin  select @O_iErrorState = 1171    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  end end  exec @iStatus = taCreateEmployeeLocalTaxPost  @I_vEMPLOYID,  @I_vLOCALTAX,  @I_vLCLFGSTS,  @I_vAULCLTAX,  @I_vNUMOFEXM,  @I_vINACTIVE,  @I_vADTLLOCWTHDNG,  @I_vUpdateIfExists,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @oErrString  output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @O_iErrorState = 1172    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taCreateEmployeeLocalTax] TO [DYNGRP]
GO
