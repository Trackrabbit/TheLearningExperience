SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glPrintTrialBalanceSubTotal]  @I_tDateRangeByPeriod tinyint  = NULL,  @I_dStartingDate datetime = NULL,  @I_dEndingDate datetime = NULL,  @I_iStartingPeriod int  = NULL,  @I_iEndingPeriod int  = NULL,  @I_iYear int  = NULL,  @I_tKeepingSummary tinyint  = NULL,  @I_tHistoryYear tinyint  = NULL,  @I_tSubtotalBy tinyint  = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_sPrintCurrencyIn smallint = NULL,  @I_nReportingExchangeRate numeric(15,7) = NULL,  @I_sReportingRateCalcMethod smallint = NULL,  @I_sReportingDecimalPlaces smallint = NULL,  @I_tIncludeMCInfo tinyint  = NULL,  @I_tIncludeUnitAccounts tinyint  = NULL,  @I_IncludeLedgerBase int   = NULL,  @I_IncludeLedgerIFRS int   = NULL,  @I_IncludeLedgerLocal int   = NULL,  @O_SQL_Error_State                      int             = NULL   output as   declare         @TRUE                   int,  @UNIT_ACCT int,  @FALSE int,  @iStatus int,  @iError int,  @iMsgNum int,  @tPeriodID tinyint,  @tNumberOfMonths tinyint,  @dStartingDate datetime,  @dEndingDate datetime,  @dYearStartingDate datetime,  @dYearEndingDate datetime,  @cDBName char(5),  @cGeneral_Entry char(55),  @cMonthName char(30),  @FINANCIAL int  select @O_SQL_Error_State = 0  if ( @I_tDateRangeByPeriod is NULL   or  @I_dStartingDate is NULL   or  @I_dEndingDate is NULL   or  @I_iStartingPeriod is NULL   or  @I_iEndingPeriod is NULL   or  @I_iYear is NULL   or  @I_tKeepingSummary is NULL   or  @I_tHistoryYear is NULL   or  @I_tSubtotalBy is NULL or  @I_tMCRegistered is NULL or  @I_sPrintCurrencyIn is NULL  or  @I_nReportingExchangeRate is NULL  or  @I_sReportingRateCalcMethod is NULL  or  @I_tIncludeMCInfo is NULL or  @I_tIncludeUnitAccounts is NULL or  @I_sReportingDecimalPlaces is NULL or  @I_IncludeLedgerBase is NULL or  @I_IncludeLedgerIFRS is NULL or  @I_IncludeLedgerLocal is NULL)  begin  select          @O_SQL_Error_State = 21021  return end  exec    @iStatus = DYNAMICS..smGetConstantString   'TRX_SOURCE_GL_GENERAL_ENTRY',   @cGeneral_Entry output,   @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'TRUE',  @TRUE                   output,  @O_SQL_Error_State          output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'FINANCIAL',  @FINANCIAL                 output,  @O_SQL_Error_State          output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  create table #Period( PeriodName char(21) not null,  PeriodIndex smallint not null,  PeriodStartDate datetime not null,  PeriodEndDate datetime not null)  if @I_tSubtotalBy = 2  begin   select  @dYearStartingDate  = FSTFSCDY,  @dYearEndingDate = LSTFSCDY   from  SY40101  where  YEAR1 = @I_iYear   if @I_dStartingDate > @dYearStartingDate  select @dYearStartingDate = @I_dStartingDate   if @I_dEndingDate < @dYearEndingDate  select @dYearEndingDate = @I_dEndingDate   select @tPeriodID = 1,  @tNumberOfMonths = DATEDIFF(mm,@dYearStartingDate,@dYearEndingDate) + 1   select @cDBName = db_name()   while @tPeriodID <= @tNumberOfMonths   begin   if @tPeriodID = 1  select @dStartingDate = @dYearStartingDate  else   select @dStartingDate = DATEADD(dd,1,@dEndingDate)   if @tPeriodID = @tNumberOfMonths   select @dEndingDate = @dYearEndingDate  else  begin  select @dEndingDate = DATEADD(mm,1,@dStartingDate)  if @tPeriodID = 1  select @dEndingDate = DATEADD(dd,  - DATEPART(dd,@dEndingDate),  @dEndingDate)  else  select @dEndingDate = DATEADD(dd,-1,@dEndingDate)  end   select @iMsgNum = 18617 + DATEPART(mm, @dStartingDate)   exec    @iStatus = DYNAMICS..smGetMsgString   @iMsgNum,  @cDBName,  @cMonthName output,   @O_SQL_Error_State output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)   insert into #Period  select  rtrim(@cMonthName),  @tPeriodID,  @dStartingDate,  @dEndingDate   select @tPeriodID = @tPeriodID + 1  end  end else if @I_tSubtotalBy = 3  begin  create table #Period_Table (  fiscal_year smallint NULL,  fiscal_period smallint NULL,  period_start_date datetime NULL,  period_end_date datetime NULL,  period_closed tinyint NULL  )  exec sm_Build_Period_Table   insert into #Period  select  ISNULL(PERNAME,''),  fiscal_period,  period_start_date,  period_end_date  from  #Period_Table left outer join SY40100 on (fiscal_period = PERIODID   and fiscal_year = YEAR1   and ODESCTN = @cGeneral_Entry  and SERIES = @FINANCIAL)  where  fiscal_year  =  @I_iYear  and fiscal_period  >=  @I_iStartingPeriod  and  fiscal_period  <=  @I_iEndingPeriod    update  #Period  set  PeriodStartDate = @I_dStartingDate  where  PeriodIndex = @I_iStartingPeriod   update  #Period  set  PeriodEndDate = @I_dEndingDate  where  PeriodIndex = @I_iEndingPeriod  end  if @I_tIncludeMCInfo = @TRUE BEGIN  if @I_tKeepingSummary = @TRUE and @I_tDateRangeByPeriod = @TRUE and @I_tSubtotalBy = 3  begin  if @I_tHistoryYear = @TRUE  begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) ),  0,  ISNULL(sum(GL30000.ORCRDAMT),0.00),  ISNULL(sum(GL30000.ORDBTAMT), 0.00),  0.00,      #TrialBalance.CurrencyID,   #TrialBalance.CurrencyIndex,   0     from  #TrialBalance,  GL30000 with (NOLOCK),  #Period  where  GL30000.HSTYEAR = @I_iYear  and GL30000.TRXDATE >= #Period.PeriodStartDate  and GL30000.TRXDATE <= #Period.PeriodEndDate  and GL30000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL30000.ACTINDX = #TrialBalance.AccountIndex  and GL30000.CURNCYID = #TrialBalance.CurrencyID  and  #TrialBalance.PeriodIndex = 0  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate,  #TrialBalance.CurrencyID, #TrialBalance.CurrencyIndex   end  else   begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) ),  0,  ISNULL(sum(GL20000.ORCRDAMT),0.00),  ISNULL(sum(GL20000.ORDBTAMT), 0.00),  0.00,      #TrialBalance.CurrencyID,   #TrialBalance.CurrencyIndex,   0     from  #TrialBalance,  GL20000 with (NOLOCK),  #Period  where  GL20000.OPENYEAR = @I_iYear  and GL20000.TRXDATE >= #Period.PeriodStartDate  and GL20000.TRXDATE <= #Period.PeriodEndDate  and GL20000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL20000.ACTINDX = #TrialBalance.AccountIndex  and GL20000.CURNCYID = #TrialBalance.CurrencyID  and  #TrialBalance.PeriodIndex = 0  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate,  #TrialBalance.CurrencyID, #TrialBalance.CurrencyIndex  end   end  else   begin  if @I_tHistoryYear = @TRUE  begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) ),  0,  ISNULL(sum(GL30000.ORCRDAMT),0.00),  ISNULL(sum(GL30000.ORDBTAMT), 0.00),  0.00,      #TrialBalance.CurrencyID,   #TrialBalance.CurrencyIndex,   0     from  #TrialBalance,  GL30000 with (NOLOCK),  #Period  where  GL30000.HSTYEAR = @I_iYear  and GL30000.TRXDATE >= #Period.PeriodStartDate  and GL30000.TRXDATE <= #Period.PeriodEndDate  and GL30000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL30000.ACTINDX = #TrialBalance.AccountIndex  and GL30000.CURNCYID = #TrialBalance.CurrencyID  and  #TrialBalance.PeriodIndex = 0  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate,  #TrialBalance.CurrencyID, #TrialBalance.CurrencyIndex   end  else   begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) ),  0,  ISNULL(sum(GL20000.ORCRDAMT),0.00),  ISNULL(sum(GL20000.ORDBTAMT), 0.00),  0.00,      #TrialBalance.CurrencyID,   #TrialBalance.CurrencyIndex,   0     from  #TrialBalance,  GL20000 with (NOLOCK),  #Period  where  GL20000.OPENYEAR = @I_iYear  and GL20000.TRXDATE >= #Period.PeriodStartDate  and GL20000.TRXDATE <= #Period.PeriodEndDate  and GL20000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL20000.ACTINDX = #TrialBalance.AccountIndex  and GL20000.CURNCYID = #TrialBalance.CurrencyID  and  #TrialBalance.PeriodIndex = 0  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate,  #TrialBalance.CurrencyID, #TrialBalance.CurrencyIndex  end   end    if @I_tIncludeUnitAccounts = @TRUE  BEGIN  if @I_tKeepingSummary = @TRUE and @I_tDateRangeByPeriod = @TRUE and @I_tSubtotalBy = 3  begin  if @I_tHistoryYear = @TRUE  begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.CRDTAMNT  end)), 0.00),  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.DEBITAMT  end)), 0.00),  0.00,     0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL10111 with (NOLOCK),  #Period  where  GL10111.ACTINDX  = #TrialBalance.AccountIndex  and GL10111.YEAR1   = @I_iYear  and GL10111.PERIODID  = #Period.PeriodIndex  and GL10111.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and #TrialBalance.AccountType = 2  group by #TrialBalance.AccountIndex,#Period.PeriodIndex,   #TrialBalance.AccountType, #Period.PeriodName  end  else   begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.CRDTAMNT  end)), 0.00),  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.DEBITAMT  end)), 0.00),  0.00,     0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL10110 with (NOLOCK),  #Period  where  GL10110.ACTINDX = #TrialBalance.AccountIndex  and GL10110.YEAR1 = @I_iYear  and GL10110.PERIODID = #Period.PeriodIndex  and GL10110.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and #TrialBalance.AccountType = 2  group by #TrialBalance.AccountIndex,#Period.PeriodIndex,   #TrialBalance.AccountType, #Period.PeriodName  end  end  else   begin  if @I_tHistoryYear = @TRUE  begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) ),  0,  0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL30000 with (NOLOCK),  #Period  where  GL30000.HSTYEAR = @I_iYear  and GL30000.TRXDATE >= #Period.PeriodStartDate  and GL30000.TRXDATE <= #Period.PeriodEndDate  and GL30000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL30000.ACTINDX = #TrialBalance.AccountIndex  and  #TrialBalance.PeriodIndex = 0  and #TrialBalance.AccountType = 2  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate   end  else   begin  insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) ),  0,  0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL20000 with (NOLOCK),  #Period  where  GL20000.OPENYEAR = @I_iYear  and GL20000.TRXDATE >= #Period.PeriodStartDate  and GL20000.TRXDATE <= #Period.PeriodEndDate  and GL20000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL20000.ACTINDX = #TrialBalance.AccountIndex  and  #TrialBalance.PeriodIndex = 0  and #TrialBalance.AccountType = 2  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate  end   end   END END else  BEGIN  if @I_tKeepingSummary = @TRUE and @I_tDateRangeByPeriod = @TRUE and @I_tSubtotalBy = 3  begin  if @I_tHistoryYear = @TRUE  begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.CRDTAMNT  end)), 0.00),  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10111.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10111.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10111.DEBITAMT  end)), 0.00),  0.00,     0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL10111 with (NOLOCK),  #Period  where  GL10111.ACTINDX  = #TrialBalance.AccountIndex  and GL10111.YEAR1   = @I_iYear  and GL10111.PERIODID  = #Period.PeriodIndex  and GL10111.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  group by #TrialBalance.AccountIndex,#Period.PeriodIndex,   #TrialBalance.AccountType, #Period.PeriodName   end  else   begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.CRDTAMNT  end)), 0.00),  ISNULL(sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL10110.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL10110.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL10110.DEBITAMT  end)), 0.00),  0.00,     0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL10110 with (NOLOCK),  #Period  where  GL10110.ACTINDX = #TrialBalance.AccountIndex  and GL10110.YEAR1 = @I_iYear  and GL10110.PERIODID = #Period.PeriodIndex  and GL10110.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  group by #TrialBalance.AccountIndex,#Period.PeriodIndex,   #TrialBalance.AccountType, #Period.PeriodName  end  end  else   begin  if @I_tHistoryYear = @TRUE  begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL30000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL30000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL30000.DEBITAMT  end) ),  0,  0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL30000 with (NOLOCK),  #Period  where  GL30000.HSTYEAR = @I_iYear  and GL30000.TRXDATE >= #Period.PeriodStartDate  and GL30000.TRXDATE <= #Period.PeriodEndDate  and GL30000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL30000.ACTINDX = #TrialBalance.AccountIndex  and  #TrialBalance.PeriodIndex = 0  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate   end  else   begin   insert into #TrialBalance  select  #TrialBalance.AccountIndex,  0.00,  0.00,  0.00,     0.00,     @I_iYear,  '',     '',     #TrialBalance.AccountType,  '',     #Period.PeriodName,  #Period.PeriodIndex,  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.CRDTAMNT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.CRDTAMNT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.CRDTAMNT  end) ),  sum(  (case WHEN @I_sPrintCurrencyIn = 1 and @I_tMCRegistered = @TRUE then  case when @I_sReportingRateCalcMethod = 1 then  ISNULL(ROUND((GL20000.DEBITAMT * @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  else  ISNULL(ROUND((GL20000.DEBITAMT / @I_nReportingExchangeRate),@I_sReportingDecimalPlaces),0.00)  end  else  GL20000.DEBITAMT  end) ),  0,  0,  0,  0,  '',  0,  0     from  #TrialBalance,  GL20000 with (NOLOCK),  #Period  where  GL20000.OPENYEAR = @I_iYear  and GL20000.TRXDATE >= #Period.PeriodStartDate  and GL20000.TRXDATE <= #Period.PeriodEndDate  and GL20000.Ledger_ID in (@I_IncludeLedgerBase, @I_IncludeLedgerIFRS, @I_IncludeLedgerLocal)  and GL20000.ACTINDX = #TrialBalance.AccountIndex  and  #TrialBalance.PeriodIndex = 0  group by #TrialBalance.AccountIndex,#Period.PeriodIndex, #TrialBalance.AccountType,  #Period.PeriodName, #Period.PeriodStartDate, #Period.PeriodEndDate  end   end  END  update  #TrialBalance set  TotalCreditAmount =   CASE  WHEN  AccountType = 1 or AccountType = 3  THEN  CreditAmount  ELSE  0.00  END,  TotalDebitAmount =   CASE  WHEN  AccountType = 1 or AccountType = 3  THEN  DebitAmount  ELSE  0.00  END,  OrigTotalDebitAmt =  CASE  WHEN AccountType = 1 or AccountType = 3  THEN  OrigTotalDebitAmt  ELSE  0.00  END,  OrigTotalCreditAmt =   CASE  WHEN AccountType = 1 or AccountType = 3  THEN  OrigTotalCreditAmt  ELSE  0.00  END,  NetAmount = ISNULL(DebitAmount,0.00) + (ISNULL(CreditAmount,0.00) * -1),  OrigNetAmount = ISNULL(OrigTotalDebitAmt, 0.00) + (ISNULL(OrigTotalCreditAmt,0.00) * -1) where  PeriodIndex > 0  return(@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glPrintTrialBalanceSubTotal] TO [DYNGRP]
GO
