SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[MCConvertVendorCost] @I_vVENDORID char(15), @I_vPODate datetime, @I_vOriginatingCost numeric(21,7)= null output, @I_vOriginatingCurrencyID char(15)= null output, @I_vFunctionalCost numeric(21,7) = null output, @O_iErrorState int output     as  set transaction isolation level read uncommitted set nocount on  declare  @CMPANYID smallint,  @FUNLCURR char(15),  @RATETPID char(15),  @EXGTBLID char(15),  @RATEEXPR smallint,  @TRXDTDEF int,  @XCHGRATE numeric(21,7),  @DYSTINCR smallint,  @DATELMTS int,  @PRVDSLMT int,  @RTCLCMTD smallint,  @iStatus int,  @EuroEnabled tinyint,  @EuroCurrencyID char(15),  @DENXRATE numeric(19,7),  @TriangulationUsed tinyint,  @OriginatingCurrencyID char(15)  select  @CMPANYID = 0,  @FUNLCURR = '',  @RATETPID = '',  @EXGTBLID = '',  @RATEEXPR = 0,  @TRXDTDEF = 0,  @XCHGRATE = 0,  @DYSTINCR = 0,  @DATELMTS = 0,  @PRVDSLMT = 0,  @RTCLCMTD = 0,  @iStatus = 0,  @O_iErrorState = 0,  @EuroEnabled = 0,  @EuroCurrencyID = '',  @DENXRATE = 0,  @TriangulationUsed = 0,  @OriginatingCurrencyID = ''  select @FUNLCURR = isnull(FUNLCURR,'') from MC40000 (nolock) select @CMPANYID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name() select @EuroEnabled = ENABLED from MC60400 (nolock) where ENABLED = 1  if ((@I_vOriginatingCost is not null and @I_vFunctionalCost is not null) or  (@I_vOriginatingCost is null and @I_vFunctionalCost is null)) begin  select @O_iErrorState = -99901  return(@O_iErrorState) end  if (@I_vOriginatingCurrencyID is null) begin  select @I_vOriginatingCurrencyID = isnull(CURNCYID,'') from PM00200 (nolock) where VENDORID = @I_vVENDORID end  if ((@I_vOriginatingCurrencyID <> @FUNLCURR) and (@I_vOriginatingCurrencyID <> '') and (@FUNLCURR <> '')) begin   if exists(select 1 from DYNAMICS..MC40200 (nolock) where CURNCYID = @I_vOriginatingCurrencyID) and  exists(select 1 from DYNAMICS..MC60100 (nolock) where CMPANYID = @CMPANYID and CURNCYID = @I_vOriginatingCurrencyID and INACTIVE = 0)  begin  if ((@EuroEnabled = 1) and   (exists(select 1 from DYNAMICS..MC40401 (nolock) where DENOMCURR = @I_vOriginatingCurrencyID)))  begin  select @EuroCurrencyID = isnull(Euro_Currency_ID,'') from DYNAMICS..MC40400 (nolock)   if ((@EuroCurrencyID <> '') and  (exists(select 1 from DYNAMICS..MC60100 (nolock) where CMPANYID = @CMPANYID and CURNCYID = @EuroCurrencyID and INACTIVE = 0)))  begin  select @DENXRATE = DENXRATE from DYNAMICS..MC40401 (nolock) where DENOMCURR = @I_vOriginatingCurrencyID  if (@DENXRATE = 0)   begin  select @O_iErrorState = -99902  return(@O_iErrorState)  end   select @OriginatingCurrencyID = @I_vOriginatingCurrencyID   select @TriangulationUsed = 1,  @I_vOriginatingCurrencyID = @EuroCurrencyID  end  else  begin   select @O_iErrorState = -99903  return(@O_iErrorState)  end  end   select @RATETPID = RATETPID from PM00200 (nolock) where VENDORID = @I_vVENDORID   if (@RATETPID = '')  begin  select @RATETPID = DEFPURTP from MC40000 (nolock)  end   select @EXGTBLID = EXGTBLID from MC40301 (nolock) where CURNCYID = @I_vOriginatingCurrencyID and RATETPID = @RATETPID   if exists(select 1 from DYNAMICS..MC60200 (nolock) where EXGTBLID = @EXGTBLID and CMPANYID = @CMPANYID and INACTIVE = 1)  begin  select @O_iErrorState = -99904  return(@O_iErrorState)  end   if (@EXGTBLID <> '') and (@RATETPID <> '')  begin  select   @RATEEXPR = RATEEXPR,  @DYSTINCR = DYSTINCR,  @RTCLCMTD = RTCLCMTD,  @TRXDTDEF = TRXDTDEF,  @PRVDSLMT = PRVDSLMT,  @DATELMTS = DATELMTS  from DYNAMICS..MC40300 (nolock) where EXGTBLID = @EXGTBLID   if ((@TRXDTDEF = 1) and (@DATELMTS = 1))   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE <= @I_vPODate  and abs(datediff(day, EXCHDATE, @I_vPODate)) <= @PRVDSLMT  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE desc,TIME1 desc  if (@XCHGRATE = 0)   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE >= @I_vPODate  and abs(datediff(day, EXCHDATE, @I_vPODate)) <= @PRVDSLMT  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE,TIME1   end  end  else   if ((@TRXDTDEF = 1) and (@DATELMTS = 0))   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE <= @I_vPODate  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE desc,TIME1 desc  if (@XCHGRATE = 0)   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE >= @I_vPODate  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE,TIME1  end  end  else  if ((@TRXDTDEF = 2) and (@DATELMTS = 1))   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE >= @I_vPODate  and abs(datediff(day, EXCHDATE, @I_vPODate)) <= @PRVDSLMT  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE,TIME1   if (@XCHGRATE = 0)    begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE <= @I_vPODate  and abs(datediff(day, EXCHDATE, @I_vPODate)) <= @PRVDSLMT  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE desc,TIME1 desc  end  end  else  if ((@TRXDTDEF = 2) and (@DATELMTS = 0))   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)   where EXGTBLID = @EXGTBLID   and EXCHDATE >= @I_vPODate   and (EXPNDATE >= @I_vPODate or EXPNDATE = '')   order by EXCHDATE,TIME1   if (@XCHGRATE = 0)    begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE <= @I_vPODate  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE desc,TIME1 desc  end  end  else   begin  select top 1 @XCHGRATE = isnull(XCHGRATE,0) from DYNAMICS..MC00100 (nolock)  where EXGTBLID = @EXGTBLID  and EXCHDATE = @I_vPODate  and (EXPNDATE >= @I_vPODate or EXPNDATE = '')  order by EXCHDATE,TIME1 desc  end   if (@TriangulationUsed = 1)  begin   select @I_vOriginatingCurrencyID = @OriginatingCurrencyID  end   if (@XCHGRATE > 0)  begin  if (@I_vFunctionalCost is null)  begin  if (@TriangulationUsed = 1)  begin   select @I_vOriginatingCost = @I_vOriginatingCost / @DENXRATE  end   select @I_vFunctionalCost =  case  when @RTCLCMTD = 0  then (@I_vOriginatingCost * @XCHGRATE)  when @RTCLCMTD = 1  then (@I_vOriginatingCost / @XCHGRATE)  else 0  end  end  else  begin  if (@I_vOriginatingCost is null)  begin  select @I_vOriginatingCost =  case  when @RTCLCMTD = 0  then (@I_vFunctionalCost / @XCHGRATE)  when @RTCLCMTD = 1  then (@I_vFunctionalCost * @XCHGRATE)  else 0  end   if (@TriangulationUsed = 1)  begin  select @I_vOriginatingCost = @I_vOriginatingCost * @DENXRATE  end   end  end   end   end   end  end     
GO
GRANT EXECUTE ON  [dbo].[MCConvertVendorCost] TO [DYNGRP]
GO
