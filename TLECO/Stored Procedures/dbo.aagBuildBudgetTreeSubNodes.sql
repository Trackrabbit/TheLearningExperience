SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create                             procedure [dbo].[aagBuildBudgetTreeSubNodes]   @aaBudgetTreeID int,   @TRXTable nvarchar(30),   @CodeTable nvarchar(30),   @CodeID int,   @aaLvlCodeString char(50) output,   @aaOrder int,   @aaMaxOrder int  as  begin   declare @CurStr varchar(8000),   @CurStr1 varchar(2000),   @CurName varchar(50),   @aaTrxDimRelType int,   @aaOrderincr int,   @aaTrxDimCodeFr char(33),   @aaTrxDimCodeTo char(33)   select @CurStr   = ' '   select  @CurStr1  = ' '   set @aaOrderincr = @aaOrder + 1   exec(' declare CRelType cursor fast_forward for   select aaTrxDimRelType from AAG00405   where aaTrxDimID = (select aaTrxDimID from AAG00401 where aaTrxDimCodeID = ' + @CodeID + ')and   aaRelTrxDimID = (select aaTrxDimID from '+ @TRXTable + ' where aaBudgetTreeID = ' + @aaBudgetTreeID + '   and aaOrder = ' + @aaOrderincr + ')')   open CRelType   fetch next from CRelType into @aaTrxDimRelType   close CRelType   deallocate CRelType   exec aagGetCodeFrAndTo @aaBudgetTreeID, @aaOrderincr, @TRXTable, @aaTrxDimCodeFr output ,@aaTrxDimCodeTo output   set @aaTrxDimCodeFr = ''''+rtrim(ltrim(@aaTrxDimCodeFr))+''''   set @aaTrxDimCodeTo = ''''+rtrim(ltrim(@aaTrxDimCodeTo))+''''   if @aaTrxDimRelType <> 1   begin   set @CurStr1 =   ' select  AAG00406.aaTrxDimCodeID,AAG00401.aaTrxDimCode,AAG00401.aaTrxDimCodeDescr from AAG00406, AAG00401   where AAG00406.aaTrxDimID = AAG00401.aaTrxDimID and   AAG00401.aaTrxDimID = (select aaTrxDimID from ' +@TRXTable+  ' where aaOrder =  '+ str(@aaOrder + 1)+') and   AAG00406.aaTrxDimCodeID = AAG00401.aaTrxDimCodeID and   AAG00406.aaRelTrxDimID = (select aaTrxDimID from '+ @TRXTable + '   where aaBudgetTreeID = '+str(@aaBudgetTreeID)+ ' and   aaOrder = '+ str(@aaOrder) + ') and   AAG00406.aaRelTrxDimCodeID = ' +str(@CodeID) + ' and   AAG00401.aaTrxDimCode >= '+ @aaTrxDimCodeFr +' and   AAG00401.aaTrxDimCode <= '+ @aaTrxDimCodeTo +' and   AAG00401.INACTIVE = 0'  end   else if @aaTrxDimRelType = 1   begin   set @CurStr1 =   'select AAG00401.aaTrxDimCodeID,AAG00401.aaTrxDimCode,AAG00401.aaTrxDimCodeDescr from  AAG00401 where   AAG00401.aaTrxDimID = (select aaTrxDimID from ' +@TRXTable+  ' where aaOrder =  '+ str(@aaOrder + 1)+') and   AAG00401.aaTrxDimCode >= '+ @aaTrxDimCodeFr +' and   AAG00401.aaTrxDimCode <= '+ @aaTrxDimCodeTo +'   and AAG00401.INACTIVE = 0   order by AAG00401.aaTrxDimCode'   end   select @CurName = 'CRAA' +rtrim(ltrim(str(@CodeID)))   select @CurName = ltrim(rtrim((@CurName)))   set @CurStr =  'declare @aaTrxDimCodeID  int,   @aaTrxDimCode   char(31),   @aaCodeSequence int,   @aaNumTrxDimID int,   @aaLvlCodeString char(50),  @aaTrxDimCodeDescr char(64),   @OVal tinyint   select  @OVal    = 0   declare '+ @CurName +' cursor fast_forward for '   + @CurStr1 + '   open ' +@CurName + '   fetch next from '+ @CurName + ' into  @aaTrxDimCodeID, @aaTrxDimCode, @aaTrxDimCodeDescr   while @@fetch_status = 0   begin   exec aagBudgetValChildWithParent '   +str(@aaBudgetTreeID)+','+   +str(@aaOrder) +',   @aaTrxDimCodeID ,' +   ''''+@CodeTable+''''+','+'   @OVal output   if @OVal = 1   begin   select @aaCodeSequence = max(aaCodeSequence) + 100 from ' + @CodeTable + ' where aaBudgetTreeID = '+ str(@aaBudgetTreeID) +   ' set @aaLvlCodeString = '''+ rtrim(ltrim(@aaLvlCodeString)) +','' +ltrim(str(@aaTrxDimCodeID))   insert into ' + @CodeTable + ' (aaBudgetTreeID,aaTrxDimCodeID,   aaTrxDimParCodeID,aaCodeSequence,aaLevel,aaLvlCodeString,aaTrxDimCodeDescr1) values(' + str(@aaBudgetTreeID )+   ',@aaTrxDimCodeID ,'+ str(@CodeID) +',@aaCodeSequence,'+str(@aaOrder + 1)+',@aaLvlCodeString,@aaTrxDimCodeDescr)   if ' + str(@aaOrder) +' <> '+  str(@aaMaxOrder) +   ' begin   exec aagBuildBudgetTreeSubNodes'   +str(@aaBudgetTreeID)+','''+   @TRXTable+''','''+   @CodeTable+''',   @aaTrxDimCodeID ,   @aaLvlCodeString,'   +str(@aaOrder + 1)+','+   +str(@aaMaxOrder ) +   ' end   end   fetch next from '+ @CurName + ' into  @aaTrxDimCodeID, @aaTrxDimCode ,@aaTrxDimCodeDescr   end   close  '+ @CurName + '   deallocate '+@CurName   if @aaTrxDimRelType is not null   exec (@CurStr)   print  @CurStr   set nocount off  end     
GO
GRANT EXECUTE ON  [dbo].[aagBuildBudgetTreeSubNodes] TO [DYNGRP]
GO
