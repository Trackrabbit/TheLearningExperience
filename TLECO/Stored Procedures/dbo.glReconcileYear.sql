SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glReconcileYear]  @I_sYear smallint = NULL,  @I_sOpenOrHistory smallint = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @O_tOpenToHistory tinyint  = NULL output,  @O_tHistoryToOpen tinyint  = NULL output,  @O_tBadTrxDate tinyint  = NULL output,  @O_SQL_Error_State int   = NULL output as  declare   @dYearEndDate datetime,  @dYearStartDate datetime,  @FALSE int,  @TRUE int,  @iStatus int,  @iError int,  @iLastPeriodOfYear int,  @Cursor_Year smallint,  @Cursor_First_Day_Year datetime,  @Cursor_Last_Day_Year datetime,  @Cursor_History_Year tinyint,  @tRecordsMoved tinyint,  @cGeneral_Entry   char(55),  @dMinDate datetime,  @sUNITACCT smallint,  @sUniTALLOCACCT smallint,  @iMaxPeriod int,  @iAdjustingPeriod1 int,  @iAdjustingPeriod2 int,  @iAdjustingPeriodCount int,  @iAdjustingPeriod1Closed smallint,  @iAdjustingPeriod2Closed smallint  select  @O_tOpenToHistory = 0,  @O_tHistoryToOpen = 0,  @O_tBadTrxDate  = 0,  @O_SQL_Error_State = 0,  @sUNITACCT  = 2,  @sUniTALLOCACCT  = 4  if  @I_sYear     is NULL or  @I_sOpenOrHistory   is NULL or   @I_tMCRegistered is NULL or  @I_cFunctionalCurrency  is NULL begin  select @O_SQL_Error_State = 20852  return  end   exec @iStatus = smGetMinDate @dMinDate output  exec @iStatus = DYNAMICS..smGetConstantInt  'FALSE',  @FALSE output,  @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'TRUE',  @TRUE output,  @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec    @iStatus = DYNAMICS..smGetConstantString   'TRX_SOURCE_GL_GENERAL_ENTRY',   @cGeneral_Entry output,   @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if  ( (@iStatus <> 0) or (@O_SQL_Error_State<> 0) ) begin  select @O_SQL_Error_State = 20956  return  end  create table #Period_Table (  fiscal_year smallint NULL,  fiscal_period smallint NULL,  period_start_date datetime NULL,  period_end_date datetime NULL,  period_closed tinyint NULL   ) exec  sm_Build_Period_Table  update  #Period_Table set   period_start_date = @dMinDate where  fiscal_period = 0 and fiscal_year = @I_sYear  select  @iLastPeriodOfYear = max(fiscal_period) from  #Period_Table where  fiscal_year = @I_sYear  select  @dYearEndDate  = LSTFSCDY,  @dYearStartDate = FSTFSCDY from  SY40101 where  YEAR1 = @I_sYear  create table #GLInvalidYear  (TRXDATE datetime NOT NULL,   NEWYEAR smallint NOT NULL,   ACTINDX int NOT NULL,  Ledger_ID int NOT NULL,  DEBITAMT numeric(19,5)  NOT NULL,  CRDTAMNT numeric(19,5)  NOT NULL,  ORDBTAMT numeric(19,5)  NOT NULL,  ORCRDAMT numeric(19,5)  NOT NULL,  CURNCYID char(15)  NOT NULL,  CURRNIDX smallint NOT NULL)  if @I_sOpenOrHistory = 0  begin   insert into  #GLInvalidYear  select  TRXDATE,   -1,  ACTINDX,  Ledger_ID,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  CURRNIDX  from  GL20000  where  (TRXDATE < @dYearStartDate  or TRXDATE  > @dYearEndDate)  and  OPENYEAR  = @I_sYear  end else begin   insert into  #GLInvalidYear  select  TRXDATE,   -1,  ACTINDX,  Ledger_ID,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  CURNCYID,  CURRNIDX  from  GL30000  where  (TRXDATE < @dYearStartDate  or TRXDATE  > @dYearEndDate)  and  HSTYEAR  = @I_sYear  end  if (select count(*) from #GLInvalidYear) <> 0 begin  DECLARE Period_Header INSENSITIVE CURSOR  for  select  periodhdr.YEAR1,  periodhdr.FSTFSCDY,  periodhdr.LSTFSCDY,  periodhdr.HISTORYR  from  SY40101  periodhdr  where  YEAR1 <> @I_sYear  OPEN Period_Header  FETCH NEXT FROM Period_Header INTO  @Cursor_Year,  @Cursor_First_Day_Year,  @Cursor_Last_Day_Year,  @Cursor_History_Year   while @@FETCH_STATUS = 0  begin   select @tRecordsMoved = @FALSE   if (@Cursor_History_Year = @I_sOpenOrHistory and @Cursor_First_Day_Year > @dYearStartDate) or  (@Cursor_History_Year = 0 and @I_sOpenOrHistory = 0  and @Cursor_First_Day_Year < @dYearStartDate)  begin  if @I_sOpenOrHistory = 0   begin  update  GL20000  set   OPENYEAR = @Cursor_Year  where  OPENYEAR  = @I_sYear  and TRXDATE  >= @Cursor_First_Day_Year   and TRXDATE  <= @Cursor_Last_Day_Year   end  else  begin  update  GL30000  set   HSTYEAR = @Cursor_Year  where  HSTYEAR  = @I_sYear  and TRXDATE  >= @Cursor_First_Day_Year   and TRXDATE  <= @Cursor_Last_Day_Year    end   update  #GLInvalidYear  set  NEWYEAR = @Cursor_Year  where  TRXDATE  >= @Cursor_First_Day_Year   and TRXDATE  <= @Cursor_Last_Day_Year   end  else   begin  if @Cursor_First_Day_Year > @dYearStartDate  begin  update  #GLInvalidYear  set  NEWYEAR  = @I_sYear,  TRXDATE  = @dYearEndDate  where  TRXDATE  >= @Cursor_First_Day_Year  and TRXDATE  <= @Cursor_Last_Day_Year   if @@rowcount > 0  begin  select @tRecordsMoved = @TRUE  end   end  else  begin  update  #GLInvalidYear  set  NEWYEAR  = @I_sYear  where  TRXDATE  >= @Cursor_First_Day_Year  and TRXDATE  <= @Cursor_Last_Day_Year  end   if @Cursor_First_Day_Year > @dYearStartDate and @Cursor_History_Year <> @I_sOpenOrHistory  and @tRecordsMoved = @TRUE  begin  if @I_sOpenOrHistory = 0   begin  select @O_tOpenToHistory = @TRUE  end  else  begin  select @O_tHistoryToOpen = @TRUE  end  end   end    FETCH NEXT FROM Period_Header INTO  @Cursor_Year,  @Cursor_First_Day_Year,  @Cursor_Last_Day_Year,  @Cursor_History_Year   end    DEALLOCATE Period_Header   if (select count(*) from #GLInvalidYear where NEWYEAR = -1) <> 0  begin  select @O_tBadTrxDate = @TRUE  return  end    delete  #GLInvalidYear  where  TRXDATE < @dYearStartDate  and (NEWYEAR = 0  or  NEWYEAR = @I_sYear) end   select @iAdjustingPeriod1 = 0 select @iAdjustingPeriod2 = 0 select @iAdjustingPeriod1Closed = 1 select @iAdjustingPeriod2Closed = 1  select @iMaxPeriod = max(PERIODID)   from   SY40100  where   YEAR1 = @I_sYear  and SERIES = 0   and FORIGIN = 1  select   @iAdjustingPeriodCount = COUNT(1)  from  SY40100  where  YEAR1 = @I_sYear  and SERIES = 0   and FORIGIN = 1  and PERIODDT = (select PERIODDT from SY40100 where PERIODID = @iMaxPeriod and YEAR1 = @I_sYear and SERIES = 0 and FORIGIN = 1)  and PERIODID < @iMaxPeriod  if @iAdjustingPeriodCount = 1 begin  select @iAdjustingPeriod1 = @iMaxPeriod  select @iMaxPeriod = @iMaxPeriod - 1 end  if @iAdjustingPeriodCount = 2 begin  select @iAdjustingPeriod2 = @iMaxPeriod  select @iAdjustingPeriod1 = @iMaxPeriod - 1  select @iMaxPeriod = @iMaxPeriod - 2 end  if @iAdjustingPeriod1 > 0   select @iAdjustingPeriod1Closed = CLOSED from SY40100 where PERIODID = @iAdjustingPeriod1 and YEAR1 = @I_sYear and SERIES = 2  if @iAdjustingPeriod2 > 0   select @iAdjustingPeriod2Closed = CLOSED from SY40100 where PERIODID = @iAdjustingPeriod2 and YEAR1 = @I_sYear and SERIES = 2  if @I_sOpenOrHistory = 0  begin  Update GL20000 set Adjustment_Transaction = 0,  PERIODID = isnull(  (select min(PERIODID) from SY40100   where YEAR1 = GL20000.OPENYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL20000.TRXDATE  and PERDENDT >= GL20000.TRXDATE  ),0)  where   OPENYEAR = @I_sYear  and Adjustment_Transaction = 1   and ( @iAdjustingPeriod1 = 0   or (@iAdjustingPeriod1 > 0   and not @iAdjustingPeriod1 in (select PERIODID from SY40100   where YEAR1 = GL20000.OPENYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL20000.TRXDATE   and PERDENDT >= GL20000.TRXDATE)  )  )   Update GL20000 set PERIODID = (case @iAdjustingPeriod1Closed  when 1 then  case @iAdjustingPeriod2Closed  when 1 then   @iAdjustingPeriod1  else  @iAdjustingPeriod2  end  else  @iAdjustingPeriod1  end)  where   OPENYEAR = @I_sYear  and Adjustment_Transaction = 1   and (@iAdjustingPeriod1 > 0 or @iAdjustingPeriod2 > 0)  and not ((@iAdjustingPeriod1 > 0 and PERIODID = @iAdjustingPeriod1) or (@iAdjustingPeriod2 > 0 and PERIODID = @iAdjustingPeriod2))   Update GL20000 set PERIODID = isnull(  (select min(PERIODID) from SY40100   where YEAR1 = GL20000.OPENYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL20000.TRXDATE  and PERDENDT >= GL20000.TRXDATE  ),0)  where   OPENYEAR = @I_sYear   and Adjustment_Transaction = 0   and not PERIODID = isnull(  (select min(PERIODID) from SY40100   where YEAR1 = GL20000.OPENYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL20000.TRXDATE  and PERDENDT >= GL20000.TRXDATE  ),0)   Update  GL20000   set   Adjustment_Transaction = 0,  PERIODID = 0  where   OPENYEAR = @I_sYear  and (Adjustment_Transaction > 0   or PERIODID > 0)  and GL20000.TRXDATE = isnull((select FSTFSCDY-1 from SY40101   where YEAR1 = GL20000.OPENYEAR),0) end else  begin  Update GL30000 set Adjustment_Transaction = 0,  PERIODID = isnull(  (select min(PERIODID) from SY40100   where YEAR1 = GL30000.HSTYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL30000.TRXDATE  and PERDENDT >= GL30000.TRXDATE  ),0)  where   HSTYEAR = @I_sYear  and Adjustment_Transaction = 1   and ( @iAdjustingPeriod1 = 0   or (@iAdjustingPeriod1 > 0   and not @iAdjustingPeriod1 in (select PERIODID from SY40100   where YEAR1 = GL30000.HSTYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL30000.TRXDATE   and PERDENDT >= GL30000.TRXDATE)  )  )   Update GL30000 set PERIODID = (case @iAdjustingPeriod1Closed  when 1 then  case @iAdjustingPeriod2Closed  when 1 then   @iAdjustingPeriod1  else  @iAdjustingPeriod2  end  else  @iAdjustingPeriod1  end)  where   HSTYEAR = @I_sYear  and Adjustment_Transaction = 1   and (@iAdjustingPeriod1 > 0 or @iAdjustingPeriod2 > 0)  and not ((@iAdjustingPeriod1 > 0 and PERIODID = @iAdjustingPeriod1) or (@iAdjustingPeriod2 > 0 and PERIODID = @iAdjustingPeriod2))   Update GL30000 set PERIODID = isnull(  (select min(PERIODID) from SY40100   where YEAR1 = GL30000.HSTYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL30000.TRXDATE  and PERDENDT >= GL30000.TRXDATE  ),0)  where   HSTYEAR = @I_sYear   and Adjustment_Transaction = 0   and not PERIODID = isnull(  (select min(PERIODID) from SY40100   where YEAR1 = GL30000.HSTYEAR   and SERIES = 0   and FORIGIN = 1  and PERIODDT <= GL30000.TRXDATE  and PERDENDT >= GL30000.TRXDATE  ),0)   Update  GL30000   set   Adjustment_Transaction = 0,  PERIODID = 0  where   HSTYEAR = @I_sYear  and (Adjustment_Transaction > 0   or PERIODID > 0)  and GL30000.TRXDATE = isnull((select FSTFSCDY-1 from SY40101   where YEAR1 = GL30000.HSTYEAR),0) end  if @I_sOpenOrHistory = 0  begin   delete from   GL10110  where  YEAR1 = @I_sYear   insert   into GL10110(   PERDBLNC,   ACTINDX,  YEAR1,  PERIODID,  Ledger_ID,  ACCATNUM,  CRDTAMNT,  DEBITAMT)   select  isnull(sum(GL20000.DEBITAMT) - sum(GL20000.CRDTAMNT),0.00),  GL00100.ACTINDX,  @I_sYear,  GL20000.PERIODID,  GL20000.Ledger_ID,  GL00100.ACCATNUM,  isnull(sum(GL20000.CRDTAMNT),0.00),  isnull(sum(GL20000.DEBITAMT), 0.00)  from  GL00100,  GL20000,  #Period_Table  where  GL00100.ACTINDX = GL20000.ACTINDX  and #Period_Table.period_start_date <= GL20000.TRXDATE  and #Period_Table.period_end_date >= GL20000.TRXDATE  and #Period_Table.fiscal_year = @I_sYear  and GL20000.OPENYEAR = @I_sYear  and #Period_Table.fiscal_period = GL20000.PERIODID  group by GL00100.ACTINDX, GL00100.ACCTTYPE, GL00100.ACCATNUM, #Period_Table.fiscal_period, GL20000.Ledger_ID, GL20000.PERIODID   if @I_tMCRegistered = @TRUE  begin  delete  MC00201  where  OPENYEAR = @I_sYear   insert   into MC00201  (CURNCYID,  CURRNIDX,  ACTINDX,  OPENYEAR,  PERIODID,  Ledger_ID,  FUNCTAMT,  ORIGAMT)  select   CURNCYID,  max(CURRNIDX),  GL00100.ACTINDX,  @I_sYear,  GL20000.PERIODID,  GL20000.Ledger_ID,  isnull(sum(GL20000.DEBITAMT) - sum(GL20000.CRDTAMNT), 0.00),  isnull(sum(GL20000.ORDBTAMT) - sum(GL20000.ORCRDAMT), 0.00)  from  GL00100,  GL20000,  #Period_Table  where  GL00100.ACTINDX = GL20000.ACTINDX  and  (GL00100.ACCTTYPE <> @sUNITACCT   and  GL00100.ACCTTYPE <> @sUniTALLOCACCT)  and #Period_Table.period_start_date <= GL20000.TRXDATE  and #Period_Table.period_end_date >= GL20000.TRXDATE  and #Period_Table.fiscal_year = @I_sYear  and GL20000.OPENYEAR = @I_sYear  and  GL20000.CURNCYID <> @I_cFunctionalCurrency  group by CURNCYID, GL00100.ACTINDX, #Period_Table.fiscal_period, GL20000.Ledger_ID, GL20000.PERIODID   end   end else  begin  delete from   GL10111  where  YEAR1 = @I_sYear   insert   into GL10111  (PERDBLNC,   ACTINDX,  YEAR1,  PERIODID,  Ledger_ID,  ACCATNUM,  CRDTAMNT,  DEBITAMT)  select  isnull(sum(GL30000.DEBITAMT) - sum(GL30000.CRDTAMNT),0.00),  GL00100.ACTINDX,  @I_sYear,   GL30000.PERIODID,  GL30000.Ledger_ID,  GL00100.ACCATNUM,  isnull(sum(GL30000.CRDTAMNT), 0.00),  isnull(sum(GL30000.DEBITAMT),0.00)  from  GL00100,  GL30000,  #Period_Table  where  GL00100.ACTINDX = GL30000.ACTINDX  and #Period_Table.period_start_date <= GL30000.TRXDATE  and #Period_Table.period_end_date >= GL30000.TRXDATE  and #Period_Table.fiscal_year = @I_sYear  and GL30000.HSTYEAR = @I_sYear  and #Period_Table.fiscal_period = GL30000.PERIODID  group by GL00100.ACTINDX, GL00100.ACCTTYPE, GL00100.ACCATNUM, fiscal_period, GL30000.Ledger_ID, GL30000.PERIODID   if @I_tMCRegistered = @TRUE  begin  delete  MC30001  where  HSTYEAR = @I_sYear   insert   into MC30001   (CURNCYID,  CURRNIDX,  ACTINDX,  HSTYEAR,  PERIODID,  Ledger_ID,  FUNCTAMT,  ORIGAMT)  select   CURNCYID,  max(CURRNIDX),  GL00100.ACTINDX,  @I_sYear,  GL30000.PERIODID,  GL30000.Ledger_ID,  isnull(sum(GL30000.DEBITAMT) - sum(GL30000.CRDTAMNT), 0.00),  isnull(sum(GL30000.ORDBTAMT) - sum(GL30000.ORCRDAMT), 0.00)  from  GL00100,  GL30000,  #Period_Table  where  GL00100.ACTINDX = GL30000.ACTINDX  and  (GL00100.ACCTTYPE <> @sUNITACCT   and GL00100.ACCTTYPE <> @sUniTALLOCACCT)  and #Period_Table.period_start_date <= GL30000.TRXDATE  and #Period_Table.period_end_date >= GL30000.TRXDATE  and #Period_Table.fiscal_year = @I_sYear  and GL30000.HSTYEAR = @I_sYear  and GL30000.CURNCYID <> @I_cFunctionalCurrency  group by CURNCYID, GL00100.ACTINDX, #Period_Table.fiscal_period, GL30000.Ledger_ID, GL30000.PERIODID   end   end  if (select count(*) from #GLInvalidYear) > 0  begin  if @I_sOpenOrHistory = 0    begin   insert into   GL10110(   PERDBLNC,   ACTINDX,  YEAR1,  PERIODID,  Ledger_ID,  ACCATNUM,  CRDTAMNT,  DEBITAMT)  select  distinct 0.00,  GL00100.ACTINDX,  #Period_Table.fiscal_year,  #Period_Table.fiscal_period,  #GLInvalidYear.Ledger_ID,  GL00100.ACCATNUM,  0.00,  0.00  from  GL00100,  #GLInvalidYear,  #Period_Table  where  #GLInvalidYear.ACTINDX = GL00100.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR  and (str(GL00100.ACTINDX) + str(#Period_Table.fiscal_year) + str(#Period_Table.fiscal_period) + str(#GLInvalidYear.Ledger_ID)  not in  (select   str(ACTINDX) + str(YEAR1) + str(PERIODID) + str(Ledger_ID)  from   GL10110))  group by GL00100.ACTINDX, GL00100.ACCTTYPE, GL00100.ACCATNUM, #GLInvalidYear.Ledger_ID, fiscal_period, fiscal_year    update  GL10110  set  PERDBLNC = PERDBLNC + (select  isnull(sum(#GLInvalidYear.DEBITAMT) -   sum(#GLInvalidYear.CRDTAMNT),0.00)  from  #GLInvalidYear,  #Period_Table  where  GL10110.PERIODID = #Period_Table.fiscal_period  and GL10110.YEAR1 = #Period_Table.fiscal_year  and     GL10110.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10110.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR),  CRDTAMNT = GL10110.CRDTAMNT + (select   isnull(sum(CRDTAMNT),0.00)  from  #GLInvalidYear,  #Period_Table  where  GL10110.PERIODID = #Period_Table.fiscal_period  and GL10110.YEAR1 = #Period_Table.fiscal_year  and     GL10110.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10110.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR),  DEBITAMT = GL10110.DEBITAMT + ( select  isnull(sum(DEBITAMT),0.00)  from  #GLInvalidYear,  #Period_Table  where  GL10110.PERIODID = #Period_Table.fiscal_period  and GL10110.YEAR1 = #Period_Table.fiscal_year  and     GL10110.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10110.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR)  from   #GLInvalidYear,  #Period_Table  where  GL10110.PERIODID = #Period_Table.fiscal_period  and GL10110.YEAR1 = #Period_Table.fiscal_year  and     GL10110.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10110.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR   if @I_tMCRegistered = @TRUE  begin   delete   #GLInvalidYear  where  CURNCYID = @I_cFunctionalCurrency   insert   into MC00201 (CURNCYID,  CURRNIDX,  ACTINDX,  OPENYEAR,  PERIODID,  Ledger_ID,  FUNCTAMT,  ORIGAMT)  select   distinct #GLInvalidYear.CURNCYID,  #GLInvalidYear.CURRNIDX,  GL00100.ACTINDX,  #Period_Table.fiscal_year,  #Period_Table.fiscal_period,  #GLInvalidYear.Ledger_ID,  0.00,  0.00  from  GL00100,  #GLInvalidYear,  #Period_Table  where  #GLInvalidYear.ACTINDX = GL00100.ACTINDX   and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR  and str(#GLInvalidYear.ACTINDX) + str(#Period_Table.fiscal_year) +   str(#Period_Table.fiscal_period) + str(#GLInvalidYear.Ledger_ID) + #GLInvalidYear.CURNCYID   not in  (select  str(ACTINDX) + str(OPENYEAR) + str(PERIODID) + str(Ledger_ID) + CURNCYID  from  MC00201)  and  (GL00100.ACCTTYPE <> @sUNITACCT   and GL00100.ACCTTYPE <> @sUniTALLOCACCT)  group by #GLInvalidYear.CURNCYID, #GLInvalidYear.CURRNIDX, GL00100.ACTINDX, #GLInvalidYear.Ledger_ID,  #Period_Table.fiscal_period, #Period_Table.fiscal_year  update  MC00201  set  FUNCTAMT = FUNCTAMT + (select  isnull(sum(#GLInvalidYear.DEBITAMT) -   sum(#GLInvalidYear.CRDTAMNT),0.00)  from  #GLInvalidYear,  #Period_Table  where  MC00201.PERIODID = #Period_Table.fiscal_period  and MC00201.OPENYEAR = #Period_Table.fiscal_year  and     MC00201.Ledger_ID = #GLInvalidYear.Ledger_ID  and MC00201.ACTINDX = #GLInvalidYear.ACTINDX  and MC00201.CURNCYID = #GLInvalidYear.CURNCYID  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR),  MC00201.ORIGAMT = MC00201.ORIGAMT + (select  isnull(sum(#GLInvalidYear.ORDBTAMT) -   sum(#GLInvalidYear.ORCRDAMT),0.00)  from  #GLInvalidYear,  #Period_Table  where  MC00201.PERIODID = #Period_Table.fiscal_period  and MC00201.OPENYEAR = #Period_Table.fiscal_year  and     MC00201.Ledger_ID = #GLInvalidYear.Ledger_ID  and MC00201.ACTINDX = #GLInvalidYear.ACTINDX  and MC00201.CURNCYID = #GLInvalidYear.CURNCYID  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR)  from  #GLInvalidYear,  #Period_Table  where  MC00201.PERIODID = #Period_Table.fiscal_period  and MC00201.OPENYEAR = #Period_Table.fiscal_year  and     MC00201.Ledger_ID  = #GLInvalidYear.Ledger_ID  and MC00201.ACTINDX  = #GLInvalidYear.ACTINDX  and MC00201.CURNCYID = #GLInvalidYear.CURNCYID  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR   end   end  else   begin  insert into   GL10111(   PERDBLNC,   ACTINDX,  YEAR1,  PERIODID,  Ledger_ID,  ACCATNUM,  CRDTAMNT,  DEBITAMT)  select distinct   0.00,  GL00100.ACTINDX,  #Period_Table.fiscal_year,  #Period_Table.fiscal_period,  #GLInvalidYear.Ledger_ID,  GL00100.ACCATNUM,  0.00,  0.00  from  GL00100,  #GLInvalidYear,  #Period_Table  where  #GLInvalidYear.ACTINDX = GL00100.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR  and str(#GLInvalidYear.ACTINDX) + str(#Period_Table.fiscal_year) + str(#Period_Table.fiscal_period) + str(#GLInvalidYear.Ledger_ID)  not in  (select  str(ACTINDX) + str(YEAR1) + str(PERIODID) + str(Ledger_ID)  from  GL10111)  group by GL00100.ACTINDX, GL00100.ACCATNUM, #Period_Table.fiscal_year, #Period_Table.fiscal_period, #GLInvalidYear.Ledger_ID   update  GL10111  set  PERDBLNC = PERDBLNC + (select  isnull(sum(#GLInvalidYear.DEBITAMT) -   sum(#GLInvalidYear.CRDTAMNT),0.00)  from  #GLInvalidYear,  #Period_Table  where  GL10111.PERIODID = #Period_Table.fiscal_period  and GL10111.YEAR1 = #Period_Table.fiscal_year  and     GL10111.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10111.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR),   CRDTAMNT = GL10111.CRDTAMNT + (select  isnull(sum(#GLInvalidYear.CRDTAMNT),0.00)  from   #GLInvalidYear,  #Period_Table  where  GL10111.PERIODID = #Period_Table.fiscal_period  and GL10111.YEAR1 = #Period_Table.fiscal_year  and     GL10111.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10111.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR),  DEBITAMT = GL10111.DEBITAMT + (select  isnull(sum(#GLInvalidYear.DEBITAMT),0.00)  from   #GLInvalidYear,  #Period_Table  where  GL10111.PERIODID = #Period_Table.fiscal_period  and GL10111.YEAR1 = #Period_Table.fiscal_year  and     GL10111.Ledger_ID = #GLInvalidYear.Ledger_ID  and GL10111.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR)  from  #GLInvalidYear,  #Period_Table  where  GL10111.PERIODID  = #Period_Table.fiscal_period  and GL10111.YEAR1   = #Period_Table.fiscal_year  and     GL10111.Ledger_ID   = #GLInvalidYear.Ledger_ID  and GL10111.ACTINDX   = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR   if @I_tMCRegistered = @TRUE  begin   delete   #GLInvalidYear  where  CURNCYID = @I_cFunctionalCurrency   insert   into MC30001 (CURNCYID,  CURRNIDX,  ACTINDX,  HSTYEAR,  PERIODID,  Ledger_ID,  FUNCTAMT,  ORIGAMT)  select   distinct #GLInvalidYear.CURNCYID,  max(#GLInvalidYear.CURRNIDX),  #GLInvalidYear.ACTINDX,  #Period_Table.fiscal_year,  #Period_Table.fiscal_period,  #GLInvalidYear.Ledger_ID,  0.00,  0.00  from  GL00100,  #GLInvalidYear,  #Period_Table  where  GL00100.ACTINDX = #GLInvalidYear.ACTINDX  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR  and str(#GLInvalidYear.ACTINDX) + str(#Period_Table.fiscal_year) +   str(#Period_Table.fiscal_period) + str(#GLInvalidYear.Ledger_ID) + #GLInvalidYear.CURNCYID   not in  (select  str(ACTINDX) + str(HSTYEAR) + str(PERIODID) + str(Ledger_ID) + CURNCYID  from  MC30001)  and  (GL00100.ACCTTYPE <> @sUNITACCT   and GL00100.ACCTTYPE <> @sUniTALLOCACCT)  group by #GLInvalidYear.CURNCYID, #GLInvalidYear.ACTINDX, #GLInvalidYear.Ledger_ID, #Period_Table.fiscal_period,   #Period_Table.fiscal_year   update  MC30001  set  FUNCTAMT = FUNCTAMT + (select  isnull(sum(#GLInvalidYear.DEBITAMT) -   sum(#GLInvalidYear.CRDTAMNT),0.00)  from   #GLInvalidYear,  #Period_Table  where  MC30001.PERIODID = #Period_Table.fiscal_period  and MC30001.HSTYEAR = #Period_Table.fiscal_year  and     MC30001.Ledger_ID = #GLInvalidYear.Ledger_ID  and MC30001.ACTINDX = #GLInvalidYear.ACTINDX  and  MC30001.CURNCYID = #GLInvalidYear.CURNCYID  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR),  MC30001.ORIGAMT = MC30001.ORIGAMT + (select  isnull(sum(#GLInvalidYear.ORDBTAMT) -   sum(#GLInvalidYear.ORCRDAMT),0.00)  from   #GLInvalidYear,  #Period_Table  where  MC30001.PERIODID = #Period_Table.fiscal_period  and MC30001.HSTYEAR = #Period_Table.fiscal_year  and     MC30001.Ledger_ID = #GLInvalidYear.Ledger_ID  and MC30001.ACTINDX = #GLInvalidYear.ACTINDX  and  MC30001.CURNCYID = #GLInvalidYear.CURNCYID  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR)   from  #GLInvalidYear,  #Period_Table  where  MC30001.PERIODID = #Period_Table.fiscal_period  and MC30001.HSTYEAR = #Period_Table.fiscal_year  and     MC30001.Ledger_ID = #GLInvalidYear.Ledger_ID  and MC30001.ACTINDX = #GLInvalidYear.ACTINDX  and  MC30001.CURNCYID = #GLInvalidYear.CURNCYID  and #Period_Table.period_start_date <= #GLInvalidYear.TRXDATE  and #Period_Table.period_end_date >= #GLInvalidYear.TRXDATE  and #Period_Table.fiscal_year = #GLInvalidYear.NEWYEAR   end   end  end   return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[glReconcileYear] TO [DYNGRP]
GO
