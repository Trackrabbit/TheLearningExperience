SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpCreatePostingActivity]  @I_iSQLSessionID int  = NULL,  @I_cBatchSource char(15) = NULL,  @I_cBatchNumber char(15) = NULL,  @I_cUserID char(15) = NULL,  @I_sWindowType smallint = NULL,  @I_cCompanyName char(64) = NULL,  @I_sCompanyID smallint = NULL,  @I_tPosting tinyint  = NULL,  @O_iErrorState int  = NULL output as  declare  @TRUE                           tinyint,  @FALSE                          tinyint,  @BATCH_AVAILABLE                smallint,  @BATCH_POSTING_INCOMPLETE       smallint,  @BATCH_PRINTING_INCOMPLETE      smallint,  @BATCH_UPDATING_INCOMPLETE      smallint,  @RECOVERY_WINDOW                smallint,  @tMultipleBatches               tinyint,  @cTempBatchNumber               char(15),  @iError                         int,  @iStatus                        int,  @RULE_RESERVESTATE smallint,  @RES_RESERVE smallint  select  @O_iErrorState   = 0,  @iStatus         = 0   if @I_iSQLSessionID        is NULL or  @I_cBatchSource         is NULL or  @I_cBatchNumber         is NULL or  @I_cUserID              is NULL or  @I_sWindowType          is NULL or  @I_cCompanyName  is NULL or  @I_sCompanyID           is NULL   begin  select @O_iErrorState = 21094  return  end    select  @TRUE                           = 1,  @FALSE                          = 0,  @BATCH_AVAILABLE                = 0,  @BATCH_POSTING_INCOMPLETE       = 7,  @BATCH_PRINTING_INCOMPLETE      = 8,  @BATCH_UPDATING_INCOMPLETE      = 9,  @RECOVERY_WINDOW                = 5   exec @iStatus = DYNAMICS..smGetConstantInt  'RULE_RESERVESTATE',  @RULE_RESERVESTATE output,  @O_iErrorState    output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'RES_RESERVE',  @RES_RESERVE output,  @O_iErrorState    output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)   if @I_cBatchNumber = ''  select @tMultipleBatches = @TRUE  else   select @tMultipleBatches = @FALSE   if @I_sWindowType = @RECOVERY_WINDOW  begin  insert   into   DYNAMICS.dbo.SY00800 (   WINTYPE,  USERID,  CMPNYNAM,  BCHSOURC,  BACHNUMB,  POSTING )  select  @I_sWindowType,  @I_cUserID,  @I_cCompanyName,  a.BCHSOURC,  a.BACHNUMB,  @TRUE  from  SY00500 a left outer join DYNAMICS.dbo.SY00800 b  on a.BACHNUMB = b.BACHNUMB   and b.BCHSOURC = @I_cBatchSource  and b.CMPNYNAM = @I_cCompanyName  where  a.BCHSOURC        = @I_cBatchSource  and     a.MKDTOPST        = @TRUE  and     a.USERID          = @I_cUserID  and     (a.BCHSTTUS       = @BATCH_PRINTING_INCOMPLETE  or      a.BCHSTTUS        = @BATCH_UPDATING_INCOMPLETE)  and  b.DEX_ROW_ID is null  insert   into   DYNAMICS.dbo.SY00801 (   RULEID,  RSRCID,  RSRCSBID,  CMPANYID,  USERID,  RSCSTATE,  RSRDESC,  USECT )  select  @RULE_RESERVESTATE,  a.BACHNUMB,  @I_cBatchSource,  @I_sCompanyID,  @I_cUserID,  @RES_RESERVE,  str(@I_iSQLSessionID),  1  from  SY00500 a left outer join DYNAMICS.dbo.SY00801 b  on a.BACHNUMB = b.RSRCID   and b.RULEID = @RULE_RESERVESTATE   and b.RSRCSBID = @I_cBatchSource  and b.CMPANYID = @I_sCompanyID  where  a.BCHSOURC        = @I_cBatchSource  and     a.MKDTOPST        = @TRUE  and     a.USERID          = @I_cUserID  and     (a.BCHSTTUS       = @BATCH_PRINTING_INCOMPLETE  or      a.BCHSTTUS        = @BATCH_UPDATING_INCOMPLETE)  and b.DEX_ROW_ID is null   end   if @tMultipleBatches = @TRUE  begin  insert into DYNAMICS.dbo.SY00800 (WINTYPE, USERID, CMPNYNAM, BCHSOURC, BACHNUMB, POSTING)  select @RULE_RESERVESTATE, @I_cUserID, @I_cCompanyName, @I_cBatchSource, a.BACHNUMB, @I_tPosting  from SY00500 a left outer join DYNAMICS.dbo.SY00800 b  on a.BACHNUMB = b.BACHNUMB   and b.BCHSOURC = @I_cBatchSource  and b.CMPNYNAM = @I_cCompanyName  where a.BCHSOURC = @I_cBatchSource  and a.MKDTOPST = @TRUE  and a.USERID = @I_cUserID  and (a.BCHSTTUS = @BATCH_AVAILABLE or a.BCHSTTUS = @BATCH_POSTING_INCOMPLETE)  and b.DEX_ROW_ID is null  insert into DYNAMICS.dbo.SY00801 (RULEID, RSRCID, RSRCSBID, CMPANYID, USERID, RSCSTATE, RSRDESC, USECT)  select @RULE_RESERVESTATE, a.BACHNUMB, @I_cBatchSource, @I_sCompanyID, @I_cUserID, @RES_RESERVE, str(@I_iSQLSessionID), 1  from SY00500 a left outer join DYNAMICS.dbo.SY00801 b  on a.BACHNUMB = b.RSRCID   and b.RULEID = @RULE_RESERVESTATE   and b.RSRCSBID = @I_cBatchSource  and b.CMPANYID = @I_sCompanyID  where a.BCHSOURC = @I_cBatchSource  and a.MKDTOPST = @TRUE  and a.USERID = @I_cUserID  and (a.BCHSTTUS = @BATCH_AVAILABLE or a.BCHSTTUS = @BATCH_POSTING_INCOMPLETE)  and b.DEX_ROW_ID is null   end  else  begin  if not exists (select 1 from DYNAMICS.dbo.SY00800 where BACHNUMB = @I_cBatchNumber and BCHSOURC = @I_cBatchSource and CMPNYNAM = @I_cCompanyName and USERID = @I_cUserID)  insert into DYNAMICS.dbo.SY00800 (WINTYPE, USERID, CMPNYNAM, BCHSOURC, BACHNUMB, POSTING) values  (@I_sWindowType, @I_cUserID, @I_cCompanyName, @I_cBatchSource, @I_cBatchNumber, @I_tPosting)  if not exists (select 1 from DYNAMICS.dbo.SY00801 where RULEID = 1000 and RSRCID = @I_cBatchNumber and RSRCSBID = @I_cBatchSource and CMPANYID = @I_sCompanyID)  insert into DYNAMICS.dbo.SY00801 (RULEID, RSRCID, RSRCSBID, CMPANYID, USERID, RSCSTATE, RSRDESC, USECT) values  (@RULE_RESERVESTATE, @I_cBatchNumber, @I_cBatchSource, @I_sCompanyID, @I_cUserID, @RES_RESERVE, str(@I_iSQLSessionID), 1)  end  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glpCreatePostingActivity] TO [DYNGRP]
GO
