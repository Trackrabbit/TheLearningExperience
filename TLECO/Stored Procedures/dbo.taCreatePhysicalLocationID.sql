SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taCreatePhysicalLocationID]  @I_vPhysical_Location_ID char(15),    @I_vPhysical_Location_Desc char(30) = '',   @I_vLOCATNID char(15) = '',   @I_vLast_Inventory_Date datetime = '',   @I_vUSRDEFND1    char(50) = '',       @I_vUSRDEFND2    char(50) = '',       @I_vUSRDEFND3    char(50) = '',       @I_vUSRDEFND4    varchar(8000) = '',  @I_vUSRDEFND5    varchar(8000) = '',  @O_iErrorState    int output,   @oErrString    varchar(255) output   with encryption as  set transaction isolation level read uncommitted set nocount on  declare   @Physical_Location_Index int,   @O_iNumErrorState int,  @iAddCodeErrState int,    @iStatus int,  @iCustomState int,  @iCustomErrString varchar(255),  @O_oErrorState int,  @iError int     select  @Physical_Location_Index = 0,   @iStatus = 0,   @O_iErrorState = 0    if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taCreatePhysicalLocationIDPre  @I_vPhysical_Location_ID output,  @I_vPhysical_Location_Desc output,  @I_vLOCATNID output,  @I_vLast_Inventory_Date output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3159    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if(  @I_vPhysical_Location_ID is NULL or  @I_vPhysical_Location_Desc is NULL or  @I_vLOCATNID is NULL or  @I_vLast_Inventory_Date is NULL or  @I_vUSRDEFND1 is NULL or  @I_vUSRDEFND2 is NULL or  @I_vUSRDEFND3 is NULL or  @I_vUSRDEFND4 is NULL or  @I_vUSRDEFND5 is NULL   )  begin  select @O_iErrorState = 3160    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vPhysical_Location_ID = UPPER(@I_vPhysical_Location_ID),  @I_vLOCATNID = UPPER(@I_vLOCATNID)  if (@Physical_Location_Index = 0)     begin  exec @iStatus = taGetPhysicalLocationIndex  @I_tInc_Dec = 1,   @O_vPhysicalLocationIndex = @Physical_Location_Index output,  @O_iErrorState = @O_iNumErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@O_iNumErrorState <> 0) or (@iError <> 0))  begin  select @O_iErrorState = 5365    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if  ( @I_vPhysical_Location_ID = '' ) begin  select @O_iErrorState = 3161    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output end  if  ( @I_vLOCATNID <> '' ) begin  if (not exists(select 1 from FA41100 (nolock) where LOCATNID = @I_vLOCATNID))  begin  select @O_iErrorState = 3162     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@O_iErrorState = 0) begin  if not exists( select 1 from FA42400 (nolock) where  Physical_Location_ID = @I_vPhysical_Location_ID )   begin  insert into FA42400 ( Physical_Location_Index,  Physical_Location_ID,  Physical_Location_Desc,  LOCATNID,  Last_Inventory_Date,  LASTMNTDDATE,  LASTMNTDTIME,  LASTMNTDUSERID  )  select   @Physical_Location_Index,    @I_vPhysical_Location_ID,    @I_vPhysical_Location_Desc,    @I_vLOCATNID,      @I_vLast_Inventory_Date,    convert(varchar(12),getdate()),    '',       ''        if @@error <> 0  begin  select @O_iErrorState = 3163    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  select @O_iErrorState = 3164    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  end  end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  exec @iStatus = taCreatePhysicalLocationIDPost  @I_vPhysical_Location_ID,  @I_vPhysical_Location_Desc,  @I_vLOCATNID,  @I_vLast_Inventory_Date,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3165    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taCreatePhysicalLocationID] TO [DYNGRP]
GO
