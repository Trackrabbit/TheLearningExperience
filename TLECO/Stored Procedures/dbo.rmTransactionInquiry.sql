SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[rmTransactionInquiry]  @I_cRMInquiryTemp char(40)        = NULL,  @I_cCustomerNumber char(15) = NULL,  @I_cFromDocumentNumber char(21) = NULL,  @I_cToDocumentNumber char(21) = NULL,  @I_dFromDocumentDate datetime = NULL,  @I_dToDocumentDate datetime = NULL,  @I_iFromDocumentType int  = NULL,  @I_iToDocumentType int  = NULL,  @I_iFromPeriod int  = NULL,  @I_iToPeriod int  = NULL,  @I_tIncludeWorkTables tinyint  = NULL,  @I_tIncludeOpenTable tinyint  = NULL,  @I_tIncludeHistoryTable tinyint  = NULL,  @I_sRateCalcMethod smallint = NULL,  @I_nExchangeRate numeric(15,7) = NULL,  @I_sCurrencyView         smallint = NULL,  @I_sRptDecPlaces   smallint = NULL,  @I_sRptCurrencyIndex smallint = NULL,   @I_sFuncCurrencyIndex smallint = NULL,  @I_cFuncCurrencyID char(15) = NULL,  @I_tUnpaidFinCharges tinyint  = NULL,  @I_sVoidStatus smallint = NULL,  @O_iErrorState                  int             = NULL output as  declare  @TRUE smallint,  @FALSE smallint,  @sMULTIPLY smallint,  @sDIVIDE smallint,  @cFUNCTIONAL char(1),  @cORIGINATING char(1),  @cREPORTING    char(1),  @cRMCash char(15),  @cRMSales char(15),  @cCurrencyView   char(1),  @cFuncCurrencyIndex  char(4),  @cRptCurrencyIndex char(4),  @cRateCalcMethod char(1),  @cExchangeRate   char(20),  @cRptDecPlaces char(1),  @tLoopControl           tinyint,  @cOpenTableRestr char(255),  @cHistTableRestr char(255),  @iStatus                int,  @iError                 int  select  @iStatus = 0,  @O_iErrorState = 0  select  @TRUE    = 1,  @FALSE   = 0,  @sMULTIPLY = 0,  @sDIVIDE = 1,  @cFUNCTIONAL = '1',  @cORIGINATING = '2',   @cREPORTING   = '3'   select   @cCurrencyView   = convert(char(1),@I_sCurrencyView ),  @cFuncCurrencyIndex     = convert(char(4),@I_sFuncCurrencyIndex),  @cRateCalcMethod = convert(char(1),@I_sRateCalcMethod),  @cExchangeRate   = convert(char,@I_nExchangeRate),  @cRptDecPlaces  = convert(char(1),@I_sRptDecPlaces),  @cRptCurrencyIndex = convert(char(4),@I_sRptCurrencyIndex)  create table #Restriction(  CustomerID char(15) not NULL,  FromDocumentNumber char(21) not NULL,  ToDocumentNumber char(21) not NULL,  FromDocumentDate datetime not NULL,  ToDocumentDate datetime not NULL,  FromDocumentType int not NULL,  ToDocumentType int not NULL,  FromPeriod int not NULL,  ToPeriod int not NULL,  BatchSource char(15) not NULL,  VoidStatus smallint not NULL)  while @tLoopControl is NULL begin  select @tLoopControl = 1   if @I_cRMInquiryTemp is NULL or  @I_cCustomerNumber is NULL or  @I_cFromDocumentNumber is NULL or  @I_cToDocumentNumber is NULL or  @I_iFromDocumentType is NULL or  @I_iToDocumentType is NULL or  @I_iFromPeriod is NULL or  @I_iToPeriod is NULL or  @I_tIncludeWorkTables is NULL or  @I_tIncludeOpenTable is NULL or  @I_tIncludeHistoryTable is NULL or   @I_sRateCalcMethod is NULL or   @I_nExchangeRate is NULL or   @I_sCurrencyView         is NULL or   @I_sRptDecPlaces   is NULL or   @I_sRptCurrencyIndex is NULL or   @I_sFuncCurrencyIndex is NULL or  @I_cFuncCurrencyID is NULL or  @I_tUnpaidFinCharges is NULL or  @I_sVoidStatus is NULL   begin  select @O_iErrorState = 20963  break  end    insert into #Restriction values(  @I_cCustomerNumber,  @I_cFromDocumentNumber,  @I_cToDocumentNumber,  @I_dFromDocumentDate,  @I_dToDocumentDate,  @I_iFromDocumentType,  @I_iToDocumentType,  @I_iFromPeriod,  @I_iToPeriod,   '',  @I_sVoidStatus)   exec('truncate table ' + @I_cRMInquiryTemp)   if @I_tIncludeWorkTables = @TRUE  begin  exec @iStatus = DYNAMICS..smGetConstantString  'RM_SALES_STR',   @cRMSales output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break    update #Restriction set BatchSource = @cRMSales  exec('insert into ' +   @I_cRMInquiryTemp +  ' select ' +   'RM10301.RMDNUMWK, ' +  'case ' +  ' when (RM10301.CBKIDCRD <> '''' and len(RM10301.CHEKNMBR)>4) then ' +  ' (select STUFF( RM10301.CHEKNMBR,1,(len( RM10301.CHEKNMBR)-4),''XXXXXXXXXXXX'')) ' +  ' else RM10301.CHEKNMBR ' +  'end, ' +  ' RM10301.RMDTYPAL, RM10301.DOCDESCR,RM10301.DUEDATE,RM10301.DOCDATE,  case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10301.CURNCYID)) then DOCAMNT' +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.ORORGTRX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(DOCAMNT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(DOCAMNT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10301.CURNCYID)) then ACCTAMNT' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORCTRXAM' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(ACCTAMNT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else  round(ACCTAMNT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10301.CURNCYID)) then DISTKNAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORDISTKN' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(DISTKNAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(DISTKNAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10301.CURNCYID)) then WROFAMNT' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORWROFAM' +  ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(WROFAMNT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(WROFAMNT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   '1,RM10301.CUSTNMBR,RM10301.BACHNUMB,RM10301.BCHSOURC,'''',0,RM10301.CURNCYID, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10301.CURNCYID)) then ' +  @cFuncCurrencyIndex +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.CURRNIDX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' + @cRptCurrencyIndex +   ' end,0,0,' + 'DOCAMNT ' +   'from  RM10301 with (NOLOCK) LEFT OUTER JOIN MC020102 with (NOLOCK) ON  (RM10301.RMDTYPAL = MC020102.RMDTYPAL and  RM10301.DOCNUMBR = MC020102.DOCNUMBR)  JOIN SY00500 with (NOLOCK) ON  (RM10301.BACHNUMB = SY00500.BACHNUMB and   RM10301.BCHSOURC = SY00500.BCHSOURC)  JOIN #Restriction ON  (RM10301.CUSTNMBR = #Restriction.CustomerID and   RM10301.RMDNUMWK >= #Restriction.FromDocumentNumber and   RM10301.RMDNUMWK <= #Restriction.ToDocumentNumber and   RM10301.DOCDATE >= #Restriction.FromDocumentDate and   RM10301.DOCDATE <= #Restriction.ToDocumentDate and   RM10301.RMDTYPAL >= #Restriction.FromDocumentType and   RM10301.RMDTYPAL <= #Restriction.ToDocumentType and   RM10301.BCHSOURC = #Restriction.BatchSource)  where   ((SY00500.BACHFREQ = 1  and RM10301.POSTED = 0)  or SY00500.BACHFREQ > 1) ')   exec @iStatus = DYNAMICS..smGetConstantString  'RM_CASH_STR',   @cRMCash output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break    update #Restriction set BatchSource = @cRMCash   exec('insert into ' +   @I_cRMInquiryTemp +  ' select ' +   'RM10201.DOCNUMBR,'+   'case ' +  ' when (RM10201.CSHRCTYP =2 and len(RM10201.CHEKNMBR)>4) then ' +  ' (select STUFF( RM10201.CHEKNMBR,1,(len( RM10201.CHEKNMBR)-4),''XXXXXXXXXXXX'')) ' +  ' else RM10201.CHEKNMBR ' +  ' end, ' +  ' RM10201.RMDTYPAL, RM10201.TRXDSCRN,'''',RM10201.DOCDATE,  case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10201.CURNCYID)) then ORTRXAMT' +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.ORORGTRX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(ORTRXAMT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(ORTRXAMT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10201.CURNCYID)) then CURTRXAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORCTRXAM' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(CURTRXAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else  round(CURTRXAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10201.CURNCYID)) then DISTKNAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORDISTKN' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(DISTKNAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(DISTKNAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10201.CURNCYID)) then WROFAMNT' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORWROFAM' +  ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(WROFAMNT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(WROFAMNT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   '1,RM10201.CUSTNMBR,RM10201.BACHNUMB,RM10201.BCHSOURC,'''',0,RM10201.CURNCYID, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM10201.CURNCYID)) then ' +  @cFuncCurrencyIndex +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.CURRNIDX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' + @cRptCurrencyIndex +   ' end,0,0,' + 'ORTRXAMT ' +   ' from   RM10201 with (NOLOCK) LEFT OUTER JOIN MC020102 with (NOLOCK) ON  (RM10201.RMDTYPAL = MC020102.RMDTYPAL and  RM10201.DOCNUMBR = MC020102.DOCNUMBR)  JOIN #Restriction ON  (RM10201.CUSTNMBR = #Restriction.CustomerID and   RM10201.DOCNUMBR >= #Restriction.FromDocumentNumber and   RM10201.DOCNUMBR <= #Restriction.ToDocumentNumber and   RM10201.DOCDATE >= #Restriction.FromDocumentDate and   RM10201.DOCDATE <= #Restriction.ToDocumentDate and   RM10201.RMDTYPAL >= #Restriction.FromDocumentType and   RM10201.RMDTYPAL <= #Restriction.ToDocumentType and   RM10201.BCHSOURC = #Restriction.BatchSource)  where   RM10201.POSTED = 0')   end   if @I_tIncludeOpenTable = @TRUE  begin  if @I_sVoidStatus = -1  select @cOpenTableRestr = ''  else  select @cOpenTableRestr = ' and RM20101.VOIDSTTS = #Restriction.VoidStatus'   if @I_tUnpaidFinCharges = @TRUE  select @cOpenTableRestr = rtrim(@cOpenTableRestr) + ' and RM20101.CURTRXAM > 0'   exec('insert into ' +   @I_cRMInquiryTemp +  ' select ' +   'RM20101.DOCNUMBR,'+   'case ' +  ' when (RM20101.CSHRCTYP =2 and len(RM20101.CHEKNMBR)>4) then ' +  ' (select STUFF( RM20101.CHEKNMBR,1,(len( RM20101.CHEKNMBR)-4),''XXXXXXXXXXXX'')) ' +  ' else RM20101.CHEKNMBR ' +  'end, ' +  ' RM20101.RMDTYPAL, RM20101.TRXDSCRN,RM20101.DUEDATE,RM20101.DOCDATE,  case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM20101.CURNCYID)) then ORTRXAMT' +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.ORORGTRX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(ORTRXAMT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(ORTRXAMT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM20101.CURNCYID)) then CURTRXAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORCTRXAM' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(CURTRXAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else  round(CURTRXAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM20101.CURNCYID)) then DISTKNAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORDISTKN' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(DISTKNAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(DISTKNAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM20101.CURNCYID)) then WROFAMNT' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORWROFAM' +  ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(WROFAMNT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(WROFAMNT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   '2,RM20101.CUSTNMBR,RM20101.BACHNUMB,RM20101.BCHSOURC,RM20101.TRXSORCE,RM20101.VOIDSTTS,RM20101.CURNCYID, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM20101.CURNCYID)) then ' +  @cFuncCurrencyIndex +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.CURRNIDX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' + @cRptCurrencyIndex +   ' end,0,0,' +  'ORTRXAMT ' +  ' from   RM20101 with (NOLOCK) LEFT OUTER JOIN MC020102 with (NOLOCK) ON  (RM20101.RMDTYPAL = MC020102.RMDTYPAL and  RM20101.DOCNUMBR = MC020102.DOCNUMBR)  JOIN #Restriction ON  (RM20101.CUSTNMBR = #Restriction.CustomerID and   RM20101.DOCNUMBR >= #Restriction.FromDocumentNumber and   RM20101.DOCNUMBR <= #Restriction.ToDocumentNumber and   RM20101.DOCDATE >= #Restriction.FromDocumentDate and   RM20101.DOCDATE <= #Restriction.ToDocumentDate and   RM20101.RMDTYPAL >= #Restriction.FromDocumentType and   RM20101.RMDTYPAL <= #Restriction.ToDocumentType and  RM20101.AGNGBUKT >= #Restriction.FromPeriod and   RM20101.AGNGBUKT <= #Restriction.ToPeriod'  + @cOpenTableRestr + ')' )  end   if @I_tIncludeHistoryTable = @TRUE  begin  if @I_sVoidStatus = -1  select @cHistTableRestr = ''  else  select @cHistTableRestr = ' and RM30101.VOIDSTTS = #Restriction.VoidStatus'   exec('insert into ' +   @I_cRMInquiryTemp +  ' select ' +   'RM30101.DOCNUMBR,'+   'case ' +  ' when (RM30101.CSHRCTYP =2 and len(RM30101.CHEKNMBR)>4) then ' +  ' (select STUFF( RM30101.CHEKNMBR,1,(len( RM30101.CHEKNMBR)-4),''XXXXXXXXXXXX'')) ' +  ' else RM30101.CHEKNMBR ' +  'end, ' +  ' RM30101.RMDTYPAL, RM30101.TRXDSCRN,RM30101.DUEDATE,RM30101.DOCDATE,  case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM30101.CURNCYID)) then ORTRXAMT' +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.ORORGTRX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(ORTRXAMT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(ORTRXAMT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM30101.CURNCYID)) then CURTRXAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORCTRXAM' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(CURTRXAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else  round(CURTRXAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM30101.CURNCYID)) then DISTKNAM' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORDISTKN' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +  'case ' + @cRateCalcMethod +   ' when 1 then round(DISTKNAM * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(DISTKNAM / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +   ' end, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM30101.CURNCYID)) then WROFAMNT' +  ' when ' + @cCurrencyView + '='+ @cORIGINATING +' then MC020102.ORWROFAM' +  ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' +   'case ' + @cRateCalcMethod +   ' when 1 then round(WROFAMNT * '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  ' else round(WROFAMNT / '+  @cExchangeRate + ',' + @cRptDecPlaces+')' +  'end ' +  ' end, ' +   '3,RM30101.CUSTNMBR,RM30101.BACHNUMB,RM30101.BCHSOURC,RM30101.TRXSORCE,RM30101.VOIDSTTS,RM30101.CURNCYID, ' +   'case ' +  ' when (' + @cCurrencyView + '=' + @cFUNCTIONAL + ' or (' + @cCurrencyView + '=' +  @cORIGINATING  + ' and ''' + @I_cFuncCurrencyID + ''' = RM30101.CURNCYID)) then ' +  @cFuncCurrencyIndex +   ' when ' + @cCurrencyView + '='+ @cORIGINATING + ' then MC020102.CURRNIDX' +   ' when ' + @cCurrencyView + '='+ @cREPORTING + ' then ' + @cRptCurrencyIndex +   ' end,0,0,' + 'ORTRXAMT ' +  ' from   RM30101 with (NOLOCK) LEFT OUTER JOIN MC020102 with (NOLOCK) ON  (RM30101 .RMDTYPAL = MC020102.RMDTYPAL and  RM30101.DOCNUMBR = MC020102.DOCNUMBR)  JOIN #Restriction ON  (RM30101.CUSTNMBR = #Restriction.CustomerID and   RM30101.DOCNUMBR >= #Restriction.FromDocumentNumber and   RM30101.DOCNUMBR <= #Restriction.ToDocumentNumber and   RM30101.DOCDATE >= #Restriction.FromDocumentDate and   RM30101.DOCDATE <= #Restriction.ToDocumentDate and   RM30101.RMDTYPAL >= #Restriction.FromDocumentType and   RM30101.RMDTYPAL <= #Restriction.ToDocumentType'   + @cHistTableRestr + ')' )  end   end   drop table #Restriction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[rmTransactionInquiry] TO [DYNGRP]
GO
