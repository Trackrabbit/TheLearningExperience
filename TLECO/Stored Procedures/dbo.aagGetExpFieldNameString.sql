SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[aagGetExpFieldNameString] ( @aaBudgetID INTEGER   , @InStrAcc CHAR(30)  , @InStrDes CHAR(30)  , @RetString VARCHAR(8000) OUTPUT ,  @RetString1 VARCHAR(8000) OUTPUT ) AS  BEGIN SET NOCOUNT ON DECLARE @aaTrxString VARCHAR(7600) DECLARE @PeriodString VARCHAR(7600) DECLARE @aaBudgetTreeID INTEGER DECLARE @nCount INTEGER DECLARE @aaTrxDimID INTEGER DECLARE @aaTrxDimDescr VARCHAR(51) DECLARE @aaFiscalPeriod INTEGER DECLARE @FiscalYear VARCHAR(4) DECLARE @PeriodDate datetime DECLARE @PERIODDTSTR VARCHAR(12) DECLARE @aaTempStr1 VARCHAR(501)  DECLARE @aaTempStr2 VARCHAR(501)  DECLARE @aaTempStr3 VARCHAR(501)  DECLARE @aaTempStr4 VARCHAR(501)  DECLARE @aaTempStr5 VARCHAR(7600)  DECLARE @aaTempStr6 VARCHAR(7600)  SELECT @aaTrxString = '' SELECT @PeriodString = '' SELECT @aaTempStr5 = ''  SELECT @aaTempStr6 = ''  SELECT @aaBudgetTreeID = aaBudgetTreeID  FROM AAG00903  WHERE aaBudgetID = @aaBudgetID  declare TrxDim cursor fast_forward for SELECT A.aaTrxDimDescr  FROM AAG00400 A INNER JOIN AAG00901 B ON A.aaTrxDimID = B.aaTrxDimID  WHERE A.aaTrxDimID IN (SELECT aaTrxDimID FROM AAG00901 WHERE aaBudgetTreeID = @aaBudgetTreeID ) AND  B.aaBudgetTreeID = @aaBudgetTreeID ORDER BY B.aaOrder open TrxDim  fetch next from TrxDim into @aaTrxDimDescr  WHILE @@fetch_status = 0 BEGIN SET @aaTrxString = @aaTrxString + 'CONVERT(VARCHAR(51),[' + LTRIM(RTRIM(@aaTrxDimDescr)) + ']) AS [' + LTRIM(RTRIM(@aaTrxDimDescr)) + '],' SET @aaTempStr5 =  @aaTempStr5  + 'CONVERT(VARCHAR(51),''' + LTRIM(RTRIM('')) + ''') AS ''' + LTRIM(RTRIM(@aaTrxDimDescr)) + ''','  fetch next from TrxDim into @aaTrxDimDescr  END  close TrxDim deallocate TrxDim declare FiscalPeriod cursor fast_forward for SELECT PERIODDT, aaFiscalPeriod,  PERIODDTSTR = CONVERT(VARCHAR(4),year(PERIODDT)) + convert(varchar(2), month(PERIODDT)) + CONVERT(VARCHAR(2), DAY(PERIODDT))  + CONVERT(VARCHAR(2), DAY(aaFiscalPeriod)) FROM AAG00904  WHERE aaBudgetID = @aaBudgetID  and aaCodeSequence = 1 ORDER BY PERIODDT open FiscalPeriod  fetch next from FiscalPeriod into @PeriodDate, @aaFiscalPeriod, @PERIODDTSTR WHILE @@fetch_status = 0 BEGIN IF @InStrAcc <> '' SELECT @FiscalYear = SY40101.YEAR1  FROM SY40101  WHERE FSTFSCDY <= @PeriodDate AND LSTFSCDY >= @PeriodDate else SELECT @FiscalYear = SY40100.YEAR1 FROM SY40100 WHERE FORIGIN = 1 AND PERIODDT = @PeriodDate  SELECT @aaTempStr2 = 'CONVERT(VARCHAR(51),'' ' +  ' ''),' SELECT @aaTempStr3 = 'CONVERT(numeric(19,5),[Period ' + LTRIM( RTRIM( CONVERT( VARCHAR, @aaFiscalPeriod ) ) ) + ' - ' + @FiscalYear + ' Amount ]) as [ P' + @PERIODDTSTR + '],' SELECT @aaTempStr4 = 'CONVERT(numeric(19,5),[Period ' + LTRIM( RTRIM( CONVERT( VARCHAR, @aaFiscalPeriod ) ) ) + ' - ' + @FiscalYear + ' Quantity]) as [ Q' + @PERIODDTSTR + '],'  SET @PeriodString = @PeriodString +  @aaTempStr3 +  @aaTempStr4  SET @aaTempStr6 = @aaTempStr6 +  @aaTempStr3 +  @aaTempStr4  fetch next from FiscalPeriod into @PeriodDate, @aaFiscalPeriod, @PERIODDTSTR END  close FiscalPeriod deallocate FiscalPeriod  SELECT @RetString = 'SELECT RowID ,aaCodeSequence,[Budget Tree ID],' +  @aaTrxString   IF @InStrAcc <> '' SELECT @RetString1 =  'CONVERT(VARCHAR(51), [' + @InStrAcc + '])AS [' + @InStrAcc + '], CONVERT(VARCHAR(51)  ,[' + @InStrDes + ']) AS [' + @InStrDes + '],' + @PeriodString  + 'CONVERT(numeric(19,5),[Total Amount])AS [Total Amount],  CONVERT(numeric(19,5),[Total Quantity]) AS [Total Quantity]'  ELSE SELECT @RetString1 = @PeriodString  + 'CONVERT(numeric(19,5),[Total Amount])AS [Total Amount],  CONVERT(numeric(19,5),[Total Quantity]) AS [Total Quantity]'   SET NOCOUNT OFF RETURN  1 END    
GO
GRANT EXECUTE ON  [dbo].[aagGetExpFieldNameString] TO [DYNGRP]
GO
