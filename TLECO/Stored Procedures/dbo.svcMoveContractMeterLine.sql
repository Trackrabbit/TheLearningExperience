SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE Procedure [dbo].[svcMoveContractMeterLine]  (@FromCONSTS smallint,  @FromCONTNBR char(11),  @FromLine numeric(19,5),  @ToCONSTS smallint,  @ToCONTNBR char(11),  @ToLine numeric(19,5)  ) AS declare @MinDate datetime declare @Schedule char(9)  exec smGetMinDate @MinDate output  if exists(select * from SVC00607 where CONSTS = @FromCONSTS and CONTNBR = @FromCONTNBR and LNSEQNBR = @FromLine) INSERT INTO SVC00607 with (ROWLOCK) select  @ToCONSTS, @ToCONTNBR, @ToLine,   CASE WHEN Meter_Bases_1 > (Meter_Actuals_1 - Meter_Internal_Uses_1) THEN  Meter_Bases_1 - (Meter_Actuals_1 - Meter_Internal_Uses_1) ELSE 0 END,  CASE WHEN Meter_Bases_2 > (Meter_Actuals_2 - Meter_Internal_Uses_2) THEN  Meter_Bases_2 - (Meter_Actuals_2 - Meter_Internal_Uses_2) ELSE 0 END,  CASE WHEN Meter_Bases_3 > (Meter_Actuals_3 - Meter_Internal_Uses_3) THEN  Meter_Bases_3 - (Meter_Actuals_3 - Meter_Internal_Uses_3) ELSE 0 END,  CASE WHEN Meter_Bases_4 > (Meter_Actuals_4 - Meter_Internal_Uses_4) THEN  Meter_Bases_4 - (Meter_Actuals_4 - Meter_Internal_Uses_4) ELSE 0 END,  CASE WHEN Meter_Bases_5 > (Meter_Actuals_5 - Meter_Internal_Uses_5) THEN  Meter_Bases_5 - (Meter_Actuals_5 - Meter_Internal_Uses_5) ELSE 0 END,  Meter_Overages_1, Meter_Overages_2, Meter_Overages_3, Meter_Overages_4, Meter_Overages_5,   Meter_Overages_6, Meter_Overages_7,Meter_Overages_8, Meter_Overages_9,Meter_Overages_10, Meter_Overages_11,   Meter_Overages_12, Meter_Overages_13, Meter_Overages_14, Meter_Overages_15, Meter_Overages_16, Meter_Overages_17,  Meter_Overages_18, Meter_Overages_19, Meter_Overages_20, Meter_Charges_1, Meter_Charges_2, Meter_Charges_3, Meter_Charges_4,  Meter_Charges_5, Meter_Charges_6,Meter_Charges_7, Meter_Charges_8, Meter_Charges_9,Meter_Charges_10, Meter_Charges_11,   Meter_Charges_12, Meter_Charges_13, Meter_Charges_14, Meter_Charges_15, Meter_Charges_16, Meter_Charges_17, Meter_Charges_18,  Meter_Charges_19, Meter_Charges_20,  Meter_Expires_1,Meter_Expires_2,Meter_Expires_3,Meter_Expires_4,Meter_Expires_5,  0,0,0,0,0, 0,0,0,0,0,  Meter_Startings_1, Meter_Startings_2, Meter_Startings_3,Meter_Startings_4, Meter_Startings_5,  0.0,0.0,0.0,@MinDate,0.0,0.0,0.0,Originating_Meter_Charge_1,  Originating_Meter_Charge_2,Originating_Meter_Charge_3,Originating_Meter_Charge_4,Originating_Meter_Charge_5,  Originating_Meter_Charge_6,Originating_Meter_Charge_7,Originating_Meter_Charge_8,Originating_Meter_Charge_9,  Originating_Meter_Charge_10,Originating_Meter_Charge_11,Originating_Meter_Charge_12,Originating_Meter_Charge_13,  Originating_Meter_Charge_14,Originating_Meter_Charge_15,Originating_Meter_Charge_16,Originating_Meter_Charge_17,  Originating_Meter_Charge_18,Originating_Meter_Charge_19,Originating_Meter_Charge_20  from SVC00607 WITH (NOLOCK) where CONSTS = @FromCONSTS and CONTNBR = @FromCONTNBR and LNSEQNBR = @FromLine  if not exists(select * from SVC00610 where CONSTS = @FromCONSTS and CONTNBR = @FromCONTNBR and LNSEQNBR = @FromLine)  return  declare cursor_610 cursor for select SCHEDID from SVC00610 where   CONSTS = @FromCONSTS and CONTNBR = @FromCONTNBR and LNSEQNBR = @FromLine open cursor_610  FETCH NEXT FROM cursor_610 INTO @Schedule  while @@FETCH_STATUS = 0  BEGIN  INSERT INTO SVC00610 with (ROWLOCK)  select @ToCONSTS, @ToCONTNBR, @ToLine, EQUIPID, ACTIVE, SCHEDID from SVC00610 WITH (NOLOCK)  where CONSTS = @FromCONSTS and CONTNBR = @FromCONTNBR and LNSEQNBR = @FromLine and SCHEDID = @Schedule   FETCH NEXT FROM cursor_610 INTO @Schedule  END  deallocate cursor_610  return    
GO
GRANT EXECUTE ON  [dbo].[svcMoveContractMeterLine] TO [DYNGRP]
GO
