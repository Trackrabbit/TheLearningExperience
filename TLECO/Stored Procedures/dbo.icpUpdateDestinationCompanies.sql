SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[icpUpdateDestinationCompanies]   @I_cUserID           char(15)        = NULL,  @I_cOrigIntercompanyID char(5)  = NULL,  @O_iErrorState          int             = NULL  output as  declare  @cIntercompanyID char(5),  @cBatchNumber char(15),  @cCompanyName char(64),  @cProcName char(40),  @iStatus int,  @iCursorError int,  @iError int,  @tLoop tinyint,  @cDBName char(10)   select   @O_iErrorState  = 0,  @iStatus = 0  while (@tLoop is NULL) begin  select @tLoop = 1   if @@trancount <> 0  begin  select @O_iErrorState = 20883  break  end   if  @I_cUserID   is NULL or  @I_cOrigIntercompanyID  is NULL  begin  select @O_iErrorState = 20884  break  end   declare  CompanyCursor INSENSITIVE  cursor for select  IntercompanyID,  BatchNumber,  CompanyName,  DatabaseName  from  #Company  where  IntercompanyID <> @I_cOrigIntercompanyID   open CompanyCursor   select @iCursorError = @@cursor_rows   if (@iCursorError = 0) or (@iCursorError = -1)  begin  deallocate CompanyCursor  break  end   fetch next from  CompanyCursor  into  @cIntercompanyID,  @cBatchNumber,  @cCompanyName,  @cDBName    while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 20885  break  end   if @cBatchNumber <> ''  begin  select @cProcName = rtrim(@cDBName) + '..icpUpdateBatch'  exec @iStatus = @cProcName  @cBatchNumber,  @cCompanyName,  @I_cUserID,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  break  end   if @iStatus <> 0 or @O_iErrorState <> 0  break    end    fetch next from  CompanyCursor  into  @cIntercompanyID,  @cBatchNumber,  @cCompanyName,  @cDBName   end    deallocate CompanyCursor  end   return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[icpUpdateDestinationCompanies] TO [DYNGRP]
GO
