SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[aagMLforBBFAlt] @oStatus   smallint  = 0  out as set nocount on begin   declare @rowOrder int  declare @lvl int  declare @dsplLvl int   declare @colID int  declare @CellValue numeric(19,5)  declare @DrCrNet varchar(50)  declare @execCmd nvarchar(4000)  declare @execCmd1 varchar(8000)  declare @execCmd2 varchar(8000)  declare @YEAR1 smallint  declare @AtActualVal numeric(19,5)  declare @iTruncateTo smallint  declare @nVarYear nvarchar(200)  declare @minus smallint  declare @col int  declare @MaxrowOrder smallint  declare @CalColID int  declare @MinLvl int  declare @MaxLvl int  declare @CalcLvl int  declare @nVarFilters nvarchar(1000)  declare @LvlCodeFilters nvarchar(2000)  declare @GroupbyValue varchar(500)  declare @ValidCol int  declare @AccountLevel int  declare @NextLevel int  declare @count smallint  declare @execCmd3 varchar(50)  declare @execCmd4 varchar(8000)  declare @L0CodeIDCnt int  declare @SqlJoin varchar(8000)   if not exists(select period from ##PreCalc where period = 400)  begin  return  end  select  @YEAR1 = YEAR1, @iTruncateTo = aaTruncateTo from ##Options  set @CellValue = 0   set @nVarYear = ''  set @GroupbyValue = ''  set @minus = 0  select @MaxrowOrder = max(rowOrder) from ##RowImport  select @MinLvl = min(lvl), @MaxLvl = max(lvl) from ##RowImport  set @CalcLvl = @MinLvl  set @nVarFilters = ''  set @LvlCodeFilters = ''  set @rowOrder = 0  set @AccountLevel = 0  set @NextLevel = 0  set @execCmd3 = ''  set @L0CodeIDCnt = 0   SELECT @L0CodeIDCnt = isnull(COUNT(*), 0) FROM tempdb..syscolumns SC  INNER JOIN tempdb..sysobjects SO ON SC.id = SO.id  WHERE SC.name LIKE 'L0_codeID' AND (SO.name LIKE '##PreCalc' OR SO.name LIKE '##RowCols')  HAVING COUNT(*)=2  IF @L0CodeIDCnt > 0  BEGIN  set @execCmd3 = ' and ##PreCalc.L0_codeID <>0'  END   while @CalcLvl < @MaxLvl + 1  begin   exec ('declare CurValidCol cursor fast_forward for  select 1 from tempdb..syscolumns where id =(  select id from tempdb..sysobjects where name = ''##PreCalc'')  and name like ''L' + @CalcLvl + '_codeID''')  open CurValidCol  fetch next from CurValidCol into @ValidCol   if @@fetch_status = 0  begin  if @nVarFilters = ''  begin  exec ('declare CurLCode cursor fast_forward for  select top 1 period from ##PreCalc where L' + @CalcLvl + '_codeID = 0 and period = 400')  open CurLCode  fetch next from CurLCode into @rowOrder  if @@fetch_status <> 0   begin   set @nVarFilters = ' and A.L'+ convert(varchar(10),@CalcLvl) + '_codeID = B.L'+ convert(varchar(10),@CalcLvl) + '_codeID ' + 'and A.L'+ convert(varchar(10),@CalcLvl) + '_codeID <> 0 '   set @GroupbyValue = ', B.L'+ convert(varchar(10),@CalcLvl) + '_codeID '  set @AccountLevel = @CalcLvl  end  close CurLCode  deallocate CurLCode   end  end  close CurValidCol  deallocate CurValidCol  set @CalcLvl = @CalcLvl + 1  end  declare CurRows cursor fast_forward for  select rowOrder, lvl, dsplLvl from ##RowImport  open CurRows  fetch next from CurRows into @rowOrder, @lvl, @dsplLvl  WHILE @@FETCH_STATUS = 0  BEGIN   if @lvl > @AccountLevel  begin  set @LvlCodeFilters = @nVarFilters  end  else if @lvl = @AccountLevel  begin  set @NextLevel = @AccountLevel + 1  exec ('declare CurValidCol cursor fast_forward for  select 1 from tempdb..syscolumns where id =(  select id from tempdb..sysobjects where name = ''##PreCalc'')  and name like ''L' + @NextLevel + '_codeID''')  open CurValidCol  fetch next from CurValidCol into @ValidCol   if @@fetch_status = 0  begin  exec ('declare CursnglCol cursor fast_forward for  select max(L' + @NextLevel + '_codeID) from ##PreCalc where year1 = ' + @YEAR1 + ' and period = 400')  open CursnglCol  fetch next from CursnglCol into @count  if @@fetch_status = 0  begin  if @count <> 0   begin  set @LvlCodeFilters = @nVarFilters + ' and A.L'+ convert(varchar(10),@NextLevel) + '_codeID = B.L'+ convert(varchar(10),@NextLevel) + '_codeID ' + 'and A.L'+ convert(varchar(10),@NextLevel) + '_codeID <> 0 '  set @GroupbyValue = @GroupbyValue + ', B.L'+ convert(varchar(10),@NextLevel) + '_codeID '  end  end  close CursnglCol  deallocate CursnglCol  end  close CurValidCol  deallocate CurValidCol   end   else  begin  set @LvlCodeFilters = ''  set @GroupbyValue = ''  end    declare CurCols cursor fast_forward for   select distinct colID, col, stuff(whereCmd,2,3,'on') from ##RowCols  where col in(2,4,6,7,10,13,14,22,24,26,27,30,33,34,42,44,46,47,50,53,54)  and basePeriod <> 0   open CurCols   fetch next from CurCols into @colID, @col, @SqlJoin  WHILE @@FETCH_STATUS = 0  BEGIN   exec ('declare CurCellValue cursor fast_forward for  select isnull(cell' + @colID + ',0) from ##CellImport  where rowOrder = ' + @rowOrder + '')   open CurCellValue  fetch next from CurCellValue into @CellValue  close CurCellValue  deallocate CurCellValue   if @col in(2,4,6,7,10,13,14)   begin  set @DrCrNet = 'debit'  end  else if @col in(22,24,26,27,30,33,34)  begin  set @DrCrNet = 'credit'  end  else  begin  set @DrCrNet = 'balance'  end   if @col in(2,6,7,22,26,27,42,46,47,14,34,54,13,33,53)   begin  set @nVarYear = ' and year1 = ' + convert(nvarchar(10),@YEAR1)  end  else if @col in(4,10,24,30,44,50)  begin  set @nVarYear = ' and year1 = ' + convert(nvarchar(10),@YEAR1) + '-1 '  end     if @col in(14,34,54)  begin  set @minus = 100  end  else  begin  set @minus = 0  end   if @col in(2,4,6,22,24,26,42,44,46)  begin   exec ('declare curAtActualVal cursor fast_forward for  select round(isnull(sum(' + @DrCrNet + '),0),' + @iTruncateTo + ') AtActualVal  from ##PreCalc inner join ##RowCols ' + @SqlJoin + ' where 1=1' + @nVarYear + '   and period = 400 '+ @execCmd3 +' and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + '')   open curAtActualVal  fetch next from curAtActualVal into @AtActualVal  WHILE @@FETCH_STATUS = 0  BEGIN  set @CellValue = @CellValue + @AtActualVal  fetch next from curAtActualVal into @AtActualVal  end  close curAtActualVal  deallocate curAtActualVal   exec('update ##CellImport set cell' + @colID + ' = ' + @CellValue + ' where rowOrder = ' + @rowOrder + '')   end  else if @col in(13,33,53)  begin   exec ('declare curAtActualVal cursor fast_forward for  select isnull(round((round(value1,'+ @iTruncateTo + ')-  (case when round(value2,'+ @iTruncateTo + ') = 0 then 1 else round(value2,'+ @iTruncateTo + ') end)),2),0) from (  select (select isnull(sum(value1),0) value1 from (  select isnull(sum(' + @DrCrNet + '),0) value1  from ##PreCalc inner join ##RowCols ' + @SqlJoin + '  where 1=1 ' + @nVarYear + ' and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + ')X) value1, isnull(sum(' + @DrCrNet + '),0) value2  from ##PreCalc inner join ##RowCols ' + @SqlJoin + ' where year1 = ' + @YEAR1 + '-1 and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + ')A')   open curAtActualVal  fetch next from curAtActualVal into @AtActualVal  WHILE @@FETCH_STATUS = 0  BEGIN  exec('update ##CellImport set cell' + @colID + ' = ' + @AtActualVal + ' where rowOrder = ' + @rowOrder + '')  fetch next from curAtActualVal into @AtActualVal  end  close curAtActualVal  deallocate curAtActualVal  end  else if @col in(14,34,54)   begin   exec ('declare curAtActualVal cursor fast_forward for  select isnull(round((round(value1,'+ @iTruncateTo + ')/  (case when round(value2,'+ @iTruncateTo + ') = 0 then 1 else round(value2,'+ @iTruncateTo + ') end))*100-' + @minus + ',2),0) from (  select (select isnull(sum(value1),0) value1 from (  select isnull(sum(' + @DrCrNet + '),0) value1  from ##PreCalc inner join ##RowCols ' + @SqlJoin + '  where 1=1 ' + @nVarYear + ' and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + ')X) value1, isnull(sum(' + @DrCrNet + '),0) value2  from ##PreCalc inner join ##RowCols ' + @SqlJoin + ' where year1 = ' + @YEAR1 + '-1 and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + ')A')   open curAtActualVal  fetch next from curAtActualVal into @AtActualVal  WHILE @@FETCH_STATUS = 0  BEGIN   exec('update ##CellImport set cell' + @colID + ' = ' + @AtActualVal + ' where rowOrder = ' + @rowOrder + '')   fetch next from curAtActualVal into @AtActualVal  end  close curAtActualVal  deallocate curAtActualVal end  else if @col in(7,10,27,30,47,50)   begin   exec ('declare curAtActualVal cursor fast_forward for   select isnull(round((round(value1,'+ @iTruncateTo + ')/  (case when round(value2,'+ @iTruncateTo + ') = 0 then 1 else round(value2,'+ @iTruncateTo + ') end))*100-' + @minus + ',2),0) from (  select (select isnull(sum(value1),0) value1 from (  select isnull(sum(' + @DrCrNet + '),0) value1  from ##PreCalc inner join ##RowCols ' + @SqlJoin + '  where period = (select top 1 basePeriod from ##RowCols where colID = ' + @colID + ')  ' + @nVarYear + ' and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + ')X) value1, isnull(sum(' + @DrCrNet + '),0) value2  from ##PreCalc inner join ##RowCols ' + @SqlJoin + ' where 1=1  and rowOrder = ' + @rowOrder + ' and colID = ' + @colID + '' + @nVarYear + ' and   (period between 1 and (select top 1 basePeriod from ##RowCols where colID = ' + @colID + ') or period = 400))A')   open curAtActualVal  fetch next from curAtActualVal into @AtActualVal  WHILE @@FETCH_STATUS = 0  BEGIN   exec('update ##CellImport set cell' + @colID + ' = ' + @AtActualVal + ' where rowOrder = ' + @rowOrder + '')   fetch next from curAtActualVal into @AtActualVal  end  close curAtActualVal  deallocate curAtActualVal   end   fetch next from CurCols into @colID, @col, @SqlJoin  end  close CurCols  deallocate CurCols   declare CurTotCols cursor fast_forward for   select distinct colID, col from ##RowCols  where col in(2,4,6,13,22,24,26,33,42,44,46,53)  and basePeriod = 0   open CurTotCols   fetch next from CurTotCols into @colID, @col  WHILE @@FETCH_STATUS = 0  BEGIN  declare CurupdCols cursor fast_forward for  select distinct colID from ##RowCols  where col = @col and basePeriod <> 0   set @execCmd = ''  open CurupdCols   fetch next from CurupdCols into @CalColID  WHILE @@FETCH_STATUS = 0  BEGIN  set @execCmd = @execCmd + ' union all ' +   'select cell' + convert(varchar(10),@CalColID) + ' AtActualVal from ##CellImport   where rowOrder = ' + convert(varchar(10),@rowOrder) + ''    fetch next from CurupdCols into @CalColID  end  close CurupdCols  deallocate CurupdCols  set @execCmd = right(@execCmd,len(@execCmd)-10)  exec ('declare curfinal cursor fast_forward for   select sum(AtActualVal) AtActualVal from (' + @execCmd + ')X')   open curfinal  fetch next from curfinal into @AtActualVal  WHILE @@FETCH_STATUS = 0  BEGIN  exec('update ##CellImport set cell' + @colID + ' = ' + @AtActualVal + ' where rowOrder = ' + @rowOrder + '')  fetch next from curfinal into @AtActualVal  end  close curfinal  deallocate curfinal   fetch next from CurTotCols into @colID, @col  end  close CurTotCols  deallocate CurTotCols   fetch next from CurRows into @rowOrder, @lvl, @dsplLvl  end  close CurRows  deallocate CurRows   end    
GO
GRANT EXECUTE ON  [dbo].[aagMLforBBFAlt] TO [DYNGRP]
GO
