SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Escalate]  (  @CallNumber varchar(11),   @SrvRecType smallint,   @Status char(3),   @SrvType varchar(11),  @LineSeq int,  @TaskName varchar(100) )  AS  declare @New_Status char(3),  @Escalation_Type smallint,  @Who char(11),  @ManagerLevel smallint,  @Priority_Boost smallint,  @Time_to_wait smallint,  @Next_LineSeq int,  @Next_run_time smalldatetime,  @Next_task_name varchar(100),  @Next_Command varchar(100),  @Next_Comment varchar(255),  @L_Address varchar(100),  @L_message varchar(255),  @LCall_message varchar(8000),  @OrigTech char(11),  @L_Audit_mesage char(31),  @L_status char(3),  @ESCDATE datetime,  @ESCTIME datetime,  @CurrentDateTime datetime,  @TIMEZONE char(3),  @TIMEZONEDIFF numeric(17,5),  @TimeZoneValue smallint,@TimeZoneMinute smallint,  @EscStatus int,  @ReturnCode INT ,  @subject varchar(400),  @TECHID char(11),   @bManager bit,   @ManagerMultiTech bit,   @MultiTech bit,  @SimilarTasksCommand varchar(100)  SET NOCOUNT ON  select  @Who = '',  @New_Status = '',  @Escalation_Type = 0,  @ManagerLevel = 0,  @bManager = 0,  @ManagerMultiTech = 0,  @MultiTech = 0,  @Next_task_name = ''  select  @CallNumber = isnull(@CallNumber, ''),   @SrvRecType = isnull(@SrvRecType, 0),  @Status = isnull(@Status, ''),  @SrvType = isnull(@SrvType, ''),  @LineSeq = isnull(@LineSeq, 0) if not exists(select * from SVC00200 where @CallNumber = CALLNBR and @SrvRecType = SRVRECTYPE)  begin  return end  select  @CallNumber = RTRIM(@CallNumber),  @SrvType = RTRIM(@SrvType)  exec SVC_ServiceCall_IsMultiTech   1,   @SrvRecType,   @CallNumber,   @MultiTech OUTPUT  select  @TIMEZONE = TIMEZONE,  @New_Status = SRVSTAT,   @OrigTech = TECHID  from SVC00200 WITH (NOLOCK)  where @CallNumber = CALLNBR and @SrvRecType = SRVRECTYPE  select @EscStatus = SVC_Escalation_Status  from SVC00211  where CALLNBR = @CallNumber and SRVRECTYPE = @SrvRecType   and SVC_Task_Name = @TaskName  if @New_Status = @Status and @SrvRecType = 2 and @EscStatus = 1  begin  select  @TimeZoneValue = TIMEZONEVALUE,   @TimeZoneMinute = TimeZoneMinute   from SVC00900   where TIMEZONE = @TIMEZONE   if @TimeZoneValue > 0   select @TIMEZONEDIFF = @TimeZoneValue + @TimeZoneMinute * 60.0  else  select @TIMEZONEDIFF = @TimeZoneValue - @TimeZoneMinute * 60.0   select  @TIMEZONEDIFF = case  when @TIMEZONEDIFF is null then 0  else @TIMEZONEDIFF  end   select @CurrentDateTime = GETDATE()  exec SVC_util_split_datetime   @CurrentDateTime,   @ESCDATE output,   @ESCTIME output   update SVC00200   set  ESCDATE=@ESCDATE,   ESCTIME=@ESCTIME,   Escalation_Level=@LineSeq  where @CallNumber = CALLNBR and @SrvRecType = SRVRECTYPE   select  @Escalation_Type = ESCTYPE,   @Who = TECHID,   @ManagerLevel = svcManagerLevel,  @Priority_Boost = priorityLevel  from SVC00922  where @LineSeq = LNITMSEQ and @SrvType = SRVTYPE   select @Who = ltrim(rtrim(isnull(@Who, '')))   if (upper(@Who) = 'MANAGER')  begin  if @MultiTech = 1  begin  set @ManagerMultiTech = 1  set @Who = ''   set @OrigTech = ''  end  else   begin  set @bManager = 1   select @Who = isnull(TECHID, '')  from SVC00100   where TECHID = case   when @ManagerLevel = 0 then (select case   when mgr.MANAGER is null or mgr.MANAGER = '' then mgr.TECHID   else mgr.MANAGER  end  from SVC00100 mgr where TECHID = @OrigTech)   when @ManagerLevel = 1 then (select case   when mgr2.MANAGER is null or mgr2.MANAGER = '' then mgr2.TECHID   else mgr2.MANAGER  end  from SVC00100 mgr2 where TECHID =  (select case   when mgr3.MANAGER is null or mgr3.MANAGER = '' then mgr3.TECHID   else mgr3.MANAGER  end  from SVC00100 mgr3 where TECHID = @OrigTech))   when @ManagerLevel = 2 then (select case   when mgr3.MANAGER is null or mgr3.MANAGER = '' then mgr3.TECHID   else mgr3.MANAGER  end  from SVC00100 mgr3 where TECHID =  (select case   when mgr4.MANAGER is null or mgr4.MANAGER = '' then mgr4.TECHID   else mgr4.MANAGER  end  from SVC00100 mgr4 where TECHID =   (select case   when mgr5.MANAGER is null or mgr5.MANAGER = '' then mgr5.TECHID   else mgr5.MANAGER  end  from SVC00100 mgr5 where TECHID = @OrigTech)))   else @OrigTech  end  end  end   select @Who = isnull(@Who, '')   if not exists(select * from SVC00100 where TECHID = @Who)  set @Who = @OrigTech   if @Escalation_Type = 1   begin  if rtrim(@Who) <> '' and @MultiTech = 0  begin  exec SVC_Change_Tech   @Who,   @CallNumber,   @SrvRecType  end  else  begin  select  @L_status = SRVSTAT  from SVC00200  where CALLNBR = @CallNumber and SRVRECTYPE = @SrvRecType   exec SVC_Create_Service_Audit   @CallNumber,   @SrvRecType,   @L_status,   'Escalation Mgr',   'Escalate'  end   end   select @Who  = case   when @Who is null or @Who = '' then rtrim(@OrigTech)  else rtrim(@Who)  end   if @MultiTech = 1  begin  if @ManagerMultiTech = 0  begin  DECLARE MultiTechCursor CURSOR LOCAL FOR   SELECT  distinct TECHID   from SVC00207   where CALLNBR = @CallNumber   and SRVRECTYPE = @SrvRecType and TECHID <> '' and TECHID <> @Who  order by TECHID  end  else   begin  DECLARE MultiTechCursor CURSOR LOCAL FOR  SELECT DISTINCT SVC00100.TECHID  from SVC00100, SVC00207   where SVC00207.CALLNBR = @CallNumber and SVC00207.SRVRECTYPE = @SrvRecType  AND SVC00207.TECHID <> ''   AND SVC00100.TECHID = case   when @ManagerLevel = 0 then (select case when mgr.MANAGER is null or mgr.MANAGER = '' then mgr.TECHID   else mgr.MANAGER  end  FROM SVC00100 mgr where TECHID = SVC00207.TECHID)   when @ManagerLevel = 1 then (select case when mgr2.MANAGER is null or mgr2.MANAGER = '' then mgr2.TECHID   else mgr2.MANAGER  end  FROM SVC00100 mgr2 where TECHID =  (select case  when mgr3.MANAGER is null or mgr3.MANAGER = '' then mgr3.TECHID   else mgr3.MANAGER  end  FROM SVC00100 mgr3 where TECHID = SVC00207.TECHID))   when @ManagerLevel = 2 then (select case when mgr4.MANAGER is null or mgr4.MANAGER = '' then mgr4.TECHID   else mgr4.MANAGER  end  FROM SVC00100 mgr4 where TECHID =  (select case  when mgr5.MANAGER is null or mgr5.MANAGER = '' then mgr5.TECHID   else mgr5.MANAGER  end  FROM SVC00100 mgr5 where TECHID =   (select case  when mgr6.MANAGER is null or mgr6.MANAGER = '' then mgr6.TECHID   else mgr6.MANAGER  end  FROM SVC00100 mgr6 where TECHID = SVC00207.TECHID)))   else SVC00207.TECHID  end  end  end   if @Escalation_Type = 2  begin  if @Who <> ''  begin  select @L_Address = PAGER1 from SVC00100 where TECHID = @Who  if  rtrim(@L_Address) <> ''  begin  exec SVC_Generate_Page_Msg   @CallNumber,   @SrvRecType,   @L_message output   select @L_Audit_mesage = 'Page: ' + @L_Address  exec SVC_Audited_Message   @CallNumber,   @SrvRecType,   @L_Address,   @L_message,   @L_Audit_mesage  end  end   if @Who = '' and @MultiTech = 1  begin  OPEN MultiTechCursor  FETCH NEXT FROM MultiTechCursor INTO @TECHID   WHILE @@FETCH_STATUS = 0  BEGIN  set @L_Address = ''  select @L_Address = PAGER1 from SVC00100 where TECHID = @TECHID  if  rtrim(@L_Address) <> ''  begin  exec SVC_Generate_Page_Msg   @CallNumber,   @SrvRecType,   @L_message output   set @L_Audit_mesage = 'Page: ' + @L_Address  exec SVC_Audited_Message   @CallNumber,   @SrvRecType,   @L_Address,   @L_message,   @L_Audit_mesage  end   FETCH NEXT FROM MultiTechCursor INTO @TECHID  END  CLOSE MultiTechCursor  end  end   if @Escalation_Type = 3  begin  if @Who <> ''  begin  select @L_Address = TECHEMAIL from SVC00100 where TECHID = @Who  if  rtrim(@L_Address) <> ''  begin  exec SVC_Generate_Page_Msg   @CallNumber,   @SrvRecType,   @L_message output   select @L_Audit_mesage = 'Msg: ' + @L_Address  exec SVC_Audited_Message   @CallNumber,   @SrvRecType,   @L_Address,   @L_message,   @L_Audit_mesage  end  end   if @Who = '' and @MultiTech = 1  begin  OPEN MultiTechCursor  FETCH NEXT FROM MultiTechCursor INTO @TECHID   WHILE @@FETCH_STATUS = 0  BEGIN  set @L_Address = ''  select @L_Address = TECHEMAIL from SVC00100 where TECHID = @TECHID  if rtrim(@L_Address) <> ''  begin  exec SVC_Generate_Page_Msg   @CallNumber,   @SrvRecType,   @L_message output   select @L_Audit_mesage = 'Msg: ' + @L_Address  exec SVC_Audited_Message   @CallNumber,   @SrvRecType,   @L_Address,   @L_message,   @L_Audit_mesage  end   FETCH NEXT FROM MultiTechCursor INTO @TECHID  END  CLOSE MultiTechCursor  end  end   if @Escalation_Type = 4  begin  if @Who <> ''  begin  select @L_Address = TECHEMAIL from SVC00100 where TECHID = @Who  if rtrim(@L_Address) <> ''  begin  exec SVC_Generate_Page_Msg   @CallNumber,   @SrvRecType,   @L_message output    select @L_Audit_mesage = 'Callback: ' + @L_Address  exec SVC_Audited_Message   @CallNumber,   @SrvRecType,   @L_Address,   @L_message,   @L_Audit_mesage  end  end   if @Who = '' and @MultiTech = 1  begin  OPEN MultiTechCursor  FETCH NEXT FROM MultiTechCursor INTO @TECHID   WHILE @@FETCH_STATUS = 0  BEGIN  set @L_Address = ''  select @L_Address = TECHEMAIL from SVC00100 where TECHID = @TECHID  if rtrim(@L_Address) <> ''  begin  exec SVC_Generate_Page_Msg   @CallNumber,   @SrvRecType,   @L_message output    select @L_Audit_mesage = 'Callback: ' + @L_Address  exec SVC_Audited_Message   @CallNumber,   @SrvRecType,   @L_Address,   @L_message,   @L_Audit_mesage  end   FETCH NEXT FROM MultiTechCursor INTO @TECHID  END  CLOSE MultiTechCursor  end  end   exec SVC_boost_priority   @CallNumber,   @SrvRecType,   @Priority_Boost   set @SimilarTasksCommand = ''  exec SVC_Gen_Escalation_Command  @SrvRecType   = @SrvRecType,   @CallNumber   = @CallNumber,   @LineSeq   = @LineSeq,  @Status   = @Status,   @SrvType   = @SrvType,  @TaskName   = @Next_task_name,  @IncludeLineSeq  = 1,  @IncludeTaskName = 0,  @Command   = @SimilarTasksCommand OUTPUT   select @SimilarTasksCommand = isnull(@SimilarTasksCommand, '')   update SVC00211   set  SVC00211.SVC_Escalation_Status = 3,  SVC00211.DATE1 = CONVERT(varchar(20),GETDATE(),112) + ' 00:00:00',  SVC00211.TIME1 = '1900-01-01 ' + CONVERT(varchar(20),GETDATE(),108)  where SRVRECTYPE = @SrvRecType and CALLNBR = @CallNumber   and SVC_Escalation_Status = 1   and (SVC_Task_Name = @TaskName   or substring(SVC_Command_Text, 1, len(@SimilarTasksCommand)) = @SimilarTasksCommand) end  else if @EscStatus <> 3  begin  update SVC00211 set SVC_Escalation_Status = 4   where SRVRECTYPE = @SrvRecType and CALLNBR = @CallNumber   and SVC_Task_Name = @TaskName  end   return 0 SET NOCOUNT OFF   
GO
GRANT EXECUTE ON  [dbo].[SVC_Escalate] TO [DYNGRP]
GO
