SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[qdCreateSql]  @FieldsListGuid varchar(37),  @ConditionsGuid varchar(37),  @SelectType tinyint,   @AdditionalWhereClause varchar(4000),  @RowCount int output,  @TableName varchar(10) output,  @TableName2 varchar(10) output,  @Error integer output AS  SET NOCOUNT ON  SET QUOTED_IDENTIFIER ON   Declare @TableCount integer,  @CondigionsCount integer,  @ReleationshipsCount integer,  @SelectClause varchar(8000),  @FieldCount integer,  @DefaultFeidlCount integer,  @TablePhysicalName varchar(31),  @FieldPhysicalName varchar(31),  @FieldDisplayName varchar(81),  @FirstLoop tinyint,  @JoinClause varchar(8000),  @FromTablePhysicalName varchar(31),  @FromFieldPhysicalName varchar(31),  @ToTablePhysicalName varchar(31),  @ToFieldPhysicalName varchar(31),  @JoinType tinyint,  @WhereClause varchar(8000),  @FieldComparison tinyint,   @QueryOperator tinyint,  @QueryConditon tinyint,  @FromFieldDataType tinyint,  @ToFieldDataType tinyint,  @FieldDataType tinyint,  @ToFieldListSequence integer,  @ConditonString varchar(1000),  @StringValue varchar(1000),   @StringFilter varchar(255),  @IntegerFilter int,  @NumericFilter numeric(19,5),  @DateFilter datetime,  @TimeFilter datetime,   @StringValueQuoted varchar(1000),  @SEQNUMBR int,   @TableDisplayName varchar(100),  @i int,  @SqlText1 varchar(8000) ,  @SqlText2 varchar(8000) ,  @SqlText3 varchar(8000) ,  @SqlText4 varchar(8000) ,  @SqlText5 varchar(8000) ,  @SqlText6 varchar(8000) ,  @SqlText7 varchar(8000) ,  @SqlText8 varchar(8000) ,  @SqlText9 varchar(8000) ,  @SqlText10 varchar(8000),  @SqlText11 varchar(8000) ,  @SqlText12 varchar(8000) ,  @SqlText13 varchar(8000) ,  @SqlText14 varchar(8000) ,  @SqlText15 varchar(8000) ,  @SqlText16 varchar(8000) ,  @SqlText17 varchar(8000) ,  @SqlText18 varchar(8000) ,  @SqlText19 varchar(8000) ,  @SqlText20 varchar(8000),  @ExtraCloseParenthesisNeeded tinyint,  @WorkflowTypeName varchar(1000)  Declare @rowcount_table TABLE (Value int)  select @FieldsListGuid = UPPER(@FieldsListGuid)  select @ConditionsGuid = UPPER(@ConditionsGuid)  select @ExtraCloseParenthesisNeeded = 0   set @SqlText1 = ''  set @SqlText2 = ''  set @SqlText3 = ''  set @SqlText4 = ''  set @SqlText5 = ''  set @SqlText6 = ''  set @SqlText7 = ''  set @SqlText8 = ''  set @SqlText9 = ''  set @SqlText10 = ''  set @Error = 0;   set @TableCount = (select count(distinct TablePhysicalName) from CO00121 where FieldsListGuid = @FieldsListGuid)  set @FieldCount = (select count(*) from CO00121 where FieldsListGuid = @FieldsListGuid)  set @DefaultFeidlCount = (select count(*) from CO00121 where FieldsListGuid = @FieldsListGuid and DefaultField = 1)  set @ReleationshipsCount = (select count(distinct Group_ID) from CO00122 where FieldsListGuid = @FieldsListGuid)  set @CondigionsCount = (select count(SEQNUMBR) from CO00123 where FieldsListGuid = @FieldsListGuid and ConditionsGuid = @ConditionsGuid)  set @WorkflowTypeName = (select  Workflow_Type_Name from WF100001 where FieldsListGuid= @FieldsListGuid)   set @SelectClause = ''  if (@SelectType = 1)  begin  set @SqlText1 = 'SELECT COUNT(*) AS [Row Count]' + char(13)  end  if (@SelectType = 2)  begin  if (@DefaultFeidlCount = 0)  begin  set @Error = 1000;  return  end  set @FirstLoop = 1;  set @SelectClause = 'SELECT ' + char(13)   set @i = 1   declare DefaultFields cursor FAST_FORWARD  for  select TablePhysicalName, FieldPhysicalName, FieldDisplayName, FieldDataType, TableDisplayName  from CO00121 where FieldsListGuid = @FieldsListGuid and DefaultField = 1  order by SEQNUMBR   open DefaultFields  fetch next from DefaultFields into @TablePhysicalName, @FieldPhysicalName, @FieldDisplayName, @FieldDataType, @TableDisplayName  while @@fetch_status = 0  begin  if (@FirstLoop = 1)   begin  set @SelectClause = @SelectClause + '    '  set @FirstLoop = 0  end  else  begin  set @SelectClause = @SelectClause + '    , '  end   if (@FieldDataType = 9)   begin   set @SelectClause = @SelectClause + dbo.qdGetAccountNumberString(@TablePhysicalName)  + ' AS [' +  rtrim(ltrim(replace(replace(@FieldDisplayName, '[', ''), ']', ''))) + '_' + rtrim(ltrim(str(@i))) + ']' + char(13)   end  else  begin   set @SelectClause = @SelectClause + '[' + rtrim(ltrim(@TablePhysicalName)) + '].[' + rtrim(ltrim(@FieldPhysicalName))   + '] AS [' +  rtrim(ltrim(replace(replace(@FieldDisplayName, '[', ''), ']', ''))) + '_' + rtrim(ltrim(str(@i))) + ']' + char(13)  end  if (len(@SelectClause) > 7500)  begin  if (len(@SqlText1) = 0)  set @SqlText1 = @SelectClause  else if (len(@SqlText2) = 0)  set @SqlText2 = @SelectClause  else if (len(@SqlText3) = 0)  set @SqlText3 = @SelectClause  else if (len(@SqlText4) = 0)  set @SqlText4 = @SelectClause  else if (len(@SqlText5) = 0)  set @SqlText5 = @SelectClause  else if (len(@SqlText6) = 0)  set @SqlText6 = @SelectClause  else if (len(@SqlText7) = 0)  set @SqlText7 = @SelectClause  set @SelectClause = ''  end  set @i = @i + 1  fetch next from DefaultFields into @TablePhysicalName, @FieldPhysicalName, @FieldDisplayName, @FieldDataType, @TableDisplayName  end  close DefaultFields  deallocate DefaultFields    if (len(@SqlText1) = 0)  set @SqlText1 = @SelectClause  else if (len(@SqlText2) = 0)  set @SqlText2 = @SelectClause  else if (len(@SqlText3) = 0)  set @SqlText3 = @SelectClause  else if (len(@SqlText4) = 0)  set @SqlText4 = @SelectClause  else if (len(@SqlText5) = 0)  set @SqlText5 = @SelectClause  else if (len(@SqlText6) = 0)  set @SqlText6 = @SelectClause  else if (len(@SqlText7) = 0)  set @SqlText7 = @SelectClause  end    if (@SelectType = 3)  begin  if (@FieldCount = 0)  begin  set @Error = 1000;  return;   end   set @FirstLoop = 1;  set @SelectClause = ' SELECT ' + char(13)   set @i = 1   declare AllFields cursor FAST_FORWARD  for  select TablePhysicalName, FieldPhysicalName, FieldDisplayName, FieldDataType, TableDisplayName  from CO00121 where FieldsListGuid = @FieldsListGuid  order by DefaultField DESC, SEQNUMBR    open AllFields  fetch next from AllFields into @TablePhysicalName, @FieldPhysicalName, @FieldDisplayName, @FieldDataType, @TableDisplayName  while @@fetch_status = 0  begin  if (@FirstLoop = 1)   begin  set @SelectClause = @SelectClause + '    '  set @FirstLoop = 0  end  else  begin  set @SelectClause = @SelectClause + '    , '  end   if (@FieldDataType = 9)   begin   set @SelectClause = @SelectClause  + dbo.qdGetAccountNumberString(@TablePhysicalName )  + ' AS [' +  rtrim(ltrim(replace(replace(@FieldDisplayName, '[', ''), ']', ''))) + '_' + rtrim(ltrim(str(@i))) + ']' + char(13)   end  else  begin   set @SelectClause = @SelectClause + '[' + rtrim(ltrim(@TablePhysicalName)) + '].[' + rtrim(ltrim(@FieldPhysicalName))   + '] AS [' +  rtrim(ltrim(replace(replace(@FieldDisplayName, '[', ''), ']', ''))) + '_' + rtrim(ltrim(str(@i))) + ']' + char(13)  end  if (len(@SelectClause) > 7500)  begin  if (len(@SqlText1) = 0)  set @SqlText1 = @SelectClause  else if (len(@SqlText2) = 0)  set @SqlText2 = @SelectClause  else if (len(@SqlText3) = 0)  set @SqlText3 = @SelectClause  else if (len(@SqlText4) = 0)  set @SqlText4 = @SelectClause  else if (len(@SqlText5) = 0)  set @SqlText5 = @SelectClause  else if (len(@SqlText6) = 0)  set @SqlText6 = @SelectClause  else if (len(@SqlText7) = 0)  set @SqlText7 = @SelectClause  set @SelectClause = ''  end  set @i = @i + 1  fetch next from AllFields into @TablePhysicalName, @FieldPhysicalName, @FieldDisplayName, @FieldDataType, @TableDisplayName  end   if (len(@SqlText1) = 0)  set @SqlText1 = @SelectClause  else if (len(@SqlText2) = 0)  set @SqlText2 = @SelectClause  else if (len(@SqlText3) = 0)  set @SqlText3 = @SelectClause  else if (len(@SqlText4) = 0)  set @SqlText4 = @SelectClause  else if (len(@SqlText5) = 0)  set @SqlText5 = @SelectClause  else if (len(@SqlText6) = 0)  set @SqlText6 = @SelectClause  else if (len(@SqlText7) = 0)  set @SqlText7 = @SelectClause   close AllFields  deallocate AllFields   end    set @JoinClause = ''   if @TableCount = 0  begin  set @Error = 2000;  return  end  if @TableCount = 1   begin  set @TablePhysicalName = (select top(1) TablePhysicalName from CO00121 where FieldsListGuid = @FieldsListGuid)  if @WorkflowTypeName = 'Smartlist Designer View Approval'  set @JoinClause = 'FROM ' + char(13) + '    ' +'DYNAMICS..'+ @TablePhysicalName + ' ' + char(13)  else  set @JoinClause = 'FROM ' + char(13) + '    ' + @TablePhysicalName + ' ' + char(13)  end  else  begin  set @FirstLoop = 1;  set @JoinClause = ''   declare Relationships cursor FAST_FORWARD  for  select FromTablePhysicalName, FromFieldPhysicalName, JoinType, ToTablePhysicalName, ToFieldPhysicalName, SEQNUMBR  from CO00122 where  FieldsListGuid = @FieldsListGuid  order by Group_ID, SEQNUMBR   open Relationships  fetch next from Relationships into @FromTablePhysicalName, @FromFieldPhysicalName, @JoinType, @ToTablePhysicalName, @ToFieldPhysicalName, @SEQNUMBR  while @@fetch_status = 0  begin  if (@FirstLoop = 1)   begin  if @WorkflowTypeName = 'Smartlist Designer View Approval'  set @JoinClause = 'FROM ' +'DYNAMICS..' +'[' + rtrim(ltrim(@FromTablePhysicalName)) + '] ' + char(13)  else  set @JoinClause = 'FROM ' + '[' + rtrim(ltrim(@FromTablePhysicalName)) + '] ' + char(13)  set @FirstLoop = 0  end  if (@SEQNUMBR > 0)  begin  if (@SEQNUMBR > 1)  begin  set @JoinClause = @JoinClause + '        AND '  end  else  begin  set @JoinClause = @JoinClause + '        '   end   if (@FromFieldPhysicalName = 'ACTNUMBR')  begin  set @JoinClause = @JoinClause + dbo.qdGetAccountNumberString(@FromTablePhysicalName )  end  else  begin  set @JoinClause = @JoinClause + '[' + rtrim(ltrim(@FromTablePhysicalName)) + '].[' + rtrim(ltrim(@FromFieldPhysicalName)) + ']'  end  if (@ToFieldPhysicalName = 'ACTNUMBR')  begin  set @JoinClause = @JoinClause + ' = ' + dbo.qdGetAccountNumberString(@ToTablePhysicalName )   end  else  begin  set @JoinClause = @JoinClause + ' = [' + rtrim(ltrim(@ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '] ' + char(13)  end  end  else  begin  if (@JoinType = 1)  begin  if @WorkflowTypeName = 'Smartlist Designer View Approval'  set @JoinClause = @JoinClause + '    INNER JOIN ' + '  DYNAMICS..'+'[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   else  set @JoinClause = @JoinClause + '    INNER JOIN ' + '[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   end  if (@JoinType = 2)  begin  if @WorkflowTypeName = 'Smartlist Designer View Approval'  set @JoinClause = @JoinClause + '    CROSS JOIN ' + '  DYNAMICS..'+'[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   else  set @JoinClause = @JoinClause + '    CROSS JOIN ' + '[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   end  if (@JoinType = 3)  begin  if @WorkflowTypeName = 'Smartlist Designer View Approval'  set @JoinClause = @JoinClause + '    LEFT OUTER JOIN ' + '  DYNAMICS..'+ '[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   else  set @JoinClause = @JoinClause + '    LEFT OUTER JOIN ' + '[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   end  if (@JoinType = 4)  begin  if @WorkflowTypeName = 'Smartlist Designer View Approval'  set @JoinClause = @JoinClause + '    FULL OUTER JOIN ' +'  DYNAMICS..'+  '[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   else  set @JoinClause = @JoinClause + '    FULL OUTER JOIN ' + '[' + rtrim(ltrim(@ToTablePhysicalName)) + '] ON ' + char(13)   end  end  fetch next from Relationships into @FromTablePhysicalName, @FromFieldPhysicalName, @JoinType, @ToTablePhysicalName, @ToFieldPhysicalName, @SEQNUMBR  end  close Relationships  deallocate Relationships   end  set @SqlText8 = @JoinClause   set @WhereClause = ''  if (@CondigionsCount > 0)    set @FirstLoop = 1;    declare Conditions cursor FAST_FORWARD  for  select b.TablePhysicalName, b.FieldPhysicalName, a.FieldComparison, a.QueryOperator, a.QueryConditon, a.FieldDataType,   ToFieldListSequence, StringFilter_1, IntegerFilter_1, NumericFilter_1, DateFilter_1, TimeFilter_1   from CO00123 a inner join CO00121 b on a.FromFieldListSequence = b.SEQNUMBR  where a.FieldsListGuid = @FieldsListGuid and a.ConditionsGuid = @ConditionsGuid and a.FieldsListGuid=b.FieldsListGuid  order by a.SEQNUMBR   open Conditions  fetch next from Conditions into @FromTablePhysicalName, @FromFieldPhysicalName, @FieldComparison, @QueryOperator,   @QueryConditon, @FromFieldDataType, @ToFieldListSequence, @StringFilter, @IntegerFilter, @NumericFilter,  @DateFilter, @TimeFilter  while @@fetch_status = 0  begin  if (@FirstLoop = 1)   begin  select @ExtraCloseParenthesisNeeded=1  if @AdditionalWhereClause<>''  begin  set @WhereClause = RTRIM(@AdditionalWhereClause) + '    AND (' + char(13) + '    '  end  else  begin  set @WhereClause = 'WHERE (' + char(13) + '    '  end  set @FirstLoop = 0  end  else  begin  if (@QueryOperator = 1)  begin  set @WhereClause = @WhereClause + '    AND '   end  else  begin  set @WhereClause = @WhereClause + '    OR '  end   end  if (@FieldComparison = 0 )  begin   begin  SELECT @StringValue =   CASE @FromFieldDataType  WHEN 1 THEN   str(@IntegerFilter)  WHEN 2 THEN   str(@IntegerFilter)  WHEN 3 THEN   convert(varchar(10), @DateFilter, 112)  WHEN 4 THEN   REVERSE(SUBSTRING(reverse  (CONVERT(varchar(20), @NumericFilter)),   PATINDEX('%[^0]%', reverse(CONVERT(varchar(20), @NumericFilter)))  , len(CONVERT(varchar(20), @NumericFilter)) - PATINDEX('%[^0]%'  , reverse(CONVERT(varchar(20), @NumericFilter))) + 1))  WHEN 5 THEN   @StringFilter  WHEN 6 THEN  str(@IntegerFilter)  WHEN 7 THEN   str(@IntegerFilter)  WHEN 8 THEN   convert(char(12),@TimeFilter,114)   WHEN 9 THEN   @StringFilter   END  end    select @StringValue = REPLACE ( rtrim(ltrim(@StringValue)) , '''' , '''''' )    SELECT @StringValueQuoted =   CASE @FromFieldDataType  WHEN 3 THEN   '''' + @StringValue + ''''  WHEN 5 THEN   '''' + @StringValue + ''''  WHEN 8 THEN   '''' + @StringValue + ''''   WHEN 9 THEN   '''' + @StringValue + ''''  else  @StringValue   END  if (@FromFieldDataType = 9)  begin  SELECT @ConditonString = rtrim(ltrim(dbo.qdGetAccountNumberString(@FromTablePhysicalName)))  end  else  begin  SELECT @ConditonString = '[' + rtrim(ltrim(@FromTablePhysicalName)) + '].[' + rtrim(ltrim(@FromFieldPhysicalName)) + ']'   end   SELECT @ConditonString = rtrim(ltrim(@ConditonString)) + ' ' +  CASE @QueryConditon  WHEN 1 THEN   'LIKE ''%' + rtrim(ltrim(@StringValue)) + '%'' '  WHEN 2 THEN   'NOT LIKE ''%' + rtrim(ltrim(@StringValue)) + '%'' '  WHEN 3 THEN   'LIKE ''' + rtrim(ltrim(@StringValue)) + '%'' '  WHEN 4 THEN   '= ' + rtrim(ltrim(@StringValueQuoted)) + ' '  WHEN 5 THEN   '!= ' + rtrim(ltrim(@StringValueQuoted)) + ' '  WHEN 7 THEN   '>= ' + rtrim(ltrim(@StringValueQuoted)) + ' '  WHEN 8 THEN   '<= ' + rtrim(ltrim(@StringValueQuoted)) + ' '   WHEN 9 THEN   '= ' + rtrim(ltrim(@StringValueQuoted)) + ' '   END   end  else  begin  select @ToTablePhysicalName = TablePhysicalName, @ToFieldPhysicalName = FieldPhysicalName , @ToFieldDataType = FieldDataType  from CO00121  where FieldsListGuid = @FieldsListGuid and SEQNUMBR = @ToFieldListSequence   SELECT @StringValue =   CASE @ToFieldDataType  WHEN 1 THEN   ' str(' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '])'  WHEN 2 THEN   ' str(' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '])'  WHEN 3 THEN   ' convert(varchar(10), ' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '], 112)'  WHEN 4 THEN   'REVERSE(SUBSTRING(reverse'  + '(CONVERT(varchar(20), ' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '] )), '  + 'PATINDEX(''%[^0]%'', reverse(CONVERT(varchar(20), ' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '])))'  + ', len(CONVERT(varchar(20), ' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '])) - PATINDEX(''%[^0]%'' '  + ' , reverse(CONVERT(varchar(20), ' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + ']))) + 1))'  WHEN 5 THEN   '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + ']'  WHEN 6 THEN  ' str(' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '])'  WHEN 7 THEN   ' str(' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '])'  WHEN 8 THEN   ' convert(char(12),' + '[' +rtrim(ltrim( @ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + '],114)'   WHEN 9 THEN   rtrim(ltrim(dbo.qdGetAccountNumberString(@FromTablePhysicalName)))   END   if (@FromFieldDataType = 9)  begin  SELECT @ConditonString = rtrim(ltrim(dbo.qdGetAccountNumberString(@FromTablePhysicalName)))  end  else  begin  SELECT @ConditonString = '[' + rtrim(ltrim(@FromTablePhysicalName)) + '].[' + rtrim(ltrim(@FromFieldPhysicalName)) + '] '  end  SELECT @ConditonString = rtrim(ltrim(@ConditonString)) + ' ' +  CASE @QueryConditon  WHEN 1 THEN   'LIKE ''%'''  WHEN 2 THEN   'NOT LIKE ''%'''  WHEN 3 THEN   'LIKE '''''  WHEN 4 THEN   '= '  WHEN 5 THEN   '!= '  WHEN 7 THEN   '>= '  WHEN 8 THEN   '<= '   WHEN 9 THEN   '= '   END    if (@ToFieldDataType = 9)  begin  SELECT @ConditonString = rtrim(ltrim(@ConditonString)) + ' ' + rtrim(ltrim(dbo.qdGetAccountNumberString(@ToTablePhysicalName)))  end  else  begin  SELECT @ConditonString = rtrim(ltrim(@ConditonString)) + ' ' +  CASE @QueryConditon  WHEN 1 THEN   ' + '  + rtrim(ltrim(@StringValue)) + ' + ''%'' '   WHEN 2 THEN   ' + '  + rtrim(ltrim(@StringValue)) + ' + ''%'' '   WHEN 3 THEN   ' + '  + rtrim(ltrim(@StringValue)) + ' + ''%'' '   WHEN 4 THEN   '[' + rtrim(ltrim(@ToTablePhysicalName)) + '].[' +rtrim(ltrim( @ToFieldPhysicalName)) + ']'  WHEN 5 THEN   '[' + rtrim(ltrim(@ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + ']'  WHEN 7 THEN   '[' + rtrim(ltrim(@ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + ']'  WHEN 8 THEN   '[' + rtrim(ltrim(@ToTablePhysicalName)) + '].[' + rtrim(ltrim(@ToFieldPhysicalName)) + ']'   END   end  end  select @WhereClause = @WhereClause + rtrim(ltrim(@ConditonString)) + ' ' + char(13)   if (len(@WhereClause) > 7500)  begin  if (len(@SqlText9) = 0)  set @SqlText9 = @WhereClause  else if (len(@SqlText10) = 0)  set @SqlText10 = @WhereClause  set @SelectClause = ''  end  fetch next from Conditions into @FromTablePhysicalName, @FromFieldPhysicalName, @FieldComparison, @QueryOperator,   @QueryConditon, @FromFieldDataType, @ToFieldListSequence, @StringFilter, @IntegerFilter, @NumericFilter,  @DateFilter, @TimeFilter  end  if @ExtraCloseParenthesisNeeded>0  begin  select @WhereClause = @WhereClause + ' ) '  end  if (len(@SqlText9) = 0)  set @SqlText9 = @WhereClause  else if (len(@SqlText10) = 0)  set @SqlText10 = @WhereClause  close Conditions  deallocate Conditions    select @SqlText11 = replace(rtrim(ltrim(@SqlText1)), '''', '''''')  select @SqlText12 = replace(rtrim(ltrim(@SqlText2)), '''', '''''')  select @SqlText13 = replace(rtrim(ltrim(@SqlText3)), '''', '''''')  select @SqlText14 = replace(rtrim(ltrim(@SqlText4)),  '''', '''''')  select @SqlText15 = replace(rtrim(ltrim(@SqlText5)), '''', '''''')  select @SqlText16 = replace(rtrim(ltrim(@SqlText6)), '''', '''''')  select @SqlText17 = replace(rtrim(ltrim(@SqlText7)),  '''', '''''')  select @SqlText18 = replace(rtrim(ltrim(@SqlText8)),  '''', '''''')  select @SqlText19 = replace(rtrim(ltrim(@SqlText9)),  '''', '''''')  select @SqlText20 = replace(rtrim(ltrim(@SqlText10)), '''', '''''')   select @TableName2 = '##' + rtrim(ltrim(str(rand() * 100000000)))  exec (' select ''' + @SqlText11 + ''' AS Sql1 , '  + ''''  + @SqlText12 + ''' AS Sql2 , '  + ''''  + @SqlText13 + ''' AS Sql3 , '  + ''''  + @SqlText14 + ''' AS Sql4 , '  + ''''  + @SqlText15 + ''' AS Sql5 , '  + ''''  + @SqlText16 + ''' AS Sql6 , '  + ''''  + @SqlText17 + ''' AS Sql7 , '  + ''''  + @SqlText18 + ''' AS Sql8 , '  + ''''  + @SqlText19 + ''' AS Sql9 , '  + ''''  + @SqlText20 + ''' AS Sql10  INTO ' + @TableName2)  if (@SelectType = 1)  begin   select @TableName = ''   INSERT INTO @rowcount_table  exec (@SqlText1 + @SqlText2 + @SqlText3 + @SqlText4 + @SqlText5 + @SqlText6 + @SqlText7   + @SqlText8 + @SqlText9 + @SqlText10)  SELECT @RowCount = Value FROM @rowcount_table  end  else  begin  select @TableName = '##' + rtrim(ltrim(str(rand() * 100000000)))  exec (@SqlText1 + @SqlText2 + @SqlText3 + @SqlText4 + @SqlText5 + @SqlText6 + @SqlText7   + ' INTO ' + @TableName + ' ' + @SqlText8 + @SqlText9 + @SqlText10)  select @RowCount = @@ROWCOUNT  end   set nocount OFF  RETURN    
GO
GRANT EXECUTE ON  [dbo].[qdCreateSql] TO [DYNGRP]
GO
