SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 Create Procedure [dbo].[SVC_Item_Received]  (@PONumber char(21),  @POLineSeq numeric(19,5),  @ItemNumber char(31),  @Qty numeric(19,5),  @UoM char(9),  @Location char(11),  @RCVNumber char(21),  @RCVLineSeq numeric(19,5),  @VendorID char(15),  @Tracking smallint,  @UserDate datetime,  @Bin char(15),  @QtyInBaseUOM numeric(19,5),  @DECPLCUR smallint,  @DECPLQTY smallint  ) As declare @CallNumber char(15),  @SrvRecType smallint,  @EquipLine integer,  @LineItemType char(3),  @LineItemSeq int,        @ToLocation char(11),  @Status char(3),  @QtyBO numeric(19,5),  @QtyUpdated numeric(19,5),  @QtyAll numeric(19,5),  @Description char(51),  @TransferNumber char(15),  @RTVNumber char(15),  @RTVLine numeric(19,5),  @RTVType char(11),  @RecStat char(3), @PartialRcvStat char(3),  @NowDate datetime,  @NowTime datetime,  @NowDateTime datetime,  @MinDate datetime,  @TransferLine int,  @SerialNumber char(21),@OldSerialNumber char(21),@OldItemNumber char(31),  @WONumber char(15),  @WORecType smallint,  @AddressOption smallint,  @AddressCode char(15),  @Customer char(15),  @MiscAddressCode char(15),  @Auditdesc char(100) declare  @CreateSerial tinyint,  @UsePOP smallint,  @EquipID int,  @UserID char(21),  @IVIndex int, @newIVIndex int,  @OffsetIndex int,@newOffsetIndex int,  @UNITCOST numeric(19,5) , @EXTCOST numeric(19,5) , @POfound smallint declare @IVNum char(17),@OriginalUoM char(9),@QtyInBase numeric(19,5) declare @Line int declare @ItemType smallint declare @ProcessLine Numeric(19,5), @RMA char(15), @RMALine numeric(19,5) declare @InStockStatus char (10) declare @ToBin char(15) declare @EnableBin tinyint declare @SerialSEQ int, @RTVSerialSEQ int declare @SupersseionEnabled tinyint declare @RTVStatus smallint, @RTVStatus_Current smallint declare @PrevStatus char(3) declare @Return_Path smallint declare @SERLTQTY numeric(19,5), @OriginalSERLTQTY numeric(19,5) declare @CMPNTSEQ int, @ReceiptDate datetime declare @NonInven tinyint if not exists(select * from SVC00998) return select @Bin = BIN from POP30340 where POPRCTNM = @RCVNumber and RCPTLNNM = @RCVLineSeq select @Bin = isnull(@Bin,''), @NonInven = 0 select @UsePOP = Use_POP,@CreateSerial = SVC_Create_POP_Serial, @Customer = SVC_InStock_Customer,  @InStockStatus = SVC_InStock_Status, @SupersseionEnabled = SVC_Supersession_Enabled from SVC00998 if exists(select * from IV00101 where ITEMNMBR = @ItemNumber)  select @ItemType = ITEMTYPE from IV00101 where ITEMNMBR = @ItemNumber else  select @NonInven = 1 select @UserID = SYSTEM_USER select @POfound = 0 select @NowDateTime = getdate() exec SVC_util_split_datetime @NowDateTime, @NowDate output, @NowTime output exec smGetMinDate @MinDate output select @EnableBin = ENABLEMULTIBIN from IV40100  if @PONumber > ''  BEGIN  select @RTVNumber = RTV_Number, @RTVLine = RTV_Line, @RTVType = RTV_Type, @AddressCode = LOCNCODE, @RTVStatus_Current = RTV_Status,  @RMA = RETDOCID, @RMALine = LNSEQNBR, @ProcessLine = SVC_Process_SEQ_Number, @PrevStatus = RTV_Return_Status  ,@OriginalUoM = UOFM from SVC05601  where PONMBRSTR = @PONumber and POLNSEQ = @POLineSeq  if @RTVNumber is not null  BEGIN  exec SVC_Get_QtyInBase @ItemNumber,@OriginalUoM,2,@QtyInBase OUTPUT   select @RecStat = RTV_Received_Status, @PartialRcvStat = isnull(SVC_Partial_Received_Sta, RTV_Received_Status), @Return_Path = RTV_Routing from SVC05003 where RTV_Type = @RTVType  select @RTVStatus = 5  if (select (QUANTITY - QTYRECVD) from SVC05601 where RTV_Number = @RTVNumber and RTV_Line = @RTVLine) > (@Qty * @QtyInBaseUOM)/@QtyInBase   select @RecStat = isnull(@PartialRcvStat,@RecStat), @RTVStatus = 4  if @RTVStatus_Current < 3 and @Return_Path = 2   select @RecStat = @PrevStatus, @RTVStatus = @RTVStatus_Current   update SVC05601 set RTV_Status = @RTVStatus, receiptdate = @UserDate, Receipt_Time = @NowTime,   POPRCTNM = @RCVNumber, RCPTLNNM = @RCVLineSeq, QTY_To_Receive = QTY_To_Receive -(@Qty * @QtyInBaseUOM)/@QtyInBase , QTYRECVD = QTYRECVD + (@Qty * @QtyInBaseUOM)/@QtyInBase ,  Return_Item_Number = @ItemNumber, LOCNCODE = @Location, RTV_Return_Status = @RecStat   where RTV_Number = @RTVNumber and RTV_Line = @RTVLine   exec SVC_RTV_Set_HDR_Values @RTVNumber  if @Tracking = 1 and @EnableBin = 1  update SVC05612 set LOCNCODE = @Location, TOBIN = @Bin, POSTED = 1 where RTV_Number = @RTVNumber and RTV_Line = @RTVLine  if @RMA > ''  exec SVC_RTV_Update_RMAProcessStatus @RTVNumber, @RTVLine, @RecStat,1  select @POfound =1  select @Auditdesc =' PO Receiving: Rcv. Number/Line Number : '+ rtrim(@RCVNumber)+ '/' + rtrim(cast(@RCVLineSeq as char(20)))  exec SVC_Create_RTV_Audit  @RTVNumber,@RTVLine, @PrevStatus,@RecStat, @Auditdesc,@UserID,@NowDateTime,@NowDateTime  END   else  BEGIN  select @CallNumber = CALLNBR,   @SrvRecType = SRVRECTYPE,  @EquipLine = EQPLINE,  @LineItemType = LINITMTYP,  @LineItemSeq = LNITMSEQ,  @ToLocation = LOCNCODE,  @QtyBO = QTYBACKO,  @PrevStatus = SRVSTAT,  @AddressOption = SVC_Address_Option,  @MiscAddressCode = SVC_Misc_Address_Code,  @Description = ITEMDESC,  @OriginalUoM = UOFM,  @CMPNTSEQ = CMPNTSEQ  from SVC00203  where PONMBRSTR = @PONumber and POLNSEQ = @POLineSeq  IF @CallNumber is not NULL   BEGIN  select @Status = Parts_Available_Status from SVC00998  if @LineItemType = 'P'  BEGIN  select @POfound = 3  if @Qty > @QtyBO   select @QtyUpdated = @QtyBO  else  select @QtyUpdated = @Qty  if @Qty < @QtyBO  select @Status = @PrevStatus   if @NonInven = 1  Begin  select @UNITCOST =UNITCOST, @EXTCOST = EXTDCOST from  POP30310 where POPRCTNM = @RCVNumber and RCPTLNNM = @RCVLineSeq  update SVC00203 with (rowlock) set SRVSTAT = @Status, UNITCOST = @UNITCOST, EXTDCOST = @EXTCOST  where  @CallNumber = CALLNBR and   @SrvRecType = SRVRECTYPE and  @EquipLine = EQPLINE and  @LineItemType = LINITMTYP and  @LineItemSeq = LNITMSEQ and  CMPNTSEQ = @CMPNTSEQ  if @UNITCOST > 0   exec svcUpdateCallLineOrigCostPrice @SrvRecType,@CallNumber, @LineItemType, @LineItemSeq, @CMPNTSEQ  return  End  exec SVC_Get_QtyInBase @ItemNumber,@OriginalUoM,2,@QtyInBase OUTPUT   IF @Location = @ToLocation  BEGIN  update SVC00203 set QTYBACKO = QTYBACKO - @QtyUpdated ,  ATYALLOC = ATYALLOC + @QtyUpdated ,  SRVSTAT = @Status  where  @CallNumber = CALLNBR and   @SrvRecType = SRVRECTYPE and  @EquipLine = EQPLINE and  @LineItemType = LINITMTYP and  @LineItemSeq = LNITMSEQ and  CMPNTSEQ = @CMPNTSEQ  if @CMPNTSEQ > 0   exec svcUpdateKitBOQty @SrvRecType, @CallNumber, @EquipLine, @LineItemSeq   if @Tracking = 1 and @EnableBin = 1  exec SVC_Bin_CreateBinWork 1, @SrvRecType, @CallNumber, @LineItemSeq,  @ItemNumber, @Location, @Location, @Bin, @Bin, @QtyUpdated , @CMPNTSEQ  select @QtyAll = @QtyUpdated * @QtyInBase   exec SVC_Allocate_Quantity @ItemNumber, @Location, @QtyAll  exec SVC_Set_SC_HDR_Status @SrvRecType, @CallNumber  select @AddressCode = ADRSCODE, @Customer = CUSTNMBR from SVC00200 where  CALLNBR = @CallNumber and SRVRECTYPE = @SrvRecType  END  else  BEGIN  if @AddressOption = 1  BEGIN  select @AddressCode = ADRSCODE, @Customer = CUSTNMBR from SVC00200 where  CALLNBR = @CallNumber and SRVRECTYPE = @SrvRecType  END  ELSE if @AddressOption = 3   select @AddressCode = @MiscAddressCode  ELSE   select @AddressCode = @ToLocation   select @Status = Intransit_Status from SVC00998   exec SVC_Create_Transfer @Location,  @ToLocation,  @ItemNumber,  @Description,  @OriginalUoM,  1,  @QtyUpdated,  @CallNumber,  @SrvRecType,  @LineItemSeq,  @EquipLine,  @LineItemType,  '',  @CMPNTSEQ,  '',  0,  '',  @AddressOption,  @AddressCode,  @Customer,  @UserDate,  @DECPLCUR ,  @DECPLQTY,  @QtyInBaseUOM ,  @TransferNumber output,  @TransferLine output  if @Tracking = 1 and @EnableBin = 1  BEGIN  exec SVC_Bin_GetDefault @ItemNumber, @ToLocation, 'I', @ToBin output  exec SVC_Bin_CreateBinWork 2, 0, @TransferNumber, @TransferLine,  @ItemNumber, @Location, @ToLocation, @Bin, @ToBin, @QtyUpdated , 0   select @UNITCOST = CURRCOST, @IVIndex = IVIVINDX, @OffsetIndex = IVIVINDX from IV00101 where ITEMNMBR = @ItemNumber  if @IVIndex = 0 or @IVIndex is null  select @IVIndex = ACTINDX from SY01100 where SERIES=5 and SEQNUMBR = 100  if @OffsetIndex = 0 or @OffsetIndex is null  select @OffsetIndex = ACTINDX from SY01100 where SERIES=5 and SEQNUMBR = 100  exec SVC_LocationSegmentReplace @IVIndex, @Location, @newIVIndex output   exec SVC_LocationSegmentReplace @OffsetIndex, @ToLocation, @newOffsetIndex output   exec SVC_Set_Transfer_Line_Dist @TransferNumber,@TransferLine,@newIVIndex,@newOffsetIndex,@UNITCOST,@UNITCOST,0   update SVC00700 set STATUS = 1 where ORDDOCID = @TransferNumber  update SVC00701 set STATUS = 1, QTYFULFI = QTYFULFI + @Qty where ORDDOCID = @TransferNumber and LNITMSEQ = @TransferLine  END   update SVC00203 set   SRVSTAT = @Status,  ORDDOCID = @TransferNumber,  TRANSLINESEQ = @TransferLine  where  @CallNumber = CALLNBR and   @SrvRecType = SRVRECTYPE and  @EquipLine = EQPLINE and  @LineItemType = LINITMTYP and  @LineItemSeq = LNITMSEQ and CMPNTSEQ = @CMPNTSEQ   exec SVC_Set_SC_HDR_Status @SrvRecType, @CallNumber  select @AddressCode = ADRSCODE, @Customer = CUSTNMBR from SVC00200 where  CALLNBR = @CallNumber and SRVRECTYPE = @SrvRecType  END  END  else   BEGIN  update SVC00203 set SRVSTAT = @Status  where  @CallNumber = CALLNBR and   @SrvRecType = SRVRECTYPE and  @EquipLine = EQPLINE and  @LineItemType = LINITMTYP and  @LineItemSeq = LNITMSEQ and CMPNTSEQ = @CMPNTSEQ  exec SVC_Set_SC_HDR_Status @SrvRecType, @CallNumber  END  END  else   BEGIN  select @WONumber = WORKORDNUM,   @WORecType = WORECTYPE,  @LineItemType = LINITMTYP,  @LineItemSeq = LNITMSEQ,  @CMPNTSEQ = CMPNTSEQ,  @ToLocation = LOCNCODE,  @QtyBO = QTYBACKO,  @Description = ITEMDESC,  @OriginalUoM = UOFM  from SVC06101  where PONMBRSTR = @PONumber and POLNSEQ = @POLineSeq  IF @WONumber is not NULL  BEGIN  select @POfound = 2  if @Qty > @QtyBO   select @QtyUpdated = @QtyBO  else  select @QtyUpdated = @Qty   select @Status = WOENTSTA from SVC00998  exec SVC_Get_QtyInBase @ItemNumber,@OriginalUoM,2,@QtyInBase OUTPUT   IF @Location = @ToLocation  BEGIN  exec SVC_Bin_CreateBinWork 5, @WORecType, @WONumber, @LineItemSeq,  @ItemNumber, @Location, @Location, @Bin, @Bin, @QtyUpdated , @CMPNTSEQ  update SVC06101 set QTYBACKO = QTYBACKO - @QtyUpdated,  ATYALLOC = ATYALLOC + @QtyUpdated,  WOSTAT = @Status  where  @WONumber = WORKORDNUM and   @WORecType = WORECTYPE and  @LineItemType = LINITMTYP and  @LineItemSeq = LNITMSEQ and CMPNTSEQ = @CMPNTSEQ  select @QtyAll = @QtyUpdated * @QtyInBase   exec SVC_Allocate_Quantity @ItemNumber, @Location, @QtyAll  exec SVC_Calc_WO_Status @WONumber  END  else  BEGIN  select @Status = Intransit_Status from SVC00998  exec SVC_Create_Transfer @Location,  @ToLocation,  @ItemNumber,  @Description,  @OriginalUoM,  1,  @QtyUpdated,  '',  0,  @LineItemSeq,  1,  @LineItemType, '', @CMPNTSEQ, '',  @WORecType,  @WONumber,  0,  '',  '',  @UserDate,  @DECPLCUR ,  @DECPLQTY,  @QtyInBaseUOM ,  @TransferNumber output, @TransferLine output   if @Tracking = 1 and @EnableBin = 1  BEGIN  exec SVC_Bin_GetDefault @ItemNumber, @ToLocation, 'I', @ToBin output  exec SVC_Bin_CreateBinWork 2, 0, @TransferNumber, @TransferLine,  @ItemNumber, @Location, @ToLocation, @Bin, @ToBin, @QtyUpdated , 0   select @UNITCOST = CURRCOST, @IVIndex = IVIVINDX, @OffsetIndex = IVIVINDX from IV00101 where ITEMNMBR = @ItemNumber  if @IVIndex = 0 or @IVIndex is null  select @IVIndex = ACTINDX from SY01100 where SERIES=5 and SEQNUMBR = 100  if @OffsetIndex = 0 or @OffsetIndex is null  select @OffsetIndex = ACTINDX from SY01100 where SERIES=5 and SEQNUMBR = 100  exec SVC_LocationSegmentReplace @IVIndex, @Location, @newIVIndex output   exec SVC_LocationSegmentReplace @OffsetIndex, @ToLocation, @newOffsetIndex output   exec SVC_Set_Transfer_Line_Dist @TransferNumber,@TransferLine,@newIVIndex,@newOffsetIndex,@UNITCOST,@UNITCOST,0   update SVC00700 set STATUS = 1 where ORDDOCID = @TransferNumber  update SVC00701 set STATUS = 1, QTYFULFI = QTYFULFI+@QtyUpdated where ORDDOCID = @TransferNumber and LNITMSEQ = @TransferLine  END   update SVC06101 set   WOSTAT = @Status,  ORDDOCID = @TransferNumber  where  @WONumber = WORKORDNUM and   @WORecType = WORECTYPE and  @LineItemType = LINITMTYP and  @LineItemSeq = LNITMSEQ and CMPNTSEQ = @CMPNTSEQ  exec SVC_Calc_WO_Status @WONumber  END  END  END   END  END   select @Customer = SVC_InStock_Customer from SVC00998  select @AddressCode = PRSTADCD from RM00101  where CUSTNMBR = @Customer   if @Tracking >= 2   BEGIN  if @UsePOP = 2  BEGIN  if exists(select * from sysobjects where name = 'POP10330')  BEGIN  declare pop_Cursor cursor for select ITEMNMBR,SERLTNUM, SLTSQNUM, BIN, SERLTQTY, DATERECD  from POP30330 where POPRCTNM = @RCVNumber and RCPTLNNM = @RCVLineSeq  open pop_Cursor   fetch next from pop_Cursor into @ItemNumber, @SerialNumber, @SerialSEQ, @Bin, @SERLTQTY, @ReceiptDate  while @@FETCH_STATUS = 0  BEGIN  if @POfound = 1   Begin  select top 1 @RTVSerialSEQ = SLTSQNUM, @EquipID = EQUIPID, @OldSerialNumber = SERLNMBR,   @OldItemNumber = ITEMNMBR, @OriginalSERLTQTY = SERLTQTY from SVC05602   where RTV_Number = @RTVNumber and RTV_Line = @RTVLine and POSTED = 0  if @EquipID > 0 and @SupersseionEnabled = 1   begin  exec SVC_RTV_UpdateSupersession @EquipID output, @SerialNumber, @ItemNumber, '', @UserID  exec SVC_Create_Serial_Audit @EquipID,'',@OldSerialNumber,'','Updated Serial via PO Rcv.',@UserID  if (@EquipID = 0 or @EquipID is null) and @Customer > ''  exec SVC_Create_Serial_MSTR @SerialNumber,@ItemNumber,@Customer,@AddressCode,@UserID,@VendorID,@EquipID output, 4, @PONumber  end  else if @CreateSerial = 1 and @Customer > ''  begin  if @Tracking = 2  exec SVC_Create_Serial_MSTR @SerialNumber,@ItemNumber,@Customer,@AddressCode,@UserID,@VendorID,@EquipID output, 4 , @PONumber  end   if @Tracking = 3 and (@SERLTQTY * @QtyInBase)/@QtyInBaseUOM <> @OriginalSERLTQTY   begin   select @RTVSerialSEQ = isnull(Max(SLTSQNUM),0) + 1 from SVC05602 where RTV_Number = @RTVNumber and RTV_Line = @RTVLine  insert SVC05602  select @RTVNumber,  @RTVLine,  QTYTYPE,  SERLTQTY,  @RTVSerialSEQ,  ITEMNMBR,  '',  '',  0,  ITEMNMBR,  SERLTNUM,  SERLTNUM,  0,   '',  BIN,  UNITCOST,  0,  DATERECD,  DTSEQNUM,  'PO RCV',  1,  1,  1,  MFGDATE,EXPNDATE  from POP30330 where POPRCTNM = @RCVNumber and RCPTLNNM = @RCVLineSeq and SLTSQNUM = @SerialSEQ  end   else  update SVC05602 set SVC_Return_Serial_ID = @SerialNumber, Return_Serial_Number = @SerialNumber, Return_Item_Number = @ItemNumber,  Return_Equipment_ID = @EquipID, MARKED = 1, POSTED = 1, TOBIN = @Bin, TRXSORCE = 'PO RCV', SERLTQTY = (@SERLTQTY * @QtyInBase)/@QtyInBaseUOM  where RTV_Number = @RTVNumber and RTV_Line = @RTVLine and SLTSQNUM = @RTVSerialSEQ  End   else  begin  if (@EquipID = 0 or @EquipID is null) and @Tracking = 2 and @CreateSerial = 1 and @Customer > ''  exec SVC_Create_Serial_MSTR @SerialNumber,@ItemNumber,@Customer,@AddressCode,@UserID,@VendorID,@EquipID output, 4, @PONumber  end  if @POfound > 1   begin  if @Location <> @ToLocation and @QtyUpdated > 0   Begin  if @SERLTQTY > (@QtyUpdated * @QtyInBaseUOM)   select @SERLTQTY = (@QtyUpdated * @QtyInBaseUOM)   if @Tracking = 2   begin  exec SVC_Create_Transfer_Serial @TransferNumber,@TransferLine,@Location,@SerialNumber   if @CreateSerial = 1 and @Customer > ''  begin  exec SVC_Create_Serial_MSTR @SerialNumber,@ItemNumber,@Customer,@AddressCode,@UserID,@VendorID,@EquipID output, 4, @PONumber  update SVC00300 set SRLSTAT = @InStockStatus, INSTDTE = @MinDate, Shipped_Date = @MinDate where EQUIPID = @EquipID  end  end   else  exec SVC_Create_Transfer_SerialLot @TransferNumber,@TransferLine,@Location,@SerialNumber , @ReceiptDate, @SERLTQTY   select @QtyUpdated = @QtyUpdated - @SERLTQTY  End  end  if @Tracking = 2  update SVC00300 set SRLSTAT = @InStockStatus, INSTDTE = @MinDate, Shipped_Date = @MinDate where EQUIPID = @EquipID   set @EquipID = 0  fetch next from pop_Cursor into @ItemNumber, @SerialNumber, @SerialSEQ, @Bin, @SERLTQTY, @ReceiptDate  END  deallocate  pop_Cursor   END   END  END  else   BEGIN   if @Customer = '' or @Customer is null return  if @ItemType = 1 and (select SVC_Create_Non_Serial_Eq from SVC00952 where ITEMNMBR = @ItemNumber and LOCNCODE = @Location) = 1  begin  select @Line = @RCVLineSeq/16384  if @Line < 10  select @SerialNumber = rtrim(ltrim(@RCVNumber))+ '-0' + rtrim(cast(@Line as char(10)))  else  select @SerialNumber = rtrim(ltrim(@RCVNumber))+ '-' + rtrim(cast(@Line as char(10)))  if Len(@SerialNumber) > 20 select @SerialNumber = substring(@SerialNumber,1,20)  exec SVC_Create_Serial_MSTR @SerialNumber,@ItemNumber,@Customer,@AddressCode,@UserID,@VendorID,@EquipID output, 4, @PONumber  update SVC00300 set QUANTITY = @Qty, SRLSTAT = @InStockStatus, INSTDTE = @MinDate,  Shipped_Date = @MinDate where EQUIPID = @EquipID  if @POfound = 1 and @EquipID > 0  update SVC05602 set Return_Serial_Number = @SerialNumber, SVC_Return_Serial_ID = '',Return_Item_Number = @ItemNumber,  Return_Equipment_ID = @EquipID, MARKED = 1, POSTED = 1, TOBIN = @Bin, TRXSORCE = 'PO RCV'  where RTV_Number = @RTVNumber and RTV_Line = @RTVLine  end  END  return (0)    
GO
GRANT EXECUTE ON  [dbo].[SVC_Item_Received] TO [DYNGRP]
GO
