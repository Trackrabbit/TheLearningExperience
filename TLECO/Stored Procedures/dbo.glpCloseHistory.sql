SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[glpCloseHistory]  @I_iSQLSessionID                int             = NULL,  @I_sTransactionType             smallint        = NULL,   @I_iJournalEntry                int             = NULL,  @I_cBatchSource                 char(15)        = NULL,   @I_cBatchNumber                 char(15)        = NULL,   @I_cUserID                      char(15)        = NULL,   @I_sSeries                      smallint        = NULL,   @I_iAccountIndex                int             = NULL,  @I_sAccountType                 smallint        = NULL,  @I_sPostingType                 smallint        = NULL,  @I_mDebit                       numeric(19,5)   = NULL,  @I_mCredit                      numeric(19,5)   = NULL,  @I_cAuditTrailCode              char(13)        = NULL,  @I_sClosingYear                 smallint        = NULL,  @I_cDescription                 char(30)        = NULL,  @I_tPrintDistributions          tinyint       = NULL,   @I_tReversing                   tinyint       = NULL,   @I_tPrinting                    tinyint       = NULL,   @I_tPosting                     tinyint       = NULL,   @I_tOffsetAccount               tinyint       = NULL,   @I_tRealTimeQuick               tinyint       = NULL,  @I_sQuickOffset                 smallint        = NULL,  @I_mSequenceLine                numeric(19,5)   = NULL,  @I_mRecurringTRXSequence        numeric(19,5)   = NULL,  @I_mExchangeRate                numeric(15,7)   = NULL,  @I_cDivisionalSegment           char(66)        = NULL,  @I_tDivisionalClosing           tinyint         = NULL,  @I_iSETPRetainedEarningsIndex   int             = NULL,   @I_sDivisionalAccountSegment    smallint        = NULL,  @I_tBeforeSegmentLength         tinyint         = NULL,  @I_tDivisionalSegmentLength     tinyint         = NULL,  @I_tAfterSegmentLength          tinyint         = NULL,  @I_dClosingDate                 datetime        = NULL,  @I_cFuncCurrencyID              char(15)        = NULL,  @I_sFuncCurrencyIndex           smallint        = NULL,  @I_sFuncDecimalPlaces           smallint        = NULL,  @I_tMCRegistered                tinyint       = NULL,  @I_sMCTransaction               smallint        = NULL,  @I_mOrigDebit                   numeric(19,5)   = NULL,  @I_mOrigCredit                  numeric(19,5)   = NULL,  @I_cOrigCurrencyID              char(15)        = NULL,  @I_sOrigCurrencyIndex           smallint        = NULL,  @I_sOrigDecimalPlaces           smallint        = NULL,  @I_cIntercompanyID            char(5)           = NULL,  @I_tICTransaction       tinyint           = NULL,  @I_cOriginatingDocNumber      char(21)    = NULL,  @I_cOriginatingControlNumber  char(21)    = NULL,  @I_cOriginatingMasterID       char(31)    = NULL,  @I_cOriginatingMasterName     char(65)    = NULL,  @I_sOriginatingTrxType        smallint    = NULL,  @I_cOriginatingTRXDesc        char(30)    = NULL,  @I_sOrigDTASeries       smallint    = NULL,  @I_iOrigSequenceNumber        int         = NULL,  @I_sDTAGLStatus               smallint    = NULL,  @I_nDTAIndex                  numeric(19,5)     = NULL,  @I_nDenomExchangeRate         numeric(15,7)     = NULL,  @I_sMCTrxState                smallint    = NULL,  @I_dDocumentDate        datetime    = NULL,  @I_iPostingNumber       int         = NULL,  @I_iPeriodPostingNumber       int         = NULL,  @I_iPostingNumberHist         int         = NULL,  @I_iPeriodPostingNumberHist   int         = NULL,  @I_cCorrespondingUnit         char(5)           = NULL,  @I_nLedgerID                  int         = NULL,  @IO_bLineMessages               binary(4)       = NULL  output,  @IO_bLineMessages2              binary(4)       = NULL  output,  @IO_bRetainEarnMessages         binary(4)       = NULL  output,  @IO_bRetainEarnMessages2        binary(4)       = NULL  output,  @O_iErrorState                  int             = NULL  output as  declare   @TRUE                           tinyint,  @FALSE                          tinyint,  @POST_ACCT                      smallint,  @UNIT_ACCT                      smallint,  @POST_ALLOC_ACCT                smallint,  @UNIT_ALLOC_ACCT        smallint,  @BAL_SHEET                      smallint,  @HISTORY_PNL                    smallint,  @HISTORY_BBF                    smallint,  @DEFAULT_YEAR                   smallint,  @HISTORY                        smallint,  @YEAR_END_CLOSE                 smallint,  @BEGINNING_BALANCE              smallint,  @ALLOCATION_SEQ_LINE_CLOSING    int,  @ALLOCATION_SEQ_LINE_REVERSING  int,  @AUTO_REV_TRX                 smallint,  @tDistributionsExist            tinyint,  @tTransaction                   tinyint,   @iStatus                        int,  @tLoop                          tinyint,  @iAccountIndex                  int,  @tAlreadyVerified               tinyint,  @tPostClosingEntry              tinyint,  @tClosingEntryType              tinyint,  @sRetainedEarningsAccountType   smallint,  @cExchangeTableID               char(15),  @sRateCalculationMethod         smallint,  @cRateTypeID                    char(15),  @iNotUsed                       int,  @iError                         int,   @iRelationID                  int,  @sUserLevel             smallint,  @iAccessAllAccounts           int,  @isecurityoptions       int,  @tALSRegistered               tinyint,  @cCompanyID             char(5),  @REAcctType tinyint  select   @O_iErrorState = 0,  @iStatus = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if      @I_iSQLSessionID                is NULL or  @I_sTransactionType             is NULL or  @I_iJournalEntry                is NULL or  @I_cBatchSource                 is NULL or  @I_cBatchNumber                 is NULL or  @I_cUserID                      is NULL or  @I_sSeries                      is NULL or  @I_iAccountIndex                is NULL or  @I_sAccountType                 is NULL or  @I_sPostingType                 is NULL or  @I_mDebit                       is NULL or  @I_mCredit                      is NULL or  @I_cAuditTrailCode              is NULL or  @I_sClosingYear                 is NULL or  @I_cDescription                 is NULL or  @I_tPrintDistributions          is NULL or  @I_tReversing                   is NULL or  @I_tPrinting                    is NULL or  @I_tPosting                     is NULL or  @I_tOffsetAccount               is NULL or  @I_tRealTimeQuick               is NULL or  @I_sQuickOffset                 is NULL or  @I_mSequenceLine                is NULL or  @I_mRecurringTRXSequence        is NULL or  @I_mExchangeRate                is NULL or  @I_cDivisionalSegment           is NULL or  @I_tDivisionalClosing           is NULL or  @I_iSETPRetainedEarningsIndex   is NULL or  @I_sDivisionalAccountSegment    is NULL or  @I_tBeforeSegmentLength         is NULL or  @I_tDivisionalSegmentLength     is NULL or  @I_tAfterSegmentLength          is NULL or  @I_dClosingDate                 is NULL or  @I_cFuncCurrencyID              is NULL or  @I_sFuncCurrencyIndex           is NULL or  @I_sFuncDecimalPlaces           is NULL or  @I_tMCRegistered                is NULL or  @I_sMCTransaction               is NULL or  @I_mOrigDebit                   is NULL or  @I_mOrigCredit                  is NULL or  @I_cOrigCurrencyID              is NULL or  @I_sOrigCurrencyIndex           is NULL or  @I_sOrigDecimalPlaces           is NULL or  @I_cIntercompanyID            is NULL or  @I_tICTransaction       is NULL or  @I_cOriginatingDocNumber      is NULL or  @I_cOriginatingControlNumber  is NULL or  @I_cOriginatingMasterID       is NULL or  @I_cOriginatingMasterName     is NULL or  @I_sOriginatingTrxType        is NULL or  @I_cOriginatingTRXDesc        is NULL or  @I_sOrigDTASeries       is NULL or  @I_iOrigSequenceNumber        is NULL or  @I_sDTAGLStatus               is NULL or  @I_nDTAIndex                  is NULL or  @I_nDenomExchangeRate         is NULL or  @I_sMCTrxState                is NULL or  @I_dDocumentDate        is NULL or  @I_iPostingNumber       is NULL or  @I_iPeriodPostingNumber       is NULL or  @I_iPostingNumberHist         is NULL or  @I_iPeriodPostingNumberHist   is NULL or  @IO_bLineMessages               is NULL or  @IO_bLineMessages2              is NULL or  @IO_bRetainEarnMessages         is NULL or  @IO_bRetainEarnMessages2  is NULL or  @I_cCorrespondingUnit         is NULL or  @I_nLedgerID                  is NULL   begin  select @O_iErrorState = 20400  break  end    select  @TRUE                           = 1,  @FALSE                          = 0,  @POST_ACCT                      = 1,  @UNIT_ACCT                      = 2,  @POST_ALLOC_ACCT                = 3,  @UNIT_ALLOC_ACCT        = 4,  @BAL_SHEET                      = 0,  @HISTORY_PNL                    = 2,  @HISTORY_BBF                    = 3,  @DEFAULT_YEAR                   = 0,  @HISTORY                        = 2,  @YEAR_END_CLOSE                 = 3,  @BEGINNING_BALANCE              = 0,  @ALLOCATION_SEQ_LINE_CLOSING    = 10000000,  @ALLOCATION_SEQ_LINE_REVERSING  = 15000000,  @AUTO_REV_TRX                 = 4,  @iRelationID                  = 0,  @sUserLevel             = 0,  @iAccessAllAccounts           = 0,   @tALSRegistered               = 0   select   @tAlreadyVerified = @FALSE,  @tPostClosingEntry = @FALSE,  @cExchangeTableID = ' ',  @sRateCalculationMethod = 0,  @cRateTypeID = ' '   select @cCompanyID = db_name()   exec @iStatus = DYNAMICS..smGetAccountLevelSecurityInfo  @cCompanyID,  @iRelationID output,  @sUserLevel  output,  @iAccessAllAccounts output,  @tALSRegistered output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @I_tPrinting = @TRUE  begin   if @I_sTransactionType = @AUTO_REV_TRX and  @I_tReversing = @TRUE  select @I_mSequenceLine = (@I_mSequenceLine + @ALLOCATION_SEQ_LINE_REVERSING)   else  select @I_mSequenceLine = (@I_mSequenceLine + @ALLOCATION_SEQ_LINE_CLOSING)   end    if @I_sPostingType = @BAL_SHEET or   @I_sAccountType = @UNIT_ACCT  begin  if @I_sAccountType = @UNIT_ACCT and (1 = (select Clear_Balance from GL00100 where ACTINDX = @I_iAccountIndex))  select  @tPostClosingEntry = @FALSE,  @tClosingEntryType = @HISTORY_BBF,  @iAccountIndex = @I_iAccountIndex   else  select  @tPostClosingEntry = @TRUE,  @tClosingEntryType = @HISTORY_BBF,  @iAccountIndex = @I_iAccountIndex  end   else   begin  exec @iStatus = glVerifyRetainedEarnings  @I_iSETPRetainedEarningsIndex,    @I_iAccountIndex,                                 @I_tDivisionalClosing,  @I_iSQLSessionID,  @I_mDebit,  @I_mCredit,  @I_tBeforeSegmentLength,  @I_tDivisionalSegmentLength,  @I_tAfterSegmentLength,  @I_cDivisionalSegment,  @HISTORY,                                                         @I_tPosting,                                              @I_tMCRegistered,  @I_cOrigCurrencyID,  @I_cFuncCurrencyID,  @I_sFuncDecimalPlaces,  @I_sMCTransaction,  @I_mOrigDebit,  @I_mOrigCredit,  @I_cOrigCurrencyID,  @I_sOrigDecimalPlaces,  @iRelationID,  @sUserLevel,  @iAccessAllAccounts,  @tAlreadyVerified               output,  @iNotUsed                       output,   @IO_bRetainEarnMessages       output,  @IO_bRetainEarnMessages2      output,  @iAccountIndex                  output,   @sRetainedEarningsAccountType output,  @tDistributionsExist            output,  @O_iErrorState                  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   if @sRetainedEarningsAccountType = @POST_ACCT  begin  select   @tPostClosingEntry = @TRUE,  @tClosingEntryType = @HISTORY_BBF   end   else if @tDistributionsExist = @TRUE  begin  if @tAlreadyVerified = @TRUE  begin  exec @iStatus = glpUpdateRetainedEarnings  @I_iSQLSessionID,  @iAccountIndex,  @I_mDebit,  @I_mCredit,  @I_sFuncDecimalPlaces,  @I_mOrigDebit,  @I_mOrigCredit,  @I_sOrigDecimalPlaces,  @O_iErrorState  output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   end    if @I_tPosting = @TRUE or   @I_tPrintDistributions = @TRUE  begin   exec @iStatus = glpPostFixedAllocations  @I_iSQLSessionID,  @I_sTransactionType,   @I_iJournalEntry,   @I_cBatchSource,   @I_cBatchNumber,                  @I_cUserID,   @I_sSeries,   @iAccountIndex,  @I_mDebit,  @I_mCredit,  @I_cAuditTrailCode,  @I_dClosingDate,  @I_sClosingYear,  @DEFAULT_YEAR,                    @BEGINNING_BALANCE,               @I_nLedgerID,  @I_cDescription,  @I_tPrintDistributions,  @I_tReversing,  @I_tPrinting,   @I_tPosting,   @I_tRealTimeQuick,   @I_sQuickOffset,  @HISTORY,                         @FALSE,                           @I_tOffsetAccount,   @I_mSequenceLine,  @I_mRecurringTRXSequence,  @I_mExchangeRate,   @cExchangeTableID,   @I_cFuncCurrencyID,  @I_sFuncCurrencyIndex,  @I_sFuncDecimalPlaces,  @I_tMCRegistered,  @I_sMCTransaction,  @I_mOrigDebit,  @I_mOrigCredit,  @I_cOrigCurrencyID,  @I_sOrigCurrencyIndex,  @I_sOrigDecimalPlaces,  @sRateCalculationMethod,   @cRateTypeID,   @I_cIntercompanyID,  @I_tICTransaction,  @I_cOriginatingDocNumber,  @I_cOriginatingControlNumber,  @I_cOriginatingMasterID,  @I_cOriginatingMasterName,  @I_sOriginatingTrxType,  @I_cOriginatingTRXDesc,  @I_sOrigDTASeries,  @I_iOrigSequenceNumber,  @I_sDTAGLStatus,  @I_nDTAIndex,  @I_nDenomExchangeRate,  @I_sMCTrxState,  @I_dDocumentDate,  @I_iPostingNumber,  @I_iPeriodPostingNumber,  @I_iPostingNumberHist,  @I_iPeriodPostingNumberHist,  @I_cCorrespondingUnit,  @IO_bLineMessages         output,  @IO_bLineMessages2        output,  @IO_bRetainEarnMessages         output,  @IO_bRetainEarnMessages2  output,  @tDistributionsExist      output,  @O_iErrorState            output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   end    if @I_tPrintDistributions = @TRUE  begin  select @I_tPrinting = @FALSE   end    end    end    if @tPostClosingEntry = @TRUE and @I_tPosting = @TRUE  begin  exec @iStatus = glpPostToCurrentYear  @I_iSQLSessionID,  @I_sTransactionType,  @I_iJournalEntry,  @I_cUserID,  @iAccountIndex,  @I_sAccountType,  @I_mDebit,  @I_mCredit,  @I_tOffsetAccount,  @I_sQuickOffset,  @I_cAuditTrailCode,   @I_sClosingYear,  @BEGINNING_BALANCE,       @I_nLedgerID,  @tClosingEntryType,   @I_dClosingDate,  @I_cDescription,  @I_mRecurringTRXSequence,  @I_mExchangeRate,  @cExchangeTableID,  @I_cFuncCurrencyID,   @I_sFuncCurrencyIndex,  @I_tMCRegistered,  @I_sMCTransaction,  @I_mOrigDebit,  @I_mOrigCredit,  @I_cOrigCurrencyID,  @I_sOrigCurrencyIndex,   @sRateCalculationMethod,  @cRateTypeID,  @I_cOriginatingDocNumber,  @I_cOriginatingControlNumber,  @I_cOriginatingMasterID,  @I_cOriginatingMasterName,  @I_sOriginatingTrxType,  @I_cOriginatingTRXDesc,  @I_sOrigDTASeries,  @I_iOrigSequenceNumber,  @I_mSequenceLine,  @I_sDTAGLStatus,  @I_nDTAIndex,  @I_nDenomExchangeRate,  @I_sMCTrxState,  @I_dDocumentDate,  @I_iPostingNumber,  @I_iPeriodPostingNumber,  @I_cCorrespondingUnit,  @O_iErrorState          output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break  if @iAccountIndex = @I_iAccountIndex  Begin  insert into GL20001   (TranslationCurrencyID,  OPENYEAR,  JRNENTRY,  SOURCDOC,  REFRENCE,  TRXDATE,  TRXSORCE,  ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  CURNCYID,  Original_Exchange_Rate,  ORGNTSRC,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  TranslationCreditAmount,  TranslationDebitAmount,  CURRNIDX,  DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  EXCHDATE,  TIME1,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  Identity_Column)   select distinct  c.CURNCYID,  OPENYEAR,  JRNENTRY,  SOURCDOC,  REFRENCE,  a.TRXDATE,  TRXSORCE,  a.ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  a.CURNCYID,  a.XCHGRATE,  ORGNTSRC,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  case CRDTAMNT  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmount(D.RTCLCMTD, 3,   case b.CurrencyTranslationType  when 1 then  dbo.mcFuncGetExchangeRate((SELECT CASE AVGCLMD WHEN 1 THEN G.PERDENDT ELSE (DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE))) END AS A FROM MC40000),  c.AverageExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  when 3 then  dbo.mcFuncGetExchangeRate(F.ExchangeRateTrxDate, c.HistoricalExchgTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  end,  dbo.mcFuncGetDenExchRate(c.CURNCYID,D.RTCLCMTD),  dbo.mcFuncGetMCTrxState(c.CURNCYID),  (E.[DECPLCUR]-1),   CRDTAMNT)  end as TranslationCreditAmount,  case DEBITAMT  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmount(D.RTCLCMTD, 3,   case b.CurrencyTranslationType  when 1 then  dbo.mcFuncGetExchangeRate((SELECT CASE AVGCLMD WHEN 1 THEN G.PERDENDT ELSE (DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE)))END AS A FROM MC40000),  c.AverageExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  when 3 then  dbo.mcFuncGetExchangeRate(F.ExchangeRateTrxDate, c.HistoricalExchgTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  end,  dbo.mcFuncGetDenExchRate(c.CURNCYID,D.RTCLCMTD),  dbo.mcFuncGetMCTrxState(c.CURNCYID),  (E.[DECPLCUR]-1),   DEBITAMT)  end as TranslationDebitAmount,  E.CURRNIDX,  (E.[DECPLCUR]-1) as DECPLCUR,  RATETPID,  EXGTBLID=  case b.CurrencyTranslationType  when 1 then c.AverageExchangeTableID  when 3 then c.HistoricalExchgTableID  end,  case b.CurrencyTranslationType  when 1  then   dbo.mcFuncGetExchangeRate((SELECT CASE AVGCLMD WHEN 1 THEN G.PERDENDT ELSE (DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE)))END AS A FROM MC40000),  c.AverageExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  when 3  then   dbo.mcFuncGetExchangeRate(F.ExchangeRateTrxDate, c.HistoricalExchgTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  end as TranslationExchangeRate,  EXCHDATE,  TIME1,  D.RTCLCMTD,  dbo.mcFuncGetDenExchRate(c.CURNCYID,D.RTCLCMTD) as DENXRATE,  dbo.mcFuncGetMCTrxState(c.CURNCYID) as MCTRXSTT,  CurrencyTranslationType,  a.DEX_ROW_ID  from GL20000 a, MC00200 b, MC40600 c, DYNAMICS..MC40300 D, DYNAMICS..MC40200 E,    (select ExchangeRateTrxDate =  case when @I_sTransactionType = 1 then TRXDATE  else RVRSNGDT  end from GL10000   where BCHSOURC=@I_cBatchSource and BACHNUMB=@I_cBatchNumber and JRNENTRY=@I_iJournalEntry) F,  (select distinct PERDENDT   from SY40100 a, GL10000   where BCHSOURC=@I_cBatchSource and BACHNUMB=@I_cBatchNumber and JRNENTRY=@I_iJournalEntry and   TRXDATE <= a.PERDENDT and TRXDATE >= a.PERIODDT and   a.SERIES=2) G   where a.OPENYEAR =  @I_sClosingYear and   a.JRNENTRY = @I_iJournalEntry and   a.Ledger_ID = @I_nLedgerID and  a.ACTINDX = @iAccountIndex and  a.TRXDATE = @I_dClosingDate and  a.ACTINDX = b.ACTINDX and b.CURNCYID = '' and b.CurrencyTranslationType <> 2 and  ((D.CURNCYID = c.CURNCYID and D.EXGTBLID = c.AverageExchangeTableID and b.CurrencyTranslationType=1) or  (D.CURNCYID = c.CURNCYID and D.EXGTBLID = c.HistoricalExchgTableID and b.CurrencyTranslationType=3)) and  D.CURNCYID = E.CURNCYID  and (select count(TranslationCurrencyID) from GL20001 where  TranslationCurrencyID=c.CURNCYID  and  OPENYEAR=a.OPENYEAR and  ACTINDX=a.ACTINDX and  Ledger_ID=a.Ledger_ID and   CURNCYID=a.CURNCYID and  JRNENTRY=a.JRNENTRY and  TRXDATE=a.TRXDATE and  SEQNUMBR=a.SEQNUMBR)=0  end  else  Begin  select @REAcctType = CurrencyTranslationType from MC00200 where ACTINDX = @iAccountIndex and CURNCYID = ''    insert into GL20001   (TranslationCurrencyID,  OPENYEAR,  JRNENTRY,  SOURCDOC,  REFRENCE,  TRXDATE,  TRXSORCE,  ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  CURNCYID,  Original_Exchange_Rate,  ORGNTSRC,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  TranslationCreditAmount,  TranslationDebitAmount,  CURRNIDX,  DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  EXCHDATE,  TIME1,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  Identity_Column)   select distinct  c.CURNCYID,  OPENYEAR,  JRNENTRY,  SOURCDOC,  REFRENCE,  a.TRXDATE,  TRXSORCE,  a.ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  a.CURNCYID,  a.XCHGRATE,  ORGNTSRC,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  case CRDTAMNT  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmount(D.RTCLCMTD, 3,   case b.CurrencyTranslationType  when 1 then  dbo.mcFuncGetExchangeRate((SELECT CASE AVGCLMD WHEN 1 THEN G.PERDENDT ELSE (DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE)))END AS A FROM MC40000),  c.AverageExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  when 2 then  dbo.mcFuncGetExchangeRate(a.TRXDATE, c.CurrentExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)   when 3 then  dbo.mcFuncGetExchangeRate(F.ExchangeRateTrxDate, c.HistoricalExchgTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  end,  dbo.mcFuncGetDenExchRate(c.CURNCYID,D.RTCLCMTD),  dbo.mcFuncGetMCTrxState(c.CURNCYID),  (E.[DECPLCUR]-1),   CRDTAMNT)  end as TranslationCreditAmount,  case DEBITAMT  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmount(D.RTCLCMTD, 3,   case b.CurrencyTranslationType  when 1 then  dbo.mcFuncGetExchangeRate((SELECT CASE AVGCLMD WHEN 1 THEN G.PERDENDT ELSE (DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE))) END AS A FROM MC40000),   c.AverageExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  when 2 then  dbo.mcFuncGetExchangeRate(a.TRXDATE, c.CurrentExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)   when 3 then  dbo.mcFuncGetExchangeRate(F.ExchangeRateTrxDate, c.HistoricalExchgTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  end,  dbo.mcFuncGetDenExchRate(c.CURNCYID,D.RTCLCMTD),  dbo.mcFuncGetMCTrxState(c.CURNCYID),  (E.[DECPLCUR]-1),   DEBITAMT)  end as TranslationDebitAmount,  E.CURRNIDX,  (E.[DECPLCUR]-1) as DECPLCUR,  RATETPID,  EXGTBLID=  case @REAcctType  when 1 then c.AverageExchangeTableID  when 2 then c.CurrentExchangeTableID  when 3 then c.HistoricalExchgTableID  end,  case b.CurrencyTranslationType  when 1  then   dbo.mcFuncGetExchangeRate((SELECT CASE AVGCLMD WHEN 1 THEN G.PERDENDT ELSE(DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE)))END AS A FROM MC40000),   c.AverageExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  when 2  then   dbo.mcFuncGetExchangeRate(a.TRXDATE, c.CurrentExchangeTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)   when 3  then   dbo.mcFuncGetExchangeRate(F.ExchangeRateTrxDate, c.HistoricalExchgTableID,   D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On, dbo.mcFuncGetMCTrxState(c.CURNCYID),  b.CurrencyTranslationType)  end as TranslationExchangeRate,  EXCHDATE,  TIME1,  D.RTCLCMTD,  dbo.mcFuncGetDenExchRate(c.CURNCYID,D.RTCLCMTD) as DENXRATE,  dbo.mcFuncGetMCTrxState(c.CURNCYID) as MCTRXSTT,  @REAcctType,   a.DEX_ROW_ID  from GL20000 a, MC00200 b, MC40600 c, DYNAMICS..MC40300 D, DYNAMICS..MC40200 E,    (select ExchangeRateTrxDate =  case when @I_sTransactionType = 1 then TRXDATE  else RVRSNGDT  end from GL10000   where BCHSOURC=@I_cBatchSource and BACHNUMB=@I_cBatchNumber and JRNENTRY=@I_iJournalEntry) F,  (select distinct PERDENDT   from SY40100 a, GL10000   where BCHSOURC=@I_cBatchSource and BACHNUMB=@I_cBatchNumber and JRNENTRY=@I_iJournalEntry and   TRXDATE <= a.PERDENDT and TRXDATE >= a.PERIODDT and   a.SERIES=2) G   where a.OPENYEAR =  @I_sClosingYear and   a.JRNENTRY = @I_iJournalEntry and   a.Ledger_ID = @I_nLedgerID and  a.ACTINDX = @iAccountIndex and   a.TRXDATE = @I_dClosingDate and  b.CURNCYID = '' and   ((b.ACTINDX = @I_iAccountIndex and b.CURNCYID = '' and D.CURNCYID = c.CURNCYID and D.EXGTBLID = c.AverageExchangeTableID and b.CurrencyTranslationType=1) or  (b.ACTINDX = @I_iAccountIndex and b.CURNCYID = '' and D.CURNCYID = c.CURNCYID and D.EXGTBLID = c.CurrentExchangeTableID and b.CurrencyTranslationType=2) or  (b.ACTINDX = @I_iAccountIndex and b.CURNCYID = '' and D.CURNCYID = c.CURNCYID and D.EXGTBLID = c.HistoricalExchgTableID and b.CurrencyTranslationType=3)) and  D.CURNCYID = E.CURNCYID  and (select count(TranslationCurrencyID) from GL20001 where  TranslationCurrencyID=c.CURNCYID  and  OPENYEAR=a.OPENYEAR and  ACTINDX=a.ACTINDX and  Ledger_ID=a.Ledger_ID and   CURNCYID=a.CURNCYID and  JRNENTRY=a.JRNENTRY and  TRXDATE=a.TRXDATE and  SEQNUMBR=a.SEQNUMBR )=0  end  end    if @I_tPrinting = @TRUE  begin  exec @iStatus = glpUpdateAllocationRegister  @I_sTransactionType,  @I_iJournalEntry,  @I_cBatchSource,  @I_cBatchNumber,  @I_cUserID,  @I_tRealTimeQuick,  @iAccountIndex,   @I_sAccountType,  @I_mDebit,   @I_mCredit,   @I_dClosingDate,  @I_mSequenceLine,   @I_cDescription,   @I_tOffsetAccount,  @TRUE,                    @I_tReversing,  @IO_bRetainEarnMessages,  @I_cFuncCurrencyID,  @I_sFuncCurrencyIndex,  @IO_bRetainEarnMessages2,  @I_mOrigDebit,  @I_mOrigCredit,  @I_cOrigCurrencyID,  @I_sOrigCurrencyIndex,  @I_cIntercompanyID,  @I_tICTransaction,  @I_cOriginatingDocNumber,  @I_cOriginatingControlNumber,  @I_cOriginatingMasterID,  @I_cOriginatingMasterName,  @I_sOriginatingTrxType,  @I_sMCTrxState,  @I_mExchangeRate,  @I_nDenomExchangeRate,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   end  end   if @iStatus <> 0 or @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glpCloseHistory] TO [DYNGRP]
GO
