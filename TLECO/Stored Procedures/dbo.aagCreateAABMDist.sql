SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create  procedure [dbo].[aagCreateAABMDist]   @CB_Trans_Type char(1),  @ORDOCNUM char(21),   @SEQNUMBR int,  @CB_Type smallint,  @SERIES smallint,  @DOCTYPE int,  @DOCNUMBR char(21),  @ACTINDX int,  @DISTTYPE smallint,  @VENDORID char(15),  @CUSTNMBR char(15),  @DEBITAMT numeric(19,5),  @CRDTAMNT numeric(19,5),  @ORDBTAMT numeric(19,5),  @ORCRDAMT numeric(19,5),  @CHEKBKID char(15),  @CURNCYID char(15),  @CURRNIDX smallint,  @RATETPID char(15),  @EXGTBLID char(15),  @XCHGRATE numeric(19,5),  @EXCHDATE datetime,  @TIME1 datetime,  @RTCLCMTD smallint,  @DENXRATE numeric(19,5),  @MCTRXSTT int,  @RCDOCNUM char(21)  as begin  set nocount on  declare @USERID char(15),  @CMPANYID int,  @SQLSESID smallint,  @INTERID char(5),  @create tinyint,  @WinOpen integer ,  @AcctLinked integer ,  @DistCnt integer ,  @GLDOCNUMBR char(21),  @GDOCNUMBR char(21),  @aaCompanyStatus smallint,  @SQLCmd nvarchar(1000),  @Parameter nvarchar(1000),  @RetCode int,  @Cnt int,  @aaSubLedgerHdrID int,  @error int  select  @CMPANYID  = 0,  @SQLSESID  = 0,  @aaSubLedgerHdrID = 0,   @Cnt   = 0,  @create   = 1,  @WinOpen  = 0,  @AcctLinked  = 0,  @DistCnt  = 0,  @aaCompanyStatus = 0,  @RetCode  = 0  Select @USERID = SYSTEM_USER  if @CB_Trans_Type = 'T'   begin   if exists (select JRNENTRY from GL10001 WHERE ORDOCNUM = @ORDOCNUM and JRNENTRY IN (  select JRNENTRY from GL10000 WHERE SOURCDOC='CBTRF'))  select @DOCNUMBR = JRNENTRY from GL10001 WHERE ORDOCNUM = @ORDOCNUM and JRNENTRY IN (  select JRNENTRY from GL10000 WHERE SOURCDOC='CBTRF')  else  set @DOCNUMBR = ''   end  select  @CMPANYID = DYNAMICS..SY01500.CMPANYID ,  @INTERID = DYNAMICS..SY01500.INTERID ,  @SQLSESID = DYNAMICS..ACTIVITY.SQLSESID  from DYNAMICS..SY01500 inner join  DYNAMICS..ACTIVITY on DYNAMICS..SY01500.CMPNYNAM = DYNAMICS..ACTIVITY.CMPNYNAM  where DYNAMICS..ACTIVITY.USERID = @USERID and DYNAMICS..SY01500.INTERID = DB_NAME()   select @aaCompanyStatus = DYNAMICS..AAG00104.aaCompanyStatus from DYNAMICS..AAG00104  where DYNAMICS..AAG00104.CMPANYID = @CMPANYID  if @aaCompanyStatus <> 4  return   if @CB_Trans_Type is null  return    if len(ltrim(rtrim(@DOCNUMBR))) <> 0  and @SERIES <> 0  begin   if @CB_Trans_Type = 'T'   begin  select @Cnt = count(*)  from AAG20000  where SERIES = @SERIES and DOCTYPE = @DOCTYPE and  DOCNUMBR = @DOCNUMBR  end  else  begin  select @Cnt = count(*)  from AAG20000  where SERIES = @SERIES and DOCTYPE = @DOCTYPE and  DOCNUMBR = @DOCNUMBR   end   if @Cnt = 0  begin  select @create = 0   exec @error = aagInitialiseAABMHdr  @CB_Trans_Type,  @ORDOCNUM,  @CHEKBKID ,  @SERIES,  @CMPANYID,  @aaSubLedgerHdrID output,  @create ,  @AcctLinked,  @WinOpen,   @DistCnt   update AAG20000 set SERIES = @SERIES, DOCTYPE = @DOCTYPE,  DOCNUMBR = @DOCNUMBR , Master_ID = space(0)  where aaSubLedgerHdrID = @aaSubLedgerHdrID  return   end  else  return   end  if  @SERIES = 0   begin   if @CB_Trans_Type = 'T'   begin   select @SQLCmd = 'declare  a cursor for select JRNENTRY from GL10001   WHERE ORDOCNUM in (select ORDOCNUM from CB100000 where   ORDOCNUM = ''' + @ORDOCNUM + ''' and CB_Trans_Type = ''' + @CB_Trans_Type + ''' and SEQNUMBR = 16384)'   exec @RetCode = sp_executesql @SQLCmd  open a  fetch next  from a into @GLDOCNUMBR  close a  deallocate a  end  else  begin   select @SQLCmd= 'declare  a cursor for select DOCNUMBR  from CB100000  where CB_Trans_Type = ''' + @CB_Trans_Type +  ''' and  ORDOCNUM = ''' + @ORDOCNUM  + ''' and CHEKBKID = ''' + @CHEKBKID + ''' and SEQNUMBR = 16384'  exec @RetCode = sp_executesql @SQLCmd  open a  fetch next  from a into @GLDOCNUMBR  close a  deallocate a  end  if len(ltrim(rtrim(@GLDOCNUMBR))) <> 0  return   end   if (len(ltrim(rtrim(@RCDOCNUM))) <> 0) and (@ORDOCNUM <> @RCDOCNUM) and (@SEQNUMBR = 16384)  begin   exec @error = aagCreateDistforAABMRecurringBatch  @CB_Trans_Type,  @SERIES,  @RCDOCNUM,  @ORDOCNUM,  @CHEKBKID,  @CMPANYID,  @aaSubLedgerHdrID output  return   end   else if (len(ltrim(rtrim(@RCDOCNUM))) <> 0) and (@ORDOCNUM <> @RCDOCNUM) and (@SEQNUMBR > 16384)  begin  return  end  select @create = 1  exec @error = aagInitialiseAABMHdr  @CB_Trans_Type,  @ORDOCNUM,  @CHEKBKID ,  @SERIES,  @CMPANYID,  @aaSubLedgerHdrID output,  @create ,  @AcctLinked,  @WinOpen,   @DistCnt    exec  @error =  aagUpdateAABMDist  @CB_Trans_Type,  @ORDOCNUM,   @CHEKBKID,   @SEQNUMBR,   @SERIES,  @INTERID,  @CMPANYID,  @SQLSESID,  @VENDORID,  @CUSTNMBR,  @aaSubLedgerHdrID    set nocount off end    
GO
GRANT EXECUTE ON  [dbo].[aagCreateAABMDist] TO [DYNGRP]
GO
