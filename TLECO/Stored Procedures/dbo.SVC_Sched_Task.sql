SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_Sched_Task] (  @When_to_run smalldatetime,  @Task_name varchar(100),  @Command nvarchar(3000),  @Comment varchar(255),  @AgentIsRunning smallint,  @NewJobID varchar(34) OUTPUT ) as declare @SVC_Task_Start_Date int,  @SVC_Task_Start_Time int,  @SVC_Task_End_Date int,  @SVC_Task_End_Time int,  @DB varchar(31),  @DEX_ROW_ID integer,  @msg varchar(255),  @category_class INT declare @username    sysname  DECLARE @JobID BINARY(16)  DECLARE @ReturnCode INT  declare @Error int   SELECT @ReturnCode = 0  SELECT @NewJobID = ''  select @username = SUSER_SNAME()  select @When_to_run = isnull(@When_to_run, getdate())  select @DB = DB_NAME() select @SVC_Task_Start_Date = convert(int,convert(char(10),@When_to_run,112)) select @SVC_Task_Start_Time = convert(int,stuff(stuff(convert(char(10),@When_to_run,108),6,1,null),3,1,null)) select @SVC_Task_End_Date = @SVC_Task_Start_Date select @SVC_Task_End_Time = @SVC_Task_Start_Time + 2  set @Error = 0  if not exists(select * from msdb.dbo.syscategories where name = 'SMS Escalation')  begin  begin try  exec @ReturnCode = msdb.dbo.sp_add_category   @class   = 'JOB',  @type    = 'LOCAL',  @name    = 'SMS Escalation'  set @Error = @@ERROR  if @Error <> 0  begin  goto LogError  end  end try  begin catch  set @Error = 1  end catch; end  if @Error <> 0  return (1)  begin try  exec @ReturnCode = msdb.dbo.sp_add_job   @job_id = @JobID OUTPUT ,   @job_name = @Task_name,   @owner_login_name =   @username,     @description = @Comment,   @category_name = N'SMS Escalation',  @enabled = 1,   @notify_level_email = 0,   @notify_level_page = 0,   @notify_level_netsend = 0,   @notify_level_eventlog = 1,   @delete_level= 3  set @Error = @@ERROR  if @Error <> 0  begin  goto LogError  end end try begin catch  set @Error = 1 end catch;  if @Error <> 0  return (1)  if (@JobID is null or @JobID = convert(binary, ''))  return (1)  begin try  exec msdb.dbo.sp_add_jobstep  @job_name = @Task_name,  @step_name = N'Step 1',  @subsystem = N'TSQL',  @command = @Command,   @retry_attempts = 1,  @retry_interval = 1  set @Error = @@ERROR  if @Error <> 0  begin  goto LogError  end end try begin catch  set @Error = 1 end catch;  if @Error <> 0  return (1)  exec @ReturnCode = dbo.SVC_update_job   @job_id = @JobID,   @start_step_id = 1,  @AgentIsRunning = @AgentIsRunning  set @Error = @@ERROR if @Error <> 0 begin  goto LogError end  begin try  begin  exec @ReturnCode = msdb.dbo.sp_add_jobschedule   @job_id = @JobID,   @name = N'SMS Escalation Schedule',   @enabled = 1,   @freq_type = 1,   @active_start_date = @SVC_Task_Start_Date,   @active_start_time = @SVC_Task_Start_Time,   @active_end_date = @SVC_Task_End_Date,   @active_end_time = @SVC_Task_End_Time   set @Error = @@ERROR  if @Error <> 0  begin  goto LogError  end  end  end try begin catch  set @Error = 1 end catch;  if @Error <> 0  return (1)  exec @ReturnCode = SVC_add_jobserver   @job_id = @JobID,   @server_name = N'(local)',  @AgentIsRunning = @AgentIsRunning set @Error = @@ERROR if @Error <> 0 begin  goto LogError end  if @ReturnCode <> 0 begin  exec @ReturnCode = msdb.dbo.sp_convert_jobid_to_char   @JobID,  @NewJobID OUTPUT    set @Error = @@ERROR  if @Error <> 0  begin  goto LogError  end  return end  exec @ReturnCode = msdb.dbo.sp_convert_jobid_to_char   @JobID,  @NewJobID OUTPUT   set @Error = @@ERROR if @Error <> 0 begin  goto LogError end  if dateadd(ss, 30, getdate()) >= @When_to_run  begin  begin try  exec msdb.dbo.sp_start_job @Task_name  set @Error = @@ERROR  if @Error <> 0  begin  goto LogError  end  end try  begin catch  set @Error = 0  goto LogError  end catch; end  if @Error <> 0  return (1) return  LogError: return    
GO
GRANT EXECUTE ON  [dbo].[SVC_Sched_Task] TO [DYNGRP]
GO
