SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[popSelectPODocInquiry]  @I_vTableName varchar(27) = NULL,  @I_vSVendorID varchar(17) = NULL,  @I_vEVendorID varchar(17) = NULL,  @I_vSPONumber varchar(19) = NULL,  @I_vEPONumber varchar(19) = NULL,  @I_vSReceiptNum varchar(19) = NULL,  @I_vEReceiptNum varchar(19) = NULL,  @I_vSPODate datetime = NULL,  @I_vEPODate datetime = NULL,  @I_vHoldsOnly int  = NULL,  @I_vSortBy int  = NULL,  @I_vShowTypes int  = NULL,  @I_vShowDocs int  = NULL,  @I_vFileType int  = NULL,  @I_sFunctionalDecimals smallint = NULL,  @I_sbmEnabled int  = NULL,  @O_iErrorState          int             = NULL output  as  declare @iStatus int,  @iError int,  @cDBName char(5),  @sPOP_ORIGIN_OPEN_PO char(10),  @sPOP_ORIGIN_HIST_PO char(10),  @sPOP_ORIGIN_Hist_Rcpt char(10),  @sPOP_ORIGIN_Work_Rcpt char(10),  @vHoldLegendGetMsg varchar(4),  @vDropShipGetMsg varchar(42),  @vStandardGetMsg varchar(42),  @vVoidDropShipGetMsg varchar(42),  @vVoidStandardGetMsg varchar(42),  @vShipmentGetMsg varchar(42),  @vInvoiceGetMsg varchar(42),  @vShipIvcGetMsg varchar(42),  @vVoidShipmentGetMsg varchar(42),  @vVoidInvoiceGetMsg varchar(42),  @vVoidShipIvcGetMsg varchar(42),   @vReturnGetMsg varchar(42),  @vReturnCreditGetMsg varchar(42),  @vInventoryReturnGetMsg varchar(42),  @vInventoryReturnCreditGetMsg varchar(42),  @vVoidReturnGetMsg varchar(42),  @vVoidReturnCreditGetMsg varchar(42),  @vVoidInventoryReturnGetMsg varchar(42),  @vVoidInventoryReturnCreditGetMsg varchar(42),  @vInTransitGetMsg varchar(42),  @vVoidInTransitGetMsg varchar(42),   @vBlanketGetMsg varchar(42),  @vBlanketDropShipGetMsg varchar(42),  @vVoidBlanketGetMsg varchar(42),  @vVoidBlanketDropShipGetMsg varchar(42),  @sPOP_DOCTYPE_DROPSHIP smallint,  @sPOP_RECEIPT_POSTED smallint,  @sPOP_RECEIPT_UNPOSTED smallint,  @sPOP_SortBy_PO   smallint,  @sPOP_SortBy_Receipt smallint,  @sPOP_SortBy_Date smallint,  @sPOP_ShowDocs_Both smallint,  @sPOP_ShowDocs_Open smallint,  @sPOP_ShowDocs_Hist smallint,  @sPOP_ShowDocs_Hold smallint,  @sMULTIPLY smallint,  @sDIVIDE smallint,  @sMCNOEURO smallint,  @sMCDENOM_TO_NONDENOM smallint,  @SBM smallint  select @sPOP_SortBy_PO = 21,  @sPOP_SortBy_Receipt = 560,  @sPOP_SortBy_Date = 20,  @sPOP_ShowDocs_Both = 3,  @sPOP_ShowDocs_Open = 2,  @sPOP_ShowDocs_Hist = 570,  @sPOP_ShowDocs_Hold = 5,  @sPOP_RECEIPT_POSTED = 1,  @sPOP_RECEIPT_UNPOSTED = 0,  @sMULTIPLY = 0,  @sDIVIDE = 1,  @sMCNOEURO = 0,  @sMCDENOM_TO_NONDENOM = 4,  @iStatus = 0,  @cDBName = db_name(),  @SBM = @I_sbmEnabled  if @SBM = 0  begin  select @sPOP_ORIGIN_OPEN_PO = 'Open PO',  @sPOP_ORIGIN_HIST_PO = 'Hist. PO',  @sPOP_ORIGIN_Hist_Rcpt = 'Hist. Rcpt',  @sPOP_ORIGIN_Work_Rcpt = 'Work Rcpt'  end else  begin  select @sPOP_ORIGIN_OPEN_PO = 'Saved PO',  @sPOP_ORIGIN_HIST_PO = 'Hist. PO',  @sPOP_ORIGIN_Hist_Rcpt = 'Hist. Rcpt',  @sPOP_ORIGIN_Work_Rcpt = 'Saved Rcpt'  end  select @O_iErrorState = 0  if( @I_vTableName is NULL or  @I_vSVendorID is NULL or  @I_vEVendorID is NULL or  @I_vSPONumber is NULL or  @I_vEPONumber is NULL or  @I_vSReceiptNum is NULL or  @I_vEReceiptNum is NULL or  @I_vSPODate is NULL or  @I_vEPODate is NULL or  @I_vHoldsOnly is NULL or  @I_vSortBy is NULL or  @I_vShowTypes is NULL or  @I_vShowDocs is NULL or  @I_vFileType is NULL or  @I_sFunctionalDecimals is NULL or  @I_sbmEnabled is NULL)  begin  select          @O_iErrorState = 21022  return end  exec @iStatus = DYNAMICS..smGetMsgString  1719,   @cDBName,  @vHoldLegendGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  if (@SBM = 1) begin  exec @iStatus = DYNAMICS..smGetMsgString  6539,   @cDBName,  @vDropShipGetMsg output,  @O_iErrorState output end else  exec @iStatus = DYNAMICS..smGetMsgString  18649,   @cDBName,  @vDropShipGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  if (@SBM = 1) begin  exec @iStatus = DYNAMICS..smGetMsgString  17204,   @cDBName,  @vStandardGetMsg output,  @O_iErrorState output end else  exec @iStatus = DYNAMICS..smGetMsgString  18304,   @cDBName,  @vStandardGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  if (@SBM = 1) begin  exec @iStatus = DYNAMICS..smGetMsgString  6551,   @cDBName,  @vVoidDropShipGetMsg output,  @O_iErrorState output end else  exec @iStatus = DYNAMICS..smGetMsgString  18635,   @cDBName,  @vVoidDropShipGetMsg output,  @O_iErrorState output select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  if (@SBM = 1) begin  exec @iStatus = DYNAMICS..smGetMsgString  18104,   @cDBName,  @vVoidStandardGetMsg output,  @O_iErrorState output end else  exec @iStatus = DYNAMICS..smGetMsgString  18650,   @cDBName,  @vVoidStandardGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  6944,   @cDBName,  @vBlanketGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  6945,   @cDBName,  @vBlanketDropShipGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  3806,   @cDBName,  @vVoidBlanketGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  3807,   @cDBName,  @vVoidBlanketDropShipGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  18102,   @cDBName,  @vShipmentGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  155,   @cDBName,  @vInvoiceGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  3005,   @cDBName,  @vShipIvcGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  18103,   @cDBName,  @vVoidShipmentGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  18352,   @cDBName,  @vVoidInvoiceGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0   select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  if (@SBM = 1) begin  exec @iStatus = DYNAMICS..smGetMsgString  5857,   @cDBName,  @vVoidShipIvcGetMsg output,  @O_iErrorState output end else  exec @iStatus = DYNAMICS..smGetMsgString  18101,   @cDBName,  @vVoidShipIvcGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  5004,   @cDBName,  @vReturnGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  3089,   @cDBName,  @vReturnCreditGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  3091,   @cDBName,  @vInventoryReturnGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  3092,   @cDBName,  @vInventoryReturnCreditGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  7039,   @cDBName,  @vVoidReturnGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  7040,   @cDBName,  @vVoidReturnCreditGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  7041,   @cDBName,  @vVoidInventoryReturnGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  7042,   @cDBName,  @vVoidInventoryReturnCreditGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  10553,   @cDBName,  @vInTransitGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString  10554,   @cDBName,  @vVoidInTransitGetMsg output,  @O_iErrorState output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_iErrorState <> 0) )  return (@iStatus)  CREATE TABLE #PODetailed  (  PONUMBER char(17) NOT NULL,  POPRCTNM char(17) NOT NULL,  DOCTYNAM char(20) NOT NULL,  SUBTOTAL numeric(19,5) NOT NULL,   VENDORID char(15) NOT NULL,  VENDNAME char(64) NOT NULL,  POP_Origin char(10) NOT NULL,  TOTAL numeric(19,5) NULL,   DATE1 datetime NOT NULL,  PODATE datetime NOT NULL,  Historical_PO bit NOT NULL,  CURNCYID char(15) NOT NULL,  CURRNIDX int NOT NULL,  ORSUBTOT numeric(19,5) NOT NULL,   ORIGTOTL numeric(19,5) NULL,   HOLDLEGEND char(1) NOT NULL,  DEX_ROW_ID int identity NOT NULL  )  CREATE INDEX AK2#PODetailed ON #PODetailed (PONUMBER, POPRCTNM)   CREATE TABLE #PONumber  (  PONUMBER char(17) NOT NULL,  POPRCTNM char(17) NOT NULL,  DEX_ROW_ID int identity NOT NULL  )  CREATE INDEX AK2#PONumber ON #PONumber (PONUMBER, POPRCTNM)  if (@I_vSortBy = @sPOP_SortBy_PO) or (@I_vSortBy = @sPOP_SortBy_Date) begin  if @I_vFileType = 1   begin  insert #PODetailed (PONUMBER,POPRCTNM,  DOCTYNAM,  SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,  POP_Origin)  select PONUMBER, '',  case when POTYPE = 2 then @vDropShipGetMsg when POTYPE = 3 then @vBlanketGetMsg  when POTYPE = 4 then @vBlanketDropShipGetMsg else  @vStandardGetMsg end,  SUBTOTAL,VENDORID,VENDNAME,  case when XCHGRATE = 0.0 then (ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT)  when (DENXRATE = 0.0 or MCTRXSTT = @sMCNOEURO) and RATECALC = @sMULTIPLY then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) * XCHGRATE, @I_sFunctionalDecimals)  when (DENXRATE = 0.0 or MCTRXSTT = @sMCNOEURO) and RATECALC = @sDIVIDE then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) / XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT = @sMCDENOM_TO_NONDENOM and RATECALC = @sMULTIPLY then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) / DENXRATE * XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT = @sMCDENOM_TO_NONDENOM and RATECALC = @sDIVIDE then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) / DENXRATE / XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT <> @sMCDENOM_TO_NONDENOM and RATECALC = @sMULTIPLY then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) * DENXRATE * XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT <> @sMCDENOM_TO_NONDENOM and RATECALC = @sDIVIDE then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) * DENXRATE / XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  DOCDATE,DOCDATE,0,CURNCYID,CURRNIDX,ORSUBTOT,  (ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT),  case when HOLD = 1 then @vHoldLegendGetMsg else '' end,  @sPOP_ORIGIN_OPEN_PO  from POP10100  where VENDORID <> '' and VENDORID between @I_vSVendorID and @I_vEVendorID and  DOCDATE between convert(char(12),@I_vSPODate,110) and convert(char(12),@I_vEPODate,110) and  PONUMBER between @I_vSPONumber and @I_vEPONumber   select @iError = @@error  if @iError <> 0  return (@iError)  end  else   begin  insert #PODetailed (PONUMBER,POPRCTNM,  DOCTYNAM,  SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,POP_Origin)  select PONUMBER, '',  case when POTYPE = 2 and POSTATUS = 1 then @vVoidDropShipGetMsg  when POTYPE = 2 then @vDropShipGetMsg  when POTYPE = 3 and POSTATUS = 1 then @vVoidBlanketGetMsg  when POTYPE = 3 then @vBlanketGetMsg  when POTYPE = 4 and POSTATUS = 1 then @vVoidBlanketDropShipGetMsg  when POTYPE = 4 then @vBlanketDropShipGetMsg  when POSTATUS = 1 then @vVoidStandardGetMsg  else @vStandardGetMsg end,  SUBTOTAL,VENDORID,VENDNAME,  case when XCHGRATE = 0.0 then (ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT)  when (DENXRATE = 0.0 or MCTRXSTT = @sMCNOEURO) and RATECALC = @sMULTIPLY then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) * XCHGRATE, @I_sFunctionalDecimals)  when (DENXRATE = 0.0 or MCTRXSTT = @sMCNOEURO) and RATECALC = @sDIVIDE then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) / XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT = @sMCDENOM_TO_NONDENOM and RATECALC = @sMULTIPLY then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) / DENXRATE * XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT = @sMCDENOM_TO_NONDENOM and RATECALC = @sDIVIDE then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) / DENXRATE / XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT <> @sMCDENOM_TO_NONDENOM and RATECALC = @sMULTIPLY then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) * DENXRATE * XCHGRATE, @I_sFunctionalDecimals)  when MCTRXSTT <> @sMCDENOM_TO_NONDENOM and RATECALC = @sDIVIDE then  round((ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT) * DENXRATE / XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  DOCDATE,DOCDATE,0,CURNCYID,CURRNIDX,ORSUBTOT,  (ORSUBTOT - ORTDISAM + ORFRTAMT + OMISCAMT + ORTAXAMT),  '', @sPOP_ORIGIN_HIST_PO  from POP30100  where VENDORID between @I_vSVendorID and @I_vEVendorID and  DOCDATE between convert(char(12),@I_vSPODate,110) and convert(char(12),@I_vEPODate,110) and  PONUMBER between @I_vSPONumber and @I_vEPONumber   select @iError = @@error  if @iError <> 0  return (@iError)  end   if (@I_vShowDocs = 1)   begin   insert #PONumber (PONUMBER,POPRCTNM)  select a.PONUMBER,a.POPRCTNM  from POP10500 a  join #PODetailed b on a.PONUMBER = b.PONUMBER  where a.POPTYPE = 1 or a.POPTYPE = 2 or a.POPTYPE = 3 or  a.POPTYPE = 4 or a.POPTYPE = 5 or a.POPTYPE = 6 or a.POPTYPE = 7 or a.POPTYPE = 8  group by a.PONUMBER,a.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)   insert #PONumber(PONUMBER,POPRCTNM)  select b.PONUMBER, a.POPIVCNO  from POP10600 a join POP10500 b on a.POPRCTNM = b.POPRCTNM and a.RCPTLNNM = b.RCPTLNNM  join #PODetailed c on c.PONUMBER = b.PONUMBER   where a.LCLINENUMBER <> 0   group by b.PONUMBER, a.POPIVCNO   select @iError = @@error  if @iError <> 0  return (@iError)   insert #PODetailed (PONUMBER,POPRCTNM,SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,  DOCTYNAM,  POP_Origin)  select DISTINCT a.PONUMBER,b.POPRCTNM,b.SUBTOTAL,b.VENDORID,b.VENDNAME,  case when b.XCHGRATE = 0.0 then (b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT)  when (b.DENXRATE = 0.0 or b.MCTRXSTT = @sMCNOEURO) and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.XCHGRATE, @I_sFunctionalDecimals)  when (b.DENXRATE = 0.0 or b.MCTRXSTT = @sMCNOEURO) and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT = @sMCDENOM_TO_NONDENOM and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.DENXRATE * b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT = @sMCDENOM_TO_NONDENOM and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.DENXRATE / b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.DENXRATE * b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.DENXRATE / b.XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  b.receiptdate,c.DOCDATE,0,b.CURNCYID,b.CURRNIDX,b.ORSUBTOT,  b.ORSUBTOT + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT - b.ORTDISAM,  case when c.HOLD = 1 then @vHoldLegendGetMsg else '' end,  case when b.POPTYPE = 1 and b.VOIDSTTS = 0 then @vShipmentGetMsg  when b.POPTYPE = 2 and b.VOIDSTTS = 0 then @vInvoiceGetMsg  when b.POPTYPE = 3 and b.VOIDSTTS = 0 then @vShipIvcGetMsg  when b.POPTYPE = 4 and b.VOIDSTTS = 0 then @vReturnGetMsg  when b.POPTYPE = 5 and b.VOIDSTTS = 0 then @vReturnCreditGetMsg  when b.POPTYPE = 6 and b.VOIDSTTS = 0 then @vInventoryReturnGetMsg  when b.POPTYPE = 7 and b.VOIDSTTS = 0 then @vInventoryReturnCreditGetMsg   when b.POPTYPE = 1 and b.VOIDSTTS = 1 then @vVoidShipmentGetMsg  when b.POPTYPE = 2 and b.VOIDSTTS = 1 then @vVoidInvoiceGetMsg  when b.POPTYPE = 3 and b.VOIDSTTS = 1 then @vVoidShipIvcGetMsg   when b.POPTYPE = 4 and b.VOIDSTTS = 1 then @vVoidReturnGetMsg  when b.POPTYPE = 5 and b.VOIDSTTS = 1 then @vVoidReturnCreditGetMsg  when b.POPTYPE = 6 and b.VOIDSTTS = 1 then @vVoidInventoryReturnGetMsg  when b.POPTYPE = 7 and b.VOIDSTTS = 1 then @vVoidInventoryReturnCreditGetMsg  end,  @sPOP_ORIGIN_Hist_Rcpt  from #PONumber a join POP10100 c on a.PONUMBER = c.PONUMBER   join POP30300 b on a.POPRCTNM = b.POPRCTNM  where a.POPRCTNM = b.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)   insert #PODetailed (PONUMBER,POPRCTNM,SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,  DOCTYNAM,  POP_Origin)  select DISTINCT a.PONUMBER,b.POPRCTNM,b.SUBTOTAL,b.VENDORID,b.VENDNAME,  case when b.XCHGRATE = 0.0 then (b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT)  when (b.DENXRATE = 0.0 or b.MCTRXSTT = @sMCNOEURO) and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.XCHGRATE, @I_sFunctionalDecimals)  when (b.DENXRATE = 0.0 or b.MCTRXSTT = @sMCNOEURO) and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT = @sMCDENOM_TO_NONDENOM and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.DENXRATE * b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT = @sMCDENOM_TO_NONDENOM and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.DENXRATE / b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.DENXRATE * b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.DENXRATE / b.XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  b.receiptdate,c.DOCDATE,0,b.CURNCYID,b.CURRNIDX,b.ORSUBTOT,  b.ORSUBTOT + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT - b.ORTDISAM,  case when c.HOLD = 1 then @vHoldLegendGetMsg else '' end,  case when b.POPTYPE = 1 then @vShipmentGetMsg  when b.POPTYPE = 2 then @vInvoiceGetMsg  when b.POPTYPE = 3 then @vShipIvcGetMsg  when b.POPTYPE = 4 then @vReturnGetMsg  when b.POPTYPE = 5 then @vReturnCreditGetMsg  when b.POPTYPE = 6 then @vInventoryReturnGetMsg  when b.POPTYPE = 7 then @vInventoryReturnCreditGetMsg  end,  @sPOP_ORIGIN_Work_Rcpt  from #PONumber a join POP10100 c on a.PONUMBER = c.PONUMBER   join POP10300 b on a.POPRCTNM = b.POPRCTNM  where a.POPRCTNM = b.POPRCTNM and  b.VENDORID <> '' and b.TRXSORCE = ''   select @iError = @@error  if @iError <> 0  return (@iError)   insert #PODetailed (PONUMBER,POPRCTNM,SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,  DOCTYNAM,  POP_Origin)  select DISTINCT a.PONUMBER,b.POPRCTNM,b.SUBTOTAL,b.VENDORID,b.VENDNAME,  case when b.XCHGRATE = 0.0 then (b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT)  when (b.DENXRATE = 0.0 or b.MCTRXSTT = @sMCNOEURO) and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.XCHGRATE, @I_sFunctionalDecimals)  when (b.DENXRATE = 0.0 or b.MCTRXSTT = @sMCNOEURO) and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT = @sMCDENOM_TO_NONDENOM and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.DENXRATE * b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT = @sMCDENOM_TO_NONDENOM and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) / b.DENXRATE / b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and b.RATECALC = @sMULTIPLY then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.DENXRATE * b.XCHGRATE, @I_sFunctionalDecimals)  when b.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and b.RATECALC = @sDIVIDE then  round((b.ORSUBTOT - b.ORTDISAM + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT) * b.DENXRATE / b.XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  b.receiptdate,c.DOCDATE,0,b.CURNCYID,b.CURRNIDX,b.ORSUBTOT,  b.ORSUBTOT + b.ORFRTAMT + b.ORMISCAMT + b.ORTAXAMT - b.ORTDISAM,'',  case when b.POPTYPE = 1 and b.VOIDSTTS = 0 then @vShipmentGetMsg  when b.POPTYPE = 2 and b.VOIDSTTS = 0 then @vInvoiceGetMsg  when b.POPTYPE = 3 and b.VOIDSTTS = 0 then @vShipIvcGetMsg  when b.POPTYPE = 4 and b.VOIDSTTS = 0 then @vReturnGetMsg  when b.POPTYPE = 5 and b.VOIDSTTS = 0 then @vReturnCreditGetMsg  when b.POPTYPE = 6 and b.VOIDSTTS = 0 then @vInventoryReturnGetMsg  when b.POPTYPE = 7 and b.VOIDSTTS = 0 then @vInventoryReturnCreditGetMsg   when b.POPTYPE = 1 and b.VOIDSTTS = 1 then @vVoidShipmentGetMsg  when b.POPTYPE = 2 and b.VOIDSTTS = 1 then @vVoidInvoiceGetMsg  when b.POPTYPE = 3 and b.VOIDSTTS = 1 then @vVoidShipIvcGetMsg  when b.POPTYPE = 4 and b.VOIDSTTS = 1 then @vVoidReturnGetMsg  when b.POPTYPE = 5 and b.VOIDSTTS = 1 then @vVoidReturnCreditGetMsg  when b.POPTYPE = 6 and b.VOIDSTTS = 1 then @vVoidInventoryReturnGetMsg  when b.POPTYPE = 7 and b.VOIDSTTS = 1 then @vVoidInventoryReturnCreditGetMsg  end,  @sPOP_ORIGIN_Hist_Rcpt  from #PONumber a join POP30100 c on a.PONUMBER = c.PONUMBER   join POP30300 b on a.POPRCTNM = b.POPRCTNM  where a.POPRCTNM = b.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)  end  end else  if (@I_vSortBy = @sPOP_SortBy_Receipt)  begin   if @I_vShowDocs = 1  begin   insert #PONumber(PONUMBER,POPRCTNM)  select a.PONUMBER,a.POPRCTNM  from POP10500 a  where (a.PONUMBER <> '' or a.POLNENUM = 0) and  (a.POPTYPE = 1 or a.POPTYPE = 3 or a.POPTYPE = 4 or a.POPTYPE = 5 or a.POPTYPE = 8 or  a.POPTYPE = 6 or a.POPTYPE = 7 or (a.POPTYPE = 2 and a.PONUMBER <>'')) and  a.VENDORID between @I_vSVendorID and @I_vEVendorID and  a.POPRCTNM between @I_vSReceiptNum and @I_vEReceiptNum   group by a.PONUMBER,a.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)   insert #PONumber(PONUMBER,POPRCTNM)  select b.PONUMBER, a.POPIVCNO  from POP10600 a join POP10500 b on a.POPRCTNM = b.POPRCTNM and a.RCPTLNNM = b.RCPTLNNM  where ( ( a.LCLINENUMBER <> 0 and (b.PONUMBER <> '' or b.POLNENUM = 0 ) ) or  ( a.LCLINENUMBER = 0 and b.PONUMBER = '' and b.POLNENUM = 0 ) ) and   a.POPIVCNO between @I_vSReceiptNum and @I_vEReceiptNum  group by b.PONUMBER, a.POPIVCNO   select @iError = @@error  if @iError <> 0  return (@iError)   insert #PONumber(PONUMBER,POPRCTNM)  select DISTINCT '', a.POPRCTNM  FROM POP10500 a LEFT OUTER JOIN POP10600 b  ON a.POPRCTNM = b.POPIVCNO and a.RCPTLNNM = b.IVCLINNO  WHERE (b.POPIVCNO IS NULL) and a.POPTYPE = 2 and a.PONUMBER = '' and  a.VENDORID between @I_vSVendorID and @I_vEVendorID and  a.POPRCTNM between @I_vSReceiptNum and @I_vEReceiptNum   select @iError = @@error  if @iError <> 0  return (@iError)   end   else   begin  insert #PONumber(PONUMBER,POPRCTNM)  select '',a.POPRCTNM  from POP10500 a  where a.VENDORID between @I_vSVendorID and @I_vEVendorID and  a.POPRCTNM between @I_vSReceiptNum and @I_vEReceiptNum and  (a.POPTYPE = 1 or a.POPTYPE = 2 or a.POPTYPE = 3 or  a.POPTYPE = 4 or a.POPTYPE = 5 or a.POPTYPE = 6 or a.POPTYPE = 7 or a.POPTYPE = 8)  group by a.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)   end   if @I_vFileType = 1  begin  insert #PONumber(PONUMBER,POPRCTNM)  select '', a.POPRCTNM  from POP10300 a  where a.VENDORID <> '' and a.TRXSORCE = '' and  a.VENDORID between @I_vSVendorID and @I_vEVendorID and  a.POPRCTNM between @I_vSReceiptNum and @I_vEReceiptNum and  (a.POPTYPE = 1 or a.POPTYPE = 2 or a.POPTYPE = 3 or  a.POPTYPE = 4 or a.POPTYPE = 5 or a.POPTYPE = 6 or a.POPTYPE = 7 or a.POPTYPE = 8) and  a.POPRCTNM not in (select POPRCTNM from POP10500)  group by a.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)   end   else   begin  insert #PONumber(PONUMBER,POPRCTNM)  select '',a.POPRCTNM  from POP30300 a  where a.VENDORID between @I_vSVendorID and @I_vEVendorID and  a.POPRCTNM between @I_vSReceiptNum and @I_vEReceiptNum and  (a.POPTYPE = 1 or a.POPTYPE = 2 or a.POPTYPE = 3 or  a.POPTYPE = 4 or a.POPTYPE = 5 or a.POPTYPE = 6 or a.POPTYPE = 7 or a.POPTYPE = 8) and  a.POPRCTNM not in (select POPRCTNM from POP10500)  group by a.POPRCTNM   select @iError = @@error  if @iError <> 0  return (@iError)   end   if @I_vFileType = 1  begin  insert #PODetailed (PONUMBER,POPRCTNM,  DOCTYNAM,  SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,  CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,POP_Origin)  select DISTINCT PONUMBER, a.POPRCTNM,  case when POPTYPE = 1 then @vShipmentGetMsg  when a.POPTYPE = 2 then @vInvoiceGetMsg  when a.POPTYPE = 3 then @vShipIvcGetMsg   when a.POPTYPE = 4 then @vReturnGetMsg  when a.POPTYPE = 5 then @vReturnCreditGetMsg  when a.POPTYPE = 6 then @vInventoryReturnGetMsg  when a.POPTYPE = 7 then @vInventoryReturnCreditGetMsg  when a.POPTYPE = 8 then @vInTransitGetMsg  end,  a.SUBTOTAL,a.VENDORID,a.VENDNAME,  case when a.XCHGRATE = 0.0 then (a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT)  when (a.DENXRATE = 0.0 or a.MCTRXSTT = @sMCNOEURO) and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.XCHGRATE, @I_sFunctionalDecimals)  when (a.DENXRATE = 0.0 or a.MCTRXSTT = @sMCNOEURO) and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT = @sMCDENOM_TO_NONDENOM and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.DENXRATE * a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT = @sMCDENOM_TO_NONDENOM and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.DENXRATE / a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.DENXRATE * a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.DENXRATE / a.XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  a.receiptdate,a.receiptdate,0,a.CURNCYID,a.CURRNIDX,a.ORSUBTOT,  (a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT),  '',@sPOP_ORIGIN_Work_Rcpt  from POP10300 a join #PONumber b on a.POPRCTNM = b.POPRCTNM  where a.VENDORID <> '' and a.TRXSORCE = '' and  a.VENDORID between @I_vSVendorID and @I_vEVendorID    select @iError = @@error  if @iError <> 0  return (@iError)   insert #PODetailed (PONUMBER,POPRCTNM,  DOCTYNAM,  SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,  CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,POP_Origin)  select DISTINCT PONUMBER, a.POPRCTNM,  @vInTransitGetMsg,  a.SUBTOTAL,a.VENDORID,a.VENDNAME,  case when a.XCHGRATE = 0.0 then (a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT)  when (a.DENXRATE = 0.0 or a.MCTRXSTT = @sMCNOEURO) and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.XCHGRATE, @I_sFunctionalDecimals)  when (a.DENXRATE = 0.0 or a.MCTRXSTT = @sMCNOEURO) and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT = @sMCDENOM_TO_NONDENOM and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.DENXRATE * a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT = @sMCDENOM_TO_NONDENOM and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.DENXRATE / a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.DENXRATE * a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.DENXRATE / a.XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  a.receiptdate,a.receiptdate,0,a.CURNCYID,a.CURRNIDX,a.ORSUBTOT,  (a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT),  '',@sPOP_ORIGIN_Work_Rcpt  from POP10300 a join #PONumber b on a.POPRCTNM = b.POPRCTNM  where a.POPTYPE = 8 and a.VENDORID = ''   select @iError = @@error  if @iError <> 0  return (@iError)  end   else   begin  insert #PODetailed (PONUMBER,POPRCTNM,  DOCTYNAM,  SUBTOTAL,VENDORID,VENDNAME,  TOTAL,  DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,  ORIGTOTL,  HOLDLEGEND,POP_Origin)  select DISTINCT PONUMBER, a.POPRCTNM,  case when a.POPTYPE = 1 and a.VOIDSTTS = 0 then @vShipmentGetMsg  when a.POPTYPE = 2 and a.VOIDSTTS = 0 then @vInvoiceGetMsg  when a.POPTYPE = 3 and a.VOIDSTTS = 0 then @vShipIvcGetMsg  when a.POPTYPE = 4 and a.VOIDSTTS = 0 then @vReturnGetMsg  when a.POPTYPE = 5 and a.VOIDSTTS = 0 then @vReturnCreditGetMsg  when a.POPTYPE = 6 and a.VOIDSTTS = 0 then @vInventoryReturnGetMsg  when a.POPTYPE = 7 and a.VOIDSTTS = 0 then @vInventoryReturnCreditGetMsg  when a.POPTYPE = 8 and a.VOIDSTTS = 0 then @vInTransitGetMsg   when a.POPTYPE = 1 and a.VOIDSTTS = 1 then @vVoidShipmentGetMsg  when a.POPTYPE = 2 and a.VOIDSTTS = 1 then @vVoidInvoiceGetMsg  when a.POPTYPE = 3 and a.VOIDSTTS = 1 then @vVoidShipIvcGetMsg  when a.POPTYPE = 4 and a.VOIDSTTS = 1 then @vVoidReturnGetMsg  when a.POPTYPE = 5 and a.VOIDSTTS = 1 then @vVoidReturnCreditGetMsg  when a.POPTYPE = 6 and a.VOIDSTTS = 1 then @vVoidInventoryReturnGetMsg  when a.POPTYPE = 7 and a.VOIDSTTS = 1 then @vVoidInventoryReturnCreditGetMsg  when a.POPTYPE = 8 and a.VOIDSTTS = 1 then @vVoidInTransitGetMsg  end,  a.SUBTOTAL,isnull(a.VENDORID,''),isnull(a.VENDNAME,''),  case when a.XCHGRATE = 0.0 then (a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT)  when (a.DENXRATE = 0.0 or a.MCTRXSTT = @sMCNOEURO) and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.XCHGRATE, @I_sFunctionalDecimals)  when (a.DENXRATE = 0.0 or a.MCTRXSTT = @sMCNOEURO) and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT = @sMCDENOM_TO_NONDENOM and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.DENXRATE * a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT = @sMCDENOM_TO_NONDENOM and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) / a.DENXRATE / a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and a.RATECALC = @sMULTIPLY then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.DENXRATE * a.XCHGRATE, @I_sFunctionalDecimals)  when a.MCTRXSTT <> @sMCDENOM_TO_NONDENOM and a.RATECALC = @sDIVIDE then  round((a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT) * a.DENXRATE / a.XCHGRATE, @I_sFunctionalDecimals)  else 0.0  end,  a.receiptdate,a.receiptdate,0,a.CURNCYID,a.CURRNIDX,a.ORSUBTOT,  (a.ORSUBTOT - a.ORTDISAM + a.ORFRTAMT + a.ORMISCAMT + a.ORTAXAMT),  '',@sPOP_ORIGIN_Hist_Rcpt  from POP30300 a join #PONumber b on a.POPRCTNM = b.POPRCTNM  where a.VENDORID between @I_vSVendorID and @I_vEVendorID    select @iError = @@error  if @iError <> 0  return (@iError)  end   update a  set HOLDLEGEND = @vHoldLegendGetMsg  from #PODetailed a join #PONumber b on a.POPRCTNM = b.POPRCTNM  join POP10100 c on b.PONUMBER = c.PONUMBER  where (c.HOLD = 1) and (a.PONUMBER <> '') and (a.PONUMBER = c.PONUMBER)   select @iError = @@error  if @iError <> 0  return (@iError)  end  if @I_vHoldsOnly = 1  begin   delete #PODetailed where (HOLDLEGEND <> @vHoldLegendGetMsg)   select @iError = @@error  if @iError <> 0  return (@iError) end  exec  ('insert '+ @I_vTableName   + ' (PONUMBER,POPRCTNM,DOCTYNAM,SUBTOTAL,VENDORID,VENDNAME,TOTAL,DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT,'  + ' ORIGTOTL,HOLDLEGEND,POP_Origin)'  + ' select PONUMBER,POPRCTNM,DOCTYNAM,SUBTOTAL,VENDORID,VENDNAME,ISNULL(TOTAL, 99999999999999.99999),DATE1,PODATE,Historical_PO,CURNCYID,CURRNIDX,ORSUBTOT, '  + '     ISNULL(ORIGTOTL, 99999999999999.99999),HOLDLEGEND,POP_Origin '  + ' from #PODetailed '  )   select @iError = @@error if @iError <> 0  return (@iError) drop table #PONumber drop table #PODetailed  return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[popSelectPODocInquiry] TO [DYNGRP]
GO
