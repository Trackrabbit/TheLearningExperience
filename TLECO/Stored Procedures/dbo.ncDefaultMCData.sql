SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ncDefaultMCData] 	@I_iCompanyNum smallint = NULL, 	@I_iNC_FunctionalOriginating smallint = NULL,	/* source company setting for carry over originating or functional to dest */ 	@I_iNC_SourceCurrIdx smallint = NULL,		/* fields from the interface mstr record which are needed here...  */ 	@I_iNC_OriginCurrIdx smallint = NULL,		/* ... IO_ parameters will contain return values on exit */ 	@I_iNC_BankCurrIdx smallint = NULL,		/* Mike South 25/04/2006 Added param */ 	@I_iSeries smallint = NULL, 	@I_dtTrxDate datetime = NULL, 	@IO_sExchangeTableId char(15) = NULL output, 	@IO_dtExchangeDate datetime = NULL output, 	@IO_dtExchangeTime datetime = NULL output, 	@IO_nExchangeRate numeric(19,7) = NULL output, 	@IO_nDenominationExchangeRate numeric(19,7) = NULL output, 	@IO_iMCTransactionState smallint = NULL output, 	@IO_iRateCalcMethod smallint = NULL output, 	@IO_sRateTypeId char(15) = NULL output, 	@O_iISMCTrx smallint = NULL output, 	@O_iCurrencyIndex smallint = NULL output, 	@O_sCurrencyId char(15) = NULL output, 	@O_iDecimalPlaces smallint = NULL output, 	@O_iError int = NULL output			/* result code */ as declare @iCurrencyIndex smallint, @iFnCurrencyIndex smallint, @sCurrencyId char(15), @sRateTypeId char(15), 	@sExchangeTableId char(15), @nExchangeRate numeric(19,7), @dtExchangeDate datetime, @iDecimalPlaces smallint, 	@dtExchangeTime datetime, @iRateCalcMethod smallint, @iViewMode smallint, @iISMCTrx smallint, @dtExpirationDate datetime, 	@nDenominationExchangeRate numeric(19,7), @iMCTransactionState smallint, @iInactive tinyint, @iTrnDateDefault smallint, 	@iTrnDateLimit smallint, @iTrnDaysLimit smallint, @dtMinDate datetime, @dtMaxDate datetime, @dtPrevDateLimit datetime, 	@dtNextDateLimit datetime, @nPrevExRate numeric(19,7), @nNextExRate numeric(19,7), @dtPrevDate datetime, 	@dtNextDate datetime, @dtPrevTime datetime, @dtNextTime datetime, @iLoop tinyint exec smGetMinDate @dtMinDate output exec smGetMaxDate @dtMaxDate output select @iLoop = 0 while( @iLoop = 0 ) begin 	select @iLoop = 1 	 /* NCL IB - 07/03/06 Originating currency sometimes comes thru blank.  If this is you, and you have no one else to turn to, perhaps time its you hired, the G-Team 	Alternatively, if its empty, set it to functional */ 	if @I_iNC_BankCurrIdx <> 0 	begin 		/*always use the bank currency if it has one*/ 		select @iCurrencyIndex = @I_iNC_BankCurrIdx 	end 	else if @I_iNC_FunctionalOriginating = 0 or @I_iNC_OriginCurrIdx = 0 	begin 		select @iCurrencyIndex = @I_iNC_SourceCurrIdx 	end 	else 	begin 		select @iCurrencyIndex = @I_iNC_OriginCurrIdx 	end 	select @sCurrencyId = CURNCYID, @iDecimalPlaces = (DECPLCUR-1)  	from DYNAMICS.dbo.MC40200  	where CURRNIDX = @iCurrencyIndex 	 	select @iFnCurrencyIndex = FUNCRIDX from MC40000 	if (@iFnCurrencyIndex = @iCurrencyIndex) 	begin 		select @O_iISMCTrx = 0, @IO_nExchangeRate = 1, @O_iCurrencyIndex = @iCurrencyIndex,  			@IO_sExchangeTableId = '', @IO_dtExchangeDate = @dtMinDate, @IO_dtExchangeTime = @dtMinDate, 			@IO_nDenominationExchangeRate = 0, @IO_iMCTransactionState = 0, @IO_iRateCalcMethod = 0, 			@IO_sRateTypeId = '', @O_sCurrencyId = @sCurrencyId, @O_iDecimalPlaces = @iDecimalPlaces, @O_iError = 0 		break 	end 	 	select @iISMCTrx = 1 	/* copy MC fields from Interface record if both currencies match */ 	if (@I_iNC_SourceCurrIdx = @iFnCurrencyIndex) and (@I_iNC_OriginCurrIdx = @iCurrencyIndex) 		select  @sExchangeTableId = @IO_sExchangeTableId, @dtExchangeDate = @IO_dtExchangeDate, @dtExchangeTime = @IO_dtExchangeTime,  			@nExchangeRate = @IO_nExchangeRate, @nDenominationExchangeRate = @IO_nDenominationExchangeRate, 			@iMCTransactionState = @IO_iMCTransactionState, @iRateCalcMethod = @IO_iRateCalcMethod, @sRateTypeId = @IO_sRateTypeId 	select @iInactive = INACTIVE from DYNAMICS.dbo.MC60100 where CMPANYID = @I_iCompanyNum and CURNCYID = @sCurrencyId 	 	if @@rowcount = 0 	begin 		select @O_iError = 1, @O_sCurrencyId = @sCurrencyId	/* Company does not have access to the currency */ 		break 	end 	else if @iInactive = 1 	begin 		select @O_iError = 2, @O_sCurrencyId = @sCurrencyId	/* Currency not active for target company */ 		break 	end 	select @sRateTypeId = (case @I_iSeries when 2 then DEFFINTP when 3 then DEFSLSTP when 4 then DEFPURTP else '' end) from MC40000 	if not exists(select 1 from MC40100 where RATETPID = @sRateTypeId) 	begin 		select @O_iError = 3, @O_sCurrencyId = @sCurrencyId	/* No default rate type for Financial series */ 		break 	end 	 	select @sExchangeTableId = EXGTBLID from MC40301 where CURNCYID = @sCurrencyId and RATETPID = @sRateTypeId 	if @@rowcount = 0 	begin 		select @O_iError = 4, @O_sCurrencyId = @sCurrencyId	/* Rate type not assigned to an exchange table */ 		break 	end 	 	select @iRateCalcMethod = RTCLCMTD, @iTrnDateDefault = TRXDTDEF, @iTrnDateLimit = DATELMTS, @iTrnDaysLimit = PRVDSLMT  	  from DYNAMICS.dbo.MC40300 where EXGTBLID = @sExchangeTableId 	if @@rowcount = 0 	begin 		select @O_iError = 5, @IO_sExchangeTableId = @sExchangeTableId	/* Indicated exchange table does not exist */ 		break 	end 	 	select @iInactive = INACTIVE from DYNAMICS.dbo.MC60200 where CMPANYID = @I_iCompanyNum and EXGTBLID = @sExchangeTableId 	if @@rowcount = 0 	begin 		select @O_iError = 6, @IO_sExchangeTableId = @sExchangeTableId	/* Company does not have access to the exchange table */ 		break 	end 	else if @iInactive = 1 	begin 		select @O_iError = 7, @IO_sExchangeTableId = @sExchangeTableId	/* Exchange table not active for target company */ 		break 	end 	 	if @nExchangeRate is NULL 	begin 		 		/* get default rate */ 		/* check for exact date first ...*/ 		select top 1 @nExchangeRate = XCHGRATE, @dtExchangeDate = EXCHDATE, @dtExchangeTime = TIME1 			from DYNAMICS.dbo.MC00100 			where EXGTBLID = @sExchangeTableId and EXCHDATE = @I_dtTrxDate 			order by TIME1 desc 		if @nExchangeRate is NULL 		begin 			 			if @iTrnDateDefault = 0 /* exact */ 			begin 				select @O_iError = 11, @IO_sExchangeTableId = @sExchangeTableId	/* Exact rate required and no exact match found */ 				break 			end 			 			if @iTrnDateLimit = 0 /* unlimited */ 				select @dtPrevDateLimit = @dtMinDate, @dtNextDateLimit = @dtMaxDate 			else 				select @dtPrevDateLimit = dateadd(dd, -@iTrnDaysLimit, @I_dtTrxDate),  					@dtNextDateLimit = dateadd(dd, @iTrnDaysLimit, @I_dtTrxDate) 			 			select top 1 @nPrevExRate = XCHGRATE, @dtPrevDate = EXCHDATE, @dtPrevTime = TIME1 from DYNAMICS.dbo.MC00100 				where EXGTBLID = @sExchangeTableId and EXCHDATE between @dtPrevDateLimit and @I_dtTrxDate 				and ((EXPNDATE >= @I_dtTrxDate) or (EXPNDATE=@dtMinDate)) order by EXCHDATE desc, TIME1 desc 			select top 1 @nNextExRate = XCHGRATE, @dtNextDate = EXCHDATE, @dtNextTime = TIME1 from DYNAMICS.dbo.MC00100 				where EXGTBLID = @sExchangeTableId and EXCHDATE between @I_dtTrxDate and @dtNextDateLimit 				and ((EXPNDATE >= @I_dtTrxDate) or (EXPNDATE=@dtMinDate)) order by EXCHDATE asc, TIME1 asc 			 			if @iTrnDateDefault = 1 /* previous */ 				select @nExchangeRate = isnull(@nPrevExRate,@nNextExRate),  					@dtExchangeDate = isnull(@dtPrevDate,@dtNextDate),  					@dtExchangeTime = isnull(@dtPrevTime,@dtNextTime) 			else if @iTrnDateDefault = 2 /* next */ 				select @nExchangeRate = isnull(@nNextExRate,@nPrevExRate), 					@dtExchangeDate = isnull(@dtNextDate,@dtPrevDate),  					@dtExchangeTime = isnull(@dtNextTime,@dtPrevTime) 		end 	end 	 	if @nExchangeRate is not NULL 	begin 		 		/* found a rate so return all the values */ 		select @O_iISMCTrx = 1, @IO_nExchangeRate = @nExchangeRate, @O_iCurrencyIndex = @iCurrencyIndex,  			@IO_sExchangeTableId = @sExchangeTableId, @IO_dtExchangeDate = @dtExchangeDate,  			@IO_dtExchangeTime = @dtExchangeTime, @IO_nDenominationExchangeRate = 0,  			@IO_iMCTransactionState = 0, @IO_iRateCalcMethod = @iRateCalcMethod, 			@IO_sRateTypeId = @sRateTypeId, @O_sCurrencyId = @sCurrencyId, @O_iDecimalPlaces = @iDecimalPlaces,  			@O_iError = 0 	end 	else 	begin 		 		select @O_iError = 12, @IO_sExchangeTableId = @sExchangeTableId	/* No exchange rate found */ 	end end  
GO
GRANT EXECUTE ON  [dbo].[ncDefaultMCData] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[ncDefaultMCData] TO [public]
GO
