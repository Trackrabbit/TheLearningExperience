SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE           procedure [dbo].[aagValidateGLBatch] @BACHNUMB char(15), @BCHSOURC char(15), @I_cTableAssign nvarchar(30) = null, @I_cTableCode nvarchar(30) = null, @I_cTableError nvarchar(30) = null, @USERID char(15),  @InterID   char(5), @SqlSessionID   int,  @O_fValidCode    tinyint output, @I_UserID varchar(20), @I_Right int, @O_FiscalPrdMissing tinyint output   as begin   declare @JRNENTRY  int,  @RCTRXSEQ  numeric(19,5),  @TRXDATE  datetime,  @aaGLWorkHdrID  int,  @isint int,  @isval tinyint,  @Cnt int,  @nCompanyID smallint,  @nRCRNGTRX tinyint,  @ReversingDate datetime,  @O_sPeriodID smallint,   @O_tClosed tinyint,   @O_sYear smallint,   @O_iOUTErr int,   @O_iErrorState int ,  @Date char(50),  @Ledger_ID smallint   select @Date = getdate()  select @O_iOUTErr = 0, @O_sPeriodID =0, @O_iErrorState = 0, @O_tClosed = 0, @O_sYear = 0   select  @JRNENTRY  = 0,  @RCTRXSEQ  = 0,  @nRCRNGTRX = 0,  @aaGLWorkHdrID  = 0,  @isint   = 0,  @isval  = 0,  @Cnt  = 0,  @nCompanyID = 0,  @Ledger_ID = 0   set @O_fValidCode = 1  set @O_FiscalPrdMissing = 1   if @BACHNUMB = ''  begin  declare cgl cursor fast_forward for   Select GL10000.JRNENTRY, GL10000.RCTRXSEQ, GL10000.TRXDATE,  GL10000.RCRNGTRX,  GL10000.RVRSNGDT, GL10000.Ledger_ID    from GL10000  inner JOIN SY00500 on GL10000.BCHSOURC =  SY00500.BCHSOURC AND GL10000.BACHNUMB =  SY00500.BACHNUMB  where GL10000.BCHSOURC = @BCHSOURC   and SY00500.USERID = @USERID   and SY00500.MKDTOPST = 1   and GL10000.JRNENTRY not in (select JRNENTRY from AAG10000 where aaTRXType = 2)  union   Select JRNENTRY, 0, TRXDATE , 0, '1900-01-01 00:00:00.000', 1   from   GL10100   inner JOIN SY00500 on GL10100.BSNSFMID =  SY00500.BACHNUMB AND SY00500.BCHSOURC = 'GL_Business'  where SY00500.USERID = @USERID    and SY00500.MKDTOPST = 1 and JRNENTRY > 0   end  else  begin  declare cgl cursor fast_forward for   Select GL.JRNENTRY, GL.RCTRXSEQ, GL.TRXDATE ,  GL.RCRNGTRX,  GL.RVRSNGDT, GL.Ledger_ID   from   GL10000 GL   where  not exists (select 1 from   AAG10000 where  JRNENTRY = GL.JRNENTRY and aaTRXType = 2)   and GL.BCHSOURC = @BCHSOURC and GL.BACHNUMB = @BACHNUMB   union   Select JRNENTRY, 0, TRXDATE , 0, '1900-01-01 00:00:00.000', 1   from   GL10100   inner JOIN SY00500 on GL10100.BSNSFMID =  SY00500.BACHNUMB AND SY00500.BCHSOURC = 'GL_Business'  where  BSNSFMID = @BACHNUMB AND SY00500.USERID = @USERID   and SY00500.MKDTOPST = 1 and JRNENTRY > 0   end   open cgl  fetch next from cgl into @JRNENTRY, @RCTRXSEQ, @TRXDATE, @nRCRNGTRX, @ReversingDate, @Ledger_ID   while @@fetch_status = 0  begin   if @ReversingDate <> '1900-01-01 00:00:00.000'  begin  EXEC glCalculateGLPeriod 1, 'GL Transaction Entry ', @ReversingDate, @Date, @O_sPeriodID output, @O_tClosed output, @O_sYear output , @O_iOUTErr output , @O_iErrorState output   if @O_iOUTErr > 0   begin  set @O_FiscalPrdMissing = 0  fetch next from cgl into @JRNENTRY, @RCTRXSEQ, @TRXDATE, @nRCRNGTRX , @ReversingDate, @Ledger_ID    continue   end  end   exec aagIsInitialiseGLWork @JRNENTRY, @RCTRXSEQ,  @TRXDATE, @aaGLWorkHdrID output, @isint output   if @isint = 0 and @nRCRNGTRX > 0  begin  SELECT @nCompanyID = CMPANYID  FROM DYNAMICS. .SY01500 WHERE INTERID = DB_NAME()   exec aagGLWorkRecurringBatch  @JRNENTRY,  @RCTRXSEQ,  @TRXDATE,  @aaGLWorkHdrID output,  @nCompanyID,  @Ledger_ID   exec aagIsInitialiseGLWork @JRNENTRY, @RCTRXSEQ,  @TRXDATE, @aaGLWorkHdrID output, @isint output   end   else if @isint  = 0  begin   exec aagCreateDefaultAAForGLWork  @JRNENTRY,  @InterID,  @SqlSessionID,  @USERID   exec aagIsInitialiseGLWork @JRNENTRY, @RCTRXSEQ,  @TRXDATE, @aaGLWorkHdrID output, @isint output  end   if @isint = 1  begin  exec aagValidateCodeGLWorkHdr @I_cTableAssign, @I_cTableCode,  @I_cTableError, @aaGLWorkHdrID , @isval output,@I_UserID,@I_Right  if @isval = 0  begin  if not exists (Select aaGLWorkHdrID from AAG60000 where aaGLWorkHdrID = @aaGLWorkHdrID)  insert into AAG60000  (USERID,TRXBTCHSRC,aaGLWorkHdrID,JRNENTRY,SERIES,GLPOSTDT)  values (@USERID,@BCHSOURC, @aaGLWorkHdrID, @JRNENTRY, 1, @TRXDATE)  end  if @isval = 0 and @Cnt <> 1  begin  set @Cnt = 1  set @O_fValidCode = 0  end   end  else  begin  set @Cnt = 1  set @O_fValidCode = 0   end   set @isval = 0  exec aagValidateAllocationTrx @JRNENTRY , @aaGLWorkHdrID, @isval output   if @isval = 0  begin  if not exists (Select aaGLWorkHdrID from AAG60000 where aaGLWorkHdrID = @aaGLWorkHdrID)  insert into AAG60000  (USERID,TRXBTCHSRC,aaGLWorkHdrID,JRNENTRY,SERIES,GLPOSTDT)  values (@USERID,@BCHSOURC, @aaGLWorkHdrID, @JRNENTRY, 1, @TRXDATE)  end  if @isval = 0 and @Cnt = 0  begin  set @O_fValidCode = 0  end   set @JRNENTRY  = 0  set @isval   = 1   set @isint   = 0   set @aaGLWorkHdrID  = 0  fetch next from cgl into @JRNENTRY, @RCTRXSEQ, @TRXDATE, @nRCRNGTRX, @ReversingDate, @Ledger_ID   end  close cgl  deallocate cgl end    
GO
GRANT EXECUTE ON  [dbo].[aagValidateGLBatch] TO [DYNGRP]
GO
