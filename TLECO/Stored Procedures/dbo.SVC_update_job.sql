SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_update_job]  @job_id                       uniqueidentifier = NULL,   @job_name                     sysname          = NULL,   @new_name                     sysname          = NULL,  @enabled                      tinyint          = NULL,  @description                  nvarchar(512)    = NULL,  @start_step_id                int              = NULL,  @category_name                sysname          = NULL,  @owner_login_name             sysname          = NULL,  @notify_level_eventlog        int              = NULL,  @notify_level_email           int              = NULL,  @notify_level_netsend         int              = NULL,  @notify_level_page            int              = NULL,  @notify_email_operator_name   sysname          = NULL,  @notify_netsend_operator_name sysname          = NULL,  @notify_page_operator_name    sysname          = NULL,  @delete_level                 int              = NULL,  @AgentIsRunning        smallint        = 0,  @automatic_post               bit              = 1      AS declare @retval                        int,  @category_id                   int,  @notify_email_operator_id      int,  @notify_netsend_operator_id    int,  @notify_page_operator_id       int,  @owner_sid                     varbinary(85),  @alert_id                      int,  @cached_attribute_modified     int,  @is_sysadmin                   int,  @current_owner                 sysname,  @x_new_name                    sysname,  @x_enabled                     tinyint,  @x_description                 nvarchar(512),  @x_start_step_id               int,  @x_category_name               sysname,  @x_category_id                 int,  @x_owner_sid                   varbinary(85),  @x_notify_level_eventlog       int,  @x_notify_level_email          int,  @x_notify_level_netsend        int,  @x_notify_level_page           int,  @x_notify_email_operator_name  sysname,  @x_notify_netsnd_operator_name sysname,  @x_notify_page_operator_name   sysname,  @x_delete_level                int,  @x_originating_server          nvarchar(30)   select  @job_name                     = LTRIM(RTRIM(@job_name)),  @new_name                     = LTRIM(RTRIM(@new_name)),  @description                  = LTRIM(RTRIM(@description)),  @category_name                = LTRIM(RTRIM(@category_name)),  @notify_email_operator_name   = LTRIM(RTRIM(@notify_email_operator_name)),  @notify_netsend_operator_name = LTRIM(RTRIM(@notify_netsend_operator_name)),  @notify_page_operator_name    = LTRIM(RTRIM(@notify_page_operator_name))  SET NOCOUNT ON  begin try  execute @retval = msdb.dbo.sp_verify_job_identifiers   '@job_name',  '@job_id',  @job_name OUTPUT,  @job_id   OUTPUT   if (@retval <> 0)  return (1)  end try begin catch  return (1) end catch;  if ( @new_name is not null or  @enabled is not null or  @start_step_id is not null or  @owner_login_name is not null or  @notify_level_eventlog is not null or  @notify_level_email is not null or  @notify_level_netsend is not null or  @notify_level_page is not null or  @notify_email_operator_name is not null or  @notify_netsend_operator_name is not null or  @notify_page_operator_name is not null or  @delete_level is not null) begin  select @cached_attribute_modified = 1 end else begin  select @cached_attribute_modified = 0 end  select @x_new_name                    = sjv.name,  @x_enabled                     = sjv.enabled,  @x_description                 = sjv.description,  @x_start_step_id               = sjv.start_step_id,  @x_category_name               = sc.name,                    @x_category_id                 = sc.category_id,             @x_owner_sid                   = sjv.owner_sid,  @x_notify_level_eventlog       = sjv.notify_level_eventlog,  @x_notify_level_email          = sjv.notify_level_email,  @x_notify_level_netsend        = sjv.notify_level_netsend,  @x_notify_level_page           = sjv.notify_level_page,  @x_notify_email_operator_name  = so1.name,                     @x_notify_netsnd_operator_name = so2.name,                     @x_notify_page_operator_name   = so3.name,                     @x_delete_level                = sjv.delete_level,  @x_originating_server          = sjv.originating_server  from msdb.dbo.sysjobs_view sjv  left outer join msdb.dbo.sysoperators so1 on (sjv.notify_email_operator_id = so1.id)  left outer join msdb.dbo.sysoperators so2 on (sjv.notify_netsend_operator_id = so2.id)  left outer join msdb.dbo.sysoperators so3 on (sjv.notify_page_operator_id = so3.id),  msdb.dbo.syscategories sc  where (sjv.job_id = @job_id) and (sjv.category_id = sc.category_id)  if (upper(@x_originating_server) <> N'(LOCAL)') and  (PROGRAM_NAME() NOT LIKE N'SQLAgent%') begin  return(1)  end  if (@new_name = N'')   select @new_name = NULL  if (@new_name is null) select @new_name = @x_new_name if (@enabled is null) select @enabled = @x_enabled if (@description is null) select @description = @x_description if (@start_step_id is null) select @start_step_id = @x_start_step_id if (@category_name is null) select @category_name = @x_category_name if (@owner_sid is null) select @owner_sid = @x_owner_sid if (@notify_level_eventlog is null) select @notify_level_eventlog = @x_notify_level_eventlog if (@notify_level_email is null) select @notify_level_email = @x_notify_level_email if (@notify_level_netsend is null) select @notify_level_netsend = @x_notify_level_netsend if (@notify_level_page is null) select @notify_level_page = @x_notify_level_page if (@notify_email_operator_name is null) select @notify_email_operator_name = @x_notify_email_operator_name if (@notify_netsend_operator_name is null) select @notify_netsend_operator_name = @x_notify_netsnd_operator_name if (@notify_page_operator_name is null) select @notify_page_operator_name = @x_notify_page_operator_name if (@delete_level is null) select @delete_level = @x_delete_level  if ((isnull(is_srvrolemember(N'sysadmin'), 0) = 1)  and (@owner_login_name is not null)) begin  select @owner_sid = SUSER_SID(@owner_login_name)  end  if ((isnull(is_srvrolemember(N'sysadmin'), 0) <> 1)  and (@owner_login_name is not null)) begin  RAISERROR(14242, -1, -1) end  if (@owner_login_name is not null)  and (EXISTS (SELECT * FROM msdb.dbo.sysjobs sj, msdb.dbo.sysjobservers sjs  WHERE (sj.job_id = sjs.job_id) AND (sj.job_id = @job_id) AND (sjs.server_id <> 0))) begin  select @is_sysadmin = 0   execute SVC_sqlagent_has_server_access   @login_name = @owner_login_name,   @is_sysadmin_member = @is_sysadmin output   if (@is_sysadmin = 0)  begin  select @current_owner = SUSER_SNAME(@x_owner_sid)   return(1)   end end  if (@description = N'') select @description = null if (@category_name = N'') select @category_name = NULL if (@notify_email_operator_name = N'') select @notify_email_operator_name = NULL if (@notify_netsend_operator_name = N'') select @notify_netsend_operator_name = NULL if (@notify_page_operator_name = N'') select @notify_page_operator_name = NULL  begin try  if @AgentIsRunning = 1  begin  execute @retval = msdb.dbo.sp_verify_job   @job_id,  @new_name,  @enabled,  @start_step_id,  @category_name,  @owner_sid output,  @notify_level_eventlog,  @notify_level_email output,  @notify_level_netsend output,  @notify_level_page output,  @notify_email_operator_name,  @notify_netsend_operator_name,  @notify_page_operator_name,  @delete_level,  @category_id output,  @notify_email_operator_id output,  @notify_netsend_operator_id output,  @notify_page_operator_id output,  @x_originating_server output   if (@retval <> 0)  return (1)   end end try begin catch  return (1) end catch;  set @retval = 0  if (@owner_login_name is not null) begin  begin tran UpdateJobSteps  begin try  if (exists (SELECT * FROM msdb.dbo.sysjobsteps WHERE (job_id = @job_id) AND (subsystem = N'TSQL')))  begin  if (exists (SELECT * FROM master.dbo.syslogins WHERE (sid = @owner_sid) AND (sysadmin <> 1)))  begin  update msdb.dbo.sysjobsteps  set database_user_name = NULL  where (job_id = @job_id) AND (subsystem = N'TSQL')  select @retval = @@error  if @retval <> 0   rollback tran UpdateJob  else  commit tran UpdateJob  end  end  commit tran UpdateJobSteps  end try  begin catch  rollback tran UpdateJobSteps  end catch; end  if @retval = 0  begin  set @retval = 0  begin tran UpdateJob  begin try  if @category_id <> 0  and exists(select 1 from msdb.dbo.sysjobs where job_id = @job_id)  begin  update msdb.dbo.sysjobs  set  name = @new_name,  enabled = @enabled,  description = @description,  start_step_id = @start_step_id,  category_id = @category_id,                owner_sid = @owner_sid,  notify_level_eventlog = @notify_level_eventlog,  notify_level_email = @notify_level_email,  notify_level_netsend = @notify_level_netsend,  notify_level_page = @notify_level_page,  notify_email_operator_id = @notify_email_operator_id,     notify_netsend_operator_id = @notify_netsend_operator_id,   notify_page_operator_id = @notify_page_operator_id,      delete_level = @delete_level,  version_number = version_number + 1,    date_modified = getdate()              where (job_id = @job_id)  select @retval = @@error  if @retval <> 0   rollback tran UpdateJob  else  commit tran UpdateJob  end  else  commit tran UpdateJob  end try  begin catch  rollback tran UpdateJob  end catch; end  if ((@category_name != @x_category_name) and  (@x_category_id IN (11, 12, 16, 17, 18) or   @category_id IN (11, 12,16, 17, 18))) begin  if (@x_category_name is not null)   begin  execute master.dbo.sp_MSupdate_replication_status  @publisher = '',  @publisher_db = '',  @publication = '',  @publication_type = -1,  @agent_type = 5,  @agent_name = @job_name,  @status = -1    end   if (@x_category_name is not null)  begin  execute master.dbo.sp_MSupdate_replication_status  @publisher = '',  @publisher_db = '',  @publication = '',  @publication_type = -1,  @agent_type = 5,  @agent_name = @job_name,  @status = null      end  end  begin try  if (((SELECT delete_level FROM msdb.dbo.sysjobs WHERE (job_id = @job_id)) <> 0)   or ((@x_delete_level = 1) AND (@delete_level = 0)))  begin  execute SVC_post_msx_operation   'INSERT',   'JOB',   @job_id  end  else  begin  if (@automatic_post = 1)  begin  execute SVC_post_msx_operation   'UPDATE',   'JOB',   @job_id  end  end end try begin catch end catch;  if (exists (SELECT *  FROM msdb.dbo.sysjobservers  WHERE (job_id = @job_id)  AND (server_id = 0) AND (@cached_attribute_modified = 1))) begin   if @AgentIsRunning = 1  begin  begin try  execute msdb.dbo.sp_sqlagent_notify   @op_type     = N'J',  @job_id      = @job_id,  @action_type = N'U'  end try  begin catch  end catch;  end end  if ((@job_name <> @new_name)   and (exists (SELECT * FROM msdb.dbo.sysalerts WHERE (job_id = @job_id))))  and @AgentIsRunning = 1 begin  DECLARE sysalerts_cache_update CURSOR LOCAL  FOR  SELECT id FROM msdb.dbo.sysalerts WHERE (job_id = @job_id)   OPEN sysalerts_cache_update  FETCH NEXT FROM sysalerts_cache_update INTO @alert_id   WHILE (@@fetch_status = 0)  BEGIN  begin try  execute msdb.dbo.sp_sqlagent_notify   @op_type     = N'A',  @alert_id    = @alert_id,  @action_type = N'U'  end try  begin catch  break  end catch;  FETCH NEXT FROM sysalerts_cache_update INTO @alert_id  END   CLOSE sysalerts_cache_update  DEALLOCATE sysalerts_cache_update end  return(@retval)    
GO
GRANT EXECUTE ON  [dbo].[SVC_update_job] TO [DYNGRP]
GO
