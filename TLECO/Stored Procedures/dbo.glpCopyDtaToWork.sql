SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpCopyDtaToWork]  @iCopyJrnlEntry int  = NULL,  @iNewJrnlEntry int  = NULL,  @iDTAIndex numeric(19,5) = NULL,  @iNewDTAIndex numeric(19,5) = NULL,  @iRecurTrxSeq numeric(19,5) = NULL,  @iRevDistFlag smallint = NULL,  @iReversingTrx tinyint  = NULL,  @iCopySeqNumber int  = NULL,  @iSeqNumber int  = NULL,  @iDocDate datetime = NULL,  @iCpyJEDTAReference char(25) = NULL,  @iNewJEDTAReference char(25) = NULL as  declare  @lTrxStarted tinyint,  @lControlLoop tinyint,  @NOTPOSTED tinyint,  @BACKOUT tinyint,  @lCodesCursorCreated smallint,  @lReturnStatus int,  @lSqlError int,  @lError int,  @lDTASeries smallint,  @lActIndex int,  @lDTAGroupID char(15),  @lDTAGLReference char(25),  @lDocNumber char(21),  @lRMDocType smallint,  @lDTAGroupAmt numeric(19,5),  @lDTACodeID char(15),  @lPostingDesc char(51),  @lDTAQty numeric(19,5),  @lDTACodeAmt numeric(19,5)  while (@lControlLoop is NULL) begin   select @lControlLoop = 1   if @iCopyJrnlEntry is NULL or  @iNewJrnlEntry is NULL or  @iDTAIndex is NULL or  @iNewDTAIndex is NULL or  @iRecurTrxSeq is NULL or  @iRevDistFlag is NULL or  @iReversingTrx is NULL or  @iCopySeqNumber is NULL or  @iSeqNumber is NULL or  @iDocDate is NULL  begin  select @lReturnStatus = 1  break  end   select  @NOTPOSTED = 1,  @BACKOUT = 1    declare  DTAGroupCodes  cursor local for   select  DTASERIES,  ACTINDX,  GROUPID,  DTA_GL_Reference,  DOCNUMBR,  RMDTYPAL,  GROUPAMT  from  DTA10100  where  DTAREF = @iCpyJEDTAReference and  SEQNUMBR = @iCopySeqNumber and  JRNENTRY = @iCopyJrnlEntry   order by  SEQNUMBR   open DTAGroupCodes  select @lCodesCursorCreated = 1   if @@cursor_rows = 0  begin   select @lReturnStatus = 1  break  end   fetch next   from   DTAGroupCodes  into  @lDTASeries,  @lActIndex,  @lDTAGroupID,  @lDTAGLReference,  @lDocNumber,  @lRMDocType,  @lDTAGroupAmt   while @@fetch_status = 0  begin   insert into  DTA10100  (DTASERIES,  DTAREF,  ACTINDX,  SEQNUMBR,  GROUPID,  DTA_GL_Reference,  DOCNUMBR,  RMDTYPAL,  GROUPAMT,  JRNENTRY,  TRXDATE,  PSTGSTUS)  select  @lDTASeries,  @iNewJEDTAReference,  @lActIndex,  @iSeqNumber,  @lDTAGroupID,  @lDTAGLReference,  @lDocNumber,  @lRMDocType,  @lDTAGroupAmt,  @iNewJrnlEntry,  @iDocDate,  @NOTPOSTED   select @lSqlError = @@error  if @lSqlError <> 0  begin  select @lReturnStatus = @lSqlError  break  end    fetch next   from   DTAGroupCodes  into  @lDTASeries,  @lActIndex,  @lDTAGroupID,  @lDTAGLReference,  @lDocNumber,  @lRMDocType,  @lDTAGroupAmt  end    if @lCodesCursorCreated = 1  deallocate DTAGroupCodes  select @lCodesCursorCreated = 0  declare  DTATrxCodes  cursor local for   select  GROUPID,  CODEID,  POSTDESC,  DTAQNTY,  CODEAMT  from  DTA10200  where  DTASERIES = @lDTASeries and  DTAREF = @iCpyJEDTAReference and  ACTINDX = @lActIndex and  SEQNUMBR = @iCopySeqNumber   order by  SEQNUMBR  open DTATrxCodes  select @lCodesCursorCreated = 1   if @@cursor_rows = 0  begin   select @lReturnStatus = 1  break  end   fetch next   from   DTATrxCodes  into  @lDTAGroupID,  @lDTACodeID,  @lPostingDesc,  @lDTAQty,  @lDTACodeAmt   while @@fetch_status = 0  begin   if @iRevDistFlag = @BACKOUT  begin  select @lDTAQty = @lDTAQty*(-1),  @lDTACodeAmt = @lDTACodeAmt*(-1)  end   insert into  DTA10200  (DTASERIES,  DTAREF,  ACTINDX,  SEQNUMBR,  GROUPID,  CODEID,  DOCNUMBR,  RMDTYPAL,  POSTDESC,  DTAQNTY,  CODEAMT,  TRXDATE)  select  @lDTASeries,  @iNewJEDTAReference,  @lActIndex,  @iSeqNumber,  @lDTAGroupID,  @lDTACodeID,  @lDocNumber,  @lRMDocType,  @lPostingDesc,  @lDTAQty,  @lDTACodeAmt,  @iDocDate   select @lSqlError = @@error  if @lSqlError <> 0  begin  select @lReturnStatus = @lSqlError  break  end    fetch next   from   DTATrxCodes  into  @lDTAGroupID,  @lDTACodeID,  @lPostingDesc,  @lDTAQty,  @lDTACodeAmt  end    if @lCodesCursorCreated = 1  deallocate DTATrxCodes  end    return (@lReturnStatus)   
GO
GRANT EXECUTE ON  [dbo].[glpCopyDtaToWork] TO [DYNGRP]
GO
