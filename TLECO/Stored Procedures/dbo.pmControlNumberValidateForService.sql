SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[pmControlNumberValidateForService]  @O_vCNTRLNUM varchar(21) OUTPUT,  @I_sCNTRLTYP smallint,  @I_sDCSTATUS smallint,  @I_sDOCTYPE smallint,  @I_vVENDORID varchar(15),  @I_vDOCNUMBR varchar(21),  @I_vTRXSORCE varchar(13),  @I_vCHEKBKID varchar(15),  @I_dDUEDATE datetime,  @I_dDISCDATE datetime,  @I_vBCHSOURC varchar(15),  @I_dDOCDATE datetime,  @I_vUserID varchar(15),   @I_bValidateExisting tinyint,  @O_iValidationStatus int OUTPUT,  @O_iErrorState int OUTPUT as  declare  @bInsideLoop binary(1),    @iLoopCounter integer,      @vUpdatedCntrlNum varchar(21),  @PAY_ALIGNMENT_CONTROL_TYPE smallint,  @VOUCHER_NUMBER_CONTROL_TYPE  smallint,  @PURCHASING smallint,  @SCHEDULE_DOC smallint,  @iStatus int,  @cDBName char(5),  @vAlignment00 varchar(255),  @vAlignment99 varchar(255),  @iError integer  if   @O_vCNTRLNUM is NULL or  @I_sCNTRLTYP is NULL or  @I_sDCSTATUS is NULL or  @I_sDOCTYPE is NULL or  @I_vVENDORID is NULL or  @I_vDOCNUMBR is NULL or  @I_vTRXSORCE is NULL or  @I_vCHEKBKID is NULL or  @I_dDUEDATE is NULL or  @I_dDISCDATE is NULL or  @I_vBCHSOURC is NULL or  @I_dDOCDATE is NULL   begin  select @O_iErrorState = 21066  return  end   select  @O_iValidationStatus = 4,    @iLoopCounter = 0  exec @iStatus = DYNAMICS..smGetConstantInt  'PAYMENT_ALIGNMENT_CONTROL_TYPE',  @PAY_ALIGNMENT_CONTROL_TYPE output,  @O_iErrorState  output  select @iError = @@ERROR   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'VOUCHER_NUMBER_CONTROL_TYPE',  @VOUCHER_NUMBER_CONTROL_TYPE output,  @O_iErrorState  output  select @iError = @@ERROR   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'PURCHASING',  @PURCHASING output,  @O_iErrorState output  select @iError = @@ERROR   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt  'PM_DOC_SCHEDULE',  @SCHEDULE_DOC output,  @O_iErrorState  output  select @iError = @@ERROR   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  select @cDBName = db_name()  exec @iStatus = DYNAMICS..smGetMsgString  11047,     @cDBName,  @vAlignment00 output,  @O_iErrorState output  select @iError = @@ERROR   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  select @vAlignment00 = rtrim(@vAlignment00)  exec @iStatus = DYNAMICS..smGetMsgString  11046,     @cDBName,  @vAlignment99 output,  @O_iErrorState output  select @iError = @@ERROR   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if (@O_iErrorState <> 0) or (@iStatus <> 0)   return (@iStatus)  select @vAlignment99 = RTRIM(@vAlignment99)   if (@I_bValidateExisting = 0) and (@I_sCNTRLTYP <> @PAY_ALIGNMENT_CONTROL_TYPE)  begin  if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE)  if @I_sDOCTYPE = @SCHEDULE_DOC   select @O_vCNTRLNUM= PMNXTSCHDNBR from PM40100 with (TABLOCKX HOLDLOCK)  else  select @O_vCNTRLNUM= NTVCHNUM from PM40100 with (TABLOCKX HOLDLOCK)  else  select @O_vCNTRLNUM= PMNPYNBR from PM40100 with (TABLOCKX HOLDLOCK)  if @@ROWCOUNT <> 1  begin  select @O_iValidationStatus = 1  rollback transaction  return  end  select @O_vCNTRLNUM = rtrim(@O_vCNTRLNUM)  end  if (@I_bValidateExisting = 0) and (@I_sCNTRLTYP = @PAY_ALIGNMENT_CONTROL_TYPE)  begin  select @O_vCNTRLNUM= ISNULL(max(CNTRLNUM),@vAlignment00)   from PM00400   where CNTRLTYP=@PAY_ALIGNMENT_CONTROL_TYPE and   CNTRLNUM between @vAlignment00 and @vAlignment99   select @O_vCNTRLNUM = rtrim (@O_vCNTRLNUM)   exec ivNumber_Inc_Dec 1,@O_vCNTRLNUM output, @O_iErrorState output   if (@O_iErrorState <> 0)  or (@@ERROR <> 0)  begin  select @O_iValidationStatus = 4  rollback transaction  return  end  end  while @iLoopCounter < 1000  begin  select @bInsideLoop = 1   while @bInsideLoop = 1   begin  if exists(select 1 from PM00400 where  CNTRLNUM = @O_vCNTRLNUM and  CNTRLTYP = @I_sCNTRLTYP)  begin  select @O_iValidationStatus = 3  break  end   if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE) and  exists(select 1 from DTA10100 where  DTASERIES = @PURCHASING and   DTAREF =  (rtrim(@O_vCNTRLNUM) +  replicate(' ',(20 - datalength(rtrim(@O_vCNTRLNUM)))) +  ltrim(str(0))))  begin  select @O_iValidationStatus = 2  break  end  if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE) and  exists(select 1 from TX30000 where  DOCNUMBR = rtrim(@O_vCNTRLNUM) and  DOCTYPE = @I_sDOCTYPE and  SERIES = @PURCHASING and  RCTRXSEQ = 0)  begin  select @O_iValidationStatus = 5  break  end  if not exists(select 1 from PM00400 where  CNTRLNUM = @O_vCNTRLNUM and  CNTRLTYP = @I_sCNTRLTYP)   begin  insert into PM00400   values(@O_vCNTRLNUM,  @I_sCNTRLTYP,  @I_sDCSTATUS,  @I_sDOCTYPE,  @I_vVENDORID,  @I_vDOCNUMBR,  @I_vTRXSORCE,  @I_vCHEKBKID,  @I_dDUEDATE,  @I_dDISCDATE,  @I_vBCHSOURC,  @I_dDOCDATE,  @I_vUserID)  end  else  begin  select @O_iValidationStatus = 3  break  end  select @bInsideLoop = 0  end  if @bInsideLoop = 1   begin  if (@I_bValidateExisting = 0)   begin  select @iLoopCounter = @iLoopCounter + 1  exec ivNumber_Inc_Dec 1,@O_vCNTRLNUM output, @O_iErrorState output   if (@O_iErrorState <> 0) or (@O_vCNTRLNUM = '')   begin  select @O_iErrorState = 21032  select @O_iValidationStatus = 4  break  end  end  else  break  end  else   begin  if (@I_bValidateExisting = 0) and (@I_sCNTRLTYP <> @PAY_ALIGNMENT_CONTROL_TYPE)   begin  select @vUpdatedCntrlNum = rtrim(@O_vCNTRLNUM)  exec ivNumber_Inc_Dec 1, @vUpdatedCntrlNum output, @O_iErrorState output  if (@O_iErrorState = 0) and (@vUpdatedCntrlNum > @O_vCNTRLNUM)  begin  if (@I_sCNTRLTYP = @VOUCHER_NUMBER_CONTROL_TYPE)  if @I_sDOCTYPE = @SCHEDULE_DOC  update PM40100 set PMNXTSCHDNBR = @vUpdatedCntrlNum  else  update PM40100 set NTVCHNUM = @vUpdatedCntrlNum  else  update PM40100 set PMNPYNBR = @vUpdatedCntrlNum  end  end  select @O_iValidationStatus = 0.  break   end  end    
GO
GRANT EXECUTE ON  [dbo].[pmControlNumberValidateForService] TO [DYNGRP]
GO
