SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[pmCLTransactionWORK]  @I_cUserID char(15) = NULL,  @I_cUserDate char(12) = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @I_cFileName1 varchar(40) = NULL,  @I_cFileName2 varchar(40) = NULL,  @I_cFileName3 varchar(40) = NULL,  @I_cFileName4 varchar(40) = NULL,  @I_cSearchString1 char(2)  = NULL,  @I_cOrigICID char(5)  = NULL,  @I_tICRegistered tinyint  = NULL,   @I_tMCRegistered tinyint  = NULL,  @O_iErrorState int  = NULL output as  declare  @iError int,    @iStatus int,    @tLoop tinyint,  @cMessage1 varchar(255),  @ccheckbkid char(15),   @cDBName char(5),  @XPM_Trxent varchar(255),  @PM_Trxent varchar(255),  @WORK int,  @TRUE tinyint,  @FALSE tinyint,  @sDefaultDate char(12)  select  @O_iErrorState = 0,  @iStatus  = 0,  @TRUE  = 1,  @FALSE  = 0  exec @iStatus = smGetDefaultDate @sDefaultDate output  while (@tLoop is NULL) begin  select @tLoop = 1   if @I_cUserID is NULL  or @I_cUserDate is NULL  or @I_cFunctionalCurrency is NULL  or @I_cFileName1 is NULL  or @I_cFileName2 is NULL  or @I_cFileName3 is NULL  or @I_cFileName4 is NULL  or @I_cOrigICID is NULL  or @I_tICRegistered is NULL  or @I_tMCRegistered is NULL  or @I_cSearchString1 is NULL  begin  select @O_iErrorState = 20846  break  end   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'WORK',   @WORK output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   select @cDBName = db_name()  exec @iStatus = DYNAMICS.dbo.smGetMsgString  871,  @cDBName,   @cMessage1 output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantString   'XXPM_TRXENT_STR',   @XPM_Trxent output,   @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantString   'PM_TRXENT_STR',   @PM_Trxent output,   @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   if @I_tMCRegistered = 1  begin  insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  VCHNUMWK,  0,  VENDORID  from  PM10000  where  PM10000.CURNCYID <> ''  and PM10000.CURNCYID <> @I_cFunctionalCurrency  and PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS  (select  1  from  MC020103  where  PM10000.VCHNUMWK = MC020103.VCHRNMBR  and PM10000.DOCTYPE = MC020103.DOCTYPE )   if @@rowcount <> 0  begin  delete  PM10000  where  PM10000.CURNCYID <> ''  and PM10000.CURNCYID <> @I_cFunctionalCurrency  and PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS  (select  1  from  MC020103  where  PM10000.VCHNUMWK = MC020103.VCHRNMBR  and PM10000.DOCTYPE = MC020103.DOCTYPE )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName3,  NULL,  17638,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end   end  else  begin  update  PM10000  set  PM10000.CURNCYID  = ''  from  PM10000  where  PM10000.CURNCYID <> ''  and PM10000.CURNCYID <> @I_cFunctionalCurrency  and PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS  (select  1  from  MC020103  where  PM10000.VCHNUMWK = MC020103.VCHRNMBR  and PM10000.DOCTYPE = MC020103.DOCTYPE )  end   insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  A.VCHNUMWK,  0,  A.VENDORID  from  PM10000 A  JOIN MC020103 B ON (A.VCHNUMWK = B.VCHRNMBR and A.DOCTYPE = B.DOCTYPE)  LEFT OUTER JOIN SY00500 C ON (A.BACHNUMB = C.BACHNUMB and A.BCHSOURC = C.BCHSOURC and C.BCHSTTUS > 0)  where  A.CURNCYID <> ''  and A.CURNCYID <> @I_cFunctionalCurrency  and A.BCHSOURC = @PM_Trxent  and B.DCSTATUS <> @WORK  and C.BACHNUMB is NULL   if @@rowcount <> 0  begin  update  MC020103  set  MC020103.DCSTATUS  = @WORK  from  PM10000 A  JOIN MC020103 B ON (A.VCHNUMWK = B.VCHRNMBR and A.DOCTYPE = B.DOCTYPE)  LEFT OUTER JOIN SY00500 C ON (A.BACHNUMB = C.BACHNUMB and A.BCHSOURC = C.BCHSOURC and C.BCHSTTUS > 0)  where  A.CURNCYID <> ''  and A.CURNCYID <> @I_cFunctionalCurrency  and A.BCHSOURC = @PM_Trxent  and B.DCSTATUS <> @WORK  and C.BACHNUMB is NULL   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName4,  NULL,  18544,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  VCHNUMWK,  0,  VENDORID  from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS  (select  1  from  PM00400  where  PM00400.CNTRLNUM = PM10000.VCHNUMWK  and PM00400.CNTRLTYP = PM10000.CNTRLTYP )   if @@rowcount <> 0  begin  insert into   PM00400(  DOCNUMBR,  DCSTATUS,  DOCTYPE,  VENDORID,  DOCDATE,  DUEDATE,  DISCDATE,  BCHSOURC,  CHEKBKID,  CNTRLTYP,  CNTRLNUM )  select  DOCNUMBR,  1,  DOCTYPE,  VENDORID,  DOCDATE,  DUEDATE,  DISCDATE,  BCHSOURC,  CHEKBKID,  0,  VCHNUMWK   from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS  (select  1  from  PM00400  where  PM00400.CNTRLNUM = PM10000.VCHNUMWK  and PM00400.CNTRLTYP = PM10000.CNTRLTYP )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName1,  @I_cSearchString1,  10350,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  CAMPMTNM,  0,  VENDORID   from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and PM10000.CASHAMNT > 0.00  and  NOT EXISTS  (select  1  from  PM00400  where  PM10000.CAMPMTNM = PM00400.CNTRLNUM  and PM00400.CNTRLTYP = 1 )   if @@rowcount <> 0  begin  insert into   PM00400(  DOCNUMBR,  DCSTATUS,  DOCTYPE,  VENDORID,  DOCDATE,  BCHSOURC,  CHEKBKID,  CNTRLTYP,  CNTRLNUM )  select  CDOCNMBR,  1,  6,  VENDORID,  CAMTDATE,  BCHSOURC,  CAMCBKID,  1,  CAMPMTNM   from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and PM10000.CASHAMNT > 0.00  and  NOT EXISTS  (select  1  from  PM00400  where  PM10000.CAMPMTNM = PM00400.CNTRLNUM  and PM00400.CNTRLTYP = 1 )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName1,  @I_cSearchString1,  10350,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  CAMPYNBR,  0,  VENDORID  from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and PM10000.CHEKAMNT > 0.00  and  NOT EXISTS  (select  1  from  PM00400  where  PM10000.CAMPYNBR = PM00400.CNTRLNUM  and PM00400.CNTRLTYP = 1)   if @@rowcount <> 0  begin  insert into   PM00400(  DOCNUMBR,  DCSTATUS,  DOCTYPE,  VENDORID,  DOCDATE,  BCHSOURC,  CHEKBKID,  CNTRLTYP,  CNTRLNUM )  select  CHEKNMBR,  1,  6,  VENDORID,  CHEKDATE,  BCHSOURC,  CHAMCBID,  1,  CAMPYNBR   from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and PM10000.CHEKAMNT > 0.00  and  NOT EXISTS  (select  1  from  PM00400  where  PM10000.CAMPYNBR = PM00400.CNTRLNUM  and PM00400.CNTRLTYP = 1 )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName1,  @I_cSearchString1,  10350,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select  CCAMPYNM,  0,  VENDORID  from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and PM10000.CRCRDAMT > 0  and  NOT EXISTS  (select   1  from  SY03100,  PM00400  where  SY03100.PYBLGRBX = PM00400.CNTRLTYP  and PM00400.CNTRLNUM = PM10000.CCAMPYNM  and PM10000.CARDNAME = SY03100.CARDNAME )   if @@rowcount <> 0  begin  insert into   PM00400(  DOCNUMBR,  DCSTATUS,  DOCTYPE,  VENDORID,  DOCDATE,  BCHSOURC,  CHEKBKID,  CNTRLTYP,  CNTRLNUM )  select  CCRCTNUM,  1,  6,  VENDORID,  CRCARDDT,  BCHSOURC,  '',  CNTRLTYP,  CCAMPYNM   from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and PM10000.CRCRDAMT > 0  and  NOT EXISTS  (select   1  from  SY03100,  PM00400  where  SY03100.PYBLGRBX = PM00400.CNTRLTYP  and PM00400.CNTRLNUM = PM10000.CCAMPYNM  and PM10000.CARDNAME = SY03100.CARDNAME )   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName1,  @I_cSearchString1,  10350,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select distinct  BACHNUMB,  0,  ''  from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS(  select  1  from  SY00500  where  SY00500.BCHSOURC = PM10000.BCHSOURC  and SY00500.BACHNUMB = PM10000.BACHNUMB)   if @@rowcount <> 0  begin  select @ccheckbkid = CHEKBKID from PM40100   insert into  SY00500(  GLPOSTDT,  BCHSOURC,  BACHNUMB,  SERIES,   MKDTOPST,  NUMOFTRX,  BACHFREQ,  BCHCOMNT,  USERID,   CHEKBKID,   BCHTOTAL,   BACHDATE,  POSTTOGL,  CREATDDT,  BCHSTTUS,  ORIGIN )  select distinct  @I_cUserDate,  @PM_Trxent,  BACHNUMB,  4,  0,  1,  1,  @cMessage1,  @I_cUserID,  @ccheckbkid,  0.00,  @I_cUserDate,  0,  @sDefaultDate,  0,  1  from  PM10000  where  PM10000.BCHSOURC = @PM_Trxent  and  NOT EXISTS(  select  1  from  SY00500  where  SY00500.BCHSOURC = PM10000.BCHSOURC  and SY00500.BACHNUMB = PM10000.BACHNUMB)   exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName2,  @I_cSearchString1,  11506,  @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end    update  SY00500  set  BCHTOTAL = ( select sum(PM10000.DOCAMNT)  from  PM10000  where   SY00500.BACHNUMB = PM10000.BACHNUMB  and SY00500.BCHSOURC = PM10000.BCHSOURC ),   NUMOFTRX = ( select count(PM10000.BACHNUMB)  from  PM10000  where   SY00500.BACHNUMB = PM10000.BACHNUMB  and SY00500.BCHSOURC = PM10000.BCHSOURC )  from  SY00500,  PM10000  where  SY00500.BACHNUMB = PM10000.BACHNUMB  and SY00500.BCHSOURC = PM10000.BCHSOURC  and  SY00500.BCHSOURC <> @XPM_Trxent   if @I_tICRegistered = @TRUE  begin  insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select Distinct  PM10000.VCHNUMWK,  0,  PM10000.VENDORID   from   PM10000, PM10100  where   PM10000.VCHNUMWK = PM10100.VCHRNMBR  and  PM10000.CNTRLTYP = PM10100.CNTRLTYP  and  PM10100.INTERID <> @I_cOrigICID  and  (PM10000.ICTRX = @FALSE   or PM10000.ICDISTS = @FALSE)   if @@rowcount <> 0  begin  update PM10000   set  ICTRX  = @TRUE,  ICDISTS = @TRUE  from   PM10000, PM10100  where   PM10000.VCHNUMWK = PM10100.VCHRNMBR  and  PM10000.CNTRLTYP = PM10100.CNTRLTYP  and  PM10100.INTERID <> @I_cOrigICID  and  (PM10000.ICTRX = @FALSE   or PM10000.ICDISTS = @FALSE)  exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName3,  NULL,  19189,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end   end   else   begin  insert into  #CNTRLNUMTEMP(  CNTRLNUM,  DOCTYPE,  VENDORID )  select Distinct  VCHNUMWK,  0,  VENDORID   from   PM10000  where   ICTRX = @TRUE or  ICDISTS = @TRUE   if @@rowcount <> 0  begin  update PM10000  set ICTRX = @FALSE,  ICDISTS = @FALSE  from   PM10000  where   ICTRX = @TRUE or  ICDISTS = @TRUE  exec @iStatus = smCreateErrorLogRecord  @I_cUserID,  @I_cFileName3,  @I_cSearchString1,  6114,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end    end    INSERT INTO #CNTRLNUMTEMP(  CNTRLNUM  , DOCTYPE  , VENDORID )  SELECT DISTINCT  VCHNUMWK  , 0  , VENDORID  FROM PM10000  WHERE TEN99AMNT <> 0 and (TEN99TYPE = 0 and TEN99BOXNUMBER = 0) and DOCTYPE <= 3  IF @@ROWCOUNT <> 0  BEGIN  EXEC @iStatus = smCreateErrorLogRecord  @I_cUserID  , @I_cFileName3  , @I_cSearchString1  , 11160  , @O_iErrorState OUTPUT   SELECT @iError = @@ERROR  IF @iStatus = 0 and @iError <> 0  SELECT @iStatus = @iError  IF @iStatus <> 0 or @O_iErrorState <> 0  BREAK  END  INSERT INTO #CNTRLNUMTEMP(  CNTRLNUM  , DOCTYPE  , VENDORID )  SELECT DISTINCT  VCHNUMWK  , 0  , VENDORID  FROM PM10000  WHERE TEN99AMNT <> 0 and TEN99TYPE > 1 and TEN99BOXNUMBER = 0 and DOCTYPE <= 3  IF @@ROWCOUNT <> 0  BEGIN  EXEC @iStatus = smCreateErrorLogRecord  @I_cUserID  , @I_cFileName3  , @I_cSearchString1  , 11163  , @O_iErrorState OUTPUT   SELECT @iError = @@ERROR  IF @iStatus = 0 and @iError <> 0  SELECT @iStatus = @iError  IF @iStatus <> 0 or @O_iErrorState <> 0  BREAK  END   INSERT INTO #CNTRLNUMTEMP(  CNTRLNUM  , DOCTYPE  , VENDORID )  SELECT DISTINCT  VCHNUMWK  , 0  , VENDORID  FROM PM10000  WHERE TEN99AMNT <> 0 and TEN99TYPE = 0 and TEN99BOXNUMBER <> 0 and DOCTYPE <= 3  IF @@ROWCOUNT <> 0  BEGIN  EXEC @iStatus = smCreateErrorLogRecord  @I_cUserID  , @I_cFileName3  , @I_cSearchString1  , 11164  , @O_iErrorState OUTPUT   SELECT @iError = @@ERROR  IF @iStatus = 0 and @iError <> 0  SELECT @iStatus = @iError  IF @iStatus <> 0 or @O_iErrorState <> 0  BREAK  END  end   return(@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[pmCLTransactionWORK] TO [DYNGRP]
GO
