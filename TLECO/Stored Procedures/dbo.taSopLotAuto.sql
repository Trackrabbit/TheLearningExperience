SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopLotAuto]  @I_vSOPTYPE smallint,    @I_vSOPNUMBE char(21),     @I_vUSERDATE datetime = '',   @I_vLNITMSEQ int,     @I_vITEMNMBR char(30),    @I_vLOCNCODE char(10) = '',   @I_vQUANTITY numeric(19,5),   @I_vBIN char(15) = '',    @I_vCREATEBIN tinyint = 0,   @I_vLOTNUMBR char(20) ='',   @I_vEXPNDATE datetime = '',   @I_vMFGDATE datetime = '',   @I_vQTYTYPE smallint = 1,    @I_vRequesterTrx smallint = 0,  @I_vDOCID char(15) = '',   @I_vDROPSHIP smallint = 0,   @I_vQTYFULFI numeric(19,5)=null,  @I_vALLOCATE smallint = 0,   @I_vCMPNTSEQ int = 0,    @I_vLOTNUMBRToReplace char(20) = '',  @I_vAUTOCREATELOT int = 0,   @I_vUOFM char(8) = '',    @I_vDATERECD datetime='',   @I_vUpdateIfExists smallint = 0, @I_vUSRDEFND1 char(50) = '',  @I_vUSRDEFND2 char(50) = '',  @I_vUSRDEFND3 char(50) = '',  @I_vUSRDEFND4 varchar(8000) ='', @I_vUSRDEFND5 varchar(8000) ='', @O_iErrorState int output,   @oErrString varchar(255) output   with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare @QTYRECVD numeric (19,5),  @DTSEQNUM numeric(19,5),    @UNITCOST numeric (19,5),  @SLTSQNUM int,       @ATYALLOC numeric(19,5),  @QTYSOLD numeric(19,5),  @VCTNMTHD tinyint,  @OVRSERLT tinyint,      @ITMTRKOP tinyint,  @iStatus int,  @iError int,  @iCustomState int,  @iCustomErrString varchar(255),  @O_oErrorState int,  @ALLOCABY smallint,  @USPFULPR smallint,  @LOCNCODE char(10),  @ExstITEMNMBR char(30),  @ExstATYALLOC numeric(19,5),  @ExstQTYFULFI numeric(19,5),  @QTYBSUOM numeric(19,5),  @SOPHdrTbl char(18),  @DexRowID int,  @oExists int,  @OInsStatus int,  @mylock tinyint,  @DexLockErrorState int,  @QUANTITY numeric(19,5),  @QtyDone numeric(19,5),  @LotFound smallint,  @QtyAvail numeric(19,5),  @SERLTQTY numeric(19,5),  @AmntOverExst numeric(19,5),  @UOFMBASE char(8),  @UOMSCHDL char(10),  @DTSEQNUMREP numeric(19,5),  @ATYALLOCMAST numeric(19,5),  @ATYALLOCREP numeric(19,5),  @DATERECDREP datetime,  @ENABLEMULTIBIN tinyint,  @sCompanyID int,  @NOTEINDX numeric(19,5),  @iGetNextNoteIdxErrState int,  @BinToReplace char(15),  @QTY numeric(19,5),  @ALLEXPLOTSOTHER tinyint,    @ASSIGNLOTNUMBY tinyint,    @USEEXISTINGSNLOTS tinyint,  @LotHit tinyint,  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select @QTYRECVD = 0,  @DTSEQNUM = 0,  @UNITCOST = 0,  @ATYALLOC = 0,  @QTYSOLD = 0,  @VCTNMTHD = 0,  @OVRSERLT = 0,  @ITMTRKOP = 0,  @iStatus = 0,  @iError = 0,  @iCustomState = 0,  @iCustomErrString = '',  @O_iErrorState = 0,  @ALLOCABY = 0,  @USPFULPR = 0,  @LOCNCODE = '',  @ExstITEMNMBR = '',  @ExstATYALLOC = 0,  @ExstQTYFULFI = 0,  @QTYBSUOM = 0,  @SOPHdrTbl = '',  @DexRowID = 0,  @oExists = 0,  @OInsStatus = 0,  @mylock = 0,  @DexLockErrorState = 0,  @QUANTITY = 0,  @QtyDone = 0,  @LotFound = 0,  @QtyAvail = 0,  @SERLTQTY = 0,  @AmntOverExst = 0,  @UOFMBASE = 0,  @UOMSCHDL = '',  @DTSEQNUMREP = 0,  @ATYALLOCMAST = 0,  @ATYALLOCREP = 0,  @DATERECDREP = '',  @ENABLEMULTIBIN = 0,  @sCompanyID = 0,  @NOTEINDX = 0,  @iGetNextNoteIdxErrState = 0,  @BinToReplace = '',  @QTY = 0,  @ALLEXPLOTSOTHER = 0,  @ASSIGNLOTNUMBY = 1,  @USEEXISTINGSNLOTS = 0,  @LotHit = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taSopLotAutoPre  @I_vSOPTYPE output,  @I_vSOPNUMBE output,  @I_vUSERDATE output,  @I_vLNITMSEQ output,  @I_vITEMNMBR output,  @I_vLOCNCODE output,  @I_vQUANTITY output,  @I_vBIN output,  @I_vCREATEBIN output,  @I_vLOTNUMBR output,  @I_vEXPNDATE output,  @I_vMFGDATE output,  @I_vQTYTYPE output,  @I_vRequesterTrx output,  @I_vDOCID output,  @I_vDROPSHIP output,  @I_vQTYFULFI output,  @I_vALLOCATE output,  @I_vCMPNTSEQ output,  @I_vLOTNUMBRToReplace output,  @I_vAUTOCREATELOT output,  @I_vUOFM output,  @I_vDATERECD output,     @I_vUpdateIfExists output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 2629    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vSOPTYPE is NULL or  @I_vSOPNUMBE is NULL or  @I_vUSERDATE is NULL or  @I_vITEMNMBR is NULL or  @I_vQUANTITY is NULL or  @I_vBIN is null or  @I_vCREATEBIN is null or  @I_vLNITMSEQ is NULL or  @I_vDOCID is NULL or  @I_vDROPSHIP is NULL or  @I_vALLOCATE is NULL or  @I_vCMPNTSEQ is NULL or  @I_vLOTNUMBRToReplace is NULL or  @I_vAUTOCREATELOT is NULL or  @I_vUOFM is NULL or  @I_vUpdateIfExists is NULL) begin  select @O_iErrorState = 3332    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE = 0) or (@I_vSOPNUMBE = '')) begin  select @O_iErrorState = 3333     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vUSERDATE = '') begin  select @I_vUSERDATE = convert(varchar(12),getdate()) end  if @I_vDATERECD = '' begin  select @I_vDATERECD = convert(varchar(12),getdate()) end  select @I_vSOPNUMBE = UPPER(@I_vSOPNUMBE),  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vLOTNUMBR = UPPER(@I_vLOTNUMBR),  @I_vLOCNCODE = upper(@I_vLOCNCODE),  @I_vDOCID = UPPER(@I_vDOCID),  @I_vBIN = upper(@I_vBIN)  if (@I_vSOPTYPE <> 3) and (@I_vQUANTITY < 0) begin  select @O_iErrorState = 7478     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @QTY = @I_vQUANTITY   if (@I_vSOPTYPE = 3 and @I_vQUANTITY < 0) begin  select @I_vQUANTITY = @I_vQUANTITY * -1 end  select @ENABLEMULTIBIN = ENABLEMULTIBIN,  @ALLEXPLOTSOTHER = ALLEXPLOTSOTHER,  @ASSIGNLOTNUMBY = ASSIGNLOTNUMBY,  @USEEXISTINGSNLOTS = USEEXISTINGSNLOTS  from IV40100 (nolock) where SETUPKEY = 1  select @ITMTRKOP = ITMTRKOP from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  if (@ITMTRKOP <> 3) begin  select @O_iErrorState = 2080     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vUpdateIfExists < 0) or (@I_vUpdateIfExists > 1)) begin  select @O_iErrorState = 4697     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vQTYTYPE < 1) or (@I_vQTYTYPE > 5)) begin  select @O_iErrorState = 4727     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vUpdateIfExists = 0) and (@I_vLOTNUMBRToReplace <> '')) begin  select @O_iErrorState = 4698     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vUpdateIfExists = 1) and (@I_vSOPTYPE in(2,3,6)) and (@I_vLOTNUMBRToReplace <> '') and not exists(select 1 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBRToReplace)) begin  if ((@I_vUpdateIfExists = 1) and (@I_vLOTNUMBRToReplace <> '') and not exists(select 1 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBRToReplace))  begin  select @O_iErrorState = 4699     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if ((@I_vUpdateIfExists = 1) and (@I_vLOTNUMBRToReplace <> '') and not exists(select 1 from SOP10201 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ and POSTED = 0 and ITEMNMBR = @I_vITEMNMBR and SERLTNUM = @I_vLOTNUMBRToReplace)) begin  select @O_iErrorState = 4700     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE in(2,3,6)) and (@I_vQUANTITY > 0) and (@I_vAUTOCREATELOT = 0) and (@I_vLOTNUMBR <> '') and (not exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR and LOCNCODE = @I_vLOCNCODE))) begin  select @O_iErrorState = 4725     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE < 2) or (@I_vSOPTYPE > 6)) begin  select @O_iErrorState = 3334     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vQTYFULFI > 0) begin  select @I_vQUANTITY = @I_vQTYFULFI end  if (@I_vQTYFULFI is null) begin  select @I_vQTYFULFI = @I_vQUANTITY end  if (@I_vQTYFULFI = 0) begin  return end  if (@I_vLOCNCODE = '') begin   select @I_vLOCNCODE = LOCNCODE from SOP40100 (nolock) end  select @I_vUOFM =  case  when @I_vUOFM = '' then SELNGUOM  else @I_vUOFM  end,  @UOMSCHDL = UOMSCHDL  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  select @UOFMBASE = BASEUOFM from IV40201 (nolock) where UOMSCHDL = @UOMSCHDL select @QTYBSUOM = QTYBSUOM from IV40202 (nolock) where UOMSCHDL = @UOMSCHDL and EQUIVUOM = @UOFMBASE and UOFM = @I_vUOFM  if (@I_vUOFM = '') begin  select @O_iErrorState = 4729     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if not exists(select 1 from IV00107 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM) begin  select @O_iErrorState = 7190     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @QUANTITY = @I_vQUANTITY select @I_vQUANTITY = @I_vQUANTITY * @QTYBSUOM  select top 1 @LOCNCODE = LOCNCODE from IV40700 (nolock) where LOCNCODE <> ''  if (@I_vLOCNCODE = '') begin  if (@LOCNCODE <> '')  begin  select @O_iErrorState = 969     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if (not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE))  begin  select @O_iErrorState = 1367     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((not exists(select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)))  begin  select @O_iErrorState = 1388     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@LOCNCODE = '') begin  select @O_iErrorState = 2078    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  if (@I_vLOCNCODE <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11813     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vLOCNCODE <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11814     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vUpdateIfExists = 1) begin  if (not exists(select 1 from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE))  begin  select @O_iErrorState = 4701     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   select @ExstITEMNMBR = ITEMNMBR,  @ExstATYALLOC = ATYALLOC,  @ExstQTYFULFI = QTYFULFI,  @QTYBSUOM = QTYBSUOM  from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ   if (@I_vITEMNMBR <> @ExstITEMNMBR)  begin  select @O_iErrorState = 4702     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((@I_vLOTNUMBR <> '') and (@I_vLOTNUMBRToReplace = '') and (@ExstQTYFULFI + @I_vQTYFULFI > @ExstATYALLOC))  begin  select @O_iErrorState = 4703     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end   if (@I_vDOCID <> '' and @I_vSOPTYPE <> 6) and (not exists(select 1 from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = @I_vSOPTYPE))  begin  select @O_iErrorState = 5656     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if ((@I_vDOCID <> '' and @I_vSOPTYPE = 6) and (not exists(select 1 from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = 3 and WORKFLOWENABLED = 1)))   begin  select @O_iErrorState = 7741     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@I_vDOCID <> '') and (@I_vSOPTYPE <> 6)  begin  select @ALLOCABY = ALLOCABY, @USPFULPR = USPFULPR  from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = @I_vSOPTYPE end else begin  select @ALLOCABY = 1, @USPFULPR = 0 end  if (@I_vDOCID <> '') and (@I_vSOPTYPE = 6)  begin  select @ALLOCABY = ALLOCABY, @USPFULPR = USPFULPR  from SOP40200 (nolock) where DOCID = @I_vDOCID and SOPTYPE = 3 end else begin  select @ALLOCABY = 1, @USPFULPR = 0 end  if ((@I_vSOPTYPE in(2,3,6)) and (@I_vQTYTYPE <> 1))  begin  select @O_iErrorState = 4726     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vDROPSHIP = 1) and (@I_vAUTOCREATELOT = 1)) begin  select @O_iErrorState = 4724     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vLOTNUMBRToReplace <> '') begin  if (not exists(select 1 from SOP10201 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  and QTYTYPE = @I_vQTYTYPE and SERLTNUM = @I_vLOTNUMBRToReplace and SERLTQTY = @I_vQUANTITY))  begin  select @O_iErrorState = 4731     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@ENABLEMULTIBIN = 0) begin  if (@I_vCREATEBIN = 1)  begin  select @O_iErrorState = 7199     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vBIN <> '')  begin  select @O_iErrorState = 7174     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin   if ((@I_vAUTOCREATELOT = 0) and (@I_vCREATEBIN = 1) and (@I_vSOPTYPE <> 4))  begin  select @O_iErrorState = 7175   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vSOPTYPE = 4)  begin  if (@I_vBIN = '')  begin  select @I_vBIN = SORETURNBIN from IV00102 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  end   if (@I_vBIN = '')  begin  select @I_vBIN = SORETURNBIN from IV40700 (nolock)  where LOCNCODE = @I_vLOCNCODE  end   if (@I_vBIN = '')  begin  select @O_iErrorState = 7176    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if ((@I_vSOPTYPE <> 4) and (@I_vBIN <> '') and (@I_vCREATEBIN = 0))  begin  if not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and BIN = @I_vBIN and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE)  begin  select @O_iErrorState = 7177     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  else  begin  if ((select QUANTITY - ATYALLOC from IV00112 (nolock)  where ITEMNMBR = @I_vITEMNMBR and BIN = @I_vBIN and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE)  < @I_vQTYFULFI)  begin  select @O_iErrorState = 7178     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end   if ((@I_vBIN = '') and (@I_vCREATEBIN = 1))  begin  select @O_iErrorState = 7179     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  if (@I_vCREATEBIN not in (0,1))  begin  select @O_iErrorState = 7180     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  if ((@I_vBIN <> '') and not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN) and (@I_vCREATEBIN = 0))  begin  select @O_iErrorState = 7181     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='Sales_Transaction',  @I_vINDEX1=@I_vSOPNUMBE,  @I_vINDEX2=@I_vSOPTYPE,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomState  select @O_iErrorState = 4705    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  while (1=1) begin  select @SOPHdrTbl = rtrim(db_name()) + '.dbo.SOP10100'   select @DexRowID = DEX_ROW_ID from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (not exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @SOPHdrTbl and row_id = @DexRowID and session_id = @@spid))  begin  select @mylock = 1   exec DYNAMICS..taDEXLOCKS  @I_vOperation = 1,  @I_vtable_path_name = @SOPHdrTbl,   @I_vrow_id = @DexRowID,     @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@DexLockErrorState <> 0) or (@iError <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 4706    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vUpdateIfExists = 1)  begin  if (@I_vLOTNUMBRToReplace <> '')  begin  select @DTSEQNUMREP = DTSEQNUM,  @DATERECDREP = DATERECD,  @ATYALLOCREP = SERLTQTY,  @BinToReplace = BIN  from SOP10201 (nolock) where SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  and QTYTYPE = @I_vQTYTYPE and SERLTNUM = @I_vLOTNUMBRToReplace and SERLTQTY = @I_vQUANTITY   if (@I_vSOPTYPE in(2,3))  begin  select @ATYALLOCMAST = ATYALLOC from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBRToReplace and DTSEQNUM = @DTSEQNUMREP and DATERECD = @DATERECDREP   if (@ATYALLOCREP > @ATYALLOCMAST)  begin  select @O_iErrorState = 4732    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@I_vSOPTYPE <> 4) and (@BinToReplace <> ''))  begin  update IV00112 set ATYALLOC = ATYALLOC - @I_vQUANTITY  from IV00112 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @BinToReplace and QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 7182    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   delete SOP10201 where SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  and QTYTYPE = @I_vQTYTYPE and SERLTNUM = @I_vLOTNUMBRToReplace and SERLTQTY = @I_vQUANTITY  if (@@error <> 0)  begin  select @O_iErrorState = 4707    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00300 set ATYALLOC = ATYALLOC - @I_vQUANTITY  from IV00300 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBRToReplace and DTSEQNUM = @DTSEQNUMREP and DATERECD = @DATERECDREP  if (@@error <> 0)  begin  select @O_iErrorState = 4708    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vLOTNUMBR <> '')  begin  update SOP10200 set FUFILDAT = @I_vUSERDATE, ACTLSHIP = @I_vUSERDATE  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 4709    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vCMPNTSEQ <> 0)  begin  update SOP10200 set FUFILDAT = @I_vUSERDATE, ACTLSHIP = @I_vUSERDATE  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = 0  if (@@error <> 0)  begin  select @O_iErrorState = 4734    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@I_vLOTNUMBRToReplace <> '') and (@I_vLOTNUMBR = ''))  begin  update SOP10200 set  QTYFULFI = QTYFULFI - @QUANTITY,  QTYSLCTD = QTYSLCTD - @I_vQUANTITY,  EXTQTYSEL = EXTQTYSEL - @I_vQUANTITY  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 7183    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vLOTNUMBRToReplace <> '')  begin  if ((select RCTSEQNM from IV00300 (nolock) where LOTNUMBR = @I_vLOTNUMBRToReplace and ITEMNMBR = @I_vITEMNMBR and DTSEQNUM = @DTSEQNUMREP) = 0)  begin  delete IV00300 where LOTNUMBR = @I_vLOTNUMBRToReplace and ITEMNMBR = @I_vITEMNMBR and RCTSEQNM = 0  if (@@error <> 0)  begin  select @O_iErrorState = 6523   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set QTYONHND = QTYONHND - @I_vQUANTITY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 6524   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set QTYONHND = QTYONHND - @I_vQUANTITY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''   if (@@error <> 0)  begin  select @O_iErrorState = 6525   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@BinToReplace <> '')  begin  update IV00112 set QUANTITY = QUANTITY - @I_vQUANTITY from IV00112 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @BinToReplace and QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 6526   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end  end   if ((@I_vLOTNUMBR <> '') and (@I_vLOTNUMBRToReplace = ''))  begin  update SOP10200 set  QTYFULFI = QTYFULFI + @QUANTITY,  QTYSLCTD = QTYSLCTD + @I_vQUANTITY,  EXTQTYSEL = EXTQTYSEL + @I_vQUANTITY  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 7184    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   if (@UNITCOST = 0)  begin  select @UNITCOST =  case  when VCTNMTHD in (4,5) then STNDCOST  else CURRCOST  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  end   if ((@I_vCREATEBIN = 1) and not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN))  begin  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()   exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 7185    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @I_vLOCNCODE, @I_vBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 7186    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vAUTOCREATELOT = 1)  begin  select @AmntOverExst = isnull(sum(QTYRECVD - QTYSOLD - ATYALLOC),0) - @I_vQUANTITY from IV00300 (nolock)  where QTYTYPE = 1 and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR   if (@AmntOverExst < 0)  begin  select @AmntOverExst = @AmntOverExst * -1  end  else  begin  select @AmntOverExst = 0  end  end   if ((@I_vAUTOCREATELOT = 1) and (@AmntOverExst > 0) and (@I_vLOTNUMBR <> '') and ((@I_vSOPTYPE in (2,3,6) and @QTY > 0)) and  ((@ALLOCABY = 1) or (@I_vALLOCATE = 1)) and ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vQTYFULFI <> 0) and (@I_vDROPSHIP = 0))  begin  select @DTSEQNUM = isnull(max(DTSEQNUM),0) + 16384 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and DATERECD = @I_vDATERECD   if (@ENABLEMULTIBIN = 1)  begin  if ((@I_vCREATEBIN = 1) and not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN and QTYTYPE = 1))  begin   insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN,1,0,0  if (@@error <> 0)  begin  select @O_iErrorState = 7187    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   update IV00112 set QUANTITY = QUANTITY + @I_vQUANTITY  from IV00112 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 7188    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@USEEXISTINGSNLOTS = 1)  begin  select @O_iErrorState = 9593    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @OVRSERLT = 1    insert IV00300  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  LOTNUMBR,  QTYRECVD,  QTYSOLD,  ATYALLOC,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  LTNUMSLD,  QTYTYPE,  BIN,  MFGDATE,  EXPNDATE  )  select   @I_vITEMNMBR,    @I_vLOCNCODE,    @I_vDATERECD,    @DTSEQNUM,     @I_vLOTNUMBR,    @AmntOverExst,    0,       0,        @UNITCOST,     0,       '',       0,        @I_vQTYTYPE,    case @ENABLEMULTIBIN  when 1  then @I_vBIN  else ''  end,  @I_vMFGDATE,    @I_vEXPNDATE    if (@@error <> 0)  begin  select @O_iErrorState = 2081    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if ((select isnull(LOTTYPE,'') from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR) <> '')  begin  if not exists(select 1 from IV00301 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR)  begin  insert IV00301  (  ITEMNMBR,  LOTNUMBR,  LOTATRB1,  LOTATRB2,  LOTATRB3,  LOTATRB4,  LOTATRB5,  IUSCOUNT,  RCRDSTTS   )  select  @I_vITEMNMBR,    @I_vLOTNUMBR,    '',     '',     '',     '',     '',     1,     2      if (@@error <> 0)  begin  select @O_iErrorState = 6354     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  else  begin  if (@I_vLOTNUMBRToReplace = '')  begin  update IV00301 set IUSCOUNT = IUSCOUNT + 1 from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  end  else  begin  update IV00301 set IUSCOUNT = IUSCOUNT - 1 from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  end  if (@@error <> 0)  begin  select @O_iErrorState = 6358    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   update IV00102 set QTYONHND = QTYONHND + @I_vQUANTITY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 3327    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set QTYONHND = QTYONHND + @I_vQUANTITY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 3328    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if ((@I_vAUTOCREATELOT = 1) and (@AmntOverExst > 0) and (@I_vLOTNUMBR <> '') and ((@I_vSOPTYPE in (2,3,6) and @QTY < 0)) and   ((@ALLOCABY = 1) or (@I_vALLOCATE = 1)) and ((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vQTYFULFI <> 0) and (@I_vDROPSHIP = 0))  begin  if ((select isnull(LOTTYPE,'') from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR) <> '')  begin  if not exists(select 1 from IV00301 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR)  begin  insert IV00301  (  ITEMNMBR,  LOTNUMBR,  LOTATRB1,  LOTATRB2,  LOTATRB3,  LOTATRB4,  LOTATRB5,  IUSCOUNT,  RCRDSTTS   )  select  @I_vITEMNMBR,    @I_vLOTNUMBR,    '',     '',     '',     '',     '',     1,     0      if (@@error <> 0)  begin  select @O_iErrorState = 5658      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  else  begin  if (@I_vLOTNUMBRToReplace = '')  begin  update IV00301 set IUSCOUNT = IUSCOUNT + 1 from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  end  else  begin  update IV00301 set IUSCOUNT = IUSCOUNT - 1 from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  end  if (@@error <> 0)  begin  select @O_iErrorState = 5659     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end  end   while ((@LotFound = 0) and (@I_vLOTNUMBR <> ''))  begin  select @LotHit = 0   select @SLTSQNUM = isnull(max(SLTSQNUM),0) + 1 from SOP10201 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ    select @DTSEQNUM = isnull(max(DTSEQNUM),0) + 16384 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and DATERECD = @I_vDATERECD   if (@I_vSOPTYPE <> 4) and (@QTY > 0)   begin  select @VCTNMTHD = VCTNMTHD from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   if (@VCTNMTHD in (1,3,4))  begin  if (@ALLEXPLOTSOTHER = 1)   begin  if (@ASSIGNLOTNUMBY = 2)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  order by EXPNDATE,DTSEQNUM  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by EXPNDATE,DTSEQNUM  end  end   if (@LotHit = 0)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  order by DATERECD,DTSEQNUM  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by DATERECD,DTSEQNUM  end  end  end  else   begin  if (@ASSIGNLOTNUMBY = 2)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where   (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN)  order by EXPNDATE,DTSEQNUM  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where   (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by EXPNDATE,DTSEQNUM  end  end   if (@LotHit = 0)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN)  order by DATERECD,DTSEQNUM  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by DATERECD,DTSEQNUM  end  end  end  end  else   begin  if (@ALLEXPLOTSOTHER = 1)   begin  if (@ASSIGNLOTNUMBY = 2)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN)  order by EXPNDATE desc,DTSEQNUM desc  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by EXPNDATE desc,DTSEQNUM desc  end  end   if (@LotHit = 0)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where   (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  order by DATERECD desc,DTSEQNUM desc  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where   (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by DATERECD desc,DTSEQNUM desc  end  end  end  else   begin  if (@ASSIGNLOTNUMBY = 2)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN)  order by EXPNDATE desc,DTSEQNUM desc  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by EXPNDATE desc,DTSEQNUM desc  end  end   if (@LotHit = 0)  begin  if (@I_vEXPNDATE = '')  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and (EXPNDATE > @I_vUSERDATE or EXPNDATE = '') and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN)  order by  DATERECD desc,DTSEQNUM desc  end  else  begin  select TOP 1  @DTSEQNUM = isnull(DTSEQNUM,0),  @I_vDATERECD = isnull(DATERECD,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vBIN = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and EXPNDATE = @I_vEXPNDATE)  or  (@I_vBIN <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE and  LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by  DATERECD desc,DTSEQNUM desc  end  end  end  end   if ((@I_vEXPNDATE <> '') and not exists(select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and  DATERECD = @I_vDATERECD and DTSEQNUM = @DTSEQNUM and LTNUMSLD = 0 and QTYTYPE = @I_vQTYTYPE and EXPNDATE = @I_vEXPNDATE))  begin  select @O_iErrorState = 9595     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@LotHit = 0)  begin  select @O_iErrorState = 4728    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@LotHit > 0)  begin  select  @QTYRECVD = QTYRECVD,  @ATYALLOC = ATYALLOC,  @QTYSOLD = QTYSOLD,  @UNITCOST = UNITCOST,  @I_vBIN =   case @ENABLEMULTIBIN  when 1 then BIN  else ''  end,  @I_vEXPNDATE = EXPNDATE,  @I_vMFGDATE = MFGDATE  from IV00300 (nolock)  where  (@I_vEXPNDATE <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and  DATERECD = @I_vDATERECD and DTSEQNUM = @DTSEQNUM and LTNUMSLD = 0 and QTYTYPE = @I_vQTYTYPE and EXPNDATE = @I_vEXPNDATE)  or  (@I_vEXPNDATE = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and  DATERECD = @I_vDATERECD and DTSEQNUM = @DTSEQNUM and LTNUMSLD = 0 and QTYTYPE = @I_vQTYTYPE)   if ((@I_vEXPNDATE <> '') and (@I_vEXPNDATE <= @I_vUSERDATE) and (@ALLEXPLOTSOTHER = 0) and (@OVRSERLT = 0))  begin  select @O_iErrorState = 9594     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@I_vQUANTITY > (@QTYRECVD - @ATYALLOC - @QTYSOLD + @QtyDone))  begin  select @QtyAvail = @QTYRECVD - @ATYALLOC - @QTYSOLD   select @SERLTQTY = @QtyAvail  end   else  begin  select @LotFound = 1  select @SERLTQTY = @I_vQUANTITY - @QtyDone  select @QtyAvail = @I_vQUANTITY - @QtyDone  end  end  else  begin  select @O_iErrorState = 3330    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE = 4) or (@QTY < 0)   begin  select @SERLTQTY = @I_vQUANTITY  end   if (not exists(select 1 from SOP10201 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @I_vLNITMSEQ and CMPNTSEQ = @I_vCMPNTSEQ  and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @SLTSQNUM)) and (((@ALLOCABY = 1) or (@I_vALLOCATE = 1) or (@I_vSOPTYPE = 4)) and ((@USPFULPR = 0) or (@I_vQTYFULFI > 0))  and (@I_vQTYFULFI <> 0) and (@I_vDROPSHIP = 0) and (@I_vLOTNUMBR <> ''))  begin  insert SOP10201  (  SOPTYPE,  SOPNUMBE,  LNITMSEQ,  CMPNTSEQ,  QTYTYPE,  SERLTNUM,  SERLTQTY,  SLTSQNUM,  DATERECD,  DTSEQNUM,  UNITCOST,  ITEMNMBR,  TRXSORCE,  POSTED,  OVRSERLT,  BIN,  MFGDATE,  EXPNDATE  )  select  @I_vSOPTYPE,    @I_vSOPNUMBE,    @I_vLNITMSEQ,    @I_vCMPNTSEQ,    @I_vQTYTYPE,    @I_vLOTNUMBR,    @SERLTQTY,     @SLTSQNUM,     case       when (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 3 and @QTY < 0)   then ''  else @I_vDATERECD  end,  case       when (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 3 and @QTY < 0)  then 0  else @DTSEQNUM  end,  case       when (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 3 and @QTY < 0)  then 0  else @UNITCOST  end,  @I_vITEMNMBR,    '',       0,       case        when (@I_vSOPTYPE = 3 and @QTY < 0)   then 0   else @OVRSERLT  end,  case @ENABLEMULTIBIN  when 1  then @I_vBIN  else ''  end,  @I_vMFGDATE,    @I_vEXPNDATE    if (@@error <> 0)  begin  select @O_iErrorState = 3324    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@ENABLEMULTIBIN = 1) and (@I_vSOPTYPE <> 4)   begin  update IV00112 set ATYALLOC = ATYALLOC + @SERLTQTY  from IV00112 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 7189    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   if (@I_vSOPTYPE <> 4) and (@QTY > 0)   begin  if (((@USPFULPR = 0) or (@I_vQTYFULFI > 0)) and (@I_vDROPSHIP = 0))  begin  update IV00300 set  ATYALLOC = ATYALLOC + @QtyAvail,   LTNUMSLD =  case  when @QTYRECVD = @ATYALLOC + @QtyAvail + @QTYSOLD  then 1  else 0  end  from IV00300 (updlock)  where ITEMNMBR = @I_vITEMNMBR and   LOCNCODE = @I_vLOCNCODE and  LOTNUMBR = @I_vLOTNUMBR and  DATERECD = @I_vDATERECD and  DTSEQNUM = @DTSEQNUM and  QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 3329    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   select @QtyDone = @QtyDone + @QtyAvail  select @DTSEQNUM = 0   if ((@LotFound = 1) or (@QtyDone = @I_vQUANTITY) or (@I_vSOPTYPE = 4) or (@QTY < 0))   begin  break  end  end  break end  if (@mylock = 1) begin  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 3,   @I_vtable_path_name = @SOPHdrTbl,   @I_vrow_id = @DexRowID,     @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 4712    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  exec @iStatus = taSopLotAutoPost  @I_vSOPTYPE,  @I_vSOPNUMBE,  @I_vUSERDATE,  @I_vLNITMSEQ,  @I_vITEMNMBR,  @I_vLOCNCODE,  @I_vQUANTITY,  @I_vBIN,  @I_vCREATEBIN,  @I_vLOTNUMBR,  @I_vEXPNDATE,  @I_vMFGDATE,  @I_vQTYTYPE,  @I_vRequesterTrx,  @I_vDOCID,  @I_vDROPSHIP,  @I_vQTYFULFI,  @I_vALLOCATE,  @I_vCMPNTSEQ,  @I_vLOTNUMBRToReplace,  @I_vAUTOCREATELOT,  @I_vUOFM,  @I_vDATERECD,     @I_vUpdateIfExists,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 2630    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='Sales_Transaction',  @I_vINDEX1=@I_vSOPNUMBE,  @I_vINDEX2=@I_vSOPTYPE,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomState  select @O_iErrorState = 4713    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopLotAuto] TO [DYNGRP]
GO
