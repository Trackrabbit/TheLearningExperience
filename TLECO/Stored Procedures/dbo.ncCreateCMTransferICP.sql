SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ncCreateCMTransferICP] 	@I_iCompanyNum smallint, 			/* target company number */ 	@I_iSourceCompanyNum smallint, 			/* source company number */ 	@I_sSourceCompanyDB char(5) = NULL,		/* source company database id (INTERID) */ 	@I_sUserId char(15) = NULL,			/* current user id */ 	@I_iORCTRNUM char(21),				/* our transfer number from the source company */ 	@I_iJrnEntry int,				/* the journal that was just created */ 	@I_sBatchSource char(15), 			/* the batch source */ 	@I_sBatchNumber char(15),			/* and batch hdr are journal can be found in */ 	@I_nFuncAmt [numeric](19, 5), 	@I_nOrigAmt [numeric](19, 5), 	@I_iMulticurrency smallint,			/* 10/27/2014 KDP Is multicurrency managment enabled */ 	@O_ControlNumber [numeric](19, 5) = NULL output, /*return this docs control number so we can update the jrn with it*/ 	@O_iError int = NULL output			/* error code (return value) */ as declare  	/* NC_CM_Transfer_IC_MSTR fields */ 	@iCmpanyid [smallint], 	@nXfrRecordNumber [numeric](19, 5), 	@iNcSrcAccountIndex [int], 	@iNcDestAccountIndex [int] , 	@iNcSourceCompanyId [smallint], 	@sCurncyID [char] (15) , 	@sChekbkid [char] (15)  , 	@iActindx [int]  , 	@sDistRef [char] (31) , 	@nNcXfrRecordNumber [numeric](19, 5), 	@sNcCurencyId [char] (15) , 	@sNcChekbookId [char] (15) , 	@iNcAccountIndex [int]  , 	@sNcDistributonReference [char] (31), 	@iXfrDate [datetime], 	@iMCFunctionalOriginating tinyint, 	@iVOIDED tinyint, 	/* From transfer details*/ 	@sCmxfrnum  [char] (21), 	@iCmFrmRecNum [numeric](19, 5), 	/* Exchnage details from the journal*/ 	@sExchangeTableId char(15),  	@dtExchangeDate datetime,  	@dtExchangeTime datetime, 	@nExchangeRate numeric(19,7),  	@nDenominationExchangeRate numeric(19,7),  	@iMCTransactionState smallint, 	@iRateCalcMethod smallint,  	@sRateTypeId char(15), 	/* new doc number stuff */ 	@nNewXfrRecordNumber [numeric](19, 5), 	@iCmToRecNum [numeric](19, 5), 	@iErr int, 	@iErrState int, 	@nNoteIndex numeric(19,5), 	@sPaidToRcvdFrom  [char] (65), 	@iCurrencyIndex [smallint], 	@iDpc [smallint], 	@tTempExecute [char] (1000), 	/*void transaction details*/ 	@dVOIDDATE [datetime], 	@dVOIDPDATE [datetime], 	@sVOIDDESC [char] (31),	 	/* KDP CM00100 details */ 	@sCMCurncyID [char] (15), 	@I_nchkbkAmt [numeric](19, 5), 	@source_CURRIDX [smallint], 	@I_ncDestFuncAmt [numeric](19, 5), 	@I_ncDebitFuncAmt [numeric](19, 5), 	@I_ncCreditFuncAmt [numeric](19, 5), 	@I_ncCreditOrigAmt [numeric](19, 5), 	@I_ncDebitOrigAmt [numeric](19, 5), 	@I_ncDestOrigAmt [numeric](19, 5) /*get the data we need to create the destination part of this transaction from the source company */ /* Records we need to create  transfer table (CM20600) transaction record (CM20200) CM journal (CM20100) CM distribution (CM20400) */ set nocount on /* see if they exist */ create table #CMTransferExtra ( 	CMPANYID [smallint], 	Xfr_Record_Number [numeric](19, 5), 	NC_Src_Account_Index [int], 	NC_Dest_IC_Account_Index [int] , 	NC_Source_Company_ID [smallint], 	CURNCYID [char] (15) , 	CHEKBKID [char] (15)  , 	ACTINDX [int]  , 	DistRef [char] (31) , 	NC_Xfr_Record_Number [numeric](19, 5)  , 	NC_Currency_ID [char] (15) , 	NC_Checkbook_ID [char] (15) , 	NC_Account_Index [int]  , 	NC_Distribution_Referenc [char] (31), 	FUNCTAMT [numeric](19, 5)  , 	ORIGAMT [numeric](19, 5), 	CMXFTDATE [datetime], 	NC_FunctionalOriginating [smallint], 	VOIDED [smallint]) select @tTempExecute =  'insert into #CMTransferExtra '+ 		        ' select CMPANYID,Xfr_Record_Number,NC_Src_Account_Index,NC_Dest_IC_Account_Index,'+ 			'	NC_Source_Company_ID,CURNCYID,CHEKBKID,ACTINDX,DistRef,NC_Xfr_Record_Number,'+ 			'	NC_Currency_ID,NC_Checkbook_ID,NC_Account_Index,'+ 			'	NC_Distribution_Referenc,FUNCTAMT,ORIGAMT,CMXFTDATE,NC_FunctionalOriginating,VOIDED '+ 			' 	from '+@I_sSourceCompanyDB+'.dbo.NCIC5004 '+ 			'	where Xfr_Record_Number='+@I_iORCTRNUM +' and CMPANYID ='+str(@I_iCompanyNum)+' ' exec( @tTempExecute ) select  @iCmpanyid=CMPANYID, 	@nXfrRecordNumber=Xfr_Record_Number, 	@iNcSrcAccountIndex=NC_Src_Account_Index, 	@iNcDestAccountIndex=NC_Dest_IC_Account_Index, 	@iNcSourceCompanyId=NC_Source_Company_ID, 	@sCurncyID=CURNCYID, 	@sChekbkid=CHEKBKID, 	@iActindx=ACTINDX, 	@sDistRef=DistRef, 	@nNcXfrRecordNumber=NC_Xfr_Record_Number, 	@sNcCurencyId=NC_Currency_ID, 	@sNcChekbookId=NC_Checkbook_ID, 	@iNcAccountIndex=NC_Account_Index, 	@sNcDistributonReference=NC_Distribution_Referenc, 	@iXfrDate=CMXFTDATE, 	@iMCFunctionalOriginating=NC_FunctionalOriginating, 	@iVOIDED=VOIDED from 	#CMTransferExtra where	Xfr_Record_Number=@I_iORCTRNUM drop table #CMTransferExtra /*if already created return*/ if (@iVOIDED=0) and (@nNcXfrRecordNumber<>0 or @nNcXfrRecordNumber=null)  	return /* KDP add trx date here */ declare @sTrxDate datetime; /*Get the currency and exchange details from the journal we just created*/ select  	@sTrxDate=TRXDATE,@sRateTypeId=RATETPID,@sExchangeTableId=EXGTBLID,@nExchangeRate=XCHGRATE, 	@dtExchangeDate=EXCHDATE,@dtExchangeTime=TIME1,@iRateCalcMethod=RTCLCMTD, 	@sNcCurencyId=CURNCYID,@nDenominationExchangeRate=DENXRATE,@iMCTransactionState=MCTRXSTT from GL10000 where JRNENTRY=@I_iJrnEntry and BACHNUMB=@I_sBatchNumber and BCHSOURC=@I_sBatchSource /* KDP get transaction functional detials from GL10001 */ select top 1  @iMCTransactionState=MCTRXSTT,@I_ncDebitFuncAmt=DEBITAMT,@I_ncCreditFuncAmt=CRDTAMNT,@I_ncDebitOrigAmt = ORDBTAMT ,@I_ncCreditOrigAmt = ORCRDAMT from GL10001  where JRNENTRY=@I_iJrnEntry and BACHNUMB=@I_sBatchNumber /* KDP set functional from GL transaction.  */ if (@I_ncDebitFuncAmt != 0)    set @I_ncDestFuncAmt = @I_ncDebitFuncAmt else    set @I_ncDestFuncAmt = @I_ncCreditFuncAmt /* KDP set original from GL transaction.  */ if (@I_ncDebitFuncAmt != 0)    set @I_ncDestOrigAmt = @I_ncDebitOrigAmt else    set @I_ncDestOrigAmt = @I_ncCreditOrigAmt /* fetch the transfer str number and the from transaction number*/ create table #CMTransferSource ( 	CMXFRNUM [char](21), 	CMFRMRECNUM [numeric](19, 5)) select @tTempExecute =  ' insert into #CMTransferSource '+ 		        ' select CMXFRNUM,CMFRMRECNUM '+ 			' from '+@I_sSourceCompanyDB+'.dbo.CM20600 '+ 			' where Xfr_Record_Number='+@I_iORCTRNUM exec( @tTempExecute ) select @sCmxfrnum=CMXFRNUM,        @iCmFrmRecNum=CMFRMRECNUM                 from   #CMTransferSource drop table #CMTransferSource if (@iVOIDED=0) begin 	/* Get the next transfer record number*/ 	select top 1 @nNewXfrRecordNumber=Xfr_Record_Number+1 	from CM20600 /*CM_Transfer*/ 	order by Xfr_Record_Number desc 	/*Mike South 12/06/2006 in case no record has been posted before*/ 	if  (isnull( @nNewXfrRecordNumber,0)=0) 		select @nNewXfrRecordNumber=1 	/**/ 	/*14/06/2006 Mike South */ 	select @O_ControlNumber=@nNewXfrRecordNumber 	/**/ 	 	/* Get the next transaction record number*/ 	select top 1 @iCmToRecNum=CMDNUMWK+1 /* link record number */ 	from CM20100 /*CM_Journal*/ 	order by CMDNUMWK desc 	/*Mike South 12/06/2006 in case no record has been posted before*/ 	if  (isnull( @iCmToRecNum,0)=0) 		select @iCmToRecNum=1 	/**/ 	 	/* get new note index for transfer */ 	exec DYNAMICS.dbo.smGetNextNoteIndex @I_iCompanyNum, @@SPID, @nNoteIndex output, @iErr output 	if @iErr <> 0 	begin 		select @O_iError = 1 		return 	end 	 	/* KDP checkbook currency details */ 	select @sCMCurncyID=CURNCYID  	from CM00100 where CHEKBKID=@sNcChekbookId 	 	declare @iNC_FunctionalOriginating smallint, 			@iNC_SourceCoyCurrIdx smallint,  			@iNC_TrnOriginCurrIdx smallint, 			@I_iNC_BankCurrIdx smallint, 			@iSeries smallint,  			@dtTrxDate datetime, 			@iISMCTrx smallint, 			@sCurrencyId char(15), 			@iDecimalPlaces smallint, 			@iFnCurrencyIndex smallint; 			 	 	set @dtTrxDate = @sTrxDate; 	set @iSeries =2 /* financial */ 	set @iNC_FunctionalOriginating = 1; 	 	select @iNC_SourceCoyCurrIdx=CURRNIDX 	from DYNAMICS.dbo.MC40200 	where CURNCYID=@sNcCurencyId; 	 	/*KDP get currency index for source checkbook currency*/ 	select @iNC_TrnOriginCurrIdx=CURRNIDX 	from DYNAMICS.dbo.MC40200 	where CURNCYID=@sNcCurencyId 	 	/*KDP get currency index for dest checkbook currency*/ 	select @I_iNC_BankCurrIdx=CURRNIDX 	from DYNAMICS.dbo.MC40200 	where CURNCYID=@sCMCurncyID 	 	 	select @iFnCurrencyIndex = FUNCRIDX from MC40000; 	 	if(@iFnCurrencyIndex = @I_iNC_BankCurrIdx) 	   select @I_iNC_BankCurrIdx = 0; 	 	/* KDP we always need to check for the correct exchange data */ 	exec ncDefaultMCData @I_iCompanyNum, @iNC_FunctionalOriginating, @iFnCurrencyIndex,@iNC_TrnOriginCurrIdx,@I_iNC_BankCurrIdx, 					@iSeries, @dtTrxDate, @sExchangeTableId output, @dtExchangeDate output, @dtExchangeTime output, 					@nExchangeRate output, @nDenominationExchangeRate output, @iMCTransactionState output, 					@iRateCalcMethod output, @sRateTypeId output, @iISMCTrx output, @iCurrencyIndex output, 					@sCurrencyId output, @iDecimalPlaces output, @iErr output 	 	 	 	/*get currency details*/ 	/* select @iCurrencyIndex=CURRNIDX, @iDpc=DECPLCUR */ 	/* from DYNAMICS.dbo.MC40200 */ 	/* where CURNCYID=@sNcCurencyId */ 	/*KDP 2 get currency details also dest checkbook currency*/ 	  select @iCurrencyIndex=CURRNIDX, @iDpc=DECPLCUR  	  from DYNAMICS.dbo.MC40200  	  where CURNCYID=@sCMCurncyID  	select @source_CURRIDX=CURRNIDX, @iDpc=DECPLCUR 	from DYNAMICS.dbo.MC40200 	where CURNCYID=@sCurncyID 	 	 	/* KDP 2 set @I_nchkbkAmt = @I_nFuncAmt */ 	/* If Originating else Functional. Note: We are assuming at this point that both source and dest are the same */ 	/* 10/27/2014 KDP- handle if Multicurrency management is disabled */ 	if (@I_iMulticurrency != 0)  	begin 		if(@iMCFunctionalOriginating = 1) 		begin     		   set @I_nFuncAmt = @I_ncDestFuncAmt; 		   if(@iCurrencyIndex = @iFnCurrencyIndex) 		      set @I_nchkbkAmt = @I_ncDestFuncAmt 		   else if (@iCurrencyIndex = @iNC_TrnOriginCurrIdx) 		      set @I_nchkbkAmt = @I_ncDestOrigAmt 		   else 		      set @I_nchkbkAmt = round(@I_ncDestFuncAmt / @nExchangeRate,@iDecimalPlaces); 	 		   if(@iCurrencyIndex != @iNC_TrnOriginCurrIdx and @iCurrencyIndex = @iFnCurrencyIndex) 		      Set @I_nOrigAmt = @I_nchkbkAmt; 		   else 	 	      set @I_nOrigAmt = @I_ncDestOrigAmt; /* KDP should be the same as GL10001 */ 		end 		else   /* Functional older code to be updated */ 		begin 	 	   set @I_nFuncAmt = @I_ncDestFuncAmt; 		   if(@iCurrencyIndex = @iFnCurrencyIndex) 		      set @I_nchkbkAmt = @I_ncDestFuncAmt 		   else  		      set @I_nchkbkAmt = round(@I_ncDestFuncAmt / @nExchangeRate,@iDecimalPlaces); 		   set @I_nOrigAmt = @I_ncDestOrigAmt; /* KDP should be the same as GL10001 */ 		end 	end 	else 	begin  /* 10/27/2014 KDP if multicurrency is disabled then no exchange data is used */ 		set @I_nFuncAmt = @I_ncDestFuncAmt; 		set @I_nchkbkAmt = @I_ncDestFuncAmt 		set @I_nOrigAmt = @I_ncDestOrigAmt; /* KDP should be the same as GL10001 */ 	end 				   /* end KDP */ 	 	if @iCurrencyIndex is null set @iCurrencyIndex = 0 /*vilasw*/ 	if @iDpc is null set @iDpc = 0 /*vilasw*/ 	 	/* get the next audit trail code*/ 	 	/* Save new transfer record (select * from CM20600) */  	insert into CM20600 ( 				Xfr_Record_Number,CMXFRNUM,CMFRMRECNUM,CMTORECNUM,CMFRMSTATUS,CMTOSTATUS, 				CMFRMCHKBKID,CMCHKBKID,CMXFTDATE,NOTEINDX 			    )  			    values  			    (  				@nNewXfrRecordNumber,/*@sCmxfrnum*/0,@iCmFrmRecNum,@iCmToRecNum ,0,0, 				@sChekbkid,@sNcChekbookId,@iXfrDate,@nNoteIndex 			     ) 	 	/*KDP 08/12/2014 add audit trail code for reconcile match report */ 	declare @I_cAuditXrCode char(13); 	set @I_cAuditXrCode = 'ICPX' + SUBSTRING(@sCmxfrnum,4,13); 	/* end KDP */ 	 	/* save new transaction record (select * from CM20200)*/ 	select @sPaidToRcvdFrom='Transfer From '+@sChekbkid 	insert into CM20200 ( 				CMRECNUM,sRecNum,RCRDSTTS,CHEKBKID,CMTrxNum,CMTrxType,TRXDATE,GLPOSTDT,TRXAMNT,CURNCYID, 				CMLinkID,paidtorcvdfrom,DSCRIPTN,Recond,RECONUM,ClrdAmt,clearedate,VOIDED,VOIDDATE, 				VOIDPDATE,VOIDDESC,NOTEINDX,AUDITTRAIL,DEPTYPE,SOURCDOC,SRCDOCTYP,SRCDOCNUM ,POSTEDDT, 				PTDUSRID,MODIFDT,MDFUSRID,USERDEF1,USERDEF2,ORIGAMT,Checkbook_Amount,RATETPID,EXGTBLID, 				XCHGRATE,EXCHDATE,TIME1,RTCLCMTD,EXPNDATE,CURRNIDX, 				DECPLCUR,DENXRATE,MCTRXSTT,Xfr_Record_Number 			    )  			    values  			    (  				@iCmToRecNum,@iCmToRecNum,40,@sNcChekbookId,@sCmxfrnum,7,@iXfrDate,@iXfrDate,@I_nFuncAmt,@sCMCurncyID, 				'',@sPaidToRcvdFrom,'Intercompany Transfer',0,0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000', 				'1900-01-01 00:00:00.000','',@nNoteIndex,@I_cAuditXrCode,0,'CMXFR',7,@sCmxfrnum,@iXfrDate, 				@I_sUserId,@iXfrDate,@I_sUserId,'','',@I_nOrigAmt,@I_nchkbkAmt,@sRateTypeId,@sExchangeTableId, 				@nExchangeRate,@dtExchangeDate,@dtExchangeTime,@iRateCalcMethod,'1900-01-01 00:00:00.000',@iCurrencyIndex, 				@iDpc,@nDenominationExchangeRate,@iMCTransactionState,@nNewXfrRecordNumber 				) 	 	/* save new journal record (select * from CM20100) */ 	insert into CM20100 ( 				CMDNUMWK,RecNumControl,VOIDED,CNTRLTYP,AUDITTRAIL,CHEKBKID,CMTrxType,CMTrxNum,CMERRMSG 			    )  			    values  			    ( 				@iCmToRecNum,@iCmToRecNum,0,1,'',@sNcChekbookId,7,@sCmxfrnum,0x00000000 			     ) 	 	/*Save new distribution record (select * from CM20400)*/ 	insert into CM20400 ( 				CMDNUMWK,VOIDED,DSTSQNUM,ACTINDX,DEBITAMT,CRDTAMNT,DistRef, GLPOSTDT,ORCRDAMT,ORDBTAMT 			    )  			    values  			    (  				@iCmToRecNum ,0,1,@iNcAccountIndex,@I_nFuncAmt,0,@sNcDistributonReference,@iXfrDate,0,@I_nOrigAmt 			     ) 	 	/* save new nc cm transfer extras record (select * from NCIC5004) */ 	insert into NCIC5004 ( 				CMPANYID,Xfr_Record_Number,NC_Src_Account_Index,NC_Dest_IC_Account_Index,NC_Source_Company_ID, 				CURNCYID,CHEKBKID,ACTINDX,DistRef,NC_Xfr_Record_Number,NC_Currency_ID,NC_Checkbook_ID, 				NC_Account_Index,NC_Distribution_Referenc,FUNCTAMT,ORIGAMT,CMXFTDATE,NC_FunctionalOriginating, 				VOIDED 			    )  			    values  			    (  				 @iCmpanyid,@nNewXfrRecordNumber,@iNcSrcAccountIndex,@iNcDestAccountIndex,@iNcSourceCompanyId, 				 @sCurncyID,@sChekbkid,@iActindx,@sDistRef,@nXfrRecordNumber,@sNcCurencyId,@sNcChekbookId, 				 @iNcAccountIndex,@sNcDistributonReference,@I_nFuncAmt,@I_nOrigAmt,@iXfrDate,@iMCFunctionalOriginating, 				 @iVOIDED 			    ) 	/*Update the check book balance*/ 	if @I_nOrigAmt <> 0  	begin 		 /* update CM00100 set CURRBLNC = CURRBLNC + @I_nOrigAmt where CHEKBKID = @sNcChekbookId */ 		/* KDP */ 		update CM00100 set CURRBLNC = CURRBLNC + @I_nchkbkAmt where CHEKBKID = @sNcChekbookId  	end 	else 	begin 		update CM00100 set CURRBLNC = CURRBLNC + @I_nFuncAmt where CHEKBKID = @sNcChekbookId 	end 	 	/* update source transfer record with to record */ 	select @tTempExecute=	'update '+@I_sSourceCompanyDB+'.dbo.CM20600 '+ 				'set CMTORECNUM='+str(@iCmToRecNum)+' '+ 				'where Xfr_Record_Number='+str(@nXfrRecordNumber)+' ' 	 	exec (@tTempExecute) 	  	/* 25/11/2014  KDP This code no longer works with non sa users. Changed to use a wrapper */ 	/*		  Wrapper runs on source company with execute as owner                  */ 	/* 25/11/2014  KDP Removed update source nc extra record with to record  		*/ 	/* select @tTempExecute=	'update '+@I_sSourceCompanyDB+'.dbo.NCIC5004 '+  	*/ 	/*			'set NC_Xfr_Record_Number='+str(@nNewXfrRecordNumber)+' '+ 	*/ 	/*			'where Xfr_Record_Number='+str(@nXfrRecordNumber)+' ' 		*/ 	/* 											*/ 	/* exec (@tTempExecute)  								*/ 		 	declare @O_iErrorState int, 		@NtTempExecute NVARCHAR(500), 		@iStatus int, 		@ParmDefinition NVARCHAR(500) 	SET @ParmDefinition=N'@nNewXfrRecordNumber int,@nXfrRecordNumber int,@O_iErrorState int output' 	select @NtTempExecute=N'exec '+@I_sSourceCompanyDB+'.dbo.NC_Update_NCIC5004 @nNewXfrRecordNumber,@nXfrRecordNumber,@O_iErrorState OUTPUT' 	 	exec sp_executesql @NtTempExecute,  			   @ParmDefinition, 			   @nNewXfrRecordNumber=@nNewXfrRecordNumber, 			   @nXfrRecordNumber=@nXfrRecordNumber, 			   @O_iErrorState = @O_iErrorState OUTPUT 	 	/* 25/11/2014 KDP End wrapper call for Update */ 	 end else begin 	/*14/06/2006 Mike South */ 	/*Get the destination transfer number from the source transfer number*/ 	select @O_ControlNumber=@nNcXfrRecordNumber 	/**/ 	/* handle voids */ 	/*fetch the void details from the other company*/ 	create table #CMTransferTransaction ( 						VOIDDATE [datetime], 						VOIDPDATE [datetime], 						VOIDDESC [char] (31) 					      ) 						 	select @tTempExecute =  ' insert into #CMTransferTransaction '+ 			        ' select VOIDDATE,VOIDPDATE,VOIDDESC '+ 				' from '+@I_sSourceCompanyDB+'.dbo.CM20200 '+ 				' where Xfr_Record_Number='+@I_iORCTRNUM 	exec( @tTempExecute ) 	 	select @dVOIDDATE=VOIDDATE, 	       @dVOIDPDATE=VOIDPDATE, 	       @sVOIDDESC=VOIDDESC                	from   #CMTransferTransaction 	 	drop table #CMTransferTransaction 	/* update bank transaction record to voided*/ 	update CM20200  	set VOIDED=1, VOIDDATE=@dVOIDDATE, VOIDPDATE=@dVOIDPDATE,VOIDDESC=@sVOIDDESC 	where Xfr_Record_Number=@nNcXfrRecordNumber 	/* update NC extras document to voided*/ 	update NCIC5004  	set VOIDED=1  	where Xfr_Record_Number=@nNcXfrRecordNumber 	 end  
GO
GRANT EXECUTE ON  [dbo].[ncCreateCMTransferICP] TO [DYNGRP]
GO
GRANT EXECUTE ON  [dbo].[ncCreateCMTransferICP] TO [public]
GO
