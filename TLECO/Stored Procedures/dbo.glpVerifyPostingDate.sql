SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpVerifyPostingDate]  @I_sTransactionType                     smallint        = NULL,  @I_sHeaderTransactionType               smallint        = NULL,  @I_dTransactionDate                     datetime        = NULL,  @I_dReversingDate                       datetime        = NULL,  @I_sBatchFrequency                      smallint        = NULL,  @I_tPosting                             tinyint         = NULL,  @IO_bHeaderMessages                     binary(4)       = NULL  output,  @O_sTransactionPeriodID smallint        = NULL  output,  @O_sTransactionYear                     smallint        = NULL  output,  @O_sTransactionClosingYear              smallint        = NULL  output,  @O_tTransactionHistory                  tinyint         = NULL  output,  @O_sReversingPeriodID smallint        = NULL  output,  @O_sReversingYear                       smallint        = NULL  output,  @O_sReversingClosingYear                smallint        = NULL  output,  @O_tReversingHistory                    tinyint         = NULL  output,  @O_iErrorState                          int             = NULL  output,  @O_iJournalEntry int  = NULL output  as  declare  @TRUE                           tinyint,  @FALSE                          tinyint,  @NORMAL_TRX                     smallint,  @CLEARING_TRX smallint,  @BUDGET_TRX smallint,   @SINGLE_USE                     smallint,  @BUSINESS_FORM smallint,  @FINANCIAL                      smallint,  @MS_ITEM_1                      int,  @MS_ITEM_12                     int,  @MS_ITEM_17                     int,  @MS_ITEM_20                     int,  @MS_ITEM_25                     int,  @MS_ITEM_28                     int,  @MS_ITEM_30                     int,  @MS_ITEM_32 int,   @DEFAULT_DATE datetime,  @dPostingDate                   datetime,  @sPeriodID smallint,  @sYear                          smallint,  @sClosingYear                   smallint,  @tHistory tinyint ,  @iError                         int,  @iStatus int,  @iCalculatePeriodError          int,  @tCounter tinyint,  @tMaxLoop tinyint,  @tPeriodClosed                  tinyint,  @tPostToInvalidHist             tinyint,  @tFirstTwoOpenYears             tinyint,  @tPostHistOpenYearInvalid       tinyint,  @tGLSetpAllowHistoryPosting     tinyint,  @tTransaction                   tinyint,  @cOrigin char(50),  @tLoop                          tinyint,  @dMinDate datetime,  @O_iPostToInvalidBudget int   select  @O_sTransactionPeriodID         = 0,  @O_sTransactionYear             = 0,  @O_sTransactionClosingYear      = 0,  @O_tTransactionHistory          = 0,  @O_sReversingPeriodID   = 0,  @O_sReversingYear               = 0,  @O_sReversingClosingYear        = 0,  @O_tReversingHistory            = 0,  @O_iErrorState                  = 0,  @iStatus                        = 0,  @O_iPostToInvalidBudget  = 0   exec @iStatus = smGetMinDate @dMinDate output  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin   select @tLoop = 1   if      @I_sTransactionType             is NULL or  @I_sHeaderTransactionType       is NULL or  @I_dTransactionDate             is NULL or  @I_dReversingDate               is NULL or  @I_sBatchFrequency              is NULL or  @I_tPosting                     is NULL or  @IO_bHeaderMessages             is NULL  begin  select @O_iErrorState = 20205  break  end    select  @TRUE                   = 1,  @FALSE                  = 0,  @NORMAL_TRX             = 1,  @CLEARING_TRX   = 2,  @BUDGET_TRX    = 4,   @SINGLE_USE             = 1,  @BUSINESS_FORM   = 5,  @FINANCIAL              = 2,  @MS_ITEM_1              = power(2, 24),  @MS_ITEM_12             = power(2, 19),  @MS_ITEM_17             = power(2, 8),  @MS_ITEM_20             = power(2, 11),  @MS_ITEM_25             = power(2, 0),  @MS_ITEM_28             = power(2, 3),  @MS_ITEM_30             = power(2, 5),  @DEFAULT_DATE  = @dMinDate   select  @dPostingDate           = @DEFAULT_DATE,  @sPeriodID              = 0,  @sYear                  = 0,  @sClosingYear           = 0,  @tHistory               = 0,  @iCalculatePeriodError  = 0,  @tCounter               = 1,  @tMaxLoop               = 0,  @tPeriodClosed          = 0,  @tPostToInvalidHist     = 0,  @tFirstTwoOpenYears     = 0,  @tPostHistOpenYearInvalid = 0   if      @I_sTransactionType = @NORMAL_TRX  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_GENERAL_ENTRY',          @cOrigin            output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   end  else if @I_sTransactionType = @CLEARING_TRX  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_CLEARING_ENTRY',          @cOrigin      output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   end     else if @I_sTransactionType = @BUDGET_TRX  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_BUDGET_ENTRY',          @cOrigin        output,  @O_iErrorState  output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   end     else if @I_sTransactionType = @BUSINESS_FORM  begin  exec @iStatus = DYNAMICS..smGetConstantString  'TRX_SOURCE_GL_QUICK_ENTRY',         @cOrigin            output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  end   if @iStatus <> 0 or @O_iErrorState <> 0  break   if      @I_sTransactionType = @NORMAL_TRX and   @I_sHeaderTransactionType = 1   begin  select @tMaxLoop = 2  end  else   begin  select @tMaxLoop = 1  end   select @dPostingDate = @I_dTransactionDate   while (@tCounter < = @tMaxLoop)  begin  exec @iStatus = glVerifyTRXDate  @FINANCIAL,  @cOrigin,  @dPostingDate,  @dPostingDate,     @sPeriodID output,  @sYear                          output,  @sClosingYear                   output,  @tPeriodClosed                  output,  @iCalculatePeriodError          output,  @tHistory output,  @tPostToInvalidHist             output,  @tPostHistOpenYearInvalid       output,  @tFirstTwoOpenYears             output,  @O_iErrorState                  output,  @O_iPostToInvalidBudget output,   @O_iJournalEntry output   if @iCalculatePeriodError <> 0  select @IO_bHeaderMessages =  (@IO_bHeaderMessages | @MS_ITEM_25)   if @O_iErrorState <> 0 and @iCalculatePeriodError = 2  begin  if (@I_tPosting = @FALSE)  select @O_iErrorState = 0  end   if @iStatus <> 0 or @O_iErrorState <> 0  break   if @tHistory = @TRUE  begin     select   @tGLSetpAllowHistoryPosting = AHSTPSTG  from  GL40000 with (NOLOCK)   if @@rowcount <> 1  begin  select @O_iErrorState = 20207  break  end   if      (@I_sTransactionType = @NORMAL_TRX      or  @I_sTransactionType = @CLEARING_TRX) and  @I_sBatchFrequency <> @SINGLE_USE  select @IO_bHeaderMessages =  (@IO_bHeaderMessages | @MS_ITEM_12)   if @tPostToInvalidHist = @TRUE  select @IO_bHeaderMessages =  (@IO_bHeaderMessages | @MS_ITEM_1)   if @tGLSetpAllowHistoryPosting = @FALSE  select @IO_bHeaderMessages =  (@IO_bHeaderMessages | @MS_ITEM_20)   if @tPostHistOpenYearInvalid = @FALSE  select @IO_bHeaderMessages =  (@IO_bHeaderMessages | @MS_ITEM_28)  end  if @tPeriodClosed = @TRUE   select @IO_bHeaderMessages =   (@IO_bHeaderMessages | @MS_ITEM_17)   if @O_iPostToInvalidBudget = 1    select @IO_bHeaderMessages =   (@IO_bHeaderMessages | @MS_ITEM_32)   if (@IO_bHeaderMessages <> 0) and (@I_tPosting = @TRUE)  begin  if @O_iPostToInvalidBudget = 1    select @O_iErrorState = 20102  else  select @O_iErrorState = 20282  break  end   if @tCounter = 1  begin  select  @O_sTransactionPeriodID = @sPeriodID,  @O_sTransactionYear = @sYear,  @O_sTransactionClosingYear = @sClosingYear,  @O_tTransactionHistory = @tHistory   select @dPostingDate = @I_dReversingDate  end   else  begin  select  @O_sReversingPeriodID = @sPeriodID,  @O_sReversingYear = @sYear,  @O_sReversingClosingYear = @sClosingYear,  @O_tReversingHistory = @tHistory  end   select @tCounter = @tCounter + 1   end   end   if @iStatus <> 0 or @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[glpVerifyPostingDate] TO [DYNGRP]
GO
