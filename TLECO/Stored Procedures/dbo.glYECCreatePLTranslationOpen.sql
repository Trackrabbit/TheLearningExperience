SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glYECCreatePLTranslationOpen]  @I_sYear smallint = NULL,  @I_LedgerID int   = NULL,  @I_cUser_ID char(15) = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_tBeforeSegmentLength tinyint  = NULL,  @I_tDivisionalSegmentLength tinyint  = NULL,  @I_tTrueREClosing tinyint  = NULL,  @I_iRE_Account_Index int  = NULL,  @I_POST_ACCT int  = NULL,  @I_PROFIT_AND_LOSS int  = NULL,  @I_UNIT_ACCT int  = NULL,  @I_BAL_SHEET int  = NULL,  @I_cFunctional_Currency char(15) = NULL,  @I_cRate_Type_ID char(15) = NULL,  @I_cExchange_Table_ID char(15) = NULL,  @I_dYearStartDate datetime = NULL,  @I_dYearEndDate datetime = NULL,  @I_dYearPeriodZeroDate datetime = NULL,  @I_nUserSeqNumber int   = NULL,  @O_SQL_Error_State int   = NULL output  as  declare @TranslationExists int,  @FALSE int,  @TRUE int,  @iStatus int,  @iError int,  @cDBName char(5),  @REAcctType tinyint,  @cPLSource varchar(255),  @MaxCurrency numeric(19,5)  select @O_SQL_Error_State = 0  if  @I_sYear is NULL or  @I_LedgerID is NULL or  @I_cUser_ID is NULL or  @I_tMCRegistered is NULL or  @I_tBeforeSegmentLength is NULL or  @I_tDivisionalSegmentLength is NULL or  @I_tTrueREClosing is NULL or  @I_iRE_Account_Index is NULL or  @I_POST_ACCT is NULL or  @I_PROFIT_AND_LOSS is NULL or  @I_UNIT_ACCT is NULL or  @I_BAL_SHEET is NULL or  @I_cFunctional_Currency is NULL or  @I_cRate_Type_ID is NULL or  @I_cExchange_Table_ID is NULL or  @I_dYearStartDate is NULL or  @I_dYearEndDate is NULL or  @I_dYearPeriodZeroDate is NULL  begin  select @O_SQL_Error_State = 20856  return  end   select @TranslationExists = 0,  @FALSE = 0,  @TRUE = 1,  @iStatus = 0,  @MaxCurrency = 99999999999999.99999  select @cDBName = db_name()  if exists(select 1 from MC40600)  select @TranslationExists = 1 else  select @TranslationExists = @FALSE  if @TranslationExists = @FALSE   return  select @REAcctType = CurrencyTranslationType from MC00200 where ACTINDX = @I_iRE_Account_Index and CURNCYID = ''   exec    @iStatus = DYNAMICS.dbo.smGetMsgString 12125, @cDBName, @cPLSource output, @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  if @I_tMCRegistered = @TRUE and @I_tTrueREClosing = @TRUE  begin   insert into  GL50500  (SGMNTID,  USERID,  ORD,  Ledger_ID,  CURNCYID,  TranslationCurrencyID,   CURRNIDX,   DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  REARNAMT,   ORIGAMT,  Translation_Amount,  RERINDX)  select  distinct substring(ACTNUMST, @I_tBeforeSegmentLength, @I_tDivisionalSegmentLength),  @I_cUser_ID,  @I_nUserSeqNumber,  Ledger_ID,  CURNCYID,  TranslationCurrencyID,   max(CURRNIDX),  max(DECPLCUR),  @I_cRate_Type_ID,  @I_cExchange_Table_ID,  min(XCHGRATE),  max(RTCLCMTD),  max(DENXRATE),  max(MCTRXSTT),  @REAcctType,  SUM(DEBITAMT)-SUM(CRDTAMNT),  SUM(ORDBTAMT)-SUM(ORCRDAMT),  case   when SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount) >= @MaxCurrency then  @MaxCurrency  when SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount) <= -@MaxCurrency then  -@MaxCurrency  else  SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount)  end,   @I_iRE_Account_Index   from( select  GL105.ACTNUMST,  GLView.ACTINDX,  GLView.Ledger_ID,  GLView.CURNCYID,  GLView.TranslationCurrencyID,  GLView.CurrencyTranslationType,  GLView.CRDTAMNT,  GLView.DEBITAMT,  GLView.ORCRDAMT,  GLView.ORDBTAMT,  isnull(GLView.TranslationCreditAmount, 0) as TranslationCreditAmount,  isnull(GLView.TranslationDebitAmount, 0) as TranslationDebitAmount,  GLView.CURRNIDX,  GLView.DECPLCUR,  GLView.EXGTBLID,  GLView.TranslationExchangeRate as XCHGRATE,    GLView.EXCHDATE,  GLView.TIME1,  GLView.RTCLCMTD,  GLView.DENXRATE,  GLView.MCTRXSTT  from  GL20000CurrencyTranslationView GLView,  GL00100 GLMSTR, GL00105 GL105  where (GLMSTR.ACTINDX = GLView.ACTINDX  and GL105.ACTINDX = GLView.ACTINDX  and GLView.OPENYEAR = @I_sYear  and GLView.Ledger_ID = @I_LedgerID)  and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT  and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and GLView.TRXDATE >= @I_dYearStartDate   union all   select   GL20000Current.ACTNUMST,   GL20000Current.ACTINDX,  GL20000Current.Ledger_ID,   GL20000Current.CURNCYID,  GL20000Current.TranslationCurrencyID,  GL20000Current.CurrencyTranslationType,  GL20000Current.CRDTAMNT,  GL20000Current.DEBITAMT,  GL20000Current.ORCRDAMT,  GL20000Current.ORDBTAMT,  case isnull(GL20000Current.CRDTAMNT, 0)  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmountExtended(GL20000Current.RTCLCMTD, 3,   GL20000Current.TranslationExchangeRate,  GL20000Current.DENXRATE,  GL20000Current.MCTRXSTT,  GL20000Current.DECPLCUR,   GL20000Current.CRDTAMNT)  end as TranslationCreditAmount,  case isnull(GL20000Current.DEBITAMT, 0)  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmountExtended([GL20000Current].[RTCLCMTD], 3,   GL20000Current.TranslationExchangeRate,  GL20000Current.DENXRATE,  GL20000Current.MCTRXSTT,  GL20000Current.DECPLCUR,   GL20000Current.DEBITAMT)  end as TranslationDebitAmount,  GL20000Current.CURRNIDX,  GL20000Current.DECPLCUR,  GL20000Current.EXGTBLID,  GL20000Current.TranslationExchangeRate as XCHGRATE,  0 as EXCHDATE,  0 as TIME1,  GL20000Current.RTCLCMTD,  GL20000Current.DENXRATE,  GL20000Current.MCTRXSTT  from (  select   GL_YTD_Current.ACTNUMST,   GL_YTD_Current.ACTINDX,  GL_YTD_Current.Ledger_ID,   GL_YTD_Current.CURNCYID,  GL_YTD_Current.TranslationCurrencyID,  GL_YTD_Current.CurrencyTranslationType,  isnull(GL_YTD_Current.CRDTAMNT, 0) as CRDTAMNT,  isnull(GL_YTD_Current.DEBITAMT, 0) as DEBITAMT,  isnull(GL_YTD_Current.ORCRDAMT, 0) as ORCRDAMT,  isnull(GL_YTD_Current.ORDBTAMT, 0) as ORDBTAMT,  E.CURRNIDX,  (E.DECPLCUR - 1) as DECPLCUR,  GL_YTD_Current.EXGTBLID,  GL_YTD_Current.Original_Exchange_Rate,  dbo.mcFuncGetExchangeRate(@I_dYearEndDate, GL_YTD_Current.EXGTBLID, D.TRXDTDEF, D.DATELMTS, D.PRVDSLMT, D.Base_Exchange_Rate_On, GL_YTD_Current.MCTRXSTT,GL_YTD_Current.CurrencyTranslationType) as TranslationExchangeRate,  D.RTCLCMTD,  GL_YTD_Current.MCTRXSTT,  dbo.mcFuncGetDenExchRate(GL_YTD_Current.TranslationCurrencyID, D.RTCLCMTD) as DENXRATE  from (  select   GL105.ACTNUMST,  GL.ACTINDX,  GL.Ledger_ID,  GL.CURNCYID,  MCTran.CURNCYID as TranslationCurrencyID,  MCAcct.CurrencyTranslationType,  GL.CRDTAMNT,  GL.DEBITAMT,  GL.ORCRDAMT,  GL.ORDBTAMT,  MCTran.CurrentExchangeTableID as EXGTBLID,  GL.XCHGRATE as Original_Exchange_Rate,  dbo.mcFuncGetMCTrxState(MCTran.CURNCYID) as MCTRXSTT   from GL20000 GL, MC00200 MCAcct, GL00100 GLMSTR, GL00105 GL105, MC40600 MCTran  where GL.ACTINDX= MCAcct.ACTINDX and MCAcct.CURNCYID = ''   and MCAcct.CurrencyTranslationType = 2   and GLMSTR.ACTINDX = GL.ACTINDX  and GL105.ACTINDX = GL.ACTINDX  and GL.OPENYEAR = @I_sYear  and GL.Ledger_ID = @I_LedgerID  and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT  and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and GL.TRXDATE >= @I_dYearStartDate  ) GL_YTD_Current, DYNAMICS..MC40300 D, DYNAMICS..MC40200 E  where GL_YTD_Current.EXGTBLID = D.EXGTBLID and D.CURNCYID = E.CURNCYID ) GL20000Current   union all  select  GLTRXBBFResults.ACTNUMST,  GLTRXBBFResults.ACTINDX,  GLTRXBBFResults.Ledger_ID,  GLTRXBBFResults.CURNCYID,  GLTRXBBFResults.TranslationCurrencyID,  GLTRXBBFResults.CurrencyTranslationType,  GLTRXBBFResults.CRDTAMNT,  GLTRXBBFResults.DEBITAMT,  GLTRXBBFResults.ORCRDAMT,  GLTRXBBFResults.ORDBTAMT,  isnull(GLTRXBBFResults.TranslationCreditAmount, 0) as TranslationCreditAmount,  isnull(GLTRXBBFResults.TranslationDebitAmount, 0) as TranslationDebitAmount,  isnull(GLTRXBBFResults.CURRNIDX, MC40200.CURRNIDX) as CURRNIDX,  isnull(GLTRXBBFResults.DECPLCUR, (MC40200.DECPLCUR - 1)) as DECPLCUR,  GLTRXBBFResults.EXGTBLID,  isnull(GLTRXBBFResults.XCHGRATE, 0) as XCHGRATE,  isnull(GLTRXBBFResults.EXCHDATE, 0) as EXCHDATE,  isnull(GLTRXBBFResults.TIME1, 0) as TIME1,  isnull(GLTRXBBFResults.RTCLCMTD, isnull(MC40300.RTCLCMTD,0)) as RTCLCMTD,  isnull(GLTRXBBFResults.DENXRATE, dbo.mcFuncGetDenExchRate(GLTRXBBFResults.TranslationCurrencyID, isnull(GLTRXBBFResults.RTCLCMTD, isnull(MC40300.RTCLCMTD,0)))) as DENXRATE,  GLTRXBBFResults.MCTRXSTT  from (select  GLBBFMerge.ACTNUMST,  GLBBFMerge.ACTINDX,  GLBBFMerge.Ledger_ID,  GLBBFMerge.CURNCYID,  GLBBFMerge.TranslationCurrencyID,  GLBBFMerge.CurrencyTranslationType,  GLBBFMerge.CRDTAMNT,  GLBBFMerge.DEBITAMT,  GLBBFMerge.ORCRDAMT,  GLBBFMerge.ORDBTAMT,  isnull(GLBBF.TranslationCreditAmount,GLBBFMerge.CRDTAMNT) as TranslationCreditAmount,  isnull(GLBBF.TranslationDebitAmount, GLBBFMerge.DEBITAMT) as TranslationDebitAmount,  GLBBF.CURRNIDX,  GLBBF.DECPLCUR,  isnull(GLBBF.EXGTBLID, GLBBFMerge.EXGTBLID) as EXGTBLID,  GLBBF.XCHGRATE,  GLBBF.EXCHDATE,  GLBBF.TIME1,  GLBBF.RTCLCMTD,  GLBBF.DENXRATE,  isnull(GLBBF.MCTRXSTT, GLBBFMerge.MCTRXSTT) as MCTRXSTT  from  (select GLTRX.ACTINDX,  GLTRX.JRNENTRY,  GLTRX.CURNCYID,  GLTRX.OPENYEAR,  GLTRX.SEQNUMBR,  GLTRX.Ledger_ID,  GLTRX.CRDTAMNT,  GLTRX.DEBITAMT,  GLTRX.ORCRDAMT,  GLTRX.ORDBTAMT,  GL105.ACTNUMST,  GLTRX.TRXDATE,  MCTRAN.CURNCYID as TranslationCurrencyID,  MC.CurrencyTranslationType,  EXGTBLID=  case MC.CurrencyTranslationType  when 1 then MCTRAN.AverageExchangeTableID  when 2 then MCTRAN.CurrentExchangeTableID  when 3 then MCTRAN.HistoricalExchgTableID  end,  dbo.mcFuncGetMCTrxState(MCTRAN.CURNCYID  ) as MCTRXSTT  from GL20000 GLTRX, MC40600 MCTRAN, MC00200 MC, GL00100 GLMSTR, GL00105 GL105  where GLTRX.ACTINDX = MC.ACTINDX and MC.CURNCYID = ''  and GLTRX.ACTINDX = GLMSTR.ACTINDX  and GLTRX.ACTINDX = GL105.ACTINDX  and GLTRX.OPENYEAR = @I_sYear   and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and GLTRX.TRXDATE < @I_dYearStartDate  and ((MC.CurrencyTranslationType = 1 or MC.CurrencyTranslationType = 3)  or (MC.CurrencyTranslationType = 2 and SOURCDOC = @cPLSource))  ) GLBBFMerge  left outer join (select  BBF.ACTINDX,  BBF.JRNENTRY,  BBF.CURNCYID,  BBF.Ledger_ID,  BBF.OPENYEAR,  BBF.TRXDATE,  BBF.SEQNUMBR,  BBF.TranslationCurrencyID,  BBF.TranslationCreditAmount,  BBF.TranslationDebitAmount,  BBF.CURRNIDX,  BBF.DECPLCUR,  BBF.EXGTBLID,  BBF.XCHGRATE,  BBF.EXCHDATE,  BBF.TIME1,  BBF.RTCLCMTD,  BBF.DENXRATE,  BBF.MCTRXSTT  from GL20001 BBF, GL00100 GLMSTR  where BBF.ACTINDX = GLMSTR.ACTINDX  and BBF.OPENYEAR = @I_sYear  and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and BBF.TRXDATE < @I_dYearStartDate  ) GLBBF  on GLBBF.ACTINDX = GLBBFMerge.ACTINDX and GLBBF.JRNENTRY = GLBBFMerge.JRNENTRY and GLBBF.CURNCYID = GLBBFMerge.CURNCYID   and GLBBF.OPENYEAR = GLBBFMerge.OPENYEAR and GLBBF.TRXDATE = GLBBFMerge.TRXDATE and GLBBF.SEQNUMBR = GLBBFMerge.SEQNUMBR   and GLBBF.Ledger_ID = GLBBFMerge.Ledger_ID and GLBBF.TranslationCurrencyID = GLBBFMerge.TranslationCurrencyID     ) as GLTRXBBFResults  left outer join DYNAMICS..MC40300 MC40300  on (GLTRXBBFResults.TranslationCurrencyID = MC40300.CURNCYID and GLTRXBBFResults.EXGTBLID = MC40300.EXGTBLID)  join DYNAMICS..MC40200 MC40200  on GLTRXBBFResults.TranslationCurrencyID = MC40200.CURNCYID ) FINAL_GLResults  group by   TranslationCurrencyID, substring(ACTNUMST, @I_tBeforeSegmentLength, @I_tDivisionalSegmentLength ), Ledger_ID, CURNCYID   end  else if @I_tMCRegistered = @TRUE and @I_tTrueREClosing = @FALSE  begin  insert into  GL50500  (USERID,  ORD,  SGMNTID,   Ledger_ID,  CURNCYID,  TranslationCurrencyID,   CURRNIDX,   DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  REARNAMT,   ORIGAMT,  Translation_Amount,  RERINDX)  select  @I_cUser_ID,  @I_nUserSeqNumber,  '',    Ledger_ID,  CURNCYID,  TranslationCurrencyID,  max(CURRNIDX),  max(DECPLCUR),  @I_cRate_Type_ID,  @I_cExchange_Table_ID,  min(XCHGRATE),  max(RTCLCMTD),  max(DENXRATE),  max(MCTRXSTT),  @REAcctType,  SUM(DEBITAMT)-SUM(CRDTAMNT),  SUM(ORDBTAMT)-SUM(ORCRDAMT),  case   when SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount) >= @MaxCurrency then  @MaxCurrency  when SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount) <= -@MaxCurrency then  -@MaxCurrency  else  SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount)  end,  @I_iRE_Account_Index  from (  select  '' as ACTNUMST,  GLView.ACTINDX,  GLView.Ledger_ID,  GLView.CURNCYID,  GLView.TranslationCurrencyID,  GLView.CurrencyTranslationType,  GLView.CRDTAMNT,  GLView.DEBITAMT,  GLView.ORCRDAMT,  GLView.ORDBTAMT,  isnull(GLView.TranslationCreditAmount, 0) as TranslationCreditAmount,  isnull(GLView.TranslationDebitAmount, 0) as TranslationDebitAmount,  GLView.CURRNIDX,  GLView.DECPLCUR,  GLView.EXGTBLID,  GLView.TranslationExchangeRate as XCHGRATE,    GLView.EXCHDATE,  GLView.TIME1,  GLView.RTCLCMTD,  GLView.DENXRATE,  GLView.MCTRXSTT  from  GL20000CurrencyTranslationView GLView,  GL00100 GLMSTR  where (GLMSTR.ACTINDX = GLView.ACTINDX  and GLView.OPENYEAR = @I_sYear  and GLView.Ledger_ID = @I_LedgerID)  and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT  and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and GLView.TRXDATE >= @I_dYearStartDate   union all  select   GL20000Current.ACTNUMST,   GL20000Current.ACTINDX,  GL20000Current.Ledger_ID,   GL20000Current.CURNCYID,  GL20000Current.TranslationCurrencyID,  GL20000Current.CurrencyTranslationType,  GL20000Current.CRDTAMNT,  GL20000Current.DEBITAMT,  GL20000Current.ORCRDAMT,  GL20000Current.ORDBTAMT,  case isnull(GL20000Current.CRDTAMNT, 0)  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmountExtended(GL20000Current.RTCLCMTD, 3,   GL20000Current.TranslationExchangeRate,  GL20000Current.DENXRATE,  GL20000Current.MCTRXSTT,  GL20000Current.DECPLCUR,   GL20000Current.CRDTAMNT)  end as TranslationCreditAmount,  case isnull(GL20000Current.DEBITAMT, 0)  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmountExtended([GL20000Current].[RTCLCMTD], 3,   GL20000Current.TranslationExchangeRate,  GL20000Current.DENXRATE,  GL20000Current.MCTRXSTT,  GL20000Current.DECPLCUR,   GL20000Current.DEBITAMT)  end as TranslationDebitAmount,  GL20000Current.CURRNIDX,  GL20000Current.DECPLCUR,  GL20000Current.EXGTBLID,  GL20000Current.TranslationExchangeRate as XCHGRATE,  0 as EXCHDATE,  0 as TIME1,  GL20000Current.RTCLCMTD,  GL20000Current.DENXRATE,  GL20000Current.MCTRXSTT  from (  select   GL_YTD_Current.ACTNUMST,   GL_YTD_Current.ACTINDX,  GL_YTD_Current.Ledger_ID,   GL_YTD_Current.CURNCYID,  GL_YTD_Current.TranslationCurrencyID,  GL_YTD_Current.CurrencyTranslationType,  GL_YTD_Current.CRDTAMNT,  GL_YTD_Current.DEBITAMT,  GL_YTD_Current.ORCRDAMT,  GL_YTD_Current.ORDBTAMT,  E.CURRNIDX,  (E.DECPLCUR - 1) as DECPLCUR,  GL_YTD_Current.EXGTBLID,  GL_YTD_Current.Original_Exchange_Rate,  dbo.mcFuncGetExchangeRate( @I_dYearEndDate, GL_YTD_Current.EXGTBLID, D.TRXDTDEF, D.DATELMTS, D.PRVDSLMT, D.Base_Exchange_Rate_On, GL_YTD_Current.MCTRXSTT,GL_YTD_Current.CurrencyTranslationType) as TranslationExchangeRate,  D.RTCLCMTD,  GL_YTD_Current.MCTRXSTT,  dbo.mcFuncGetDenExchRate(GL_YTD_Current.TranslationCurrencyID, D.RTCLCMTD) as DENXRATE  from (  select   GL105.ACTNUMST,  GL.ACTINDX,  GL.Ledger_ID,  GL.CURNCYID,  MCTran.CURNCYID as TranslationCurrencyID,  MCAcct.CurrencyTranslationType,  GL.CRDTAMNT,  GL.DEBITAMT,  GL.ORCRDAMT,  GL.ORDBTAMT,  MCTran.CurrentExchangeTableID as EXGTBLID,  GL.XCHGRATE as Original_Exchange_Rate,  dbo.mcFuncGetMCTrxState(MCTran.CURNCYID) as MCTRXSTT   from GL20000 GL, MC00200 MCAcct, GL00100 GLMSTR, GL00105 GL105, MC40600 MCTran  where GL.ACTINDX= MCAcct.ACTINDX and MCAcct.CURNCYID = ''   and MCAcct.CurrencyTranslationType = 2   and GLMSTR.ACTINDX = GL.ACTINDX  and GL105.ACTINDX = GL.ACTINDX  and GL.OPENYEAR = @I_sYear  and GL.Ledger_ID = @I_LedgerID  and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT  and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and GL.TRXDATE >= @I_dYearStartDate  ) GL_YTD_Current, DYNAMICS..MC40300 D, DYNAMICS..MC40200 E  where GL_YTD_Current.EXGTBLID = D.EXGTBLID and D.CURNCYID = E.CURNCYID ) GL20000Current   union all  select  GLTRXBBFResults.ACTNUMST,  GLTRXBBFResults.ACTINDX,  GLTRXBBFResults.Ledger_ID,  GLTRXBBFResults.CURNCYID,  GLTRXBBFResults.TranslationCurrencyID,  GLTRXBBFResults.CurrencyTranslationType,  GLTRXBBFResults.CRDTAMNT,  GLTRXBBFResults.DEBITAMT,  GLTRXBBFResults.ORCRDAMT,  GLTRXBBFResults.ORDBTAMT,  isnull(GLTRXBBFResults.TranslationCreditAmount, 0) as TranslationCreditAmount,   isnull(GLTRXBBFResults.TranslationDebitAmount,  0) as TranslationDebitAmount,  isnull(GLTRXBBFResults.CURRNIDX, MC40200.CURRNIDX) as CURRNIDX,  isnull(GLTRXBBFResults.DECPLCUR, (MC40200.DECPLCUR - 1)) as DECPLCUR,  GLTRXBBFResults.EXGTBLID,  isnull(GLTRXBBFResults.XCHGRATE, 0) as XCHGRATE,  isnull(GLTRXBBFResults.EXCHDATE, 0) as EXCHDATE,  isnull(GLTRXBBFResults.TIME1, 0) as TIME1,  isnull(GLTRXBBFResults.RTCLCMTD, isnull(MC40300.RTCLCMTD,0)) as RTCLCMTD,  isnull(GLTRXBBFResults.DENXRATE, dbo.mcFuncGetDenExchRate(GLTRXBBFResults.TranslationCurrencyID, isnull(GLTRXBBFResults.RTCLCMTD, isnull(MC40300.RTCLCMTD,0)))) as DENXRATE,  GLTRXBBFResults.MCTRXSTT  from (  select  GLBBFMerge.ACTNUMST,  GLBBFMerge.ACTINDX,  GLBBFMerge.Ledger_ID,  GLBBFMerge.CURNCYID,  GLBBFMerge.TranslationCurrencyID,  GLBBFMerge.CurrencyTranslationType,  GLBBFMerge.CRDTAMNT,  GLBBFMerge.DEBITAMT,  GLBBFMerge.ORCRDAMT,  GLBBFMerge.ORDBTAMT,  isnull(GLBBF.TranslationCreditAmount,GLBBFMerge.CRDTAMNT) as TranslationCreditAmount,  isnull(GLBBF.TranslationDebitAmount, GLBBFMerge.DEBITAMT) as TranslationDebitAmount,  GLBBF.CURRNIDX,  GLBBF.DECPLCUR,  isnull(GLBBF.EXGTBLID, GLBBFMerge.EXGTBLID) as EXGTBLID,  GLBBF.XCHGRATE,  GLBBF.EXCHDATE,  GLBBF.TIME1,  GLBBF.RTCLCMTD,  GLBBF.DENXRATE,  isnull(GLBBF.MCTRXSTT, GLBBFMerge.MCTRXSTT) as MCTRXSTT  from  (select  GLTRX.ACTINDX,  GLTRX.JRNENTRY,  GLTRX.CURNCYID,  GLTRX.Ledger_ID,  GLTRX.OPENYEAR,  GLTRX.TRXDATE,  GLTRX.SEQNUMBR,  GLTRX.CRDTAMNT,  GLTRX.DEBITAMT,  GLTRX.ORCRDAMT,  GLTRX.ORDBTAMT,  GL105.ACTNUMST,  MCTRAN.CURNCYID as TranslationCurrencyID,  MC.CurrencyTranslationType,  EXGTBLID=  case MC.CurrencyTranslationType  when 1 then MCTRAN.AverageExchangeTableID  when 2 then MCTRAN.CurrentExchangeTableID  when 3 then MCTRAN.HistoricalExchgTableID  end,  dbo.mcFuncGetMCTrxState(MCTRAN.CURNCYID  ) as MCTRXSTT  from GL20000 GLTRX, MC40600 MCTRAN, MC00200 MC, GL00100 GLMSTR, GL00105 GL105  where GLTRX.ACTINDX = MC.ACTINDX and MC.CURNCYID = ''  and GLTRX.ACTINDX = GLMSTR.ACTINDX  and GLTRX.ACTINDX = GL105.ACTINDX  and GLTRX.OPENYEAR = @I_sYear   and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT and GLMSTR.PSTNGTYP <> @I_BAL_SHEET)  and GLTRX.TRXDATE < @I_dYearStartDate  and ((MC.CurrencyTranslationType = 1 or MC.CurrencyTranslationType = 3)  or (MC.CurrencyTranslationType = 2 and SOURCDOC = @cPLSource))  ) GLBBFMerge  left outer join (select  BBF.ACTINDX,  BBF.JRNENTRY,  BBF.CURNCYID,  BBF.Ledger_ID,  BBF.OPENYEAR,  BBF.TRXDATE,  BBF.SEQNUMBR,  BBF.TranslationCurrencyID,  BBF.TranslationCreditAmount,  BBF.TranslationDebitAmount,  BBF.CURRNIDX,  BBF.DECPLCUR,  BBF.EXGTBLID,  BBF.XCHGRATE,  BBF.EXCHDATE,  BBF.TIME1,  BBF.RTCLCMTD,  BBF.DENXRATE,  BBF.MCTRXSTT  from GL20001 BBF, GL00100 GLMSTR  where BBF.ACTINDX = GLMSTR.ACTINDX  and BBF.OPENYEAR = @I_sYear  and (GLMSTR.ACCTTYPE <> @I_UNIT_ACCT and GLMSTR.PSTNGTYP <> @I_BAL_SHEET  and BBF.TRXDATE < @I_dYearStartDate)  ) GLBBF  on GLBBF.ACTINDX = GLBBFMerge.ACTINDX and GLBBF.JRNENTRY = GLBBFMerge.JRNENTRY and GLBBF.CURNCYID = GLBBFMerge.CURNCYID   and GLBBF.OPENYEAR = GLBBFMerge.OPENYEAR and GLBBF.TRXDATE = GLBBFMerge.TRXDATE and GLBBF.SEQNUMBR = GLBBFMerge.SEQNUMBR   and GLBBF.Ledger_ID = GLBBFMerge.Ledger_ID and GLBBF.TranslationCurrencyID = GLBBFMerge.TranslationCurrencyID    ) as GLTRXBBFResults  left outer join DYNAMICS..MC40300 MC40300  on (GLTRXBBFResults.TranslationCurrencyID = MC40300.CURNCYID and GLTRXBBFResults.EXGTBLID = MC40300.EXGTBLID)  join DYNAMICS..MC40200 MC40200  on GLTRXBBFResults.TranslationCurrencyID = MC40200.CURNCYID ) FINAL_GLResults   group by   TranslationCurrencyID, Ledger_ID, CURNCYID   end  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glYECCreatePLTranslationOpen] TO [DYNGRP]
GO
