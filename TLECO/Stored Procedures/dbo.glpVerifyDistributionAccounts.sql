SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpVerifyDistributionAccounts]  @I_iSQLSessionID int             = NULL,  @I_iAccountIndex int             = NULL,  @I_mDebit numeric(19,5) = NULL,  @I_mCredit numeric(19,5) = NULL,  @I_tPosting tinyint  = NULL,   @I_sAllocationType smallint        = NULL,   @I_sFuncDecimalPlaces smallint        = NULL,  @I_sMCTransaction smallint        = NULL,  @I_mOrigDebit numeric(19,5)   = NULL,  @I_mOrigCredit numeric(19,5)   = NULL,  @I_cOrigCurrencyID char(15)        = NULL,  @I_sOrigDecimalPlaces smallint        = NULL,  @I_iRelationID int  = NULL,  @I_sUserLevel smallint = NULL,  @I_iAccessAllAccounts int  = NULL,  @IO_bLineMessages binary(4)       = NULL  output,  @IO_bLineMessages2 binary(4)       = NULL  output,  @O_sAccountType smallint        = NULL  output,  @O_tDistributionsExist  tinyint  = NULL  output,  @O_iErrorState int             = NULL  output as  declare  @TRUE                           tinyint,  @FALSE                          tinyint,  @POST_ACCT                      smallint,  @UNIT_ACCT                      smallint,  @POST_ALLOC_ACCT                smallint,  @UNIT_ALLOC_ACCT                smallint,  @BAL_SHEET                      smallint,  @ALLOCATION                     smallint,  @HISTORY                        smallint,  @YEAR_END_CLOSE          smallint,  @RECONCILE                      smallint,  @MAINTENANCE                    smallint,  @MC_TRANSACTION          smallint,  @MC_CLEARING_TRANSACTION smallint,  @iMsNoDistributions      int,  @iMsMissing                     int,  @iMsInactive                    int,  @iMsAllocation           int,  @iMsIncompatible                int,  @iMsNotPostingAccount    int,  @iMsNotBalanceSheet      int,  @iMsCurrencyNotSelected  int,  @iTypeCount                     int,  @sAccountType                   smallint,   @tTransaction                   tinyint,  @tLoop                          tinyint,  @PrintDistributions tinyint,  @MCRegistered tinyint,  @MCReport tinyint,  @vAccountfiltertable varchar(255),  @vExecstring    varchar(255),  @vExecstring2    varchar(255),  @vWhere1 varchar(255),  @vExecstring3 varchar(255)  select   @O_sAccountType = 3,      @O_tDistributionsExist = 0,  @O_iErrorState = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if      @I_iSQLSessionID is NULL or  @I_iAccountIndex is NULL or  @I_mDebit   is NULL or  @I_mCredit is NULL or  @I_tPosting is NULL or  @I_sAllocationType is NULL or  @I_sFuncDecimalPlaces is NULL or  @I_sMCTransaction is NULL or  @I_mOrigDebit is NULL or  @I_mOrigCredit is NULL or  @I_cOrigCurrencyID is NULL or  @I_sOrigDecimalPlaces   is NULL or  @I_iRelationID is NULL or  @I_sUserLevel is NULL or  @I_iAccessAllAccounts is NULL or  @IO_bLineMessages is NULL or  @IO_bLineMessages2 is NULL  begin  select @O_iErrorState = 20128  break  end    select  @TRUE                           = 1,  @FALSE                          = 0,  @POST_ACCT                      = 1,  @UNIT_ACCT                      = 2,  @POST_ALLOC_ACCT                = 3,  @UNIT_ALLOC_ACCT                = 4,  @BAL_SHEET                      = 0,  @ALLOCATION                     = 1,  @HISTORY   = 2,  @YEAR_END_CLOSE   = 3,  @RECONCILE   = 4,  @MAINTENANCE   = 5,  @MC_TRANSACTION   = 1,  @MC_CLEARING_TRANSACTION = 2   if @I_iAccessAllAccounts = @TRUE  begin  select @vAccountfiltertable = 'GL00100 master '  select @vWhere1 = ''  end  else  begin  select @vWhere1 = ' and master.ACTINDX = acctfilter.ACTINDX and acctfilter.RELID = ' + str(@I_iRelationID)   select @vAccountfiltertable =   case when @I_sUserLevel = 0 then  'GL00100 master, GL00100F1 acctfilter '  else  'GL00100 master, GL00100F' + str(@I_sUserLevel,1) + ' acctfilter '  end  end   select  @PrintDistributions = PrintDistributions,  @MCRegistered = MCRegistered,  @MCReport = MCReport  from  #ReportSetup   if @@rowcount = 0  begin  select  @PrintDistributions = @FALSE,  @MCRegistered = @FALSE,  @MCReport = @FALSE  end   if      @I_sAllocationType <> @ALLOCATION and  @I_sAllocationType <> @HISTORY and  @I_sAllocationType <> @YEAR_END_CLOSE and  @I_sAllocationType <> @RECONCILE and  @I_sAllocationType <> @MAINTENANCE  begin  select @O_iErrorState = 20709   break  end    if      @I_sAllocationType = @HISTORY  or      @I_sAllocationType = @YEAR_END_CLOSE  select   @iMsNoDistributions = power(2,15),   @iMsMissing = power(2,15),    @iMsInactive = power(2,2),    @iMsNotPostingAccount = power(2,0),   @iMsNotBalanceSheet = power(2,1),   @iMsCurrencyNotSelected = power(2,27)   else  begin  select   @iMsMissing = power(2,30),     @iMsInactive = convert(int, 0x80000000),   @iMsIncompatible = power(2,16),                   @iMsAllocation = power(2,23)      if @I_sAllocationType = @ALLOCATION  select   @iMsNoDistributions = power(2,30),   @iMsCurrencyNotSelected = power(2,25)    else if @I_sAllocationType = @RECONCILE or   @I_sAllocationType = @MAINTENANCE  select @iMsNoDistributions = power(2,24)   end    insert   into  #Distributions (  SQLSessionID,  AllocationIndex,   DistributionIndex,  Percentage,  LineMessage,   LineMessages2,  AccountType,  Active,  Debit,  Credit,  OriginatingDebit,  OriginatingCredit,  PostingType,  AllocationType,  Segment,  UnitDecimalPlaces,  CurrencyID,  Verified )  select  @I_iSQLSessionID,  fix.ACTINDX,  fix.DSTINDX,  fix.PRCNTAGE,  @IO_bLineMessages,  @IO_bLineMessages2,  @POST_ACCT,  @FALSE,  round (fix.PRCNTAGE * @I_mDebit/100.00000,@I_sFuncDecimalPlaces),  round (fix.PRCNTAGE * @I_mCredit/100.00000,@I_sFuncDecimalPlaces),  round (fix.PRCNTAGE * @I_mOrigDebit/100.00000,@I_sOrigDecimalPlaces),  round (fix.PRCNTAGE * @I_mOrigCredit/100.00000,@I_sOrigDecimalPlaces),  @BAL_SHEET,  @I_sAllocationType,  '',  0,  @I_cOrigCurrencyID,  @FALSE  from   GL00103 fix  where  fix.ACTINDX = @I_iAccountIndex    if @@rowcount = 0  begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsNoDistributions)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20112  end    break  end   else  select @O_tDistributionsExist = @TRUE   if @MCRegistered = @TRUE and @PrintDistributions = @TRUE and @MCReport = @FALSE  begin  insert   into  #DistErrors (  SQLSessionID,  AllocationIndex,   DistributionIndex,  DistMessages2)  select  SQLSessionID,  AllocationIndex,  DistributionIndex,  LineMessages2  from   #Distributions  where  #Distributions.AllocationIndex = @I_iAccountIndex   and not exists (select 1  from  #DistErrors  where  #DistErrors.AllocationIndex =   #Distributions.AllocationIndex and  #DistErrors.DistributionIndex =   #Distributions.DistributionIndex)  end   select @vExecstring = 'update #Distributions set LineMessage = (LineMessage | ' +   str(@iMsMissing) + ') where SQLSessionID = ' +  str(@I_iSQLSessionID) + ' and AllocationIndex = ' +  str(@I_iAccountIndex) + ' and AllocationType = '    select @vExecstring2 = str(@I_sAllocationType) + ' and DistributionIndex not in ' +  '(select master.ACTINDX from ' +  @vAccountfiltertable + ' where master.ACTINDX = DistributionIndex ' +  @vWhere1 + ')'   exec(@vExecstring + @vExecstring2)  if @@rowcount <> 0  begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsMissing)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20113  break  end    end    select @vExecstring = 'update #Distributions set #Distributions.AccountType = master.ACCTTYPE,  #Distributions.Active = master.ACTIVE,#Distributions.PostingType = master.PSTNGTYP, ' +  ' #Distributions.UnitDecimalPlaces = master.DECPLACS from #Distributions, '    select @vExecstring2 = @vAccountfiltertable  + ' where  #Distributions.SQLSessionID = ' + str(@I_iSQLSessionID) +  ' and     #Distributions.AllocationIndex = ' + str(@I_iAccountIndex) +  ' and     #Distributions.DistributionIndex = master.ACTINDX ' +   ' and #Distributions.AllocationType = ' + str(@I_sAllocationType)   select @vExecstring3 = ' and     (#Distributions.LineMessage & ' +   str(@iMsMissing) + ') <> ' + str(@iMsMissing) + @vWhere1   exec(@vExecstring + @vExecstring2 + @vExecstring3)  if @@rowcount = 0  begin  if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20172  break  end    end    update #Distributions   set     LineMessage = (LineMessage | @iMsInactive)  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex  and AllocationType = @I_sAllocationType  and     Active = @FALSE  and     (LineMessage & @iMsMissing) <> @iMsMissing   if @@rowcount > 0  begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsInactive)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20114  break  end    end    if      @I_sAllocationType = @ALLOCATION or  @I_sAllocationType = @RECONCILE or  @I_sAllocationType = @MAINTENANCE  begin     update #Distributions   set     LineMessage = (LineMessage | @iMsAllocation)  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex  and AllocationType = @I_sAllocationType  and     (AccountType = @POST_ALLOC_ACCT  or      AccountType = @UNIT_ALLOC_ACCT)   and     (LineMessage & @iMsMissing) <> @iMsMissing   if @@rowcount > 0  begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsAllocation)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20115  break  end    end    set rowcount 1   select   @sAccountType = AccountType  from   #Distributions   where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex  and AllocationType = @I_sAllocationType  and     (LineMessage & @iMsMissing) <> @iMsMissing   if @@rowcount <> 1  begin  if @I_tPosting = @TRUE  begin   select @O_iErrorState =  20116    set rowcount 0   break  end     set rowcount 0  break  end    set rowcount 0   if @sAccountType = @POST_ACCT  select @O_sAccountType = @POST_ALLOC_ACCT  else if @sAccountType = @UNIT_ACCT  select @O_sAccountType = @UNIT_ALLOC_ACCT   update #Distributions   set LineMessage = (LineMessage | @iMsIncompatible)  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex   and AllocationType = @I_sAllocationType  and     AccountType  <> @sAccountType   and     (LineMessage & @iMsMissing) <> @iMsMissing   if @@rowcount > 0   begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsIncompatible)   if @I_tPosting = @TRUE   begin  select @O_iErrorState = 20117  break  end    end   end   else    begin  update #Distributions   set     LineMessage = (LineMessage | @iMsNotPostingAccount)  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex  and AllocationType = @I_sAllocationType  and     AccountType <> @POST_ACCT  and     (LineMessage & @iMsMissing) <> @iMsMissing   if @@rowcount > 0  begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsNotPostingAccount)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20372  break  end    end    update #Distributions   set     LineMessage = (LineMessage | @iMsNotBalanceSheet)  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex  and AllocationType = @I_sAllocationType  and     PostingType <> @BAL_SHEET  and     (LineMessage & @iMsMissing) <> @iMsMissing   if @@rowcount > 0  begin  select @IO_bLineMessages = (@IO_bLineMessages | @iMsNotBalanceSheet)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20373  break  end    end   end    if (@I_sMCTransaction = @MC_TRANSACTION or  @I_sMCTransaction = @MC_CLEARING_TRANSACTION)   and @I_sAllocationType = @ALLOCATION  begin  update #Distributions   set     LineMessages2 = (LineMessages2 | @iMsCurrencyNotSelected)  where  SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @I_iAccountIndex  and AllocationType = @I_sAllocationType  and     (AccountType = @POST_ACCT  or      AccountType = @POST_ALLOC_ACCT)   and     DistributionIndex  not in (   select  ACTINDX  from  #Distributions fixed,  MC00200 master  where  fixed.DistributionIndex = master.ACTINDX  and     master.CURNCYID = @I_cOrigCurrencyID  and     (fixed.LineMessage & @iMsMissing) <> @iMsMissing )   if @@rowcount > 0  begin  update #DistErrors   set     DistMessages2 = (DistMessages2 | @iMsCurrencyNotSelected)  where  SQLSessionID = @I_iSQLSessionID  and  AllocationIndex = @I_iAccountIndex  and  DistributionIndex  not in (   select  ACTINDX  from  MC00200 master  where  master.CURNCYID = @I_cOrigCurrencyID  and #DistErrors.DistributionIndex = master.ACTINDX)   select @IO_bLineMessages2 = (@IO_bLineMessages2 | @iMsCurrencyNotSelected)   if @I_tPosting = @TRUE  begin  select @O_iErrorState = 20783  break  end    end   end  end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return    
GO
GRANT EXECUTE ON  [dbo].[glpVerifyDistributionAccounts] TO [DYNGRP]
GO
