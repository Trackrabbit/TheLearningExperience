SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopMultiBin]  @I_vSOPNUMBE char(21),     @I_vSOPTYPE smallint,    @I_vITEMNMBR char(30),    @I_vLNITMSEQ int = 0,    @I_vCMPNTSEQ int = 0,    @I_vBIN char(15) = '',    @I_vQTYTYPE smallint = 1,    @I_vUOFM char(8) = '',    @I_vQUANTITY numeric(19,5),   @I_vCreateBin int = 0,    @I_vOverrideBin tinyint = 0,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',   @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @count int,  @LNITMSEQ int,  @SEQNUMBR int,  @CMPNTSEQ int,  @LineQty numeric(19,5),  @BinQtyDone numeric(19,5),  @QtyLeft numeric(19,5),  @BinQtyAvail numeric(19,5),  @ITMTRKOP tinyint,  @ITEMTYPE tinyint,  @LOCNCODE char(10),  @QTYBSUOM numeric(19,5),  @UOFMBASE char(8),  @UOMSCHDL char(10),  @UseDefaultBin smallint,  @sCompanyID int,  @NOTEINDX numeric(19,5),  @iGetNextNoteIdxErrState int,  @iStatus int,  @iError int,  @iCustomState int,  @iCustomErrString varchar(255),  @O_oErrorState int  select  @count = 0,  @LNITMSEQ = 0,  @SEQNUMBR = 0,  @CMPNTSEQ = 0,  @LineQty = 0,  @BinQtyDone = 0,  @QtyLeft = 0,  @BinQtyAvail = 0,  @ITMTRKOP = 0,  @ITEMTYPE = 0,  @LOCNCODE = '',  @QTYBSUOM = 1,  @UOFMBASE = 0,  @UOMSCHDL = '',  @UseDefaultBin = 0,  @sCompanyID = 0,  @NOTEINDX = 0,  @iGetNextNoteIdxErrState = 0,  @iStatus = 0,  @iError = 0,  @iCustomState = 0,  @iCustomErrString = '',  @O_iErrorState = 0  if (@oErrString is null) begin  select @oErrString = '' end  exec @iStatus = taSopMultiBinPre  @I_vSOPNUMBE output,  @I_vSOPTYPE output,  @I_vITEMNMBR output,  @I_vLNITMSEQ output,  @I_vCMPNTSEQ output,  @I_vBIN output,  @I_vQTYTYPE output,  @I_vUOFM output,  @I_vQUANTITY output,  @I_vCreateBin output,  @I_vOverrideBin output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 7202    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (  @I_vSOPNUMBE is null or  @I_vSOPTYPE is null or  @I_vITEMNMBR is null or  @I_vLNITMSEQ is null or  @I_vCMPNTSEQ is null or  @I_vBIN is null or  @I_vQTYTYPE is null or  @I_vUOFM is null or  @I_vQUANTITY is null or  @I_vCreateBin is null or  @I_vOverrideBin is null or  @I_vRequesterTrx is null) begin  select @O_iErrorState = 7203    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE = 0) or (@I_vSOPNUMBE = '') or (@I_vQUANTITY < 0)) begin  select @O_iErrorState = 7204     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @I_vSOPNUMBE = upper(@I_vSOPNUMBE),  @I_vITEMNMBR = upper(@I_vITEMNMBR),  @I_vBIN = upper(@I_vBIN)  if ((select ENABLEMULTIBIN from IV40100 (nolock)) <> 1) begin  select @O_iErrorState = 7205    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return(@O_iErrorState) end  if (@I_vOverrideBin not in (0,1)) begin  select @O_iErrorState = 7207     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vRequesterTrx not in (0,1)) begin  select @O_iErrorState = 7208     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSOPTYPE not in (2,3,4,6)) begin  select @O_iErrorState = 7209     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE = 2 or @I_vSOPTYPE = 3 or @I_vSOPTYPE = 6) and (@I_vQTYTYPE <> 1)) begin  select @O_iErrorState = 7210     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vQTYTYPE not in (1,2,3,4,5)) begin  select @O_iErrorState = 7211     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @count = count(*), @LNITMSEQ = isnull(max(LNITMSEQ),0) from SOP10200 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and ITEMNMBR = @I_vITEMNMBR  if (@count = 0) begin  select @O_iErrorState = 7212     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@count > 1) and (@I_vLNITMSEQ = 0)) begin  select @O_iErrorState = 7213     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vLNITMSEQ <> 0) and (@count > 1)) begin  if not exists(select 1 from SOP10200 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and  ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ)  begin  select @O_iErrorState = 7214     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@count = 1) begin  select @I_vLNITMSEQ = @LNITMSEQ end  select @count = 0   select @count = count(*), @CMPNTSEQ = isnull(max(CMPNTSEQ),0) from SOP10200 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and  ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ  if ((@CMPNTSEQ > 0) and (@I_vCMPNTSEQ = 0)) begin  select @O_iErrorState = 7215     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @LOCNCODE = LOCNCODE, @LineQty = QTYFULFI * QTYBSUOM from SOP10200 (nolock)   where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and  ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and @I_vCMPNTSEQ = CMPNTSEQ  if (@LOCNCODE = '') begin  select @O_iErrorState = 7216     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@count = 1) and (@I_vCMPNTSEQ = 0)) begin  select @I_vCMPNTSEQ = @CMPNTSEQ end  select @SEQNUMBR = isnull(max(SEQNUMBR),0) + 16384 from SOP10203 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and  ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and @I_vCMPNTSEQ = CMPNTSEQ  select @ITMTRKOP = ITMTRKOP, @UOMSCHDL = UOMSCHDL, @ITEMTYPE = ITEMTYPE from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  if (@ITMTRKOP <> 1) begin  select @O_iErrorState = 7217     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @UOFMBASE = BASEUOFM from IV40201 (nolock) where UOMSCHDL = @UOMSCHDL  if (@I_vUOFM = '') begin  select @I_vUOFM = @UOFMBASE end  if (@I_vUOFM = '') begin  select @O_iErrorState = 7218     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @QTYBSUOM = QTYBSUOM from IV40202 (nolock) where UOMSCHDL = @UOMSCHDL and EQUIVUOM = @UOFMBASE and UOFM = @I_vUOFM  if (@I_vUOFM <> @UOFMBASE) begin  select @I_vQUANTITY = @I_vQUANTITY * @QTYBSUOM end  select @BinQtyDone = isnull(sum(QUANTITY),0) from SOP10203 (nolock)  where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and  ITEMNMBR = @I_vITEMNMBR and LNITMSEQ = @I_vLNITMSEQ and @I_vCMPNTSEQ = CMPNTSEQ  select @QtyLeft = @LineQty - @BinQtyDone  if ((@QtyLeft < @I_vQUANTITY) and (@I_vSOPTYPE <> 4)) begin  select @O_iErrorState = 7220    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vBIN = '') begin  select @UseDefaultBin = 1 end  if (@I_vCreateBin not in (0,1)) begin  select @O_iErrorState = 7221     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE in (2,3,6)) and (@I_vBIN <> '')) begin  if not exists(select 1 from IV40701 (nolock) where LOCNCODE = @LOCNCODE and BIN = @I_vBIN)  begin  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 7222     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin = 1)  begin  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 (nolock) where INTERID = db_name()   exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 7223    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @LOCNCODE, @I_vBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 7224    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @LOCNCODE and  BIN = @I_vBIN and QTYTYPE = 1)  begin  if (@I_vCreateBin = 1)  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @LOCNCODE, @I_vBIN,1,0, @I_vQUANTITY  if (@@error <> 0)  begin  select @O_iErrorState = 7225    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 7226     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  if (@I_vCreateBin = 1)  set @I_vCreateBin=0  end end  if (@I_vSOPTYPE = 4) begin  select @I_vBIN = SORETURNBIN from IV00102 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @LOCNCODE   if (@I_vBIN = '')  begin  select @I_vBIN = SORETURNBIN from IV40700 (nolock)  where LOCNCODE = @LOCNCODE  end   if (@I_vBIN = '')  begin  select @O_iErrorState = 7227     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   select @UseDefaultBin = 1 end  if (@I_vSOPTYPE in (2,3,6)) begin  if (@UseDefaultBin = 1)  begin  select @I_vBIN = SOFULFILLMENTBIN from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @LOCNCODE   if (@I_vBIN = '')  begin  select @I_vBIN = SOFULFILLMENTBIN from IV40700 (nolock) where LOCNCODE = @LOCNCODE  end   if (@I_vBIN = '')  begin  select @O_iErrorState = 7228     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   select @BinQtyAvail = QUANTITY - ATYALLOC from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @LOCNCODE and BIN = @I_vBIN and QTYTYPE = 1   if ((@BinQtyAvail < @I_vQUANTITY) and (@I_vOverrideBin = 0))  begin  select @O_iErrorState = 7229     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  if (@I_vCreateBin = 0)  begin  if exists (select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @LOCNCODE and BIN = @I_vBIN and QTYTYPE = 1)  begin  update IV00112 set ATYALLOC = ATYALLOC + @I_vQUANTITY  from IV00112 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @LOCNCODE and BIN = @I_vBIN and QTYTYPE = 1  if (@@error <> 0)  begin  select @O_iErrorState = 7230    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  insert IV00112 (ITEMNMBR,LOCNCODE,BIN,QTYTYPE,QUANTITY,ATYALLOC)  select @I_vITEMNMBR, @LOCNCODE, @I_vBIN, 1, 0, @I_vQUANTITY  if (@@error <> 0)  begin  select @O_iErrorState = 6355    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end end  if (@O_iErrorState <> 0) begin  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'Sales_Transaction',  @I_vINDEX1 = @I_vSOPNUMBE,  @I_vINDEX2 = @I_vSOPTYPE,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomState  select @O_iErrorState = 7231    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@ITEMTYPE <> 3) or (@I_vCMPNTSEQ <> 0)) begin  insert SOP10203  (  SOPNUMBE,  SOPTYPE,  LNITMSEQ,  CMPNTSEQ,  SEQNUMBR,  ITEMNMBR,  LOCNCODE,  BIN,  QTYTYPE,  QUANTITY,  POSTED  )  select  @I_vSOPNUMBE,    @I_vSOPTYPE,    @I_vLNITMSEQ,    @I_vCMPNTSEQ,    @SEQNUMBR,    @I_vITEMNMBR,    @LOCNCODE,    @I_vBIN,    @I_vQTYTYPE,    @I_vQUANTITY,    0     if (@@error <> 0)  begin  select @O_iErrorState = 7232    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  exec @iStatus = taSopMultiBinPost  @I_vSOPNUMBE,  @I_vSOPTYPE,  @I_vITEMNMBR,  @I_vLNITMSEQ,  @I_vCMPNTSEQ,  @I_vBIN,  @I_vQTYTYPE,  @I_vUOFM,  @I_vQUANTITY,  @I_vCreateBin,  @I_vOverrideBin,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 7233    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'Sales_Transaction',  @I_vINDEX1 = @I_vSOPNUMBE,  @I_vINDEX2 = @I_vSOPTYPE,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomState  select @O_iErrorState = 7234    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopMultiBin] TO [DYNGRP]
GO
