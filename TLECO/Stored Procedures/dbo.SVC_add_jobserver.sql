SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[SVC_add_jobserver]  @job_id         UNIQUEIDENTIFIER = NULL,   @job_name       sysname          = NULL,   @server_name    NVARCHAR(30)     = N'(local)',  @automatic_post BIT = 1,                   @AgentIsRunning smallint = 0 AS  DECLARE @retval int,  @server_id int,  @job_type varchar(12),  @current_job_category_type varchar(12),  @msx_operator_id int,  @local_machine_name nvarchar(30),  @is_sysadmin int,  @job_owner sysname,  @Error int  set transaction isolation level read uncommitted  SET NOCOUNT ON  if (@job_id is null)  return (1)  set @Error = 0  select @server_name = LTRIM(RTRIM(@server_name))  begin try  execute @retval = msdb.dbo.sp_verify_job_identifiers   '@job_name',  '@job_id',  @job_name output,  @job_id output   if (@retval <> 0)  return(1)  end try begin catch  set @Error = 1 end catch;  if @Error <> 0  return (1)  execute @retval = master.dbo.xp_getnetname   @local_machine_name output  if (@retval <> 0)  return(1)   if (@local_machine_name is not null)   and (upper(@server_name) = upper(@local_machine_name))  begin  select @server_name = N'(LOCAL)' end  if (upper(@server_name) <> N'(LOCAL)')   and (isnull(IS_SRVROLEMEMBER(N'sysadmin'), 0) = 0) begin  raiserror(15003, 16, 1, N'sysadmin')  return(1)  end  if (upper(@server_name) <> N'(LOCAL)') begin  select @job_owner = SUSER_SNAME(owner_sid) from msdb.dbo.sysjobs where (job_id = @job_id)   set @is_sysadmin = 0   execute SVC_sqlagent_has_server_access   @login_name = @job_owner,   @is_sysadmin_member = @is_sysadmin output   if (@is_sysadmin = 0)  begin  raiserror(14544, -1, -1, @job_owner, N'sysadmin')  return(1)   end   if (exists (SELECT * FROM msdb.dbo.sysjobsteps WHERE (job_id = @job_id) AND (subsystem = N'TSQL') AND (database_user_name is not null)))  begin  raiserror(14542, -1, -1, N'database_user_name')   return(1)   end end  if (upper(@server_name) <> N'(LOCAL)') begin  select @server_id = server_id FROM msdb.dbo.systargetservers WHERE (server_name = @server_name)   if (@server_id is null)  begin  raiserror(14262, -1, -1, '@server_name', @server_name)  return(1)   end end else begin  set @server_id = 0 end  if (exists (SELECT * FROM msdb.dbo.sysjobservers WHERE (job_id = @job_id) AND (server_id = @server_id))) begin  raiserror(14269, -1, -1, @job_name, @server_name)  return(1)  end  set @job_type = 'UNKNOWN'  if (exists (SELECT * FROM msdb.dbo.sysjobservers WHERE (job_id = @job_id) AND (server_id = 0)))  set @job_type = 'LOCAL' else begin  if (exists (SELECT * FROM msdb.dbo.sysjobservers WHERE (job_id = @job_id) AND (server_id <> 0)))  set @job_type = 'MULTI-SERVER' end  if ((@server_id = 0) AND (@job_type = 'MULTI-SERVER')) begin  raiserror(14290, -1, -1)  return(1)  end  if ((@server_id <> 0) AND (@job_type = 'LOCAL')) begin  raiserror(14291, -1, -1)  return(1)  end  if (@job_type = 'MULTI-SERVER') begin  select @msx_operator_id = id from msdb.dbo.sysoperators where (name = N'MSXOperator')   if (exists (select * from msdb.dbo.sysjobs   where (job_id = @job_id)  and (((notify_email_operator_id <> 0)   AND (notify_email_operator_id <> @msx_operator_id))  or ((notify_page_operator_id <> 0)    AND (notify_page_operator_id <> @msx_operator_id))  or ((notify_netsend_operator_id <> 0) AND (notify_netsend_operator_id <> @msx_operator_id)))))  begin  raiserror(14221, -1, -1, 'MSXOperator')  return(1)   end end  begin try  begin  insert into msdb.dbo.sysjobservers  (job_id,  server_id,  last_run_outcome,  last_outcome_message,  last_run_date,  last_run_time,  last_run_duration)  values (@job_id,  @server_id,  5,    NULL,  0,  0,  0)  if @@ERROR <> 0  return (1)  end end try begin catch  set @Error = 1 end catch;  if @Error <> 0  return (1)  select @current_job_category_type = case category_type  when 1 then 'LOCAL'  when 2 then 'MULTI-SERVER'  end  from msdb.dbo.sysjobs_view  sjv, msdb.dbo.syscategories sc  where (sjv.category_id = sc.category_id) and (sjv.job_id = @job_id)  if (@server_id = 0) AND (@current_job_category_type = 'MULTI-SERVER') begin  update msdb.dbo.sysjobs  set category_id = 0   where (job_id = @job_id) end  if (@server_id <> 0) AND (@current_job_category_type = 'LOCAL') begin  update msdb.dbo.sysjobs  set category_id = 2   where (job_id = @job_id) end  begin try  if (@automatic_post = 1)  begin  execute @retval = SVC_post_msx_operation   'INSERT',   'JOB',   @job_id,   @server_name  end end try begin catch  set @Error = 1 end catch;  if @Error <> 0  return (1)  if (@server_id = 0) begin  begin try  if (@AgentIsRunning = 1)  begin  execute msdb.dbo.sp_sqlagent_notify   @op_type     = N'J',  @job_id      = @job_id,  @action_type = N'I'  end  end try  begin catch  set @Error = 1  end catch; end  if @Error <> 0  return (1)  return(@retval)    
GO
GRANT EXECUTE ON  [dbo].[SVC_add_jobserver] TO [DYNGRP]
GO
