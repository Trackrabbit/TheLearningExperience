SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[icUpdateDistributionAmounts]  @I_iJournalEntry int  = NULL,  @I_cIntercompanyID char(5)  = NULL,   @I_sViewMode smallint = NULL,  @I_sOrigCurrencyDecimalPlaces smallint = NULL,  @O_nTotalDebits numeric(19,5) = NULL output,  @O_nTotalCredits numeric(19,5) = NULL output,  @O_iErrorState           int             = NULL  output  as   declare  @TRUE            tinyint,   @FALSE    tinyint,   @FUNCTIONAL smallint,  @ORIGINATING smallint,  @MULTIPLY smallint,  @DIVIDE smallint,  @tTransaction          int,  @tLoop       tinyint,  @iStatus int,  @iError int,  @mDebit numeric(19,5),  @mCredit numeric(19,5),  @sRateCalcMethod smallint,  @nXRate numeric(19,7),  @nDenomXRate numeric(19,7),  @cCurrencyID char(15),  @sMCTrxState smallint,  @sDecimalPlaces smallint,  @mCAmount numeric(19,5),   @mDAmount numeric(19,5),  @nSeqNum numeric(19,5)  select  @O_nTotalDebits  = 0.0,  @O_nTotalCredits = 0.0,  @O_iErrorState   = 0,  @iStatus  = 0,  @mDebit   = 0.0,  @mCredit  = 0.0,  @iError   = 0  if @@trancount = 0  begin  select @tTransaction = 1  begin transaction end    while (@tLoop is NULL) begin      select @tLoop = 1   if  @I_iJournalEntry is NULL or  @I_cIntercompanyID is NULL or  @I_sViewMode is NULL or  @I_sOrigCurrencyDecimalPlaces is NULL  begin  select @O_iErrorState = 20950  break   end    select  @TRUE           = 1,  @FALSE          = 0,  @FUNCTIONAL = 3,  @ORIGINATING = 4,  @MULTIPLY = 0,  @DIVIDE  = 1   if (@I_sViewMode <> @FUNCTIONAL) and (@I_sViewMode <> @ORIGINATING)  begin  select @O_iErrorState = 20951  break  end   declare linecursor  INSENSITIVE  cursor for   select distinct  isnull(SQNCLINE,0.0),  isnull(RTCLCMTD,0),   isnull(XCHGRATE,0.0),   isnull(DENXRATE,0.0),  '',  isnull(MCTRXSTT,0),  CASE @I_sViewMode   when @FUNCTIONAL then  @I_sOrigCurrencyDecimalPlaces  else DECPLACS   end,   CASE @I_sViewMode   when @FUNCTIONAL then  CRDTAMNT  else ORCRDAMT  end,   CASE @I_sViewMode   when @FUNCTIONAL then  DEBITAMT  else ORDBTAMT  end  from  GL10001   where  JRNENTRY = @I_iJournalEntry  and INTERID = @I_cIntercompanyID  and XCHGRATE <> 0.0   and  ACCTTYPE <> 2    and  ACCTTYPE <> 4      open linecursor    if @@cursor_rows <>  0  begin   fetch next from  linecursor   into  @nSeqNum,  @sRateCalcMethod,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  @mCAmount,  @mDAmount   while (@@fetch_status <> -1)  begin    exec @iStatus = mcCalculateAmount  @sRateCalcMethod,  @I_sViewMode,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  '',    @mDAmount,  @mDebit output,   @O_iErrorState output   select @iError = @@error  if @iStatus  = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0   break   exec @iStatus = mcCalculateAmount  @sRateCalcMethod,  @I_sViewMode,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  '',    @mCAmount,  @mCredit output,   @O_iErrorState output    select @iError = @@error  if @iStatus  = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0   break   if @I_sViewMode = @FUNCTIONAL  begin  update  GL10001  set   ORCRDAMT = @mCredit,  ORDBTAMT = @mDebit  where  JRNENTRY = @I_iJournalEntry  and INTERID = @I_cIntercompanyID  and XCHGRATE <> 0.0   and  ACCTTYPE <> 2    and  ACCTTYPE <> 4     and  SQNCLINE  = @nSeqNum   end   else   begin  update  GL10001  set  DEBITAMT = @mDebit,  CRDTAMNT = @mCredit  where  JRNENTRY = @I_iJournalEntry  and INTERID = @I_cIntercompanyID  and XCHGRATE <> 0.0   and  ACCTTYPE <> 2    and  ACCTTYPE <> 4     and  SQNCLINE  = @nSeqNum   end    fetch next from  linecursor   into  @nSeqNum,  @sRateCalcMethod,  @nXRate,  @nDenomXRate,  @cCurrencyID,  @sMCTrxState,  @sDecimalPlaces,  @mCAmount,  @mDAmount  end    end    deallocate linecursor    if @I_sViewMode = @FUNCTIONAL   select  @O_nTotalDebits = isnull(sum(ORDBTAMT), 0.0),  @O_nTotalCredits = isnull(sum(ORCRDAMT), 0.0)  from  GL10001  where  JRNENTRY = @I_iJournalEntry    else  select  @O_nTotalDebits = isnull(sum(DEBITAMT), 0.0),  @O_nTotalCredits = isnull(sum(CRDTAMNT), 0.0)  from  GL10001  where  JRNENTRY = @I_iJournalEntry  end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[icUpdateDistributionAmounts] TO [DYNGRP]
GO
