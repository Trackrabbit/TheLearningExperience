SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopDeleteDocument]  @I_vSOPTYPE smallint,    @I_vSOPNUMBE char(21),     @I_vRemovePayments smallint = 1,  @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',   @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output, @oErrString varchar(255) output  with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @DTAREF char(25),  @DOCID char(15),  @SOPALLOW_1 tinyint,  @SOPALLOW_2 tinyint,      @BACHNMBRFROM char(21),  @iCursorRows int,  @CUSTNMBR char(15),  @iStatus int,  @ORDOCAMT numeric(19,5),  @OREMSUBT numeric(19,5),  @QTYTBAOR numeric(19,5),  @ATYALLOC numeric(19,5),  @LOCNCODE char(10),  @ITEMNMBR char(30),  @DOCDATE datetime,  @iError int,  @O_oErrorState int,  @iUpdtBthErrState int,  @iCreateBatchErrString varchar(255),  @iPaymentErrState int,  @vPaymentErrString varchar(255),  @INTERID char(5),  @SOPHdrTbl char(18),  @DexRowID int,  @oExists Int,  @OInsStatus Int,  @QUANTITY numeric(19,5),  @ITMTRKOP smallint,  @LNITMSEQ integer,  @ORPMTRVD numeric(19,5),  @DOCNUMBR char(21),  @DexLockErrorState int,  @CHEKNMBR char(21),  @iCustomState int,  @iCustomErrString varchar(255),  @ENABLEMULTIBIN smallint,  @SEROVQTY numeric(19,5),  @LOTOVQTY numeric(19,5),  @SEQNUMBR int,  @PYMTTYPE int,  @CARDNAME char(15),  @DOCAMNT numeric(19,5),       @PYMTRCVD numeric(19,5),      @REMSUBTO numeric(19,5),      @MSTRNUMB int,  @aaSubLedgerHdrID int,  @sCompanyID smallint  select  @DTAREF = '',  @DOCID = '',  @SOPALLOW_1 = 0,  @SOPALLOW_2 = 0,      @DOCDATE = '',  @ITEMNMBR = '',  @LOCNCODE = '',  @QTYTBAOR = 0,  @ATYALLOC = 0,  @iCursorRows = 0,  @CUSTNMBR = '',  @ORDOCAMT = 0,  @OREMSUBT = 0,  @O_oErrorState = 0,  @O_iErrorState = 0,  @iStatus = 0,  @oErrString = '',  @iUpdtBthErrState = 0,  @iCreateBatchErrString = '',  @iPaymentErrState = 0,  @vPaymentErrString = '',  @SOPHdrTbl = '',  @INTERID = '',  @DexRowID = 0,  @oExists = 0,  @OInsStatus = 0,  @QUANTITY = 0,  @ITMTRKOP = 0,  @LNITMSEQ = 0,  @ORPMTRVD = 0,  @DexLockErrorState = 0,  @CHEKNMBR = '',  @iCustomState = 0,  @iCustomErrString = '',  @ENABLEMULTIBIN = 0,  @SEROVQTY = 0,  @LOTOVQTY = 0,  @SEQNUMBR = 0,  @PYMTTYPE = 0,  @CARDNAME = '',  @DOCAMNT = 0,        @PYMTRCVD = 0,        @REMSUBTO = 0,        @MSTRNUMB = 0,  @aaSubLedgerHdrID = 0,  @sCompanyID = 0  exec @iStatus = taSopDeleteDocumentPre  @I_vSOPTYPE output,  @I_vSOPNUMBE output,  @I_vRemovePayments output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 3802    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @INTERID = INTERID from DYNAMICS..SY01500 (nolock) where INTERID = db_name() select @DOCID = DOCID, @MSTRNUMB = MSTRNUMB, @DexRowID = DEX_ROW_ID from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE select @SOPHdrTbl = rtrim(@INTERID) + '.dbo.SOP10100'  select @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock) where SETUPKEY = 1  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 c (nolock) where c.INTERID = db_name()  if ( @I_vSOPTYPE is null or  @I_vSOPNUMBE is null) begin  select @O_iErrorState = 3987     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPNUMBE = '') or (@I_vSOPTYPE = 0)) begin  select @O_iErrorState = 3988     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vRemovePayments <> 0) and (@I_vRemovePayments <> 1)) begin  select @O_iErrorState = 3435     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vSOPTYPE < 1) or (@I_vSOPTYPE > 6))  begin  select @O_iErrorState = 3436     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vSOPTYPE <> 6) begin  select @SOPALLOW_1 = SOPALLOW_1 from SOP40200 (nolock) where SOPTYPE = @I_vSOPTYPE and DOCID = @DOCID end   if (@I_vSOPTYPE = 6) begin  select @SOPALLOW_1 = SOPALLOW_1 from SOP40200 (nolock) where SOPTYPE = 3 and DOCID = @DOCID end  if (@SOPALLOW_1 = 0 and @I_vSOPTYPE <> 2)  begin  select @O_iErrorState = 3439    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @SOPALLOW_2 = SOPALLOW_2 from SOP40200 (nolock) where SOPTYPE = @I_vSOPTYPE and DOCID = @DOCID  if (@SOPALLOW_2 = 0 and @I_vSOPTYPE = 2)  begin  select @O_iErrorState = 5653    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (exists(select 1 from SOP60100 (nolock) where SOPNUMBE = @I_vSOPNUMBE and SOPTYPE = @I_vSOPTYPE)) begin  select @O_iErrorState = 3440    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  while (1=1) begin  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 1,  @I_vtable_path_name = @SOPHdrTbl,   @I_vrow_id = @DexRowID,     @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output  select @iError = @@error  if ((@OInsStatus <> 1) or (@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0))  begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 2940    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  else  begin  if (@I_vRemovePayments = 1)  begin   declare Payments insensitive cursor for  select  p.DOCNUMBR,  h.CUSTNMBR,  p.CHEKNMBR,  p.SEQNUMBR,  p.PYMTTYPE,  p.CARDNAME  from SOP10103 p (nolock), SOP10100 h (nolock)  where p.SOPNUMBE = @I_vSOPNUMBE  and p.SOPTYPE = @I_vSOPTYPE  and p.OAMNTREM > 0  and (@I_vSOPTYPE = 2 or @I_vSOPTYPE = 5)  and p.SOPTYPE = h.SOPTYPE  and p.SOPNUMBE = h.SOPNUMBE  union  select  p.DOCNUMBR,  h.CUSTNMBR,  p.CHEKNMBR,  p.SEQNUMBR,  p.PYMTTYPE,  p.CARDNAME  from SOP10103 p (nolock), SOP10100 h (nolock)  where p.SOPNUMBE = @I_vSOPNUMBE  and p.SOPTYPE = @I_vSOPTYPE  and p.TRXSORCE <> ''  and (@I_vSOPTYPE = 3 or @I_vSOPTYPE = 4 or @I_vSOPTYPE = 6)   and p.SOPTYPE = h.SOPTYPE  and p.SOPNUMBE = h.SOPNUMBE  open Payments  select @iCursorRows = @@cursor_rows  if @iCursorRows = 0  begin  deallocate Payments  end  else  begin  fetch next from Payments into @DOCNUMBR, @CUSTNMBR, @CHEKNMBR, @SEQNUMBR, @PYMTTYPE, @CARDNAME  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 2941    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   exec @iStatus = taCreateSopPaymentInsertRecord  @I_vSOPTYPE = @I_vSOPTYPE,  @I_vSOPNUMBE = @I_vSOPNUMBE,  @I_vDOCNUMBR = @DOCNUMBR,  @I_vCUSTNMBR = @CUSTNMBR,  @I_vCHEKNMBR = @CHEKNMBR,  @I_vSEQNUMBR = @SEQNUMBR,  @I_vPYMTTYPE = @PYMTTYPE,  @I_vCARDNAME = @CARDNAME,  @I_vAction = 2,      @O_iErrorState = @iPaymentErrState output,  @oErrString = @vPaymentErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iPaymentErrState <> 0) or (@iError <> 0))  begin  if (@vPaymentErrString <> '')  begin  select @oErrString = rtrim(@oErrString) + ' ' + @vPaymentErrString  end  select @O_iErrorState = 2942    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   fetch next from Payments into @DOCNUMBR, @CUSTNMBR, @CHEKNMBR, @SEQNUMBR, @PYMTTYPE, @CARDNAME  end  deallocate Payments  end  end   if ((((@I_vSOPTYPE = 2) or (@I_vSOPTYPE = 5)) and (exists(select 1 from SOP10103 (nolock) where SOPNUMBE = @I_vSOPNUMBE and   SOPTYPE = @I_vSOPTYPE and OAMNTREM > 0 and PYMTTYPE <> 6))) or  (((@I_vSOPTYPE = 3) or (@I_vSOPTYPE = 4) or (@I_vSOPTYPE = 6)) and (exists(select 1 from SOP10103 (nolock) where SOPNUMBE = @I_vSOPNUMBE and   SOPTYPE = @I_vSOPTYPE and TRXSORCE <> ''))))  begin  select @O_iErrorState = 2943     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   select  @DOCDATE = DOCDATE,   @ORDOCAMT = isnull(ORDOCAMT,0),  @OREMSUBT = OREMSUBT,  @CUSTNMBR = CUSTNMBR,  @BACHNMBRFROM = BACHNUMB,  @ORPMTRVD = ORPMTRVD,  @DOCAMNT = isnull(DOCAMNT,0),      @PYMTRCVD = isnull(PYMTRCVD,0),      @REMSUBTO = isnull(REMSUBTO,0)       from SOP10100 (nolock) where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if ((@@error <> 0) or (@BACHNMBRFROM = '') or (@CUSTNMBR = ''))  begin  select @O_iErrorState = 2944    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@I_vSOPTYPE = 2)  begin  update RM00103 set  ONORDAMT = ONORDAMT - @REMSUBTO     from RM00103 (updlock)  where CUSTNMBR = @CUSTNMBR  if (@@error <> 0)  begin  select @O_iErrorState = 2945     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE = 3) or (@I_vSOPTYPE = 6)   begin  update RM00103 set  UNPSTOSA = UNPSTOSA - @DOCAMNT,     UNPSTOCA = UNPSTOCA - @PYMTRCVD     from RM00103 (updlock)  where CUSTNMBR = @CUSTNMBR  if (@@error <> 0)  begin  select @O_iErrorState = 2946     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE = 4)  begin  update RM00103 set  UNPSTOSA = UNPSTOSA + @DOCAMNT,     UNPSTOCA = UNPSTOCA + @PYMTRCVD     from RM00103 (updlock)  where CUSTNMBR = @CUSTNMBR  if (@@error <> 0)  begin  select @O_iErrorState = 2947     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   if (@I_vSOPTYPE in (2,3,5,6))  begin  declare  ItemLines INSENSITIVE  cursor for select  a.QTYTBAOR,  a.ATYALLOC,  a.ITEMNMBR,  a.LOCNCODE,  a.QUANTITY,  b.ITMTRKOP,  a.LNITMSEQ  from SOP10200 a (nolock), IV00101 b (nolock) where   a.SOPTYPE = @I_vSOPTYPE and a.SOPNUMBE = @I_vSOPNUMBE and a.ITEMNMBR = b.ITEMNMBR and b.ITEMTYPE <> 3  open ItemLines  select @iCursorRows = @@cursor_rows  if @iCursorRows = 0  begin  deallocate ItemLines  end  else  begin  fetch next from ItemLines into @QTYTBAOR, @ATYALLOC, @ITEMNMBR, @LOCNCODE, @QUANTITY, @ITMTRKOP, @LNITMSEQ  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 2948    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@I_vSOPTYPE = 5)  begin  select @QTYTBAOR = @QUANTITY  end   update IV00102 set  ATYALLOC = ATYALLOC - @ATYALLOC,  QTYBKORD = QTYBKORD - @QTYTBAOR  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and LOCNCODE = @LOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 2949     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set  ATYALLOC = ATYALLOC - @ATYALLOC,  QTYBKORD = QTYBKORD - @QTYTBAOR  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 2950     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@ENABLEMULTIBIN = 1)  begin  if (@ITMTRKOP = 1)  begin  update a set a.ATYALLOC = a.ATYALLOC - b.QUANTITY  from IV00112 a (updlock), SOP10203 b (nolock)  where a.ITEMNMBR = b.ITEMNMBR and  a.LOCNCODE = b.LOCNCODE and  a.BIN = b.BIN and  a.QTYTYPE = b.QTYTYPE and  b.SOPTYPE = @I_vSOPTYPE and  b.SOPNUMBE = @I_vSOPNUMBE and  b.LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 5994    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10203 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 5995    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  else   begin  update a set a.ATYALLOC = a.ATYALLOC - g.SERLTQTY,  a.QUANTITY = a.QUANTITY -  g.SERLTQTY   from   IV00112 a (updlock),   (select a.ITEMNMBR as ITEMNMBR, a.BIN, a.QTYTYPE,b.SOPTYPE, b.SOPNUMBE,b.LNITMSEQ,   sum(b.SERLTQTY) as SERLTQTY  from IV00112 a (updlock),   SOP10201 b (nolock) where  a.ITEMNMBR = b.ITEMNMBR and  a.LOCNCODE = @LOCNCODE and  a.BIN = b.BIN and  a.QTYTYPE = b.QTYTYPE and  b.SOPTYPE = 2 and  b.SOPNUMBE = @I_vSOPNUMBE  and  b.LNITMSEQ = @LNITMSEQ  group by a.ITEMNMBR, a.BIN, a.QTYTYPE, b.SOPTYPE,b.SOPNUMBE,b.LNITMSEQ   ) g   where  a.ITEMNMBR = g.ITEMNMBR and  a.LOCNCODE = @LOCNCODE and  a.BIN = g.BIN and  a.QTYTYPE = g.QTYTYPE and  g.SOPTYPE = @I_vSOPTYPE and  g.SOPNUMBE = @I_vSOPNUMBE and  g.LNITMSEQ = @LNITMSEQ   if (@@error <> 0)  begin  select @O_iErrorState = 5030    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   if (@ITMTRKOP = 2)  begin  update IV00200 set SERLNSLD = 0 from IV00200 (updlock) where ITEMNMBR = @ITEMNMBR and SERLNMBR in   (select SERLTNUM from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ)  if (@@error <> 0)  begin  select @O_iErrorState = 2951    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if exists(select 1 from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  begin  delete IV00200 where SERLNMBR in  (select SERLTNUM from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  if (@@error <> 0)  begin  select @O_iErrorState = 6505    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @SEROVQTY = 0   select @SEROVQTY = sum(SERLTQTY)  from SOP10201  where SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1   update IV00102 set  QTYONHND = QTYONHND - @SEROVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = @LOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 6506    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set  QTYONHND = QTYONHND - @SEROVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 6507    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   delete SOP10201 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 2952    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  if (@ITMTRKOP = 3)  begin  update a set a.ATYALLOC = a.ATYALLOC - b.SERLTQTY, a.LTNUMSLD = 0  from IV00300 a (updlock), SOP10201 b (nolock)  where b.SOPTYPE = @I_vSOPTYPE and  b.SOPNUMBE = @I_vSOPNUMBE and  a.LOCNCODE = @LOCNCODE and  b.LNITMSEQ = @LNITMSEQ and  a.DTSEQNUM = b.DTSEQNUM and  a.LOTNUMBR = b.SERLTNUM and  a.DATERECD = b.DATERECD and  a.ITEMNMBR = b.ITEMNMBR and  a.QTYTYPE = b.QTYTYPE  if (@@error <> 0)  begin  select @O_iErrorState = 2953    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if exists(select 1 from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  begin  delete IV00300 where LOTNUMBR in  (select SERLTNUM from SOP10201 (nolock)  where  SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1)  if (@@error <> 0)  begin  select @O_iErrorState = 6508    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @LOTOVQTY = 0   select @LOTOVQTY = sum(SERLTQTY)  from SOP10201  where SOPTYPE = @I_vSOPTYPE and   SOPNUMBE = @I_vSOPNUMBE and   LNITMSEQ = @LNITMSEQ and  OVRSERLT = 1   update IV00102 set  QTYONHND = QTYONHND - @LOTOVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = @LOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 6509    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   update IV00102 set  QTYONHND = QTYONHND - @LOTOVQTY  from IV00102 (updlock)  where ITEMNMBR = @ITEMNMBR and  LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 6510    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end   delete SOP10201 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE and LNITMSEQ = @LNITMSEQ  if (@@error <> 0)  begin  select @O_iErrorState = 2954    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  fetch next from ItemLines into @QTYTBAOR, @ATYALLOC, @ITEMNMBR, @LOCNCODE, @QUANTITY, @ITMTRKOP, @LNITMSEQ  end  deallocate ItemLines  end  end   if (@oErrString <> '')  break   select @DOCAMNT = @DOCAMNT * -1       exec @iStatus = taCreateUpdateBatchHeaderRcd  @I_vBACHNUMB = @BACHNMBRFROM,  @I_vSERIES = 3,  @I_vGLPOSTDT = @DOCDATE,  @I_vBCHSOURC = 'Sales Entry',  @I_vDOCAMT = @DOCAMNT,      @I_vORIGIN = 1,  @I_vNUMOFTRX = -1,  @I_vCHEKBKID = '',  @O_iErrorState = @iUpdtBthErrState output,  @oErrString = @iCreateBatchErrString output  select @iError = @@error  if ((@iStatus <> 0) or (@iUpdtBthErrState <> 0) or (@iError <> 0))  begin  if (@iCreateBatchErrString <> '')  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCreateBatchErrString  end  select @O_iErrorState = 2955    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10101 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE   if (@@error <> 0)  begin  select @O_iErrorState = 2956    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10104 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 3458    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10105 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 2959    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10202 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 2960    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if (@I_vSOPTYPE in (3,4,6))   begin  delete SOP10102 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 2961    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  select @DTAREF = rtrim(@I_vSOPNUMBE) + space(20 - len(@I_vSOPNUMBE)) + cast(@I_vSOPTYPE as char(1))  if (exists (select 1 from DTA10100 (nolock) where DTASERIES = 11 and DTAREF = @DTAREF))  begin  delete DTA10100 where DTASERIES = 11 and DTAREF = @DTAREF  if (@@error <> 0)  begin  select @O_iErrorState = 3730    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  if (exists (select 1 from DTA10200 (nolock) where DTASERIES = 11 and DTAREF = @DTAREF))  begin  delete DTA10200 where DTASERIES = 11 and DTAREF = @DTAREF  if (@@error <> 0)  begin  select @O_iErrorState = 3731    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end   delete SOP10103 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 2962    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10200 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 2964    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10100 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 2963    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10106 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 3437    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   delete SOP10107 where SOPTYPE = @I_vSOPTYPE and SOPNUMBE = @I_vSOPNUMBE  if (@@error <> 0)  begin  select @O_iErrorState = 3438    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   if not exists (select 1 from SOP10100 where MSTRNUMB = @MSTRNUMB) and not exists (select 1 from SOP30200 where MSTRNUMB = @MSTRNUMB)  begin  delete SOP40500 where MSTRNUMB = @MSTRNUMB  if (@@error <> 0)  begin  select @O_iErrorState = 9345    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  if exists(select 1 from DYNAMICS..sysobjects (nolock) where name  = 'AAG00102')  begin  if exists(select 1 from DYNAMICS..AAG00102 (nolock) where CMPANYID = @sCompanyID)  begin   select @aaSubLedgerHdrID = isnull(aaSubLedgerHdrID,0) from AAG20000 (nolock)  where DOCTYPE = @I_vSOPTYPE  and DOCNUMBR = @I_vSOPNUMBE  exec @iStatus = aagSubLedgerDistDelete @aaSubLedgerHdrID, 0, 2   select @iError = @@error  if @iError <> 0 or @iStatus <> 0  begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@oErrString))  select @O_iErrorState = 9453    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end  end  break end  exec @iStatus = DYNAMICS..taDEXLOCKS  @I_vOperation = 3,   @I_vtable_path_name = @SOPHdrTbl,   @I_vrow_id = @DexRowID,     @O_oExists = @oExists output,    @O_oInsertStatus = @OInsStatus output,   @O_iErrorState = @DexLockErrorState output select @iError = @@error if ((@iStatus <> 0) or (@DexLockErrorState <> 0) or (@iError <> 0)) begin  if (@DexLockErrorState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + @DexLockErrorState  end  select @O_iErrorState = 2965    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  exec @iStatus = taSopDeleteDocumentPost  @I_vSOPTYPE,  @I_vSOPNUMBE,  @I_vRemovePayments,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus <> 0) or (@iCustomState <> 0) or (@iError <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + @iCustomErrString  select @O_iErrorState = 3803    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopDeleteDocument] TO [DYNGRP]
GO
