SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glPeriodConsolidationCreateTranslationHist]  @I_sYear smallint = NULL,  @I_dPeriodZeroDate datetime = NULL,  @I_nAccountIndex int   = NULL,  @I_LedgerID int   = NULL,  @I_iJournal_Entry int   = NULL,  @I_cNext_Trx_Source char(13) = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_cEuroCurrency char(15) = NULL,  @I_tEuroEnabled tinyint  = NULL,  @I_cRate_Type_ID char(15) = NULL,  @I_cExchange_Table_ID char(15) = NULL,  @O_SQL_Error_State int   = NULL output  as  declare  @cPLSource varchar(255),  @cBFSource varchar(255),  @cBFReference varchar(255),  @iStatus int,  @iError int,  @cDBName char(5),  @nMaxCurrency numeric(19,5),  @tFunctionalEnabled tinyint,  @MC_NOEURO tinyint,  @MC_NONDENOM_TO_NONDENOM tinyint,  @MC_NONDENOM_TO_EURO tinyint,  @MC_NONDENOM_TO_DENOM tinyint,  @MC_DENOM_TO_NONDENOM tinyint,  @MC_DENOM_TO_DENOM tinyint,  @MC_DENOM_TO_EURO tinyint,  @MC_EURO_TO_DENOM tinyint,  @MC_EURO_TO_NONDENOM tinyint  select  @O_SQL_Error_State = 0 select  @nMaxCurrency = 99999999999999.99999 select  @MC_NOEURO=0,   @MC_NONDENOM_TO_NONDENOM=1,   @MC_NONDENOM_TO_EURO=2,   @MC_NONDENOM_TO_DENOM=3,  @MC_DENOM_TO_NONDENOM=4,  @MC_DENOM_TO_DENOM=5,  @MC_DENOM_TO_EURO=6,  @MC_EURO_TO_DENOM=7,  @MC_EURO_TO_NONDENOM=8  if  @I_sYear is NULL or  @I_dPeriodZeroDate is NULL or  @I_nAccountIndex is NULL or  @I_LedgerID is NULL or  @I_iJournal_Entry is NULL or  @I_cNext_Trx_Source is NULL or   @I_cFunctionalCurrency is NULL or  @I_cEuroCurrency is NULL or  @I_tEuroEnabled is NULL or   @I_tMCRegistered is NULL or  @I_cRate_Type_ID is NULL or  @I_cExchange_Table_ID is NULL  begin  select @O_SQL_Error_State = 20856  return  end   select @cDBName = db_name()  select @tFunctionalEnabled = isnull((select ENABLED from MC60400 where DENOMCURR = @I_cFunctionalCurrency), 0)  exec    @iStatus = DYNAMICS.dbo.smGetMsgString 12125, @cDBName, @cPLSource output, @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec    @iStatus = DYNAMICS.dbo.smGetMsgString 12029, @cDBName, @cBFSource output, @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec    @iStatus = DYNAMICS.dbo.smGetMsgString 12027, @cDBName, @cBFReference output, @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  insert into  GL30001  (TranslationCurrencyID,  HSTYEAR,  JRNENTRY,  SOURCDOC,  REFRENCE,  TRXDATE,  TRXSORCE,   ACTINDX,  SEQNUMBR,  PERIODID,  Ledger_ID,  CURNCYID,  Original_Exchange_Rate,  ORGNTSRC,  CRDTAMNT,  DEBITAMT,  ORCRDAMT,  ORDBTAMT,  TranslationCreditAmount,  TranslationDebitAmount,  CURRNIDX,  DECPLCUR,  RATETPID,  EXGTBLID,  XCHGRATE,  EXCHDATE,  TIME1,  RTCLCMTD,  DENXRATE,  MCTRXSTT,  CurrencyTranslationType,  Identity_Column ) select   TranslationCurrencyID,  @I_sYear,  @I_iJournal_Entry,  @cBFSource,  @cBFReference,  @I_dPeriodZeroDate,  @I_cNext_Trx_Source,  @I_nAccountIndex,  0,    0,    @I_LedgerID,  CURNCYID,  max(Original_Exchange_Rate),  '' as ORGNTSRC,  case        when SUM(DEBITAMT) <= SUM(CRDTAMNT) and SUM(CRDTAMNT) - SUM(DEBITAMT) <= @nMaxCurrency then  -1 * (SUM(DEBITAMT) - SUM(CRDTAMNT))  when SUM(DEBITAMT) <= SUM(CRDTAMNT) then  @nMaxCurrency  else  0.0  end,  case        when SUM(DEBITAMT) > SUM(CRDTAMNT) and SUM(DEBITAMT) - SUM(CRDTAMNT) <= @nMaxCurrency then  SUM(DEBITAMT) - SUM(CRDTAMNT)  when SUM(DEBITAMT) > SUM(CRDTAMNT) then  @nMaxCurrency  else  0.0  end,  case       when SUM(ORDBTAMT) <= SUM(ORCRDAMT) and SUM(ORCRDAMT) - SUM(ORDBTAMT) <= @nMaxCurrency then  -1 * (SUM(ORDBTAMT) - SUM(ORCRDAMT))  when SUM(ORDBTAMT) <= SUM(ORCRDAMT) then  @nMaxCurrency  else  0.0  end,  case       when SUM(ORDBTAMT) > SUM(ORCRDAMT) and SUM(ORDBTAMT) - SUM(ORCRDAMT) <= @nMaxCurrency then  SUM(ORDBTAMT) - SUM(ORCRDAMT)  when SUM(ORDBTAMT) > SUM(ORCRDAMT) then  @nMaxCurrency  else  0.0  end,  case       when SUM(TranslationDebitAmount) <= SUM(TranslationCreditAmount) and SUM(TranslationCreditAmount) - SUM(TranslationDebitAmount) <= @nMaxCurrency then  -1 * (SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount))  when SUM(TranslationDebitAmount) <= SUM(TranslationCreditAmount) then  @nMaxCurrency  else  0.0  end,  case       when SUM(TranslationDebitAmount) > SUM(TranslationCreditAmount) and SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount) <= @nMaxCurrency then  SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount)  when SUM(TranslationDebitAmount) > SUM(TranslationCreditAmount) then  @nMaxCurrency  else  0.0  end,  max(CURRNIDX),  max(DECPLCUR),  case   when @I_tMCRegistered = 1 then  @I_cRate_Type_ID  else  ''  end,   case   when @I_tMCRegistered = 1 then  @I_cExchange_Table_ID  else  ''  end,   case   when SUM(TranslationDebitAmount) <= SUM(TranslationCreditAmount) and SUM(TranslationCreditAmount) - SUM(TranslationDebitAmount) > @nMaxCurrency then  0.0  when SUM(TranslationDebitAmount) > SUM(TranslationCreditAmount) and SUM(TranslationDebitAmount) - SUM(TranslationCreditAmount) > @nMaxCurrency then  0.0  else   min(TranslationExchangeRate)  end,  0 as EXCHDATE,  0 as TIME1,  max(RTCLCMTD),  max(DENXRATE),  max(MCTRXSTT),  max(CurrencyTranslationType),  0    from (  select  GLFinal.TranslationCurrencyID,  GLFinal.HSTYEAR,  GLFinal.JRNENTRY,  GLFinal.SOURCDOC,  GLFinal.REFRENCE,  GLFinal.TRXDATE,  GLFinal.TRXSORCE,  GLFinal.ACTINDX,  GLFinal.SEQNUMBR,  GLFinal.PERIODID,  GLFinal.Ledger_ID,  GLFinal.CURNCYID,  GLFinal.Original_Exchange_Rate,  GLFinal.ORGNTSRC,  isnull(GLFinal.CRDTAMNT,0) as CRDTAMNT,  isnull(GLFinal.DEBITAMT,0) as DEBITAMT,  isnull(GLFinal.ORCRDAMT,0) as ORCRDAMT,  isnull(GLFinal.ORDBTAMT,0) as ORDBTAMT,  isnull(GLFinal.TranslationCreditAmount, 0) as TranslationCreditAmount,  isnull(GLFinal.TranslationDebitAmount, 0) as TranslationDebitAmount,  isnull(GLFinal.CURRNIDX, MC40200.CURRNIDX) as CURRNIDX,  isnull(GLFinal.DECPLCUR, (MC40200.DECPLCUR - 1)) as DECPLCUR,  '' as RATETPID,    isnull(GLFinal.EXGTBLID,'')as EXGTBLID,  isnull(GLFinal.XCHGRATE, 0) as TranslationExchangeRate,  isnull(GLFinal.EXCHDATE, 0) as EXCHDATE,  isnull(GLFinal.TIME1, 0) as TIME1,  isnull(GLFinal.RTCLCMTD, isnull(MC40300.RTCLCMTD, 0)) as RTCLCMTD,  isnull(GLFinal.DENXRATE, dbo.mcFuncGetDenExchRate(GLFinal.TranslationCurrencyID, isnull(GLFinal.RTCLCMTD, isnull(MC40300.RTCLCMTD, 0)))) as DENXRATE,  GLFinal.MCTRXSTT,  GLFinal.CurrencyTranslationType   from (select  GLBBFMerge.TranslationCurrencyID,  GLBBFMerge.HSTYEAR,  GLBBFMerge.JRNENTRY,  GLBBFMerge.SOURCDOC,  GLBBFMerge.REFRENCE,  GLBBFMerge.TRXDATE,  GLBBFMerge.TRXSORCE,  GLBBFMerge.ACTINDX,  GLBBFMerge.SEQNUMBR,  GLBBFMerge.PERIODID,  GLBBFMerge.Ledger_ID,  GLBBFMerge.CURNCYID,  GLBBFMerge.Original_Exchange_Rate,  GLBBFMerge.ORGNTSRC,  GLBBFMerge.CRDTAMNT,  GLBBFMerge.DEBITAMT,  GLBBFMerge.ORCRDAMT,  GLBBFMerge.ORDBTAMT,  isnull(GLBBF.TranslationCreditAmount,GLBBFMerge.CRDTAMNT) as TranslationCreditAmount,  isnull(GLBBF.TranslationDebitAmount, GLBBFMerge.DEBITAMT) as TranslationDebitAmount,  GLBBF.CURRNIDX,   GLBBF.DECPLCUR,  '' as RATETPID,    isnull(GLBBF.EXGTBLID, GLBBFMerge.EXGTBLID) as EXGTBLID,  GLBBF.XCHGRATE,  GLBBF.EXCHDATE,  GLBBF.TIME1,  GLBBF.RTCLCMTD,  GLBBF.DENXRATE,  isnull(GLBBF.MCTRXSTT, GLBBFMerge.MCTRXSTT) as MCTRXSTT,  GLBBFMerge.CurrencyTranslationType   from (select GLTRXHist.HSTYEAR,  GLTRXHist.JRNENTRY,  GLTRXHist.SOURCDOC,  GLTRXHist.REFRENCE,  GLTRXHist.TRXDATE,  GLTRXHist.TRXSORCE,  GLTRXHist.ACTINDX,  GLTRXHist.SEQNUMBR,  GLTRXHist.PERIODID,  GLTRXHist.Ledger_ID,  case   when @I_tMCRegistered = 1 and GLTRXHist.CURNCYID = '' then  @I_cFunctionalCurrency  when @I_tMCRegistered = 0 and GLTRXHist.CURNCYID <> '' then  ''  else  GLTRXHist.CURNCYID  end as CURNCYID,  GLTRXHist.XCHGRATE as Original_Exchange_Rate,  GLTRXHist.ORGNTSRC,  GLTRXHist.CRDTAMNT,  GLTRXHist.DEBITAMT,  GLTRXHist.ORCRDAMT,  GLTRXHist.ORDBTAMT,  MCTRAN.CURNCYID as TranslationCurrencyID,  MC.CurrencyTranslationType,  EXGTBLID=  case MC.CurrencyTranslationType  when 1 then MCTRAN.AverageExchangeTableID  when 3 then MCTRAN.HistoricalExchgTableID  end,  dbo.mcFuncGetMCTrxState(MCTRAN.CURNCYID  ) as MCTRXSTT  from GL30000 GLTRXHist, MC40600 MCTRAN, MC00200 MC  where GLTRXHist.ACTINDX = MC.ACTINDX and MC.CURNCYID = ''  and GLTRXHist.HSTYEAR = @I_sYear   and GLTRXHist.ACTINDX = @I_nAccountIndex  and GLTRXHist.Ledger_ID = @I_LedgerID  and GLTRXHist.TRXDATE = @I_dPeriodZeroDate  and GLTRXHist.SOURCDOC <> @cPLSource  and (MC.CurrencyTranslationType = 1 or MC.CurrencyTranslationType = 3)   ) GLBBFMerge  left outer join (select  BBF.ACTINDX,  BBF.JRNENTRY,  case   when @I_tMCRegistered = 1 and BBF.CURNCYID = '' then  @I_cFunctionalCurrency  when @I_tMCRegistered = 0 and BBF.CURNCYID <> '' then  ''  else  BBF.CURNCYID  end as CURNCYID,  BBF.Ledger_ID,  BBF.HSTYEAR,  BBF.TRXDATE,  BBF.SEQNUMBR,  BBF.TranslationCurrencyID,  BBF.TranslationCreditAmount,  BBF.TranslationDebitAmount,  BBF.CURRNIDX,  BBF.DECPLCUR,  BBF.EXGTBLID,  BBF.XCHGRATE,  BBF.EXCHDATE,  BBF.TIME1,  BBF.RTCLCMTD,  BBF.DENXRATE,  BBF.MCTRXSTT,  BBF.Identity_Column  from GL30001 BBF   where BBF.HSTYEAR = @I_sYear   and BBF.ACTINDX = @I_nAccountIndex  and BBF.Ledger_ID = @I_LedgerID  and BBF.TRXDATE = @I_dPeriodZeroDate  and BBF.SOURCDOC <> @cPLSource  ) GLBBF  on GLBBF.ACTINDX = GLBBFMerge.ACTINDX and GLBBF.JRNENTRY = GLBBFMerge.JRNENTRY and GLBBF.CURNCYID = GLBBFMerge.CURNCYID   and GLBBF.HSTYEAR = GLBBFMerge.HSTYEAR and GLBBF.TRXDATE = GLBBFMerge.TRXDATE and GLBBF.SEQNUMBR = GLBBFMerge.SEQNUMBR   and GLBBF.Ledger_ID = GLBBFMerge.Ledger_ID and GLBBF.TranslationCurrencyID = GLBBFMerge.TranslationCurrencyID    ) GLFinal  left outer join DYNAMICS..MC40300 MC40300  on (GLFinal.TranslationCurrencyID = MC40300.CURNCYID and GLFinal.EXGTBLID = MC40300.EXGTBLID)  join DYNAMICS..MC40200 MC40200  on GLFinal.TranslationCurrencyID = MC40200.CURNCYID  ) as FINAL_GLTRXResults group by TranslationCurrencyID, ACTINDX, Ledger_ID, CURNCYID  delete  GL30001 where  HSTYEAR = @I_sYear  and ACTINDX = @I_nAccountIndex  and TRXDATE = @I_dPeriodZeroDate  and SOURCDOC = @cBFSource  and TRXSORCE = @I_cNext_Trx_Source   and TranslationDebitAmount = 0.00  and TranslationCreditAmount = 0.00  and DEBITAMT = 0.00  and CRDTAMNT = 0.00  update  GL30001 set  XCHGRATE =  dbo.mcFuncGLYECCalcNewExchangeRate(  CRDTAMNT,  DEBITAMT,  TranslationCreditAmount,  TranslationDebitAmount,  TranslationCurrencyID,   RTCLCMTD,  @I_cFunctionalCurrency,  @I_cEuroCurrency,  @I_tEuroEnabled,  @tFunctionalEnabled,  @MC_NOEURO,  @MC_NONDENOM_TO_NONDENOM,  @MC_NONDENOM_TO_EURO,  @MC_NONDENOM_TO_DENOM,  @MC_DENOM_TO_NONDENOM,  @MC_DENOM_TO_DENOM,  @MC_DENOM_TO_EURO,  @MC_EURO_TO_DENOM,  @MC_EURO_TO_NONDENOM) where  HSTYEAR = @I_sYear  and ACTINDX = @I_nAccountIndex   and Ledger_ID = @I_LedgerID  and SOURCDOC = @cBFSource  and TRXSORCE = @I_cNext_Trx_Source   and TranslationCurrencyID <> @I_cFunctionalCurrency  and XCHGRATE <> 0.0  delete  GL30001 where HSTYEAR = @I_sYear   and ACTINDX = @I_nAccountIndex  and Ledger_ID = @I_LedgerID  and TRXDATE = @I_dPeriodZeroDate  and SOURCDOC <> @cPLSource  and TRXSORCE <> @I_cNext_Trx_Source   return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glPeriodConsolidationCreateTranslationHist] TO [DYNGRP]
GO
