SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[glpPostNormalTransaction]  @I_iSQLSessionID int  = NULL,  @I_iJournalEntry int  = NULL,  @I_cUserID char(15) = NULL,  @I_tPrinting tinyint  = NULL,  @I_tPosting tinyint  = NULL,  @I_tPrintDistributions tinyint  = NULL,  @I_bBatchValid binary(4) = NULL,  @I_cFuncCurrencyID char(15) = NULL,  @I_sFuncCurrencyIndex smallint = NULL,  @I_sFuncDecimalPlaces smallint = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_tMCReport tinyint  = NULL,  @I_sMCTransaction smallint = NULL,  @I_cOrigCurrencyID char(15) = NULL,  @I_sOrigCurrencyIndex smallint = NULL,  @I_sOrigDecimalPlaces smallint = NULL,  @I_cProductName char(30) = NULL,  @I_sWindowType smallint = NULL,  @I_cOrigCompanyID char(5)  = NULL,  @I_tMDARegistered tinyint  = NULL,  @I_tRecurringBatch tinyint  = NULL,  @I_iPostingNumber int  = NULL,  @I_iPeriodPostingNumber int  = NULL,  @I_iPostingNumberHist int  = NULL,  @I_iPeriodPostingNumberHist int  = NULL,  @I_tAllowNegDebitsAndCredits tinyint  = NULL,  @O_cDestCompanyID char(5)  = NULL output,  @O_mSequenceLine numeric(19,5) = NULL output,  @IO_bHeaderMessages binary(4) = NULL output,  @O_bLineMessages binary(4) = NULL output,  @O_bLineMessages2 binary(4) = NULL output,  @O_iErrorState int  = NULL output as declare  @TRUE tinyint, 	/* NCL */ 	@sCompanyID smallint, 	@tIC_CopyMDA tinyint, 	@tIC_ReverseMDA tinyint, 	/* NCL */  @FALSE tinyint,  @NORMAL_TRX smallint,  @POST_ACCT smallint,  @UNIT_ACCT smallint,  @POST_ALLOC_ACCT smallint,  @UNIT_ALLOC_ACCT smallint,  @VARIABLE smallint,  @REGULAR_OFFSET smallint,  @REVERSING smallint,  @AUTO_REV_TRX smallint,  @GL_TRANSACTION smallint,  @MC_TRANSACTION smallint,  @UNIT_DECIMAL_PLACES smallint,  @POSTING_ACCOUNT smallint,  @PURCHASING smallint,  @MS_ITEM_1 int,  @MS_ITEM_2 int,  @MS_ITEM_3 int,  @MS_ITEM_4 int,  @MS_ITEM_5 int,  @MS_ITEM_6 int,  @MS_ITEM_13 int,  @iAccountIndex int,  @cDescription char(31),  @cAuditTrailCode char(13),  @tActive tinyint,  @tValidAccountNumber tinyint,  @tTransaction tinyint,  @nActualBalance    numeric(19,5),  @nOrigActualBalance numeric(19,5),  @nDebit numeric(19,5),  @nCredit numeric(19,5),  @nTempAmount numeric(19,5),  @nTempDebit numeric(19,5),  @nTempOrigDebit numeric(19,5),  @sAccountType smallint,  @sAccountCategory smallint,  @sFixedOrVariable smallint,  @sPostingType smallint,   @iError     int,  @iStatus int,  @iCursorError int,  @tLoop tinyint,  @sBalanceForCalculation   smallint,  @bLineVald binary(4),  @iCount     int,  @dTransactionDate datetime,  @sTransactionYear smallint,  @sTransactionPeriodID smallint,  @sTransactionClosingYear smallint,  @tTransactionHistory tinyint,  @tReversing tinyint,  @nOrigDebit numeric(19,5),  @nOrigCredit numeric(19,5),  @sFuncCurrencyIndex smallint,  @sOrigCurrencyIndex smallint,  @sFuncDecimalPlaces smallint,  @sOrigDecimalPlaces smallint,  @sUnitDecimalPlaces smallint,  @nRecurringTRXSequence numeric(19,5),  @nExchangeRate numeric(15,7),  @sTransactionType smallint,  @nSequenceLine numeric(19,5),  @nRecurringSeqLine numeric(19,5),  @cIntercompanyID char(5),  @sCurrencyIndex smallint,  @cHdrBatchSource char(15),  @cHdrBatchNumber char(15),  @sHdrSeries smallint,  @cHdrAuditTrailCode char(13),  @cHdrReversingAuditTrailCode char(13),  @dHdrTransactionDate datetime,  @sHdrTransactionPeriodID smallint,  @sHdrTransactionYear smallint,  @sHdrTransactionClosingYear smallint,  @tHdrTransactionHistory tinyint,  @dHdrReversingDate datetime,  @sHdrReversingPeriodID smallint,  @sHdrReversingYear smallint,  @sHdrReversingClosingYear smallint,  @tHdrReversingHistory tinyint,  @sHdrTransactionType smallint,  @nHdrRecurringTRXSequence numeric(19,5),  @tHdrICTransaction tinyint,  @tHdrICDistributionsExist tinyint,  @cOriginatingDocNumber   char(21),  @cOriginatingControlNumber  char(21),  @cOriginatingMasterID char(31),  @cOriginatingMasterName char(65),  @sOriginatingTrxType   smallint,  @cOriginatingTrxSource   char(13),  @tMDAExists tinyint,  @sDTASeries smallint,  @cDTAReference char(25),  @iSequenceNumber int,  @cDTAGLReference char(25),  @sDTAGLStatus smallint,  @iOrigSequenceNumber int,  @sHDROrigDTASeries smallint,  @sOrigDTASeries smallint,  @nDTAIndex numeric(19,5),  @nMDARecurTRXSequence numeric(19,5),  @cNewDTARefRecurring char(25),  @cNewDTARefReversing char(25),  @sPostingStatus smallint,  @dDTATrxDate datetime,  @tSystemGenerated tinyint,  @REVERSING_CHECKED smallint,  @RECURRING_CHECKED smallint,  @iRelationID int,  @sUserLevel smallint,  @iAccessAllAccounts int,  @tALSRegistered tinyint,  @cCompanyID char(5),  @nDenomExchangeRate   numeric(15,7),  @sMCTrxState smallint,  @dDocumentDate datetime,  @iTrxPostingNumber int,  @iTrxPeriodPostingNumber int,  @iTrxPostingNumberHist int,  @iTrxPeriodPostingNumberHist int,  @iRevPostingNumber int,  @iRevPeriodPostingNumber int,  @iRevPostingNumberHist int,  @iRevPeriodPostingNumberHist int,  @tReversingPostingNumberTaken tinyint,  @cCorrespondingUnit char(5),  @cOriginatingTRXDesc char(30),  @iCorrectingTrxType      int,  @iOriginalJE       int,  @sOriginalJEYear      smallint,  @nOriginalJESeqNum numeric(19,5),  @sBACKOUT smallint,  @sCORRECTING smallint, 	/*NCL Mike South Variables */ 	@NCL_JournalEntry  int, 	@NCL_VoucherNumber char(21), 	@NCL_RMDocNumberWork char(17), 	@NCL_DocType smallint, 	@NCL_SequenceLine numeric(19,5), 	@NCL_SourceICAccount int, 	@NCL_CompanyID smallint, 	@NCL_DestAccount int, 	@NCL_DestICAccount int, 	@NCL_RemoteCompanyID char(5), 	@NCL_RemoteDestAccount char(129), 	@NCL_RemoteDestICAccount char(129), 	@NCL_CopyMDA tinyint, 	@NCL_ReverseMDA tinyint, 	/**/  @nLedgerID int select  @O_cDestCompanyID = '',  @O_mSequenceLine = 0.0,  @nSequenceLine  = 0.0,  @O_iErrorState  = 0,  @iStatus  = 0,  @O_bLineMessages = 0x00000000,  @O_bLineMessages2 = 0x00000000,  @iSequenceNumber = 0,  @cNewDTARefRecurring    = '',  @cNewDTARefReversing    = '',  @nRecurringSeqLine      = 0.00 /* IB - 20/06/06, Added Intercompany Log table */ exec dbo.ncWriteInterLog 'glpPostNormalTransaction: started' if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end  while (@tLoop is NULL) begin  select @tLoop = 1  if @I_iSQLSessionID is NULL or  @I_iJournalEntry is NULL or  @I_cUserID is NULL or  @I_tPrintDistributions is NULL or  @I_tPrinting is NULL or  @I_tPosting is NULL or  @I_bBatchValid is NULL or  @I_cFuncCurrencyID is NULL or   @I_sFuncCurrencyIndex is NULL or  @I_sFuncDecimalPlaces is NULL or  @I_tMCRegistered is NULL or  @I_tMCReport is NULL or  @I_sMCTransaction is NULL or  @I_cOrigCurrencyID is NULL or  @I_sOrigCurrencyIndex is NULL or  @I_sOrigDecimalPlaces is NULL or  @I_cProductName is NULL or  @I_sWindowType is NULL or  @I_cOrigCompanyID is NULL or  @I_tMDARegistered is NULL or  @I_tRecurringBatch is NULL or  @I_iPostingNumber is NULL or  @I_iPeriodPostingNumber is NULL or  @I_iPostingNumberHist is NULL or  @I_iPeriodPostingNumberHist is NULL or  @IO_bHeaderMessages is NULL  begin  select @O_iErrorState = 20023  break  end   select  @TRUE   = 1,  @FALSE   = 0,  @NORMAL_TRX  = 1,  @POST_ACCT  = 1,  @UNIT_ACCT  = 2,  @POST_ALLOC_ACCT = 3,  @UNIT_ALLOC_ACCT = 4,  @VARIABLE  = 2,  @REGULAR_OFFSET   = 1,  @REVERSING  = 1,  @AUTO_REV_TRX  = 4,  @GL_TRANSACTION   = 0,  @MC_TRANSACTION   = 1,  @UNIT_DECIMAL_PLACES = 3,  @POSTING_ACCOUNT = 1,  @PURCHASING  = 4,  @MS_ITEM_1  = power (2,24),  @MS_ITEM_2  = power (2,25),  @MS_ITEM_3  = power (2,26),  @MS_ITEM_4  = power (2,27),  @MS_ITEM_5  = power (2,28),  @MS_ITEM_6  = power (2,29),  @MS_ITEM_13  = power (2,20),  @REVERSING_CHECKED = 2,  @RECURRING_CHECKED = 4,  @iRelationID  = 0,  @sUserLevel  = 0,  @iAccessAllAccounts = 0,  @sBACKOUT  = 1,  @sCORRECTING  = 2  select   @cHdrBatchSource  = BatchSource,  @cHdrBatchNumber  = BatchNumber,  @sHdrSeries   = Series,  @cHdrAuditTrailCode  = TRXSource,  @cHdrReversingAuditTrailCode = ReversingTRXSource,  @dHdrTransactionDate  = TransactionDate,  @sHdrTransactionPeriodID = TransactionPeriodID,  @sHdrTransactionYear  = TransactionYear,  @sHdrTransactionClosingYear = TransactionClosingYear,  @tHdrTransactionHistory  = TransactionHistory,  @dHdrReversingDate  = ReversingDate,  @sHdrReversingPeriodID  = ReversingPeriodID,  @sHdrReversingYear  = ReversingYear,  @sHdrReversingClosingYear = ReversingClosingYear,  @tHdrReversingHistory  = ReversingHistory,  @sHdrTransactionType  = TransactionType,  @nHdrRecurringTRXSequence = RecurringTRXSequence,  @tHdrICTransaction  = ICTransaction,  @tHdrICDistributionsExist = ICDistributionsExist,  @cOriginatingTrxSource  = OrigTransactionSource,  @sHDROrigDTASeries  = OrigDTASeries,  @nDTAIndex   = DTAIndex,  @nDenomExchangeRate   = DenomExchangeRate,  @sMCTrxState   = MCTrxState,  @dDocumentDate   = DocumentDate,  @nExchangeRate   = ExchangeRate,  @iOriginalJE      = OriginalJE,  @sOriginalJEYear      = OriginalJEYear,  @nOriginalJESeqNum  = OriginalJESeqNum,  @iCorrectingTrxType      = CorrectingTrxType,  @nLedgerID   = Ledger_ID  from  #TRXHeader  where  JournalEntry = @I_iJournalEntry  if @@rowcount <> 1  begin  select @O_iErrorState = 20889  break  end  if @sHdrTransactionType = @REVERSING  select @tReversing = @TRUE  else  select @tReversing = @FALSE  if @I_iPostingNumber <> 0 and @tReversing = @TRUE  begin  if @tHdrReversingHistory = @TRUE  begin  select   @iRevPostingNumber = @I_iPostingNumber,  @iRevPeriodPostingNumber = @I_iPeriodPostingNumber  exec @iStatus = glpIncPostingNumbers  @sHdrReversingYear,  @sHdrReversingPeriodID,  @iRevPostingNumberHist output,  @iRevPeriodPostingNumberHist output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end  else   begin  select  @iRevPostingNumberHist = @I_iPostingNumberHist,  @iRevPeriodPostingNumberHist = @I_iPeriodPostingNumberHist  exec @iStatus = glpIncPostingNumbers  @sHdrReversingYear,  @sHdrReversingPeriodID,  @iRevPostingNumber output,  @iRevPeriodPostingNumber output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end  end   else  select  @iRevPostingNumber = 0,  @iRevPeriodPostingNumber = 0,  @iRevPostingNumberHist = 0,  @iRevPeriodPostingNumberHist = 0  if @tHdrICDistributionsExist = @FALSE  begin  declare  NormalCursor INSENSITIVE  cursor for select  SQNCLINE,  ACTINDX,  DEBITAMT,  CRDTAMNT,  ORDBTAMT,  ORCRDAMT,  DSCRIPTN,  GLLINVAL,  ACCTTYPE,  FXDORVAR,  BALFRCLC,  PSTNGTYP,  DECPLACS,  convert(numeric(15,7),XCHGRATE),  INTERID,  CURRNIDX,  ORDOCNUM,  ORCTRNUM,  ORMSTRID,  ORMSTRNM,  ORTRXTYP,  ORTRXDESC,  OrigSeqNum,  DTA_GL_Status,  GLLINMS2,  @FALSE,   CorrespondingUnit   from  GL10001 with (NOLOCK)  where  JRNENTRY = @I_iJournalEntry  order by  ACTINDX,SQNCLINE  end   else  begin  declare  NormalCursor INSENSITIVE  cursor for select  SequenceLine,  AccountIndex,  TRXDebit,  TRXCredit,  OriginatingDebit,  OriginatingCredit,  Description,  LineValid,  AccountType,  FixedOrVariable,  BalanceForCalculation,  PostingType,  DecimalPlaces,  ExchangeRate,  IntercompanyID,  CurrencyIndex,  OrigDocumentNumber,  OrigControlNumber,  OrigMasterID,  OrigMasterName,  OrigTransactionType,  OrigTRXDesc,  OrigSeqNum,  DTAGLStatus,  LineMessages2,  SystemGenerated,   CorrespondingUnit   from   #LineItems  order by  AccountIndex,SequenceLine  end   open NormalCursor  select @iCursorError = @@cursor_rows  if (@iCursorError = 0) or (@iCursorError = -1)  begin  deallocate NormalCursor  select @O_bLineMessages = (@O_bLineMessages | @MS_ITEM_1)  if @I_tPosting = @FALSE  begin  exec @iStatus = glpUpdateAllocationRegister  @NORMAL_TRX,  @I_iJournalEntry,  @cHdrBatchSource,  @cHdrBatchNumber,  @I_cUserID,  @FALSE,     0,     0,     0.0,     0.0,     @dHdrTransactionDate,  0.0,     ' ',     @FALSE,      @tHdrTransactionHistory,   @tReversing,   @O_bLineMessages,  @I_cFuncCurrencyID,  @I_sFuncCurrencyIndex,  @O_bLineMessages2,  0.00,     0.00,     @I_cOrigCurrencyID,  @I_sOrigCurrencyIndex,  '',     @tHdrICTransaction,  '',  '',  '',  '',  0,   0,     0.00,     0.00,     @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end   else  select @O_iErrorState = 20025  break  end   select  @nActualBalance  = 0.0,  @nOrigActualBalance = 0.0,  @tReversingPostingNumberTaken = @FALSE  fetch next from   NormalCursor  into   @nSequenceLine,  @iAccountIndex,  @nDebit,  @nCredit,  @nOrigDebit,  @nOrigCredit,  @cDescription,  @bLineVald,  @sAccountType,  @sFixedOrVariable,  @sBalanceForCalculation,  @sPostingType,  @sUnitDecimalPlaces,  @nExchangeRate,  @cIntercompanyID,  @sCurrencyIndex,  @cOriginatingDocNumber,  @cOriginatingControlNumber,  @cOriginatingMasterID,  @cOriginatingMasterName,  @sOriginatingTrxType,  @cOriginatingTRXDesc,  @iOrigSequenceNumber,  @sDTAGLStatus,  @O_bLineMessages2,  @tSystemGenerated,  @cCorrespondingUnit  while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 20025  break  end  if (@iAccountIndex <> 0) or (@nDebit <> 0.00) or (@nCredit <> 0.00)   or (@nOrigDebit <> 0.00) or (@nOrigCredit <> 0.00)   begin  select   @O_bLineMessages = 0x00000000,  @O_mSequenceLine = @nSequenceLine,  @sOrigDTASeries = @sHDROrigDTASeries,   @nRecurringSeqLine = @nSequenceLine  if @cIntercompanyID = @I_cOrigCompanyID  begin  select @cCompanyID = db_name()  exec @iStatus = DYNAMICS..smGetAccountLevelSecurityInfo  @cCompanyID,  @iRelationID output,  @sUserLevel  output,  @iAccessAllAccounts output,  @tALSRegistered output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if (@bLineVald & @MS_ITEM_1) <> @MS_ITEM_1 or   (@I_bBatchValid & @MS_ITEM_1) = @MS_ITEM_1 or   (@I_bBatchValid & @MS_ITEM_3) = @MS_ITEM_3 or   @iAccessAllAccounts = @FALSE   begin  exec @iStatus = glpGetAccountNumber  @iAccountIndex,  @iRelationID,  @sUserLevel,  @iAccessAllAccounts,  @tValidAccountNumber output,  @tActive output,  @sAccountType output,  @sAccountCategory output,  @sFixedOrVariable output,  @sBalanceForCalculation output,  @sPostingType output,  @sUnitDecimalPlaces output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end  else  begin  select  @tValidAccountNumber = @TRUE,  @tActive = @TRUE  end   exec @iStatus = glpVerifyAccountNumber  @tValidAccountNumber,  @tActive,   @sFixedOrVariable,   @sBalanceForCalculation,  @sPostingType,  @FALSE,      @tHdrTransactionHistory,  @tHdrReversingHistory,   @sAccountType output,  @O_bLineMessages output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  if @sAccountType = @UNIT_ACCT  select   @sFuncCurrencyIndex = @sUnitDecimalPlaces,  @sOrigCurrencyIndex = @sUnitDecimalPlaces,  @sFuncDecimalPlaces = @sUnitDecimalPlaces - 1,  @sOrigDecimalPlaces = @sUnitDecimalPlaces - 1  else if @sAccountType = @UNIT_ALLOC_ACCT  select   @sFuncCurrencyIndex = @UNIT_DECIMAL_PLACES,  @sOrigCurrencyIndex = @UNIT_DECIMAL_PLACES,  @sFuncDecimalPlaces = @UNIT_DECIMAL_PLACES - 1,  @sOrigDecimalPlaces = @UNIT_DECIMAL_PLACES - 1  else  select   @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,  @sOrigCurrencyIndex = @I_sOrigCurrencyIndex,  @sFuncDecimalPlaces = @I_sFuncDecimalPlaces,  @sOrigDecimalPlaces = @I_sOrigDecimalPlaces - 1   if @I_sMCTransaction = @MC_TRANSACTION  begin  if (@sAccountType = @POST_ACCT) and (@tValidAccountNumber = @TRUE)  begin  exec @iStatus = glpmcVerifyAccountCurrency  @iAccountIndex,  @POSTING_ACCOUNT,  @I_cOrigCurrencyID,  @I_tPosting,  @O_bLineMessages2 output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end   end   if @sAccountType <> @UNIT_ACCT and  @sAccountType <> @UNIT_ALLOC_ACCT  begin  select   @nActualBalance = @nActualBalance + (@nDebit - @nCredit),  @nOrigActualBalance = @nOrigActualBalance +   (@nOrigDebit - @nOrigCredit)   end  if (@I_tMDARegistered = @TRUE) and (@sAccountType = @POST_ACCT)  and (@iAccountIndex <> 0) and (@tSystemGenerated = @FALSE) and   (@cIntercompanyID = @I_cOrigCompanyID)  begin  select @nTempAmount = @nDebit - @nCredit  exec @iStatus = dtaGLPostingValidate  @sDTAGLStatus,  @nHdrRecurringTRXSequence,  @nSequenceLine,   @iAccountIndex,  @iOrigSequenceNumber,  @cOriginatingDocNumber,  @cOriginatingControlNumber,  @sOriginatingTrxType,  @cOriginatingTrxSource,  @sHdrSeries,  @sOrigDTASeries,  1,   @nDTAIndex,  @nTempAmount,  @I_tPosting,  @FALSE,   @O_bLineMessages2 output,  @tMDAExists output,  @sDTASeries output,  @cDTAReference output,  @iSequenceNumber output,  @cDTAGLReference output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  if @tMDAExists = @TRUE  begin  if @sOrigDTASeries = 0  select @sOrigDTASeries = 2  end  else  begin  select @sOrigDTASeries = 0  end  end   else  begin  select @sOrigDTASeries = 0  end  if (@O_bLineMessages <> 0 or @O_bLineMessages2 <> 0) and (@I_tPosting = @TRUE)  begin  select @O_iErrorState = 20141  break  end   select   @dTransactionDate = @dHdrTransactionDate,  @sTransactionYear = @sHdrTransactionYear,  @sTransactionPeriodID = @sHdrTransactionPeriodID,  @sTransactionClosingYear = @sHdrTransactionClosingYear,  @tTransactionHistory = @tHdrTransactionHistory,  @tReversing = @FALSE,  @cAuditTrailCode = @cHdrAuditTrailCode,  @nRecurringTRXSequence = @nHdrRecurringTRXSequence,  @sTransactionType = @NORMAL_TRX  if @I_tRecurringBatch = @TRUE   select @sDTAGLStatus = (@sDTAGLStatus | @RECURRING_CHECKED)  if @sHdrTransactionType = @REVERSING  begin  select   @iCount = 2,  @tReversing = @TRUE  end   else  select @iCount = 1  select  @iTrxPostingNumber = @I_iPostingNumber,  @iTrxPeriodPostingNumber = @I_iPeriodPostingNumber,  @iTrxPostingNumberHist = @I_iPostingNumberHist,  @iTrxPeriodPostingNumberHist = @I_iPeriodPostingNumberHist  while (@iCount > 0)  begin  select @iCount = @iCount - 1  exec @iStatus = glpPostAccount  @I_iSQLSessionID,  @sTransactionType,  @I_iJournalEntry,  @cHdrBatchSource,  @cHdrBatchNumber,  @I_cUserID,  @sHdrSeries,  @iAccountIndex,  @sAccountType,  @sFixedOrVariable,  @nDebit,  @nCredit,  @cAuditTrailCode,  @nSequenceLine,  @dTransactionDate,  @sTransactionPeriodID,  @nLedgerID,  @sTransactionYear,  @sTransactionClosingYear,  @tTransactionHistory,  @cDescription,  @I_tPrintDistributions,  @tReversing,  @I_tPrinting,  @I_tPosting,  @FALSE,     @FALSE,     @REGULAR_OFFSET,  @nRecurringTRXSequence,  @nExchangeRate,  @sBalanceForCalculation,  @sPostingType,  @I_cFuncCurrencyID,  @sFuncCurrencyIndex,  @sFuncDecimalPlaces,  @I_tMCRegistered,  @I_tMCReport,  @I_sMCTransaction,  @nOrigDebit,  @nOrigCredit,  @I_cOrigCurrencyID,  @sOrigCurrencyIndex,  @sOrigDecimalPlaces,  @cIntercompanyID,  @tHdrICTransaction,  @cOriginatingDocNumber,  @cOriginatingControlNumber,  @cOriginatingMasterID,  @cOriginatingMasterName,  @sOriginatingTrxType,  @cOriginatingTRXDesc,  @sOrigDTASeries,  @iOrigSequenceNumber,  @sDTAGLStatus,  @nDTAIndex,  @nDenomExchangeRate,  @sMCTrxState,  @dDocumentDate,  0,    @iTrxPostingNumber,  @iTrxPeriodPostingNumber,  @iTrxPostingNumberHist,  @iTrxPeriodPostingNumberHist,  @cCorrespondingUnit,  @O_bLineMessages output,  @O_bLineMessages2 output,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  if @iCount > 0  begin  if @I_tAllowNegDebitsAndCredits = @FALSE  begin   select   @nTempDebit = @nDebit,  @nTempOrigDebit = @nOrigDebit  select   @nDebit = @nCredit,  @nCredit = @nTempDebit,  @nOrigDebit = @nOrigCredit,  @nOrigCredit = @nTempOrigDebit  end  else  select   @nDebit = @nDebit * (-1),  @nCredit = @nCredit * (-1),  @nOrigDebit = @nOrigDebit * (-1),  @nOrigCredit = @nOrigCredit * (-1)  select  @dTransactionDate = @dHdrReversingDate,  @sTransactionYear = @sHdrReversingYear,  @sTransactionPeriodID = @sHdrReversingPeriodID,  @sTransactionClosingYear = @sHdrReversingClosingYear,  @tTransactionHistory = @tHdrReversingHistory,  @nSequenceLine = @nSequenceLine + 5000000.0,  @cAuditTrailCode = @cHdrReversingAuditTrailCode,  @nRecurringTRXSequence = @nHdrRecurringTRXSequence + 1,  @sTransactionType = @AUTO_REV_TRX,  @sDTAGLStatus = (@sDTAGLStatus | @REVERSING_CHECKED),  @iTrxPostingNumber = @iRevPostingNumber,  @iTrxPeriodPostingNumber = @iRevPeriodPostingNumber,  @iTrxPostingNumberHist = @iRevPostingNumberHist,  @iTrxPeriodPostingNumberHist = @iRevPeriodPostingNumberHist /*NCL Mike South 25/06/2003 */ /*check to see if alternate line account for GL exsists if it does then */ /* create a reverse trx for it*/ if exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and  		(SQNCLINE = (@nSequenceLine-5000000.0)) and  		(NC_Src_IC_Account_Index = @iAccountIndex)) /* Start of modifications - 05/11/04 - pjsparrow */ /* Only try to insert a row for the reversing transaction if it doesn't already */ /* exist, as it may if using recurring reversing transactions. This will avoid */ /* duplicate key errors on NCIC3006 */ and not exists(select 1 from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and  		(SQNCLINE = (@nSequenceLine)) and  		(NC_Src_IC_Account_Index = @iAccountIndex)) /* End of modifications - 05/11/04 - pjsparrow */ begin 	/* IB - 20/06/06, Added Intercompany Log table */ 	exec dbo.ncWriteInterLog 'glpPostNormalTransaction: ncIC, insert into NCIC3006 (reversing transaction)' 	select   @NCL_JournalEntry=JRNENTRY, 		 @NCL_VoucherNumber=VCHRNMBR, 		 @NCL_RMDocNumberWork =RMDNUMWK, 		 @NCL_DocType = DOCTYPE, 		 @NCL_SequenceLine =SQNCLINE, 		 @NCL_SourceICAccount=NC_Src_IC_Account_Index, 		 @NCL_CompanyID =CMPANYID, 		 @NCL_DestAccount =NC_Dest_Account_Index, 		 @NCL_DestICAccount =NC_Dest_IC_Account_Index, 		 @NCL_RemoteCompanyID =Remote_Company_ID, 		 @NCL_RemoteDestAccount =Remote_Destination_Accou, 		 @NCL_RemoteDestICAccount =Remote_Destination_IC_Ac, 		 @NCL_CopyMDA =NC_Copy_MDA_CB, 		 @NCL_ReverseMDA =NC_Reverse_MDA_CB 	from NCIC3006 where (JRNENTRY = @I_iJournalEntry) and  		(SQNCLINE = (@nSequenceLine-5000000.0)) and  		(NC_Src_IC_Account_Index = @iAccountIndex) 	insert into NCIC3006 ( 		JRNENTRY, 		VCHRNMBR, 		RMDNUMWK, 		DOCTYPE, 		SQNCLINE, 		NC_Src_IC_Account_Index, 		CMPANYID, 		NC_Dest_Account_Index, 		NC_Dest_IC_Account_Index, 		Remote_Company_ID, 		Remote_Destination_Accou, 		Remote_Destination_IC_Ac, 		NC_Copy_MDA_CB, 		NC_Reverse_MDA_CB) 	values ( 		 @NCL_JournalEntry, 		 isnull(@NCL_VoucherNumber,''), 		 isnull(@NCL_RMDocNumberWork,0), 		 isnull(@NCL_DocType,0), 		 isnull(@nSequenceLine,0), 		 isnull(@NCL_SourceICAccount,0), 		 isnull(@NCL_CompanyID,0), 		 isnull(@NCL_DestAccount,0), 		 isnull(@NCL_DestICAccount,0), 		 isnull(@NCL_RemoteCompanyID,0), 		 isnull(@NCL_RemoteDestAccount,0), 		 isnull(@NCL_RemoteDestICAccount,0), 		 isnull(@NCL_CopyMDA,0), 		 isnull(@NCL_ReverseMDA,0)) end /**/  end   end   if @iStatus <> 0 or @O_iErrorState <> 0  break  end   else if @I_tPrinting = @TRUE  begin  if @sAccountType = @UNIT_ACCT  select   @sCurrencyIndex = @sUnitDecimalPlaces  else if @sAccountType = @UNIT_ALLOC_ACCT  select   @sCurrencyIndex = @UNIT_DECIMAL_PLACES  exec @iStatus = glpUpdateAllocationRegister  @NORMAL_TRX,  @I_iJournalEntry,  @cHdrBatchSource,  @cHdrBatchNumber,  @I_cUserID,  @FALSE,     @iAccountIndex,   @sAccountType,  @nDebit,  @nCredit,  @dHdrTransactionDate,  @nSequenceLine,  @cDescription,  @FALSE,      @FALSE,     @FALSE,     @O_bLineMessages,  @I_cFuncCurrencyID,   @sCurrencyIndex,   @O_bLineMessages2,  @nOrigDebit,  @nOrigCredit,  @I_cOrigCurrencyID,  @I_sOrigCurrencyIndex,  @cIntercompanyID,  @tHdrICTransaction,  @cOriginatingDocNumber,  @cOriginatingControlNumber,  @cOriginatingMasterID,  @cOriginatingMasterName,  @sOriginatingTrxType,  @sMCTrxState,  @nExchangeRate,  @nDenomExchangeRate,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end   if (@tSystemGenerated = @FALSE) and (@I_tPosting = @TRUE)   and (@sOrigDTASeries <> 0) and  (@cIntercompanyID = @I_cOrigCompanyID)  begin  if (@tTransactionHistory = @FALSE) or   (ISNULL((select KPGTRXHS from GL40000 with (NOLOCK)),0) = @TRUE)  begin  if @tTransactionHistory = @TRUE  select @sPostingStatus = 3  else  select @sPostingStatus = 2  if (@tReversing = @TRUE) or (@I_tRecurringBatch = @TRUE)  begin  if @tReversing = @TRUE  select @dDTATrxDate = @dHdrReversingDate  else  select @dDTATrxDate = @dHdrTransactionDate  if @I_tRecurringBatch = @TRUE  begin  exec @iStatus = dtaGetFinancialRef  @nDTAIndex,  @FALSE,   @nHdrRecurringTRXSequence,  @cNewDTARefRecurring    output,  @O_iErrorState output  select @iError = @@error  end    if (@tReversing = @TRUE) and (@I_tRecurringBatch = @TRUE)  begin  select @nMDARecurTRXSequence = @nHdrRecurringTRXSequence + 1.00  exec @iStatus = dtaGetFinancialRef  @nDTAIndex,  @tReversing,  @nMDARecurTRXSequence,  @cNewDTARefReversing output,  @O_iErrorState output  select @iError = @@error  end   	/*  NCL Modified - 26/04/02 - IB - modified to copy MDA details for recurring transactions (NCL Intercompany) */ 								/* get the company id for the current company */ 						select 							@sCompanyID = CMPANYID 						from 							DYNAMICS..SY01500 						where 							INTERID = db_name() 						/* get the MDA options */ 						select 							@tIC_CopyMDA = NC_Copy_MDA_CB, 							@tIC_ReverseMDA = NC_Reverse_MDA_CB 						from 							NCIC0003 						where 							(NC_Source_Company_ID = @sCompanyID) and 							(NC_Trigger_Account_Index = @iAccountIndex) 						 /* NCL Modified, 06/06/2002, PJB - check alternate accounts as well !! */ 						if @tIC_CopyMDA is null 						begin 							/* look on alternate accounts also */ 							select 								@tIC_CopyMDA = NC_Copy_MDA_CB, 								@tIC_ReverseMDA = NC_Reverse_MDA_CB 							from 								NCIC3005 							where 								(NC_Source_Company_ID = @sCompanyID) and 								(NC_Src_IC_Account_Index = @iAccountIndex) 						end 						if @tIC_CopyMDA = @TRUE 						begin 							/* IB - 20/06/06, Added Intercompany Log table */ 							exec dbo.ncWriteInterLog 'glpPostNormalTransaction: ncIC, copy MDA details for recurring transactions (NCL Intercompany)'; 							/* delete ay old ones to stop duplicate conflicts */ 							delete from DYNAMICS..NCIC2000 where (DTASERIES = @sDTASeries) and 											(DTAREF = @cNewDTARefRecurring) and 											(ACTINDX = @iAccountIndex)  							delete from DYNAMICS..NCIC2000 where (DTASERIES = @sDTASeries) and 											(DTAREF = @cDTAReference) and 											(ACTINDX = @iAccountIndex)  							/* write the mda code lines to NC_SY_DTA_Details */ 							insert into DYNAMICS..NCIC2000 ( 								DTASERIES, 								DTAREF, 								ACTINDX, 								SEQNUMBR, 								GROUPID, 								CODEID, 								DOCNUMBR, 								CMPANYID, 								RMDTYPAL, 								POSTDESC, 								DTAQNTY, 								CODEAMT, 								TRXDATE, 								NC_Copy_MDA_CB, 								NC_Reverse_MDA_CB) 							select 								DTASERIES, 								@cNewDTARefRecurring, 								ACTINDX, 								SEQNUMBR, 								GROUPID, 								CODEID, 								DOCNUMBR, 								@sCompanyID, 								RMDTYPAL, 								POSTDESC, 								DTAQNTY, 								CODEAMT, 								TRXDATE, 								@tIC_CopyMDA, 								@tIC_ReverseMDA 							from 								DTA10200 							where 								(DTASERIES = @sDTASeries) and 								(DTAREF = @cDTAReference) and 								(ACTINDX = @iAccountIndex) 						end /*  NCL End Mods */   else if (@tReversing = @TRUE)  begin  exec @iStatus = dtaGetFinancialRef  @nDTAIndex,  @tReversing,  0.00,  @cNewDTARefReversing output,  @O_iErrorState output  select @iError = @@error  end    if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  Exec @iStatus = dtaPostReversingCodes  @sDTASeries,  @cDTAReference,  @iAccountIndex,  @nRecurringSeqLine,  @nSequenceLine,    @cDTAGLReference,  @cNewDTARefRecurring,  @cNewDTARefReversing,  @iSequenceNumber,   @sPostingStatus,  @tReversing,  @I_tRecurringBatch,  @dDTATrxDate,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end  if @I_tRecurringBatch = @FALSE     begin  Exec @iStatus = dtaUpdateStats  @sDTASeries,  @cDTAReference,  @iAccountIndex,  @iSequenceNumber,   @cDTAGLReference,  @sPostingStatus,  @O_iErrorState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end  end     end     end   fetch next from   NormalCursor  into   @nSequenceLine,  @iAccountIndex,  @nDebit,  @nCredit,  @nOrigDebit,  @nOrigCredit,  @cDescription,  @bLineVald,  @sAccountType,  @sFixedOrVariable,  @sBalanceForCalculation,  @sPostingType,  @sUnitDecimalPlaces,  @nExchangeRate,  @cIntercompanyID,  @sCurrencyIndex,  @cOriginatingDocNumber,  @cOriginatingControlNumber,  @cOriginatingMasterID,  @cOriginatingMasterName,  @sOriginatingTrxType,  @cOriginatingTRXDesc,  @iOrigSequenceNumber,  @sDTAGLStatus,  @O_bLineMessages2,  @tSystemGenerated,  @cCorrespondingUnit  end   deallocate NormalCursor   if @iStatus <> 0 or @O_iErrorState <> 0  break  if @nActualBalance <> 0.0 or @nOrigActualBalance <> 0.0  begin  select @IO_bHeaderMessages = (@IO_bHeaderMessages | @MS_ITEM_6)  if @I_tPosting = @TRUE   begin  select @O_iErrorState = 20174  break  end  end   if @I_tPosting = @TRUE and  @tHdrICDistributionsExist = @TRUE  begin  exec @iStatus = icpPostToDestinationCompanies  @I_iSQLSessionID,  @I_cProductName,  @I_tMDARegistered,  @I_cUserID,  @I_sWindowType,  @I_cOrigCompanyID,  @O_cDestCompanyID output,  @O_bLineMessages2 output,  @O_iErrorState    output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break  end   if (@I_tPosting = @TRUE) and (@iCorrectingTrxType = @sBACKOUT or @iCorrectingTrxType = @sCORRECTING)  begin  exec @iStatus = glpUpdateOriginalJE  @iOriginalJE,  @sOriginalJEYear,  @nOriginalJESeqNum,  @I_iJournalEntry,  @sTransactionYear,  @iCorrectingTrxType  end end  if @iStatus <> 0 or @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction return (@iStatus)  
GO
GRANT EXECUTE ON  [dbo].[glpPostNormalTransaction] TO [DYNGRP]
GO
