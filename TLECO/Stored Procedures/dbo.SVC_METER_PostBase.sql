SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE Procedure [dbo].[SVC_METER_PostBase] (  @MeterToCheck integer,  @EquipID integer,  @Meter integer,  @TransactionStartDate datetime,  @TransactionDate datetime,  @TransactionTime datetime,  @ContractNumber char(11),  @LineNumber numeric(19,5),  @ContStartDate datetime,  @PrevMeter integer,  @SourceModule char(3),  @SourceDocument varchar(255),  @AddRevenue tinyint,  @I_sRateCalcMethod  smallint ,           @I_nExchangeRate  numeric(15,7),         @I_nDenomExchangeRate numeric(15,7),     @I_sMCTrxState   smallint,               @I_sDecimalPlaces  smallint              ) As DECLARE @ContMeterStart integer,  @EverReplaced tinyint,  @ContPrevMeter integer,  @LastPostedDate datetime,  @Bypass tinyint,  @Actual integer,  @Internal integer,  @MeterBase integer,  @Overage1 integer,  @Overage2 integer,  @Overage3 integer,  @Overage4 integer,  @Charge1 numeric(19,5),  @Charge2 numeric(19,5),  @Charge3 numeric(19,5),  @Charge4 numeric(19,5),  @Expire tinyint,  @Percentage numeric(19,5),  @RemainingAmount numeric(19,5),  @ErrorCondition integer,  @CurrentMeterReading integer  set nocount on select @EverReplaced = CASE   WHEN @MeterToCheck = 1 THEN Replaces_1  WHEN @MeterToCheck = 2 THEN Replaces_2  WHEN @MeterToCheck = 3 THEN Replaces_3  WHEN @MeterToCheck = 4 THEN Replaces_4  WHEN @MeterToCheck = 5 THEN Replaces_5  ELSE 0  END  from SVC00301 where  EQUIPID = @EquipID and LSTDTEDT >= @ContStartDate   select @ContMeterStart = CASE   WHEN @MeterToCheck = 1 THEN Meter_Startings_1  WHEN @MeterToCheck = 2 THEN Meter_Startings_2  WHEN @MeterToCheck = 3 THEN Meter_Startings_3  WHEN @MeterToCheck = 4 THEN Meter_Startings_4  WHEN @MeterToCheck = 5 THEN Meter_Startings_5  ELSE 0  END  from SVC00607  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  IF @EverReplaced = 0 BEGIN  IF @PrevMeter >= @ContMeterStart  BEGIN  select @ContPrevMeter = @PrevMeter,  @Bypass = 0  END ELSE IF @PrevMeter < @ContMeterStart and @Meter > @ContMeterStart  BEGIN  select @ContPrevMeter = @ContMeterStart,  @Bypass = 0  END ELSE  BEGIN  select @Bypass = 1  END END ELSE BEGIN  select @ContPrevMeter = @PrevMeter  select @Bypass=0 END  IF @Bypass = 0 and @Meter > @ContPrevMeter BEGIN   select @PrevMeter = CASE   WHEN @MeterToCheck = 1 THEN Meter_Actuals_1   WHEN @MeterToCheck = 2 THEN Meter_Actuals_2   WHEN @MeterToCheck = 3 THEN Meter_Actuals_3   WHEN @MeterToCheck = 4 THEN Meter_Actuals_4   WHEN @MeterToCheck = 5 THEN Meter_Actuals_5   ELSE 0 END,  @Internal = CASE   WHEN @MeterToCheck = 1 THEN Meter_Internal_Uses_1   WHEN @MeterToCheck = 2 THEN Meter_Internal_Uses_2   WHEN @MeterToCheck = 3 THEN Meter_Internal_Uses_3   WHEN @MeterToCheck = 4 THEN Meter_Internal_Uses_4   WHEN @MeterToCheck = 5 THEN Meter_Internal_Uses_5  ELSE 0  END   from SVC00607  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  if @PrevMeter < 0   select @PrevMeter = 0  IF @MeterToCheck = 1  BEGIN  update SVC00607  set Meter_Actuals_1 = Meter_Actuals_1 + @Meter - @ContPrevMeter  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  select @CurrentMeterReading = Meter_Actuals_1 from SVC00607 where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  END ELSE IF @MeterToCheck = 2  BEGIN  update SVC00607   set Meter_Actuals_2 = Meter_Actuals_2 + @Meter - @ContPrevMeter  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  select @CurrentMeterReading = Meter_Actuals_2 from SVC00607 where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  END ELSE IF @MeterToCheck = 3  BEGIN  update SVC00607   set Meter_Actuals_3 = Meter_Actuals_3 + @Meter - @ContPrevMeter  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  select @CurrentMeterReading = Meter_Actuals_3 from SVC00607 where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  END ELSE IF @MeterToCheck = 4  BEGIN  update SVC00607   set Meter_Actuals_4 = Meter_Actuals_4 + @Meter - @ContPrevMeter  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  select @CurrentMeterReading = Meter_Actuals_4 from SVC00607 where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  END ELSE IF @MeterToCheck = 5  BEGIN  update SVC00607   set Meter_Actuals_5 = Meter_Actuals_5 + @Meter - @ContPrevMeter  where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber   select @CurrentMeterReading = Meter_Actuals_5 from SVC00607 where CONSTS = 2 and CONTNBR = @ContractNumber and LNSEQNBR = @LineNumber  END   EXEC SVC_METER_GetMeterAmounts  @MeterToCheck,@ContractNumber,@LineNumber,  @Actual OUTPUT,  @MeterBase OUTPUT,  @Overage1 OUTPUT,  @Overage2 OUTPUT,  @Overage3 OUTPUT,  @Overage4 OUTPUT,  @Charge1 OUTPUT,  @Charge2 OUTPUT,  @Charge3 OUTPUT,  @Charge4 OUTPUT,  @Expire  OUTPUT   IF @Actual > @MeterBase  BEGIN   exec SVC_METER_Process_Meter_Overage @ContractNumber,@LineNumber,@MeterToCheck, @CurrentMeterReading,@PrevMeter,@MeterBase,  @Overage1,@Overage2,@Overage3,@Overage4,  @Charge1,@Charge2,@Charge3,@Charge4,@Expire,@TransactionDate  END   IF (@AddRevenue = 1 and @MeterBase <> 0)   BEGIN   IF @Actual > @MeterBase select @Actual = @MeterBase  IF @Actual > @PrevMeter  select @Actual =  @Actual - @PrevMeter  - @Internal  select @Percentage = @Actual  * 1.00 / @MeterBase * 1.00   IF @SourceModule = 'CLS'  select @SourceDocument = @SourceDocument + '-' + CONVERT(varchar(1),@MeterToCheck)  exec SVC_RET_Update_Retainage 2,@ContractNumber,  @LineNumber,  @TransactionStartDate,  @TransactionTime,  @TransactionDate,  @Percentage,  @I_sRateCalcMethod,  @I_nExchangeRate,  @I_nDenomExchangeRate,  @I_sMCTrxState,  @I_sDecimalPlaces,  @MeterToCheck,    0,  0,  0,  0,  0,  @SourceModule,  @SourceDocument,  @RemainingAmount OUTPUT,  @ErrorCondition OUTPUT   END END  return     
GO
GRANT EXECUTE ON  [dbo].[SVC_METER_PostBase] TO [DYNGRP]
GO
