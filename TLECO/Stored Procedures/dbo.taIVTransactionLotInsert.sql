SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taIVTransactionLotInsert] @I_vIVDOCNBR char(17),      @I_vIVDOCTYP smallint,     @I_vUSERDATE datetime = '',    @I_vITEMNMBR char(30),     @I_vLOTNUMBR char(20),     @I_vSERLTQTY numeric(19,5),    @I_vADJTYPE smallint = 0,    @I_vBIN char(15) = '',     @I_vCreateBin tinyint = 0,    @I_vLNSEQNBR int = 0,     @I_vLOCNCODE char(10),     @I_vEXPNDATE datetime = '',    @I_vMFGDATE datetime = '',    @I_vAUTOCREATELOT int = 0,    @I_vDATERECD datetime = '',    @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',   @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,    @oErrString varchar(255) output    with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @SLTSQNUM int,      @OVRSERLT smallint,     @DATERECD datetime,     @ITMTRKOP smallint,     @DECPLQTY smallint,     @UNITCOST numeric(19,5),   @DTSEQNUM numeric(19,5),   @QTYTYPE smallint,     @LOTQTYAVAL numeric(19,5),   @ATYALLOC numeric(19,5),   @QTYRECVD numeric(19,5),   @QTYSOLD numeric(19,5),    @QTYDONE numeric(19,5),    @QTYAVAIL numeric(19,5),   @QtyAvailBin numeric(19,5),  @QTYTOALLOC numeric(19,5),   @LotFound tinyint,     @ENABLEMULTIBIN tinyint,  @sCompanyID int,  @NOTEINDX numeric(19,5),  @iStatus int,  @iGetNextNoteIdxErrState int,  @iCustomState int,  @iCustomErrString varchar(255),  @O_oErrorState int,  @iError int,     @LTNUMSLD tinyint,  @SERLTQTY numeric(19,5),  @ALLEXPLOTSIV tinyint,  @ASSIGNLOTNUMBY tinyint,  @USEEXISTINGSNLOTS tinyint,  @LotHit tinyint,  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select  @SLTSQNUM = 0,  @OVRSERLT = 0,  @DATERECD = '',  @ITMTRKOP = 0,  @DECPLQTY = 0,  @UNITCOST = 0,  @DTSEQNUM = 0,  @QTYTYPE = 1,  @LOTQTYAVAL = 0,  @ATYALLOC = 0,  @QTYRECVD = 0,  @QTYSOLD = 0,  @QTYDONE = 0,  @QTYAVAIL = 0,  @QtyAvailBin = 0,  @QTYTOALLOC = 0,  @LotFound = 0,  @ENABLEMULTIBIN = 0,  @sCompanyID = 0,  @NOTEINDX = 0,  @iGetNextNoteIdxErrState = 0,  @iStatus = 0,  @O_iErrorState = 0,  @LTNUMSLD = 0,  @SERLTQTY = 0,  @ALLEXPLOTSIV = 0,  @ASSIGNLOTNUMBY = 0,  @USEEXISTINGSNLOTS = 0,  @LotHit = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taIVTransactionLotInsertPre  @I_vIVDOCNBR output,  @I_vIVDOCTYP output,  @I_vUSERDATE output,  @I_vITEMNMBR output,  @I_vLOTNUMBR output,  @I_vSERLTQTY output,  @I_vADJTYPE output,  @I_vBIN output,  @I_vCreateBin output,  @I_vLNSEQNBR output,  @I_vLOCNCODE output,  @I_vEXPNDATE output,  @I_vMFGDATE output,  @I_vAUTOCREATELOT output,  @I_vDATERECD output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus = 0) and (@iError <> 0)) begin  select @iStatus = @iError end if ((@iStatus <> 0) or (@iCustomState <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3358    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vIVDOCNBR is null or  @I_vIVDOCTYP is null or  @I_vUSERDATE is null or  @I_vITEMNMBR is null or  @I_vLNSEQNBR is null or  @I_vLOTNUMBR is null or  @I_vBIN is null or  @I_vCreateBin is null or  @I_vLOCNCODE is null or  @I_vAUTOCREATELOT is null or  @I_vUSRDEFND1 is null or  @I_vUSRDEFND2 is null or  @I_vUSRDEFND3 is null or  @I_vUSRDEFND4 is null or  @I_vUSRDEFND5 is null or  @I_vDATERECD is null) begin  select @O_iErrorState = 3359    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vIVDOCNBR = '' or  @I_vITEMNMBR = '' or  @I_vLOTNUMBR = '') begin  select @O_iErrorState = 3360    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vUSERDATE = '') begin  select @I_vUSERDATE = convert(varchar(12),getdate()) end  if (@I_vDATERECD = '') begin  select @DATERECD = @I_vUSERDATE end else begin  select @DATERECD = @I_vDATERECD end  select  @I_vIVDOCNBR = upper(@I_vIVDOCNBR),  @I_vITEMNMBR = upper(@I_vITEMNMBR),  @I_vLOTNUMBR = upper(@I_vLOTNUMBR),  @I_vLOCNCODE = upper(@I_vLOCNCODE),  @I_vBIN = upper(@I_vBIN)  select @ENABLEMULTIBIN = ENABLEMULTIBIN,  @ALLEXPLOTSIV = ALLEXPLOTSIV,  @ASSIGNLOTNUMBY = ASSIGNLOTNUMBY,  @USEEXISTINGSNLOTS = USEEXISTINGSNLOTS  from IV40100 (nolock) where SETUPKEY = 1  if ((@ENABLEMULTIBIN = 0) and (@I_vBIN <> '')) begin  select @I_vBIN = '' end  if (@ENABLEMULTIBIN = 1) begin  if (@I_vBIN = '')  begin  select @I_vBIN = 'AUTOCREATE'  end   if (@I_vCreateBin not in (0,1))  begin  select @O_iErrorState = 5966    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vADJTYPE  = 1)  begin  if not exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and  QTYTYPE  = 1 and LTNUMSLD = 0 and BIN = @I_vBIN)  begin  select @O_iErrorState = 5902     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if not exists(select 1 from IV40701 (nolock) where LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN)  begin  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5903     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@I_vCreateBin = 1)  begin  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 a (nolock) where a.INTERID = db_name()   exec @iStatus = DYNAMICS..tasmGetNextNoteIndex  @I_sCompanyID   = @sCompanyID,  @I_iSQLSessionID = 0,  @I_noteincrement  = 1,  @O_mNoteIndex   = @NOTEINDX output,  @O_iErrorState  = @iGetNextNoteIdxErrState output  select @iError = @@error  if ((@iStatus <> 0) or (@iGetNextNoteIdxErrState <> 0) or (@iError <> 0))  begin  select @oErrString = rtrim(@oErrString) + ' ' + @iGetNextNoteIdxErrState  select @O_iErrorState = 5904   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV40701 (LOCNCODE, BIN, NOTEINDX)  select @I_vLOCNCODE, @I_vBIN, @NOTEINDX  if (@@error <> 0)  begin  select @O_iErrorState = 5905     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if (not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = 1) and (@I_vADJTYPE = 1))  begin  if (@I_vCreateBin = 1)  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN, 1,0,0  if (@@error <> 0)  begin  select @O_iErrorState = 5906     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  if (@I_vCreateBin = 0)  begin  select @O_iErrorState = 5907     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   if (@I_vADJTYPE = 1)  begin  select @QtyAvailBin = (QUANTITY - ATYALLOC) from IV00112 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = 1   if (@I_vSERLTQTY > @QtyAvailBin)  begin  select @O_iErrorState = 5908     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@I_vITEMNMBR <> '') begin  if (not exists(select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR))  begin  select @O_iErrorState = 2270     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vLOCNCODE = '') begin  select @O_iErrorState = 2096     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  if (@I_vLOCNCODE <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11827     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vLOCNCODE <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11828     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vADJTYPE not in (0,1)) begin  select @O_iErrorState = 3361     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vIVDOCTYP not in (1,2)) begin  select @O_iErrorState = 3362     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSERLTQTY < 0) begin  select @O_iErrorState = 2093     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @ITMTRKOP = ITMTRKOP, @DECPLQTY = DECPLQTY from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  if (@ITMTRKOP <> 3) begin  select @O_iErrorState = 3371     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vSERLTQTY <> round(@I_vSERLTQTY,@DECPLQTY - 1,1)) begin  select @O_iErrorState = 5921     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@UNITCOST = 0) begin  select @UNITCOST =  case  when VCTNMTHD in (4,5) then STNDCOST  else CURRCOST  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  end  if ((@I_vADJTYPE = 1) and (@I_vLOTNUMBR <> '') and (@I_vAUTOCREATELOT = 0)) begin   if not exists (select 1 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0)  begin  select @O_iErrorState = 2095     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@I_vEXPNDATE <> '')  begin  if not exists (select 1 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and EXPNDATE = @I_vEXPNDATE)  begin  select @O_iErrorState = 9596     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   select @LOTQTYAVAL = isnull(sum(QTYRECVD - QTYSOLD - ATYALLOC),0) from IV00300 (nolock)  where  (@I_vEXPNDATE = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and QTYTYPE = 1)  or  (@I_vEXPNDATE <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and QTYTYPE = 1 and EXPNDATE = @I_vEXPNDATE)   if (@I_vSERLTQTY > @LOTQTYAVAL)  begin  select @O_iErrorState = 2094     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'IV_Transaction',  @I_vINDEX1 = @I_vIVDOCNBR,  @I_vINDEX2 = @I_vIVDOCTYP,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus = 0) and (@iError <> 0))  begin  select @iStatus = @iError  end  if ((@iStatus <> 0) or (@iCustomState <> 0))  begin  select @O_iErrorState = 2922   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@I_vAUTOCREATELOT = 1) and (@I_vLOTNUMBR <> '')) begin  if not exists(select 1 from IV00301 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR)  begin  if ((select LOTTYPE from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR) <> '')  begin  insert IV00301  (  ITEMNMBR,  LOTNUMBR,  LOTATRB1,  LOTATRB2,  LOTATRB3,  LOTATRB4,  LOTATRB5,  IUSCOUNT,  RCRDSTTS   )  select  @I_vITEMNMBR,   @I_vLOTNUMBR,   '',      '',      '',      '',      '',      1,      0      if (@@error <> 0)  begin  select @O_iErrorState = 6350    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end  else  begin  update IV00301 set IUSCOUNT = IUSCOUNT + 1 where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  select @O_iErrorState = 6351     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   select @DTSEQNUM = isnull(max(DTSEQNUM),0)+16384 from IV00300 (nolock) where ITEMNMBR = @I_vITEMNMBR and DATERECD = @DATERECD and LOCNCODE = @I_vLOCNCODE and QTYTYPE = 1   if (@I_vADJTYPE = 1)  begin  select @OVRSERLT = 1     if (@USEEXISTINGSNLOTS = 1)  begin  select @O_iErrorState = 9599    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   insert IV00300  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  LOTNUMBR,  QTYRECVD,  QTYSOLD,  ATYALLOC,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  LTNUMSLD,  QTYTYPE,  BIN,  MFGDATE,    EXPNDATE    )  select  @I_vITEMNMBR,   @I_vLOCNCODE,   @DATERECD,    @DTSEQNUM,    @I_vLOTNUMBR,   @I_vSERLTQTY,   0,      @I_vSERLTQTY,   @UNITCOST,    0,      '',      1,      1,      @I_vBIN,    @I_vMFGDATE,   @I_vEXPNDATE   if (@@error <> 0)  begin  select @O_iErrorState = 3370    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  select @O_iErrorState = 3363    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''   if (@@error <> 0)  begin  select @O_iErrorState = 3364    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if (@ENABLEMULTIBIN = 1)  begin  if (exists(select 1 from IV00112 (nolock)  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = 1))  begin  update IV00112 set QUANTITY = QUANTITY + @I_vSERLTQTY  where  ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN and QTYTYPE = 1  end  else  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN, 1,@I_vSERLTQTY,0  end  if (@@error <> 0)  begin  select @O_iErrorState = 5909    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   if (@I_vLNSEQNBR = 0)  begin  select @I_vLNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @I_vIVDOCTYP and IVDOCNBR = @I_vIVDOCNBR  end   if (@SLTSQNUM = 0)  begin  select @SLTSQNUM = isnull(max(SLTSQNUM),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @I_vIVDOCTYP and IVDOCNBR = @I_vIVDOCNBR and LNSEQNBR = @I_vLNSEQNBR  end   if not exists(select 1 from IV10002 (nolock)  where IVDOCTYP = @I_vIVDOCTYP and IVDOCNBR = @I_vIVDOCNBR and LNSEQNBR = @I_vLNSEQNBR and SLTSQNUM = @SLTSQNUM)  begin  insert IV10002  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  SERLTNUM,  SERLTQTY,  LNSEQNBR,  SLTSQNUM,  DATERECD,  DTSEQNUM,  OVRSERLT,  QTYSCRAPPED,  FROMBIN,  TOBIN,  MFGDATE,  EXPNDATE  )  select  @I_vIVDOCNBR,   @I_vIVDOCTYP,   @I_vITEMNMBR,   @I_vLOTNUMBR,   @I_vSERLTQTY,   @I_vLNSEQNBR,   @SLTSQNUM,    case     when (@I_vADJTYPE = 0)  then ''  else @DATERECD  end,  case     when (@I_vADJTYPE = 0)  then 0  else @DTSEQNUM  end,  @OVRSERLT,    0,      @I_vBIN,    '',      @I_vMFGDATE,   @I_vEXPNDATE   if (@@error <> 0)  begin  select @O_iErrorState = 3365    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  select @O_iErrorState = 2626     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@I_vAUTOCREATELOT = 0) and (@I_vLOTNUMBR <> '')) begin  if ((@I_vEXPNDATE <> '') and (@I_vADJTYPE = 1))   begin  if not exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  LOTNUMBR = @I_vLOTNUMBR and  QTYTYPE  = 1 and  LTNUMSLD = 0 and  BIN = @I_vBIN and  EXPNDATE = @I_vEXPNDATE)  begin  select @O_iErrorState = 8684      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   while (@LotFound = 0)  begin  if (@I_vADJTYPE = 1)  begin  select @LotHit = 0   if (@ASSIGNLOTNUMBY = 2)   begin  select TOP 1  @DATERECD = isnull(DATERECD,''),  @DTSEQNUM = isnull(DTSEQNUM,0),  @QTYSOLD = isnull(QTYSOLD,0),  @ATYALLOC = isnull(ATYALLOC,0),  @QTYRECVD = isnull(QTYRECVD,0),  @I_vEXPNDATE = isnull(EXPNDATE,''),  @I_vMFGDATE = isnull(MFGDATE,''),  @LotHit = 1  from IV00300 (nolock)  where  (@I_vEXPNDATE = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and   QTYTYPE = 1 and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vEXPNDATE <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and   QTYTYPE = 1 and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by EXPNDATE,DTSEQNUM  end   if (@LotHit = 0)  begin  select TOP 1  @DATERECD = isnull(DATERECD,''),  @DTSEQNUM = isnull(DTSEQNUM,0),  @QTYSOLD = isnull(QTYSOLD,0),  @ATYALLOC = isnull(ATYALLOC,0),  @QTYRECVD = isnull(QTYRECVD,0),  @I_vEXPNDATE = isnull(EXPNDATE,''),  @I_vMFGDATE = isnull(MFGDATE,''),  @LotHit = 1             from IV00300 (nolock)  where   (@I_vEXPNDATE = '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and   QTYTYPE = 1 and BIN = @I_vBIN and (EXPNDATE > @I_vUSERDATE or EXPNDATE = ''))  or  (@I_vEXPNDATE <> '' and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and   QTYTYPE = 1 and BIN = @I_vBIN and EXPNDATE = @I_vEXPNDATE)  order by DATERECD,DTSEQNUM  end  if (@LotHit = 0)   begin  if (@I_vEXPNDATE = '') and exists (select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LOTNUMBR = @I_vLOTNUMBR and LTNUMSLD = 0 and   QTYTYPE = 1 and BIN = @I_vBIN)  begin  select @O_iErrorState = 8678       exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  else  begin  select @O_iErrorState = 3374       exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  end  end  else  begin  select @QTYRECVD = @I_vSERLTQTY  end   if (@QTYTYPE <> 1)  begin  select @O_iErrorState = 3369    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   if ((@DTSEQNUM = 0) and (@QTYDONE < @I_vSERLTQTY) and (@I_vADJTYPE = 1))  begin  select @O_iErrorState = 2625      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @QTYAVAIL = @QTYRECVD - (@ATYALLOC + @QTYSOLD)   if (@QTYAVAIL >= @I_vSERLTQTY)  begin  select @QTYTOALLOC = @I_vSERLTQTY   if (@I_vADJTYPE = 1)  begin  if (not exists(select 1 from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  DATERECD = @DATERECD and  DTSEQNUM = @DTSEQNUM and  QTYTYPE = 1 and  BIN = @I_vBIN and  EXPNDATE = @I_vEXPNDATE))  begin  insert IV00300  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  LOTNUMBR,  QTYRECVD,  QTYSOLD,  ATYALLOC,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  LTNUMSLD,  QTYTYPE,  BIN,  MFGDATE,    EXPNDATE    )  select  @I_vITEMNMBR,   @I_vLOCNCODE,   @DATERECD,    @DTSEQNUM,    @I_vLOTNUMBR,   @I_vSERLTQTY,   0,      @I_vSERLTQTY,   @UNITCOST,    0,      '',      1,      1,      @I_vBIN,    @I_vMFGDATE,   @I_vEXPNDATE   if (@@error <> 0)  begin  select @O_iErrorState = 5967     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  else  begin  update IV00300 set ATYALLOC = ATYALLOC + @QTYTOALLOC  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and DATERECD = @DATERECD and DTSEQNUM = @DTSEQNUM and QTYTYPE = 1  if (@@error <> 0)  begin  select @O_iErrorState = 3372    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @SERLTQTY = @QTYTOALLOC  end   if (@QTYAVAIL = @QTYTOALLOC)  begin  update IV00300 set LTNUMSLD = 1  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and DATERECD = @DATERECD and DTSEQNUM = @DTSEQNUM and QTYTYPE = 1  if (@@error <> 0)  begin  select @O_iErrorState = 3373    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  set @LTNUMSLD = 1  end  end  else  begin  select @SERLTQTY = @I_vSERLTQTY  end   select @LotFound = 1,  @QTYDONE = @I_vSERLTQTY  end   else  begin  if (@I_vADJTYPE = 1)  begin  update IV00300 set ATYALLOC = ATYALLOC + @QTYAVAIL  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and DATERECD = @DATERECD and DTSEQNUM = @DTSEQNUM and QTYTYPE = 1  if (@@error <> 0)  begin  select @O_iErrorState = 2617     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end   select @SERLTQTY = @QTYAVAIL   update IV00300 set LTNUMSLD = 1  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and DATERECD = @DATERECD and DTSEQNUM = @DTSEQNUM and QTYTYPE = 1  if (@@error <> 0)  begin  select @O_iErrorState = 2620    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  break  end  set @LTNUMSLD = 1  end  else  begin  select @SERLTQTY = @I_vSERLTQTY  end   select @QTYDONE = @QTYAVAIL  end   if (@I_vLNSEQNBR = 0)  begin  select @I_vLNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10002 (nolock)   where IVDOCTYP = @I_vIVDOCTYP and IVDOCNBR = @I_vIVDOCNBR  end   select @SLTSQNUM = SLTSQNUM from IV10002 (nolock)  where IVDOCTYP = @I_vIVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  DATERECD = @DATERECD and      DTSEQNUM = @DTSEQNUM and   SERLTNUM = @I_vLOTNUMBR and      FROMBIN = @I_vBIN and  EXPNDATE = @I_vEXPNDATE   if ((@SLTSQNUM = 0) or (@LTNUMSLD = 1) or (@I_vADJTYPE = 0))  begin  select @SLTSQNUM = isnull(max(SLTSQNUM),0) + 16384 from IV10002 (nolock)  where IVDOCTYP = @I_vIVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR  end   if (@ALLEXPLOTSIV = 0)   begin  if ((@I_vEXPNDATE <= @I_vUSERDATE) and (@I_vEXPNDATE <> ''))  begin  select @O_iErrorState = 8677    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   if not exists(select 1 from IV10002 (nolock)  where IVDOCTYP = @I_vIVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  SLTSQNUM = @SLTSQNUM)  begin  insert IV10002  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  SERLTNUM,  SERLTQTY,  LNSEQNBR,  SLTSQNUM,  DATERECD,  DTSEQNUM,  OVRSERLT,  QTYSCRAPPED,  FROMBIN,  TOBIN,  MFGDATE,    EXPNDATE    )  select  @I_vIVDOCNBR,    @I_vIVDOCTYP,    @I_vITEMNMBR,    @I_vLOTNUMBR,    @SERLTQTY,       @I_vLNSEQNBR,    @SLTSQNUM,     case      when (@I_vADJTYPE = 0)   then ''  else @DATERECD  end,  case      when (@I_vADJTYPE = 0)   then 0  else @DTSEQNUM  end,  @OVRSERLT,     0,       @I_vBIN,     '',       @I_vMFGDATE,    @I_vEXPNDATE    if (@@error <> 0)  begin  select @O_iErrorState = 3366    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   end  else  begin  update IV10002 set SERLTQTY = SERLTQTY + @SERLTQTY  where IVDOCTYP = @I_vIVDOCTYP and  IVDOCNBR = @I_vIVDOCNBR and  LNSEQNBR = @I_vLNSEQNBR and  SLTSQNUM = @SLTSQNUM  if (@@error <> 0)  begin  select @O_iErrorState = 5866    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end   if ((@QTYAVAIL = @QTYTOALLOC) or (@QTYAVAIL < @I_vSERLTQTY))  begin  select @LTNUMSLD = 1  end  else  begin  select @LTNUMSLD = 0  end   select @I_vSERLTQTY = @I_vSERLTQTY - @QTYDONE   if (@I_vADJTYPE = 0)  begin  select @LotFound = 1   end  end end  if ((@I_vADJTYPE = 1) and (@ENABLEMULTIBIN = 1)) begin  update IV00112 set ATYALLOC = ATYALLOC + @SERLTQTY  where  ITEMNMBR = @I_vITEMNMBR and  LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and  QTYTYPE = 1  if (@@error <> 0)  begin  select @O_iErrorState = 5920    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end if (@O_iErrorState <> 0)  return (@O_iErrorState)  exec @iStatus = taIVTransactionLotInsertPost  @I_vIVDOCNBR,  @I_vIVDOCTYP,  @I_vUSERDATE,  @I_vITEMNMBR,  @I_vLOTNUMBR,  @I_vSERLTQTY,  @I_vADJTYPE,  @I_vBIN,  @I_vCreateBin,  @I_vLNSEQNBR,  @I_vLOCNCODE,  @I_vEXPNDATE,  @I_vMFGDATE,  @I_vAUTOCREATELOT,  @I_vDATERECD,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus = 0) and (@iError <> 0)) begin  select @iStatus = @iError end if ((@iStatus <> 0) or (@iCustomState <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 3367    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'IV_Transaction',  @I_vINDEX1 = @I_vIVDOCNBR,  @I_vINDEX2 = @I_vIVDOCTYP,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus = 0) and (@iError <> 0))  begin  select @iStatus = @iError  end  if ((@iStatus <> 0) or (@iCustomState <> 0))  begin  select @O_iErrorState = 2923   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taIVTransactionLotInsert] TO [DYNGRP]
GO
