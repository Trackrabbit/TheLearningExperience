SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 Create Procedure [dbo].[svcSetKitItemCost] ( @RecType smallint,  @DocNumber char(15),  @EquipLine  int, @Line int, @KitUnitCost numeric(19,5) output, @OrigKitUnitCost numeric(19,5) output, @ExtUnitCost numeric(19,5) output, @OrigExtUnitCost numeric(19,5) output  )  as declare @CompSequence int declare @UserID char(15), @qty numeric (19,5), @UnitCost numeric(19,5), @OrigUnitCost numeric(19,5)  if exists(select * from SVC00203 where SRVRECTYPE = @RecType AND CALLNBR = @DocNumber AND LINITMTYP = 'P' and  EQPLINE = @EquipLine and LNITMSEQ = @Line AND CMPNTSEQ = 0)  BEGIN if (select QTYORDER from SVC00203 where SRVRECTYPE = @RecType AND CALLNBR = @DocNumber AND LINITMTYP = 'P' and  EQPLINE = @EquipLine and LNITMSEQ = @Line AND CMPNTSEQ = 0) = 0  return  select  @OrigExtUnitCost = 0, @ExtUnitCost = 0  declare SelectKitLines cursor local fast_forward   for   select CMPNTSEQ, QTYORDER, UNITCOST, ORUNTCST from SVC00203   where SRVRECTYPE = @RecType AND CALLNBR = @DocNumber AND LINITMTYP = 'P' and ITEMUSETYPE <> 'R' and  EQPLINE = @EquipLine and LNITMSEQ = @Line AND CMPNTSEQ<>0  open SelectKitLines  fetch next from SelectKitLines into @CompSequence, @qty, @UnitCost, @OrigUnitCost  while @@fetch_status = 0   begin  select @OrigExtUnitCost = @OrigExtUnitCost + (@OrigUnitCost * @qty),  @ExtUnitCost = @ExtUnitCost + (@UnitCost * @qty)   fetch next from SelectKitLines into @CompSequence, @qty, @UnitCost, @OrigUnitCost   end   close SelectKitLines  deallocate SelectKitLines  update SVC00203 with (rowlock)  set OREXTCST = @OrigExtUnitCost, EXTDCOST = @ExtUnitCost,   @OrigKitUnitCost = @OrigExtUnitCost / QTYORDER,  @KitUnitCost = @ExtUnitCost / QTYORDER,  UNITCOST = @ExtUnitCost / QTYORDER, ORUNTCST = @OrigExtUnitCost / QTYORDER where   SRVRECTYPE = @RecType AND CALLNBR = @DocNumber AND LINITMTYP = 'P' and  EQPLINE = @EquipLine and LNITMSEQ = @Line AND CMPNTSEQ = 0  END return     
GO
GRANT EXECUTE ON  [dbo].[svcSetKitItemCost] TO [DYNGRP]
GO
