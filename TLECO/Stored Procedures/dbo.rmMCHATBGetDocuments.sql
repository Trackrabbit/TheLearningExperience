SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[rmMCHATBGetDocuments]  @I_cCustListTemp char(25) = NULL,  @I_dAgingDate datetime = NULL,  @I_tUsingDocumentDate tinyint  = NULL,  @I_dStartDate datetime = NULL,  @I_dEndDate datetime = NULL,  @I_sIncludeBalanceTypes smallint = NULL,  @I_sCustomerSort smallint = NULL,  @I_cStartCustomerNumber char(32) = NULL,  @I_cEndCustomerNumber char(32) = NULL,  @I_cStartCustomerName char(132) = NULL,  @I_cEndCustomerName char(132) = NULL,  @I_cStartClassID char(32) = NULL,  @I_cEndClassID char(32) = NULL,  @I_cStartSalesPersonID char(32) = NULL,  @I_cEndSalesPersonID char(32) = NULL,  @I_cStartSalesTerritory char(32) = NULL,  @I_cEndSalesTerritory char(32) = NULL,  @I_cStartShortName char(32) = NULL,  @I_cEndShortName char(32) = NULL,  @I_cStartState char(12) = NULL,  @I_cEndState char(12) = NULL,  @I_cStartZipCode char(24) = NULL,  @I_cEndZipCode char(24) = NULL,  @I_cStartPhoneNumber char(44) = NULL,  @I_cEndPhoneNumber char(44) = NULL,  @I_cStartUserDefined char(32) = NULL,  @I_cEndUserDefined char(32) = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_sPrintCurrencyIn smallint = NULL,  @I_nReportingExchangeRate numeric(15,7) = NULL,  @I_sReportingRateCalcMethod smallint = NULL,  @I_sReportingDecimalPlaces smallint = NULL,  @I_tConsolidateNAActivity tinyint  = NULL,  @O_iErrorState                  int             = NULL output as  declare  @sAgeByDocDate smallint,  @cExecStringUseDocDate char(1),  @cExecStringIncBalType char(1),  @cExecStringCustSort char(2),  @cExecStringStartDate char(12),  @cExecStringEndDate char(12),  @cExecStringAgingDate char(12),  @vAgingPeriod varchar(255),  @vAgingPeriod2     varchar(255),   @RMDOCCRMEMO int,      @RMDOCCASH int,     @vDateRestriction varchar(255),  @vRestrictCustomerNumber varchar(255),  @vRestrictCustomerName varchar(255),  @vRestrictCustomerClass varchar(255),  @vRestrictSalesPersonID varchar(255),  @vRestrictSalesTerritoryID varchar(255),  @vRestrictShortName varchar(255),  @vRestrictState varchar(255),  @vRestrictZip varchar(255),  @vRestrictPhone varchar(255),  @vRestrictUserDefined varchar(255),  @vRestrictBalanceType varchar(255),  @vVoidRestriction varchar(255),  @vCustomerRestriction varchar(255),  @cPrintCurrencyIn char(1),  @cMCRegistered char(1),  @cReportingExchangeRate char(20),  @cReportingRateCalcMethod char(1),  @cReportingDecimalPlaces char(1),  @cConsolidateNAActivity char(1),  @tLoopControl            tinyint,  @iError                  int,  @nIndex int,  @RMDOCTYPECRMEMO char(1),  @dMinDate datetime,  @cMinDate char(12),  @iStatus int,  @sAgeCrAmts tinyint,     @vFromOpenTableClause varchar(255),  @vFromHistTableClause varchar(255),  @vFromAdditionalClause varchar(255)  select @O_iErrorState = 0  create table #HistConsolidation(DOCNUMBR char(21) not null)  exec @iStatus = smGetMinDate @dMinDate output  while @tLoopControl is NULL begin  select @tLoopControl = 1   if @I_cCustListTemp is NULL or  @I_dAgingDate is NULL or  @I_tUsingDocumentDate is NULL or  @I_dStartDate is NULL or  @I_dEndDate is NULL or  @I_sIncludeBalanceTypes is NULL or  @I_sCustomerSort is NULL or  @I_cStartCustomerNumber is NULL or  @I_cEndCustomerNumber is NULL or  @I_cStartCustomerName is NULL or  @I_cEndCustomerName is NULL or  @I_cStartClassID is NULL or  @I_cEndClassID is NULL or  @I_cStartSalesPersonID is NULL or  @I_cEndSalesPersonID is NULL or  @I_cStartSalesTerritory is NULL or  @I_cEndSalesTerritory is NULL or  @I_cStartShortName is NULL or  @I_cEndShortName is NULL or  @I_cStartState is NULL or  @I_cEndState is NULL or  @I_cStartZipCode is NULL or  @I_cEndZipCode is NULL or  @I_cStartPhoneNumber is NULL or  @I_cEndPhoneNumber is NULL or  @I_cStartUserDefined is NULL or  @I_cEndUserDefined is NULL or  @I_cFunctionalCurrency is NULL or  @I_tMCRegistered is NULL or  @I_sPrintCurrencyIn is NULL or  @I_nReportingExchangeRate is NULL or  @I_sReportingRateCalcMethod is NULL or  @I_sReportingDecimalPlaces is NULL or  @I_tConsolidateNAActivity is NULL  begin  select @O_iErrorState = 20972  break  end    exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'RM_DOC_CRMEMO',   @RMDOCCRMEMO output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'RM_DOC_CASH',   @RMDOCCASH output,   @O_iErrorState output   select @iError = @@error   if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if (@iStatus <> 0) or (@O_iErrorState <> 0)  break   select   @RMDOCTYPECRMEMO = '7'   select  @sAgeByDocDate = AGEBY, @sAgeCrAmts = AGEUNAPPLDCR  from  RM40101 with (NOLOCK)   select @cExecStringUseDocDate = convert(char(1),@I_tUsingDocumentDate)  select @cExecStringStartDate = '''' + convert(char(10),@I_dStartDate,102) + ''''  select @cExecStringEndDate = '''' + convert(char(10),@I_dEndDate,102) + ''''  select @cExecStringAgingDate = '''' + convert(char(10),@I_dAgingDate,102) + ''''  select @cExecStringIncBalType = convert(char(1),@I_sIncludeBalanceTypes)  select @cExecStringCustSort = convert(char(2),@I_sCustomerSort)  select @cMinDate = '''' + convert(char(10),@dMinDate,102) + ''''   if @sAgeCrAmts = 0  select @vAgingPeriod = '(select PERIODID from #EndingPeriodDates '  else  if @sAgeByDocDate = 1  select @vAgingPeriod = '(select PERIODID from #EndingPeriodDates '  else  select @vAgingPeriod = '(select PERIODID from #EndingPeriodDates where (A.RMDTYPAL>=' + str(@RMDOCCRMEMO) + ' and A.RMDTYPAL<=' + str(@RMDOCCASH) + ' and A.DOCDATE>=STARTDATE and A.DOCDATE<=ENDDATE and B.BALNCTYP=BALANCETYPE)'   if @sAgeCrAmts = 0   if @sAgeByDocDate = 1  select @vAgingPeriod2 = 'where A.DOCDATE>=STARTDATE and A.DOCDATE<=ENDDATE and B.BALNCTYP=BALANCETYPE)'  else   select @vAgingPeriod2 = 'where ((A.DUEDATE>' + @cMinDate + ' and A.DUEDATE>=STARTDATE and A.DUEDATE<=ENDDATE) or (A.DUEDATE=' + @cMinDate + ' and A.DOCDATE>=STARTDATE and A.DOCDATE<=ENDDATE)) and B.BALNCTYP=BALANCETYPE)'  else  if @sAgeByDocDate = 1  select @vAgingPeriod2 = 'where A.DOCDATE>=STARTDATE and A.DOCDATE<=ENDDATE and B.BALNCTYP=BALANCETYPE)'  else  select @vAgingPeriod2 =   ' or (A.RMDTYPAL<' + str(@RMDOCCRMEMO) + ' and ((A.DUEDATE>' + @cMinDate + ' and A.DUEDATE>=STARTDATE and A.DUEDATE<=ENDDATE) or (A.DUEDATE=' + @cMinDate + ' and A.DOCDATE>=STARTDATE and A.DOCDATE<=ENDDATE)) and B.BALNCTYP=BALANCETYPE))'   if @I_tUsingDocumentDate = 1  begin  select @vDateRestriction = ' and A.DOCDATE BETWEEN ' + @cExecStringStartDate + ' and ' + @cExecStringEndDate  select @vVoidRestriction = ' and ((A.VOIDSTTS > 0 and A.DINVPDOF > ' + @cExecStringEndDate + ') or A.VOIDSTTS = 0)'  end  else  begin  select @vDateRestriction = ' and A.GLPOSTDT BETWEEN ' + @cExecStringStartDate + ' and ' + @cExecStringEndDate  select @vVoidRestriction = ' and ((A.VOIDSTTS > 0 and A.VOIDDATE > ' + @cExecStringEndDate + ') or A.VOIDSTTS = 0)'  end   if @I_cCustListTemp = ''  begin  select @vRestrictCustomerNumber = ' and B.CUSTNMBR >= ' + @I_cStartCustomerNumber + ' and B.CUSTNMBR <= ' + @I_cEndCustomerNumber  select @vFromOpenTableClause = ' RM20101 A with (NOLOCK) ' +  ' JOIN RM00101 B with (NOLOCK) ON A.CUSTNMBR = B.CUSTNMBR ' +  ' LEFT OUTER JOIN MC020102 C with (NOLOCK) ON A.RMDTYPAL = C.RMDTYPAL and A.DOCNUMBR = C.DOCNUMBR '  select @vFromHistTableClause = ' RM30101 A with (NOLOCK) ' +  ' JOIN RM00101 B with (NOLOCK) ON A.CUSTNMBR = B.CUSTNMBR '  select @vFromAdditionalClause = ' RM00101 B with (NOLOCK) '   end  else  begin  select @vRestrictCustomerNumber = ' and B.CUSTNMBR = Z.CUSTNMBR '  select @vFromOpenTableClause = ' RM20101 A with (NOLOCK) ' +  ' JOIN RM00101 B with (NOLOCK) ON A.CUSTNMBR = B.CUSTNMBR ' +  ' LEFT OUTER JOIN MC020102 C with (NOLOCK) ON A.RMDTYPAL = C.RMDTYPAL and A.DOCNUMBR = C.DOCNUMBR JOIN ' +  @I_cCustListTemp + ' Z ON B.CUSTNMBR = Z.CUSTNMBR '  select @vFromHistTableClause = ' RM30101 A with (NOLOCK) ' +  ' JOIN RM00101 B with (NOLOCK) ON A.CUSTNMBR = B.CUSTNMBR ' +  ' JOIN ' + @I_cCustListTemp + ' Z ON B.CUSTNMBR = Z.CUSTNMBR '  select @vFromAdditionalClause = ' RM00101 B with (NOLOCK) JOIN '   + @I_cCustListTemp + ' Z ON B.CUSTNMBR = Z.CUSTNMBR '    end  select @vRestrictCustomerName = ' and B.CUSTNAME >= ' + @I_cStartCustomerName + ' and B.CUSTNAME <= ' + @I_cEndCustomerName  select @vRestrictCustomerClass = ' and B.CUSTCLAS >= ' + @I_cStartClassID + ' and B.CUSTCLAS <= ' + @I_cEndClassID  select @vRestrictSalesPersonID = ' and B.SLPRSNID >= ' + @I_cStartSalesPersonID + ' and B.SLPRSNID <= ' + @I_cEndSalesPersonID  select @vRestrictSalesTerritoryID = ' and B.SALSTERR >= ' + @I_cStartSalesTerritory + ' and B.SALSTERR <= ' + @I_cEndSalesTerritory  select @vRestrictShortName = ' and B.SHRTNAME >= ' + @I_cStartShortName + ' and B.SHRTNAME <= ' + @I_cEndShortName  select @vRestrictState = ' and B.STATE >= ' + @I_cStartState + ' and B.STATE <= ' + @I_cEndState  select @vRestrictZip = ' and B.ZIP >= ' + @I_cStartZipCode + ' and B.ZIP <= ' + @I_cEndZipCode  select @vRestrictPhone = ' and B.PHONE1 >= ' + @I_cStartPhoneNumber + ' and B.PHONE1 <= ' + @I_cEndPhoneNumber  select @vRestrictUserDefined = ' and B.USERDEF1 >= ' + @I_cStartUserDefined + ' and B.USERDEF1 <= ' + @I_cEndUserDefined  select @vRestrictBalanceType = ' and ((' + @cExecStringIncBalType + ' = 0) or (' + @cExecStringIncBalType + ' = 1 and B.BALNCTYP = 0) or (' + @cExecStringIncBalType + ' = 2 and B.BALNCTYP = 1))'   if @I_tConsolidateNAActivity = 0  select @vCustomerRestriction = ' A.CUSTNMBR = B.CUSTNMBR and '  else  select @vCustomerRestriction = ' (A.CPRCSTNM = '''' and A.CUSTNMBR = B.CUSTNMBR) and '   select @cMCRegistered = convert(char(1),@I_tMCRegistered)  select @cPrintCurrencyIn = convert(char(1),@I_sPrintCurrencyIn)  select @cReportingExchangeRate = convert(char(16),@I_nReportingExchangeRate)  select @cReportingRateCalcMethod = convert(char(1),@I_sReportingRateCalcMethod)  select @cReportingDecimalPlaces = convert(char(1),@I_sReportingDecimalPlaces)  select @cConsolidateNAActivity = convert(char(1),@I_tConsolidateNAActivity)   if (@I_sIncludeBalanceTypes = 0) or (@I_sIncludeBalanceTypes = 2)    begin  exec(  'insert into  #TransactionTEMP  select  A.CUSTNMBR,'''',A.DOCNUMBR,A.RMDTYPAL,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.CURTRXAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.CURTRXAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.CURTRXAM  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.ORTRXAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.ORTRXAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.ORTRXAMT  end),  0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,A.DOCDATE,  '''','''','''','''','''','''','''','''','''','''','''',  case   WHEN A.CURNCYID = '''' THEN  ''' + @I_cFunctionalCurrency + '''  ELSE  A.CURNCYID  end,  0,0.00,0.00,0,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.ORTRXAMT  ELSE  ISNULL(C.ORORGTRX,0.00)  end,  0.00,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.CURTRXAM  ELSE  ISNULL(C.ORCTRXAM,0.00)  end,  0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,  B.BALNCTYP,  0,   2,   A.VOIDSTTS  from ' +  @vFromOpenTableClause +   ' where  A.RMDTYPAL = 0  and B.BALNCTYP = 1  and ' + @cExecStringStartDate + ' >= A.DOCDATE ' +  @vRestrictCustomerNumber + @vRestrictCustomerName +   @vRestrictCustomerClass + @vRestrictSalesPersonID +  @vRestrictSalesTerritoryID + @vRestrictShortName +   @vRestrictState + @vRestrictZip + @vRestrictPhone + @vRestrictUserDefined )   exec(  'insert into  #HistConsolidation  select  ISNULL(MAX(A.DOCNUMBR),'''')  from ' +  @vFromHistTableClause +  ' where  A.RMDTYPAL = 0  and B.BALNCTYP = 1  and ' + @cExecStringStartDate + ' >= A.DOCDATE ' +  @vRestrictCustomerNumber + @vRestrictCustomerName +   @vRestrictCustomerClass + @vRestrictSalesPersonID +  @vRestrictSalesTerritoryID + @vRestrictShortName +   @vRestrictState + @vRestrictZip + @vRestrictPhone + @vRestrictUserDefined +  ' and  NOT EXISTS(  select  1  from  RM20101 C WITH(INDEX(PKRM20101))  where  C.CUSTNMBR = A.CUSTNMBR  and C.RMDTYPAL = 0  and ' + @cExecStringStartDate + ' >= C.DOCDATE)')   exec(  'insert into  #TransactionTEMP  select  A.CUSTNMBR,'''',A.DOCNUMBR,A.RMDTYPAL,  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.CURTRXAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.CURTRXAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.CURTRXAM  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.ORTRXAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.ORTRXAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.ORTRXAMT  end),  0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,  A.DOCDATE,'''','''','''','''','''','''','''','''','''','''','''',  case   WHEN A.CURNCYID = '''' THEN  ''' + @I_cFunctionalCurrency + '''  ELSE  A.CURNCYID  end,  0,0.00,0.00,0,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.ORTRXAMT  ELSE  ISNULL(C.ORORGTRX,0.00)  end,  0.00,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.CURTRXAM  ELSE  ISNULL(C.ORCTRXAM,0.00)  end,  0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,  1,  1,   2,   A.VOIDSTTS  from  RM30101 A with (NOLOCK)   JOIN #HistConsolidation B ON A.DOCNUMBR = B.DOCNUMBR  LEFT OUTER JOIN MC020102 C with (NOLOCK) ON A.RMDTYPAL = C.RMDTYPAL and A.DOCNUMBR = C.DOCNUMBR  where  A.RMDTYPAL = 0')   end     if @I_tConsolidateNAActivity = 0  select @nIndex = 1  else  select @nIndex = 0   while @nIndex < 2   begin   exec(  'insert into  #TransactionTEMP  select  (case when (' + @cConsolidateNAActivity + ' = 0 or A.CPRCSTNM = '''') then  A.CUSTNMBR  else  A.CPRCSTNM  end),  (case when (' + @cConsolidateNAActivity + ' = 0 or A.CPRCSTNM = '''') then  ''''  else  A.CUSTNMBR  end),  A.DOCNUMBR,A.RMDTYPAL,  (case when A.VOIDSTTS = 0 then   case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.CURTRXAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.CURTRXAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.CURTRXAM  end  else  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.ORTRXAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.ORTRXAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.ORTRXAMT  end  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.ORTRXAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.ORTRXAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.ORTRXAMT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.DISTKNAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.DISTKNAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.DISTKNAM  end),  (case WHEN ' + @cExecStringAgingDate + ' <= A.DISCDATE then  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.DISAVAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.DISAVAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.DISAVAMT  end  ELSE  0.00  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.WROFAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.WROFAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.WROFAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.SLSAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.SLSAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.SLSAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.COSTAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.COSTAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.COSTAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.FRTAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.FRTAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.FRTAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.MISCAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.MISCAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.MISCAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.TAXAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.TAXAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.TAXAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.COMDLRAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.COMDLRAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.COMDLRAM  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.CASHAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.CASHAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.CASHAMNT  end),  (case WHEN A.RMDTYPAL < ' + @RMDOCTYPECRMEMO + ' then   case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((D.Total_Gain_or_Loss_on_Cu * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((D.Total_Gain_or_Loss_on_Cu / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  ISNULL(D.Total_Gain_or_Loss_on_Cu, 0.00)  end  ELSE  0.00  end),  (case WHEN (A.RMDTYPAL < ' + @RMDOCTYPECRMEMO + ') and (' + @cExecStringAgingDate + ' <= A.DISCDATE) then  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Di * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Di / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  ISNULL(- D.Total_Gain_or_Loss_on_Di, 0.00)  end  ELSE  0.00  end),  (case WHEN A.RMDTYPAL >= ' + @RMDOCTYPECRMEMO + ' then   case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Cu * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Cu / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  ISNULL(- D.Total_Gain_or_Loss_on_Cu, 0.00)  end  ELSE  0.00  end),  A.DOCDATE,A.DUEDATE,A.DISCDATE,A.POSTDATE,A.GLPOSTDT,A.DINVPDOF,  A.CHEKNMBR,A.TRXDSCRN,A.CSPORNBR,A.SLPRSNID,A.SLSTERCD,'''',  case   WHEN A.CURNCYID = '''' THEN  ''' + @I_cFunctionalCurrency + '''  ELSE  A.CURNCYID  end,  ISNULL(C.CURRNIDX,0),  ISNULL(D.XCHGRATE, ISNULL(C.XCHGRATE, 0.00)),  ISNULL(D.DENXRATE, ISNULL(C.DENXRATE, 0.00)),  ISNULL(D.MCTRXSTT, ISNULL(C.MCTRXSTT, 0)),  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.ORTRXAMT  ELSE  ISNULL(C.ORORGTRX,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.DISTKNAM  ELSE  ISNULL(C.ORDISTKN,0.00)  end,  case when A.VOIDSTTS = 0 then  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.CURTRXAM  ELSE  ISNULL(C.ORCTRXAM,0.00)  end  else  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.ORTRXAMT  ELSE  ISNULL(C.ORORGTRX,0.00)  end  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.DISAVAMT  ELSE  ISNULL(C.ORDAVAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.WROFAMNT  ELSE  ISNULL(C.ORWROFAM,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.SLSAMNT  ELSE  ISNULL(C.ORSLSAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.COSTAMNT  ELSE  ISNULL(C.ORCSTAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.FRTAMNT  ELSE  ISNULL(C.ORFRTAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.MISCAMNT  ELSE  ISNULL(C.ORMISCAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.TAXAMNT  ELSE  ISNULL(C.ORTAXAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.CASHAMNT  ELSE  ISNULL(C.ORCASAMT,0.00)  end,  0.00,  B.BALNCTYP,  0,    ' + @vAgingPeriod + @vAgingPeriod2 + ',  A.VOIDSTTS  from  RM20101 A with (NOLOCK)   LEFT OUTER JOIN MC020102 C with (NOLOCK)  ON A.RMDTYPAL = C.RMDTYPAL  and A.DOCNUMBR = C.DOCNUMBR  LEFT OUTER JOIN MC020104 D with (NOLOCK)  ON A.CURNCYID = D.CURNCYID  and A.DOCNUMBR = D.DOCNUMBR  and A.RMDTYPAL = D.DOCTYPE  and  (convert(char(10), D.RVLUDATE, 102) + convert(char(10), D.SEQNUMBR))  = (select max(convert(char(10), MC020104.RVLUDATE, 102) + convert(char(10), MC020104.SEQNUMBR))  from  MC020104 with (NOLOCK)  where  MC020104.CURNCYID = A.CURNCYID  and  MC020104.DOCNUMBR = A.DOCNUMBR  and  MC020104.DOCTYPE  = A.RMDTYPAL  and MC020104.RVLUDATE <= ' + @cExecStringEndDate + ' ), '  + @vFromAdditionalClause +  ' where'   + @vCustomerRestriction +  'A.RMDTYPAL <> 0  and A.RMDTYPAL <> 6' +  @vVoidRestriction + @vDateRestriction +  @vRestrictCustomerNumber + @vRestrictCustomerName +   @vRestrictCustomerClass + @vRestrictSalesPersonID +  @vRestrictSalesTerritoryID + @vRestrictShortName +   @vRestrictState + @vRestrictPhone + @vRestrictZip +  @vRestrictUserDefined + @vRestrictBalanceType)   select @nIndex = @nIndex + 1  select @vCustomerRestriction = ' A.CPRCSTNM <> '''' and  (A.CPRCSTNM = B.CUSTNMBR ) and '  end   CREATE nonclustered index AK1DocumentTEMP  on #TransactionTEMP(CustomerNumber,RMDocumentTypeAll)   if @I_tConsolidateNAActivity = 0  begin  select @nIndex = 1  select @vCustomerRestriction = ' A.CUSTNMBR = B.CUSTNMBR and '  end  else  begin  select @vCustomerRestriction = ' (A.CPRCSTNM = '''' and A.CUSTNMBR = B.CUSTNMBR) and '  select @nIndex = 0  end   while @nIndex < 2   begin   exec(  'insert into  #TransactionTEMP  select  (case when (' + @cConsolidateNAActivity + ' = 0 or A.CPRCSTNM = '''') then  A.CUSTNMBR  else  A.CPRCSTNM  end),  (case when (' + @cConsolidateNAActivity + ' = 0 or A.CPRCSTNM = '''') then  ''''  else  A.CUSTNMBR  end),  A.DOCNUMBR,A.RMDTYPAL,  (case when A.VOIDSTTS = 0 then  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.CURTRXAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.CURTRXAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.CURTRXAM  end  else  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.ORTRXAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.ORTRXAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.ORTRXAMT  end  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.ORTRXAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.ORTRXAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.ORTRXAMT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.DISTKNAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.DISTKNAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.DISTKNAM  end),  (case WHEN ' + @cExecStringAgingDate + ' <= A.DISCDATE then  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.DISAVAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.DISAVAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.DISAVAMT  end  ELSE  0.00  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.WROFAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.WROFAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.WROFAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.SLSAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.SLSAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.SLSAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.COSTAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.COSTAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.COSTAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.FRTAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.FRTAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.FRTAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.MISCAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.MISCAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.MISCAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.TAXAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.TAXAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.TAXAMNT  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.COMDLRAM * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.COMDLRAM / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.COMDLRAM  end),  (case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((A.CASHAMNT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((A.CASHAMNT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  A.CASHAMNT  end),  (case WHEN A.RMDTYPAL < ' + @RMDOCTYPECRMEMO + ' then   case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((D.Total_Gain_or_Loss_on_Cu * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((D.Total_Gain_or_Loss_on_Cu / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  ISNULL(D.Total_Gain_or_Loss_on_Cu, 0.00)  end  ELSE  0.00  end),  (case WHEN (A.RMDTYPAL < ' + @RMDOCTYPECRMEMO + ') and (' + @cExecStringAgingDate + ' <= A.DISCDATE) then  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Di * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Di / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  ISNULL(- D.Total_Gain_or_Loss_on_Di, 0.00)  end  ELSE  0.00  end),  (case WHEN A.RMDTYPAL >= ' + @RMDOCTYPECRMEMO + ' then   case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Cu * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((- D.Total_Gain_or_Loss_on_Cu / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  ISNULL(- D.Total_Gain_or_Loss_on_Cu, 0.00)  end  ELSE  0.00  end),  A.DOCDATE,A.DUEDATE,A.DISCDATE,A.POSTDATE,A.GLPOSTDT,A.DINVPDOF,A.CHEKNMBR,  A.TRXDSCRN,A.CSPORNBR,A.SLPRSNID,A.SLSTERCD,'''',  case   WHEN A.CURNCYID = '''' THEN  ''' + @I_cFunctionalCurrency + '''  ELSE  A.CURNCYID  end,  ISNULL(C.CURRNIDX,0),  ISNULL(D.XCHGRATE, ISNULL(C.XCHGRATE, 0.00)),  ISNULL(D.DENXRATE, ISNULL(C.DENXRATE, 0.00)),  ISNULL(D.MCTRXSTT, ISNULL(C.MCTRXSTT, 0)),  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.ORTRXAMT  ELSE  ISNULL(C.ORORGTRX,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.DISTKNAM  ELSE  ISNULL(C.ORDISTKN,0.00)  end,  case when A.VOIDSTTS = 0 then  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.CURTRXAM  ELSE  ISNULL(C.ORCTRXAM,0.00)  end  else  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.ORTRXAMT  ELSE  ISNULL(C.ORORGTRX,0.00)  end  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.DISAVAMT  ELSE  ISNULL(C.ORDAVAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.WROFAMNT  ELSE  ISNULL(C.ORWROFAM,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.SLSAMNT  ELSE  ISNULL(C.ORSLSAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.COSTAMNT  ELSE  ISNULL(C.ORCSTAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.FRTAMNT  ELSE  ISNULL(C.ORFRTAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.MISCAMNT  ELSE  ISNULL(C.ORMISCAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.TAXAMNT  ELSE  ISNULL(C.ORTAXAMT,0.00)  end,  case   WHEN (A.CURNCYID = '''' or A.CURNCYID = ''' + @I_cFunctionalCurrency + ''' ) THEN  A.CASHAMNT  ELSE  ISNULL(C.ORCASAMT,0.00)  end,  0.00,  B.BALNCTYP,  1,     ' + @vAgingPeriod + @vAgingPeriod2 + ',  A.VOIDSTTS   from  RM30101 A with (NOLOCK)   LEFT OUTER JOIN MC020102 C with (NOLOCK)  ON  A.RMDTYPAL = C.RMDTYPAL   and  A.DOCNUMBR = C.DOCNUMBR  LEFT OUTER JOIN MC020104 D with (NOLOCK)  ON D.CURNCYID = A.CURNCYID  and D.DOCNUMBR = A.DOCNUMBR  and D.DOCTYPE  = A.RMDTYPAL  and  (convert(char(10), D.RVLUDATE, 102) + convert(char(10), D.SEQNUMBR))  = (select max(convert(char(10), MC020104.RVLUDATE, 102) + convert(char(10), MC020104.SEQNUMBR))  from  MC020104 with (NOLOCK)  where  MC020104.CURNCYID = A.CURNCYID  and  MC020104.DOCNUMBR = A.DOCNUMBR  and  MC020104.DOCTYPE  = A.RMDTYPAL  and MC020104.RVLUDATE <= ' + @cExecStringEndDate + '), ' +  @vFromAdditionalClause + '  where'   + @vCustomerRestriction +  'A.RMDTYPAL <> 0  and A.RMDTYPAL <> 6' +  @vVoidRestriction + @vDateRestriction +  @vRestrictCustomerNumber + @vRestrictCustomerName +   @vRestrictCustomerClass + @vRestrictSalesPersonID +  @vRestrictSalesTerritoryID + @vRestrictShortName +   @vRestrictState + @vRestrictPhone + @vRestrictZip +  @vRestrictUserDefined + @vRestrictBalanceType +  'and   NOT EXISTS(  select  1  from  #TransactionTEMP E WITH(INDEX(AK1DocumentTEMP))  where  E.CustomerNumber = A.CUSTNMBR  and E.RMDocumentTypeAll = 0   and E.Status = 1  and E.DocumentNumber > A.BALFWDNM)')   select @nIndex = @nIndex + 1  select @vCustomerRestriction = ' A.CPRCSTNM <> '''' and  (A.CPRCSTNM = B.CUSTNMBR ) and '  end  end   drop table #HistConsolidation  return   
GO
GRANT EXECUTE ON  [dbo].[rmMCHATBGetDocuments] TO [DYNGRP]
GO
