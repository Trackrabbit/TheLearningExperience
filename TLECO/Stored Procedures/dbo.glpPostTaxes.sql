SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpPostTaxes]  @I_iJournalEntry int  = NULL,  @I_nRecTRXSeq numeric(19,5) = NULL,  @I_dTaxDate datetime = NULL,  @I_dPostingDate datetime = NULL,  @I_sFiscYear smallint = NULL,  @I_sFiscPeriod smallint = NULL,  @I_tPosting tinyint  = NULL,  @O_iErrorState int  = NULL output as  declare   @TAX_SALES_TYPE int,  @VAT_SERIES_FINANCIAL int,  @TRUE    tinyint,  @FALSE tinyint,  @tLoop tinyint,  @tTransaction tinyint,  @iStatus int,  @iError int,  @cTaxDetail char(15),  @mTaxAmt decimal(19,5),  @mTotalAmt decimal(19,5),  @sTaxDtlType smallint  select  @O_iErrorState = 0  while (@tLoop is NULL)   begin   select @tLoop = 1   if @I_iJournalEntry is NULL or  @I_nRecTRXSeq is NULL or  @I_dTaxDate   is NULL or  @I_dPostingDate is NULL or  @I_sFiscYear is NULL or  @I_sFiscPeriod is NULL or  @I_tPosting is NULL  begin  select @O_iErrorState = 21063  break  end   select  @TRUE = 1,  @FALSE  = 0   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'TAX_SALES_TYPE',  @TAX_SALES_TYPE output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @O_iErrorState <> 0 or @iStatus <> 0  return @iStatus   exec @iStatus = DYNAMICS.dbo.smGetConstantInt  'VAT_SERIES_FINANCIAL',  @VAT_SERIES_FINANCIAL output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @O_iErrorState <> 0 or @iStatus <> 0  return @iStatus   select   @cTaxDetail = TAXDTLID,  @mTaxAmt = TAXAMNT,  @mTotalAmt = DOCAMNT,  @sTaxDtlType = TXDTLTYP  from   GL10300  where  JRNENTRY = @I_iJournalEntry   and RCTRXSEQ = 0   if @cTaxDetail is not null  begin  if exists(  select 1  from GL10300  where  TAXDTLID NOT IN (select TAXDTLID from TX00201))  begin  select @O_iErrorState = 21064  break  end  end   if @I_tPosting = @FALSE or @cTaxDetail is null  break   delete   from  GL10300  where  JRNENTRY = @I_iJournalEntry  and RCTRXSEQ = 0  and DOCAMNT = 0.0  and ORDOCAMT = 0.0  and TAXAMNT = 0.0  and ORTAXAMT = 0.0   if @@trancount = 0  begin  select @tTransaction = 1  begin transaction  end   insert into  TX30000 (  DOCNUMBR,  DOCTYPE,  SERIES,  RCTRXSEQ,  SEQNUMBR,  TAXDTLID,  TXDTLPCT,  TXDTLAMT,  ACTINDX,  DOCDATE,  Tax_Date,  PSTGDATE,  TAXAMNT,  ORTAXAMT,  Taxable_Amount,  Originating_Taxable_Amt,  DOCAMNT,  ORDOCAMT,  ECTRX,  VOIDSTTS,  CustomerVendor_ID,  CURRNIDX,  Included_On_Return,  Tax_Return_ID,  TXORGN,  TXDTLTYP)  select  convert(char(21),@I_iJournalEntry),  @I_sFiscYear,  @VAT_SERIES_FINANCIAL,  @I_nRecTRXSeq,  GlTax.SQNCLINE,   GlTax.TAXDTLID,  GlTax.TXDTLPCT,  GlTax.TXDTLAMT,  GlTax.ACTINDX,  @I_dPostingDate,  @I_dTaxDate,  @I_dPostingDate,  GlTax.TAXAMNT,  GlTax.ORTAXAMT,  GlTax.Taxable_Amount,  GlTax.Originating_Taxable_Amt,  GlTax.DOCAMNT,  GlTax.ORDOCAMT,  @FALSE,    0,    '',    GlTax.CURRNIDX,  @FALSE,    '',    1,    DtlMstr.TXDTLTYP   from GL10300 GlTax, TX00201 DtlMstr  where  GlTax.JRNENTRY = @I_iJournalEntry   and GlTax.RCTRXSEQ = 0  and GlTax.TAXDTLID = DtlMstr.TAXDTLID   declare  glTaxWorkCursor  cursor for select  glTaxWork.TAXDTLID,  glTaxWork.TAXAMNT,  glTaxWork.DOCAMNT,  txDetailMstr.TXDTLTYP  from  GL10300 glTaxWork, TX00201 txDetailMstr  where  glTaxWork.JRNENTRY = @I_iJournalEntry  and glTaxWork.RCTRXSEQ = 0  and glTaxWork.TAXDTLID = txDetailMstr.TAXDTLID   open glTaxWorkCursor   fetch next from   glTaxWorkCursor  into   @cTaxDetail,  @mTaxAmt,  @mTotalAmt,  @sTaxDtlType   while (@@fetch_status <> -1)  begin  if (@@fetch_status = -2)  begin  select @O_iErrorState = 21051  break  end   exec @iStatus = smPostTaxDetail  @cTaxDetail,  @mTaxAmt,  @mTotalAmt,  @mTotalAmt,  @I_sFiscPeriod,  @I_sFiscYear,  @I_dPostingDate,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   fetch next from   glTaxWorkCursor  into   @cTaxDetail,  @mTaxAmt,  @mTotalAmt,  @sTaxDtlType   end     deallocate glTaxWorkCursor   end  if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction  end else if @tTransaction = 1  commit transaction  return (@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[glpPostTaxes] TO [DYNGRP]
GO
