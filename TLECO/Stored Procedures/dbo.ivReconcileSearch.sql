SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[ivReconcileSearch] @I_cTableName char(25) = NULL,  @O_RecordCount int = NULL output, @O_SQL_Error_State int = 0 output with encryption as set nocount on declare	@x2 char(20), @x3 integer, @ENABLEMULTIBIN tinyint select	@x2 = '', @x3 = 0, @ENABLEMULTIBIN = 0 delete TAIVRec if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#ReconcileItems')) begin drop table #ReconcileItems end create table #ReconcileItems ( ITEMNMBR	char(31), LOCNCODE	char(11), REASON		varchar(150) ) create index PKReconcileItems on #ReconcileItems (ITEMNMBR,LOCNCODE) if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00102Detail')) begin drop table #IV00102Detail end create table #IV00102Detail ( ITEMNMBR	char(31), SumATYALLOC	numeric(19,5), SumQTYONHND	numeric(19,5) ) create index PKIV00102Detail on #IV00102Detail (ITEMNMBR) insert #IV00102Detail select s.ITEMNMBR, sum(s.ATYALLOC), sum(s.QTYONHND) from IV00102 s, IV00101 m where s.RCRDTYPE <> 1 and s.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by s.ITEMNMBR insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Quantity Allocated or Quantity on Hand did not match for Locations' from IV00102 i, #IV00102Detail d, IV00101 m where	i.RCRDTYPE = 1 and i.ITEMNMBR = d.ITEMNMBR and (i.ATYALLOC <> d.SumATYALLOC or i.QTYONHND <> d.SumQTYONHND) and i.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 insert #ReconcileItems select s.ITEMNMBR, s.LOCNCODE, 'Quantity on Hand for Item Number/Location did not have corresponding Purchase Receipt' from IV00102 s where	s.QTYONHND <> 0 and s.LOCNCODE+s.ITEMNMBR not in (select i2.TRXLOCTN+i2.ITEMNMBR from IV10200 i2) and s.RCRDTYPE <> 1 insert #ReconcileItems select a.ITEMNMBR, '', 'On Order Quantity does not match' from IV00102 a, (select ITEMNMBR, sum(QTYUNCMTBASE) as SUMQTYUNCMTBASE from POP10110 where POLNESTA in(2,3) and POTYPE in (1,3) and LineNumber <> 0 and NONINVEN = 0 group by ITEMNMBR) b where	a.ITEMNMBR = b.ITEMNMBR and a.QTYONORD <> b.SUMQTYUNCMTBASE and a.LOCNCODE = '' insert #ReconcileItems select a.ITEMNMBR, a.LOCNCODE, 'On Order Quantity does not match' from IV00102 a, (select ITEMNMBR,LOCNCODE, sum(QTYUNCMTBASE) as SUMQTYUNCMTBASE from POP10110 where POLNESTA in(2,3) and POTYPE in (1,3) and LineNumber <> 0 and NONINVEN = 0 group by ITEMNMBR,LOCNCODE) b where	a.ITEMNMBR = b.ITEMNMBR and a.QTYONORD <> b.SUMQTYUNCMTBASE and a.LOCNCODE = b.LOCNCODE insert #ReconcileItems select a.ITEMNMBR, a.LOCNCODE, 'On Order Quantity does not match' from IV00102 a where a.QTYONORD <> 0 and a.ITEMNMBR not in (select ITEMNMBR from POP10110)  insert #ReconcileItems select distinct ITEMNMBR, '', 'On Order Quantity contained negative value' from IV00102 where QTYONORD < 0 insert #ReconcileItems select distinct a.ITEMNMBR, a.TRXLOCTN, 'Quantity in Purchase Receipts does not match Purchase Receipts Detail' from IV10200 a, (select ITEMNMBR, SRCRCTSEQNM, sum(QTYSOLD) as SUMQTYSOLD from IV10201 group by ITEMNMBR, SRCRCTSEQNM) b, IV00101 c where	a.ITEMNMBR = b.ITEMNMBR and a.RCTSEQNM = b.SRCRCTSEQNM and a.QTYSOLD <> b.SUMQTYSOLD and a.VCTNMTHD <> 0 and a.ITEMNMBR = c.ITEMNMBR and c.ITEMTYPE in(1,2) if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#SOP10200Sum')) begin drop table #SOP10200Sum end create table #SOP10200Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), SumATYALLOC	numeric(19,5) ) create index PKSOP10200SumItem on #SOP10200Sum (ITEMNMBR,LOCNCODE) create index AK1SOP10200SumLocncode on #SOP10200Sum (LOCNCODE,ITEMNMBR) insert #SOP10200Sum (ITEMNMBR, LOCNCODE, SumATYALLOC) select d.ITEMNMBR, d.LOCNCODE, sum(d.ATYALLOC * QTYBSUOM) from SOP10200 d, IV00101 m where	d.DROPSHIP = 0  and (d.SOPTYPE in(2,3,6)) and d.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 and d.TRXSORCE = '' group by d.ITEMNMBR,d.LOCNCODE if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV10001Sum')) begin drop table #IV10001Sum end create table #IV10001Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), SumTRXQTY	numeric(19,5) ) create index PKIV10001SumItem on #IV10001Sum (ITEMNMBR,LOCNCODE) create index AK1IV10001SumLocncode on #IV10001Sum (LOCNCODE,ITEMNMBR) insert #IV10001Sum (ITEMNMBR, LOCNCODE, SumTRXQTY) select t.ITEMNMBR, t.TRXLOCTN, sum(qty) from ( select i.ITEMNMBR,i.TRXLOCTN,sum(abs(i.TRXQTY * QTYBSUOM)) qty from IV10001 i, IV00101 m where	((i.IVDOCTYP in (1,2) and i.TRXQTY < 0) or (i.IVDOCTYP = 3)) and i.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 and i.TRFQTYTY in (0,1) group by i.ITEMNMBR,i.TRXLOCTN union select i.ITEMNMBR,i.LOCNCODE,sum(isnull(i.ATYALLOC * QTYBSUOM,0)) qty from IV00101 m, BM10300 i where	i.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 and m.ITEMNMBR = i.ITEMNMBR group by i.ITEMNMBR,i.LOCNCODE ) t group by t.ITEMNMBR, t.TRXLOCTN if exists(select 1 from sysobjects where name = 'SVC00203') begin if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#SVC00203Sum')) begin drop table #SVC00203Sum end create table #SVC00203Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), SumATYALLOC	numeric(19,5) ) create index PKSVC00203SumItem on #SVC00203Sum (ITEMNMBR,LOCNCODE) create index AK1SVC00203SumLocncode on #SVC00203Sum (LOCNCODE,ITEMNMBR) insert #SVC00203Sum (ITEMNMBR,LOCNCODE,SumATYALLOC) select s.ITEMNMBR, s.LOCNCODE, sum(s.ATYALLOC) from SVC00203 s, IV00101 m where	s.SRVRECTYPE = 2 and s.LINITMTYP = 'P' and s.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by s.ITEMNMBR,s.LOCNCODE if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#SVC06100Sum')) begin drop table #SVC06100Sum end create table #SVC06100Sum ( ITEMNMBR    char(31), LOCNCODE    char(11), SumATYALLOC numeric(19,5) ) create index PKSVC06100SumItem on #SVC06100Sum (ITEMNMBR,LOCNCODE) create index AK1SVC06100SumLocncode on #SVC06100Sum (LOCNCODE,ITEMNMBR) insert #SVC06100Sum (ITEMNMBR, LOCNCODE, SumATYALLOC) select s.IBITEMNUM, s.LOCNCODE, sum(s.QUANTITY) from SVC06100 s, IV00101 m where	s.WORECTYPE = 2 and s.IBITEMNUM = m.ITEMNMBR and m.ITEMTYPE <= 2 group by s.IBITEMNUM,s.LOCNCODE if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#SVC06101Sum')) begin drop table #SVC06101Sum end create table #SVC06101Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), SumATYALLOC	numeric(19,5) ) create index PKSVC06101SumItem on #SVC06101Sum (ITEMNMBR,LOCNCODE) create index AK1SVC06101SumLocncode on #SVC06101Sum (LOCNCODE,ITEMNMBR) insert #SVC06101Sum (ITEMNMBR, LOCNCODE, SumATYALLOC) select s.ITEMNMBR, s.LOCNCODE, sum(s.ATYALLOC) from SVC06101 s, IV00101 m where s.WORECTYPE = 2 and s.LINITMTYP = 'P' and s.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by s.ITEMNMBR,s.LOCNCODE if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#SVC00701Sum')) begin drop table #SVC00701Sum end create table #SVC00701Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), SumATYALLOC	numeric(19,5) ) create index PKSVC00701SumItem on #SVC00701Sum (ITEMNMBR,LOCNCODE) create index AK1SVC00701SumLocncode on #SVC00701Sum (LOCNCODE,ITEMNMBR) insert #SVC00701Sum (ITEMNMBR, LOCNCODE, SumATYALLOC) select l.ITEMNMBR, h.TRNSFLOC, sum(TRNSFQTY - QTYSHPPD) from SVC00701 l, SVC00700 h, IV00101 m where l.ORDDOCID = h.ORDDOCID and l.STATUS < 4 and l.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by l.ITEMNMBR,h.TRNSFLOC insert #SVC00701Sum (ITEMNMBR, LOCNCODE, SumATYALLOC) select l.ITEMNMBR, h.ITLOCN, sum(l.QTYSHPPD - l.QTY_To_Receive) from SVC00701 l, SVC00700 h, IV00101 m where l.ORDDOCID = h.ORDDOCID and l.STATUS = 5 and l.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by l.ITEMNMBR,h.ITLOCN insert #SVC00701Sum (ITEMNMBR, LOCNCODE, SumATYALLOC) select l.ITEMNMBR, h.ITLOCN, sum(l.QTYSHPPD) from SVC00701 l, SVC00700 h, IV00101 m where  l.ORDDOCID = h.ORDDOCID and l.STATUS = 4 and l.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by l.ITEMNMBR,h.ITLOCN end if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#POP10500Sum')) begin drop table #POP10500Sum end create table #POP10500Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), SumQTYRESERVED	numeric(19,5) ) create index PKPOP10500SumItem on #POP10500Sum (ITEMNMBR,LOCNCODE) create index AK1POP10500SumLocncode on #POP10500Sum (LOCNCODE,ITEMNMBR) insert #POP10500Sum (ITEMNMBR, LOCNCODE, SumQTYRESERVED) select a.ITEMNMBR, b.LOCNCODE, sum(a.QTYRESERVED * a.UMQTYINB) from POP10500 a join POP10310 b on a.POPRCTNM = b.POPRCTNM and a.RCPTLNNM = b.RCPTLNNM and a.ITEMNMBR = b.ITEMNMBR  where a.QTYRESERVED > 0  group by a.ITEMNMBR, b.LOCNCODE if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#CombinedStep1')) begin drop table #CombinedStep1 end if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#Combined')) begin drop table #Combined end create table #CombinedStep1 ( ITEMNMBR	char(31), LOCNCODE	char(11), SumQty		numeric(19,5) ) create table #Combined ( ITEMNMBR	char(31), LOCNCODE	char(11), SumQty		numeric(19,5) ) insert #CombinedStep1 select * from #SOP10200Sum where SumATYALLOC <> 0 if exists(select 1 from sysobjects where name = 'SVC00203') begin insert #CombinedStep1 select * from #SVC00203Sum where SumATYALLOC <> 0 insert #CombinedStep1 select * from #SVC06100Sum where SumATYALLOC <> 0 insert #CombinedStep1 select * from #SVC06101Sum where SumATYALLOC <> 0 insert #CombinedStep1 select * from #SVC00701Sum where SumATYALLOC <> 0 end insert #CombinedStep1 select * from #IV10001Sum where SumTRXQTY <> 0 insert #CombinedStep1 select * from #POP10500Sum where SumQTYRESERVED <> 0 insert #Combined select ITEMNMBR, LOCNCODE, sum(SumQty) from #CombinedStep1 group by ITEMNMBR, LOCNCODE insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Allocated quantities do not match from detail to IV00102' from IV00102 i, #Combined d, IV00101 m where	i.ITEMNMBR = d.ITEMNMBR and i.LOCNCODE = d.LOCNCODE and (i.ATYALLOC <> d.SumQty) and i.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 insert #ReconcileItems select i.ITEMNMBR, '', 'IV00102 has allocations with no matching detail' from IV00102 i, IV00101 m where 	i.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 and i.LOCNCODE = '' and i.ATYALLOC > 0 and i.ITEMNMBR not in(select ITEMNMBR from #Combined) if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV10200Sum')) begin drop table #IV10200Sum end create table #IV10200Sum ( ITEMNMBR	char(31), TRXLOCTN	char(11), QTYTYPE		tinyint, OVRQTY		numeric(19,5), SumQTYRECVD	numeric(19,5) ) create index PKIV10200SumItem on #IV10200Sum (ITEMNMBR,TRXLOCTN) create index AK1IV10200SumTrxloctn on #IV10200Sum (TRXLOCTN,ITEMNMBR) insert #IV10200Sum (ITEMNMBR, TRXLOCTN, QTYTYPE, OVRQTY, SumQTYRECVD) select i.ITEMNMBR, i.TRXLOCTN, QTYTYPE, 0, sum(i.QTYRECVD - i.QTYSOLD) from IV10200 i, IV00101 m where	i.QTYRECVD <> i.QTYSOLD and i.ITEMNMBR = m.ITEMNMBR and m.ITEMTYPE <= 2 group by i.ITEMNMBR, i.TRXLOCTN, i.QTYTYPE update a set a.OVRQTY = d.SERLTQTY from #IV10200Sum a, (select b.ITEMNMBR, LOCNCODE, sum(b.SERLTQTY) SERLTQTY from SOP10201 b, SOP10200 c where	b.SOPTYPE = c.SOPTYPE and b.SOPNUMBE = c.SOPNUMBE and b.LNITMSEQ = c.LNITMSEQ and b.OVRSERLT = 1 and b.POSTED = 0 group by b.ITEMNMBR, LOCNCODE) d where	a.ITEMNMBR = d.ITEMNMBR and a.TRXLOCTN = d.LOCNCODE and a.QTYTYPE = 1 insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Qty Type in Item Qty Master does not match Purchase Receipts' from IV00102 i, #IV10200Sum d where	i.ITEMNMBR = d.ITEMNMBR and i.LOCNCODE = d.TRXLOCTN and ((i.QTYONHND <> (d.SumQTYRECVD + OVRQTY) and d.QTYTYPE = 1) or	(i.QTYRTRND <> d.SumQTYRECVD and d.QTYTYPE = 2) or	(i.QTYINUSE <> d.SumQTYRECVD and d.QTYTYPE = 3) or	(i.QTYINSVC <> d.SumQTYRECVD and d.QTYTYPE = 4) or	(i.QTYDMGED <> d.SumQTYRECVD and d.QTYTYPE = 5)) insert #ReconcileItems select ITEMNMBR, '', 'Blank Serial Number or Location Code' from IV00200 where SERLNMBR = '' or LOCNCODE = '' insert #ReconcileItems select ITEMNMBR, '', 'Blank Lot Number or Location Code' from IV00300 where LOTNUMBR = '' or LOCNCODE = '' insert #ReconcileItems select distinct ITEMNMBR, '', 'Negative Quantity Allocated' from IV00102 where ATYALLOC < 0 if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00200SumQTYONHND')) begin drop table #IV00200SumQTYONHND end create table #IV00200SumQTYONHND ( ITEMNMBR	char(31), LOCNCODE	char(11), QTYTYPE		tinyint, SumQTYONHND	numeric(19,5) ) create index PKIV00200SumItem on #IV00200SumQTYONHND (ITEMNMBR,LOCNCODE) create index AK1IV00200SumLOCNCODE on #IV00200SumQTYONHND (LOCNCODE,ITEMNMBR) insert #IV00200SumQTYONHND (ITEMNMBR, LOCNCODE, QTYTYPE, SumQTYONHND) select ITEMNMBR, LOCNCODE, QTYTYPE, count(*) from IV00200 group by ITEMNMBR, LOCNCODE, QTYTYPE insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Qty Type in Serial Number Master does not match Item Qty Master table' from IV00102 i, #IV00200SumQTYONHND d where	i.ITEMNMBR = d.ITEMNMBR and i.LOCNCODE = d.LOCNCODE and ((i.QTYONHND <> d.SumQTYONHND and d.QTYTYPE = 1) or	(i.QTYRTRND <> d.SumQTYONHND and d.QTYTYPE = 2) or	(i.QTYINUSE <> d.SumQTYONHND and d.QTYTYPE = 3) or	(i.QTYINSVC <> d.SumQTYONHND and d.QTYTYPE = 4) or	(i.QTYDMGED <> d.SumQTYONHND and d.QTYTYPE = 5)) if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00200SumATYALLOC')) begin drop table #IV00200SumATYALLOC end create table #IV00200SumATYALLOC ( ITEMNMBR	char(31), LOCNCODE	char(11), QTY		numeric(19,5), SumATYALLOC	numeric(19,5) ) create index PKIV00200SumItem on #IV00200SumATYALLOC (ITEMNMBR,LOCNCODE) create index AK1IV00200SumLOCNCODE on #IV00200SumATYALLOC (LOCNCODE,ITEMNMBR) insert #IV00200SumATYALLOC (ITEMNMBR, LOCNCODE, QTY, SumATYALLOC) select ITEMNMBR, LOCNCODE, 0, sum(SERLNSLD) from IV00200 where SERLNSLD = 1 group by ITEMNMBR, LOCNCODE, QTYTYPE update a set a.QTY = d.QTY from #IV00200SumATYALLOC a, (select b.ITEMNMBR, LOCNCODE, sum(b.ATYALLOC - b.QTYFULFI) QTY from SOP10200 b group by b.ITEMNMBR, LOCNCODE) d where	a.ITEMNMBR = d.ITEMNMBR and a.LOCNCODE = d.LOCNCODE insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Serial Number Master Qty Allocated does not match Item Quantity Master' from IV00102 i, #IV00200SumATYALLOC d where	i.ITEMNMBR = d.ITEMNMBR and i.LOCNCODE = d.LOCNCODE and i.ATYALLOC <> (d.SumATYALLOC + d.QTY) if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00300Sum')) begin drop table #IV00300Sum end create table #IV00300Sum ( ITEMNMBR	char(31), LOCNCODE	char(11), QTYTYPE		tinyint, SumQTYRECVD	numeric(19,5), SumATYALLOC	numeric(19,5) ) create index PKIV00300SumItem on #IV00300Sum (ITEMNMBR,LOCNCODE) create index AK1IV00300SumLOCNCODE on #IV00300Sum (LOCNCODE,ITEMNMBR) insert #IV00300Sum (ITEMNMBR, LOCNCODE, QTYTYPE, SumQTYRECVD, SumATYALLOC) select ITEMNMBR, LOCNCODE, QTYTYPE, sum(QTYRECVD - QTYSOLD), sum(ATYALLOC) from IV00300 group by ITEMNMBR, LOCNCODE, QTYTYPE insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Quantity Type in Lot Number Master does not match Item Quantity Master' from IV00102 i, #IV00300Sum d where	i.ITEMNMBR = d.ITEMNMBR and i.LOCNCODE = d.LOCNCODE and ((i.QTYONHND <> (d.SumQTYRECVD) and d.QTYTYPE = 1) or	(i.QTYRTRND <> d.SumQTYRECVD and d.QTYTYPE = 2) or	(i.QTYINUSE <> d.SumQTYRECVD and d.QTYTYPE = 3) or	(i.QTYINSVC <> d.SumQTYRECVD and d.QTYTYPE = 4) or	(i.QTYDMGED <> d.SumQTYRECVD and d.QTYTYPE = 5)) if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00300SumATYALLOC')) begin drop table #IV00300SumATYALLOC end create table #IV00300SumATYALLOC ( ITEMNMBR	char(31), LOCNCODE	char(11), QTY		numeric(19,5), SumATYALLOC	numeric(19,5) ) create index PKIV00300SumItem on #IV00300SumATYALLOC (ITEMNMBR,LOCNCODE) create index AK1IV00300SumLOCNCODE on #IV00300SumATYALLOC (LOCNCODE,ITEMNMBR) insert #IV00300SumATYALLOC (ITEMNMBR, LOCNCODE, QTY, SumATYALLOC) select ITEMNMBR, LOCNCODE, 0, sum(ATYALLOC) from IV00300 group by ITEMNMBR, LOCNCODE update a set a.QTY = d.QTY from #IV00300SumATYALLOC a, (select b.ITEMNMBR, LOCNCODE, sum((b.QTYBSUOM * b.ATYALLOC) - (b.QTYBSUOM * b.QTYFULFI)) QTY from SOP10200 b group by b.ITEMNMBR, LOCNCODE) d where	a.ITEMNMBR = d.ITEMNMBR and a.LOCNCODE = d.LOCNCODE insert #ReconcileItems select i.ITEMNMBR, i.LOCNCODE, 'Lot Number Master Qty Allocated does not match Item Quantity Master' from IV00102 i, #IV00300SumATYALLOC d where	i.ITEMNMBR = d.ITEMNMBR and i.LOCNCODE = d.LOCNCODE and i.ATYALLOC <> (d.SumATYALLOC + d.QTY) select @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock) where SETUPKEY = 1 if (@ENABLEMULTIBIN = 1) begin if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00112SumLoc')) begin drop table #IV00112SumLoc end create table #IV00112SumLoc ( ITEMNMBR	char(31), LOCNCODE	char(11), QTY		numeric(19,5) ) create index PKIV00112SumLoc on #IV00112SumLoc(ITEMNMBR,LOCNCODE) create index AK1IV00112SumLoc on #IV00112SumLoc(LOCNCODE,ITEMNMBR) insert #IV00112SumLoc (ITEMNMBR, LOCNCODE, QTY) select ITEMNMBR, '', isnull(sum(QUANTITY - ATYALLOC),0) from IV00112 (nolock) where QTYTYPE = 1 group by ITEMNMBR update a set a.QTY = a.QTY - d.QTY from #IV00112SumLoc a, (select b.ITEMNMBR, isnull(sum((b.QTYBSUOM * b.ATYALLOC) - (b.QTYBSUOM * b.QTYFULFI)),0) QTY from SOP10200 b group by b.ITEMNMBR) d where	a.ITEMNMBR = d.ITEMNMBR insert #ReconcileItems select a.ITEMNMBR, '', 'Item Site Bin Master Qty Allocated does not match Item Quantity Master Qty Allocated summary record' from IV00102 a, #IV00112SumLoc b where	a.ITEMNMBR = b.ITEMNMBR and a.LOCNCODE = '' and (a.QTYONHND - a.ATYALLOC <> b.QTY) insert #ReconcileItems select ITEMNMBR, LOCNCODE, 'Item Site Bin Master Qty Allocated has allocations for records other then On Hand' from IV00112 where ATYALLOC > 0 and QTYTYPE <> 1 if exists (select 1 from tempdb..sysobjects where id = object_id('tempdb..#IV00112DetailLoc')) begin drop table #IV00112DetailLoc end create table #IV00112DetailLoc ( ITEMNMBR	char(31), LOCNCODE	char(11), QTY		numeric(19,5) ) create index PKIV00112DetailLoc on #IV00112DetailLoc (ITEMNMBR,LOCNCODE) create index AK1IV00112DetailLoc on #IV00112DetailLoc (LOCNCODE,ITEMNMBR) insert #IV00112DetailLoc (ITEMNMBR, LOCNCODE, QTY) select ITEMNMBR, LOCNCODE, isnull(sum(QUANTITY - ATYALLOC),0) from IV00112 (nolock) where QTYTYPE = 1 group by ITEMNMBR, LOCNCODE update a set a.QTY = a.QTY - d.QTY from #IV00112DetailLoc a, (select b.ITEMNMBR, LOCNCODE, isnull(sum((b.QTYBSUOM * b.ATYALLOC) - (b.QTYBSUOM * b.QTYFULFI)),0) QTY from SOP10200 b group by b.ITEMNMBR, LOCNCODE) d where	a.ITEMNMBR = d.ITEMNMBR and a.LOCNCODE = d.LOCNCODE insert #ReconcileItems select a.ITEMNMBR, a.LOCNCODE, 'Item Site Bin Master Qty Allocated does not match Item Quantity Master Qty Allocated detail' from IV00102 a, #IV00112DetailLoc b where	a.ITEMNMBR = b.ITEMNMBR and a.LOCNCODE = b.LOCNCODE and (a.QTYONHND - a.ATYALLOC <> b.QTY) insert #ReconcileItems select distinct ITEMNMBR, '', 'Invalid Bin, Bin not set up in Site Bin Master' from IV10002 (nolock) where FROMBIN not in(select BIN from IV40701 (nolock)) insert #ReconcileItems select distinct ITEMNMBR, '', 'Invalid Bin, Bin not set up in Site Bin Master' from IV10003 (nolock) where BIN not in (select BIN from IV40701 (nolock)) insert #ReconcileItems select distinct ITEMNMBR, '', 'Invalid Bin, Bin not set up in Site Bin Master' from IV10002 (nolock) where TOBIN not in(select BIN from IV40701 (nolock)) and IVDOCTYP not in (1,2) insert #ReconcileItems select distinct ITEMNMBR, '', 'Invalid Bin, Bin not set up in Site Bin Master' from IV10003 (nolock) where TOBIN not in(select BIN from IV40701 (nolock)) and IVDOCTYP not in (1,2) insert #ReconcileItems select ITEMNMBR, '', 'Bin Number is blank in Serial Number Master' from IV00200 where BIN = '' insert #ReconcileItems select ITEMNMBR, '', 'Bin Number is blank in Lot Number Master' from IV00300 where BIN = '' if exists(select 1 from sysobjects where name = 'SVC00203') begin insert #ReconcileItems select a.ITEMNMBR, '', 'Field Service Quantity Allocated in Bin Work does not match Service Call Line Detail' from SVC00203 a inner join SVC00212 b on a.SRVRECTYPE = b.SRVRECTYPE and a.CALLNBR = b.CALLNBR and a.EQPLINE = b.EQPLINE and a.LINITMTYP = b.LINITMTYP and a.LNITMSEQ = b.LNITMSEQ where a.QTYSOLD = 0 and a.SRVRECTYPE <> 3 group by a.ITEMNMBR, b.SRVRECTYPE, b.CALLNBR, b.EQPLINE, b.LINITMTYP, b.LNITMSEQ, a.ATYALLOC, a.QTYSOLD having a.ATYALLOC <> sum(b.QUANTITY) and a.QTYSOLD = 0 end end insert TAIVRec (ITEMNMBR, LOCNCODE, TAIVRecReason) select ITEMNMBR, LOCNCODE, REASON from #ReconcileItems order by ITEMNMBR exec ('insert into ' + @I_cTableName + ' select distinct ITEMNMBR from #ReconcileItems') select @O_RecordCount=0 select @O_RecordCount = @O_RecordCount + 1, @x2 = ITEMNMBR, @x3 = count(*) from #ReconcileItems group by ITEMNMBR set nocount off return 
GO
GRANT EXECUTE ON  [dbo].[ivReconcileSearch] TO [DYNGRP]
GO
