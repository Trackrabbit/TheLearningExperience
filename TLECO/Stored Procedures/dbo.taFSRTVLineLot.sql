SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taFSRTVLineLot] @I_vRTV_Number char(15),   @I_vRTV_Line numeric(19,5),   @I_vQTYTYPE smallint = null,   @I_vSERLTQTY numeric(19,5) = 1,   @I_vSLTSQNUM integer = 0,   @I_vInOrOut smallint = 1,   @I_vITEMNMBR char(31) = null,   @I_vLOTNUMBR char(21) = null,    @I_vLOCNCODE char(11) = null,   @I_vBIN char(15) = null,   @I_vDATERECD datetime = null,   @I_vDTSEQNUM numeric(19,5) = null,  @I_vENTDTE datetime = '',   @I_vAUTOCREATELOT smallint = 0,   @I_vMFGDATE datetime = '',   @I_vEXPNDATE datetime = '',   @I_vUpdateIfExists tinyint = 1,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1 char(50) = '',   @I_vUSRDEFND2 char(50) = '',     @I_vUSRDEFND3 char(50) = '',   @I_vUSRDEFND4 varchar(8000) = '',  @I_vUSRDEFND5 varchar(8000) = '',  @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @O_TODAY datetime,  @O_DUMMYDT datetime,  @Line_Seq_Exists smallint,  @iStatus int,  @iCustomState int,  @iErrorString varchar(255),  @iAddCodeErrState int,    @O_oErrorState int,  @iError int,  @sCompanyID smallint,    @iPREVLOTNUMBR char(21),  @iPREVLOTQTY numeric(19,5),  @O_vTRXSORCE char(13),  @O_vMARKED tinyint,  @O_vPOSTED tinyint,  @iQtySold numeric(19,5),  @SRLSTAT char(10),  @O_vSERLTQTY numeric(17,5),  @iValueExists smallint,  @iITMTRKOP smallint,  @O_vITEMNMBR char(31),  @O_vLOTNUMBR char(21),  @O_vBIN char(15),  @O_vSVC_Serial_ID char(21),  @O_vEQUIPID int,  @LOTNUMBR char(21),  @O_vReturn_Item_Number char(31),  @O_vReturn_Lot_Number char(21),  @O_vTOBIN char(15),  @O_vSVC_Return_Lot_Number char(21),  @O_vReturn_Equipment_ID int,  @iSTNDCOST numeric(19,5),  @iCURRCOST numeric(19,5),  @O_vRETCOST numeric(19,5),  @RETCSTNR char(15),  @RETADRSCODE char(15),  @O_vMFGDATE datetime,  @O_vEXPNDATE datetime,  @iLotRecvd numeric(19,5),  @iLotSold numeric(19,5),  @iLotAlloc numeric(19,5),  @iSHIPPED smallint,  @iRTVLineStatus smallint,  @O_vSVC_Original_Serial tinyint,  @O_vShipped tinyint,  @iLotExists tinyint,  @AmntOverExst numeric(19,5),  @ENABLEMULTIBIN tinyint  select   @O_TODAY = convert(char(11), convert(datetime, getdate()), 101),  @O_DUMMYDT = convert(char(11), convert(datetime, '1900-01-01'), 101),  @Line_Seq_Exists = 0,  @iStatus  = 0,  @iCustomState  = 0,  @iErrorString = '',  @iAddCodeErrState  = 0,  @O_oErrorState  = 0,  @iError  = 0,  @sCompanyID  = 0,  @iPREVLOTNUMBR = '',  @iPREVLOTQTY = 0,  @O_vTRXSORCE = '',  @O_vMARKED = 0,  @O_vPOSTED = 0,  @O_iErrorState = 0,  @oErrString = '',  @iQtySold = 0,  @SRLSTAT = '',  @O_vSERLTQTY =1,  @iValueExists = 0,  @iITMTRKOP = 1,  @O_vITEMNMBR = '',  @O_vLOTNUMBR = '',  @O_vBIN = '',  @O_vSVC_Serial_ID = '',  @O_vEQUIPID = 0,  @O_vReturn_Item_Number = '',  @O_vReturn_Lot_Number = '',  @O_vTOBIN = '',  @O_vSVC_Return_Lot_Number = '',  @O_vReturn_Equipment_ID = 0,  @O_vRETCOST = 0,  @RETCSTNR = '',  @RETADRSCODE = '',  @iSTNDCOST = 0,  @iCURRCOST = 0,  @LOTNUMBR = '',  @O_vMFGDATE = @O_DUMMYDT,  @O_vEXPNDATE = @O_DUMMYDT,  @iLotRecvd = 0,  @iLotSold = 0,  @iLotAlloc = 0,  @iSHIPPED = 0,  @iRTVLineStatus = 0,  @O_vSVC_Original_Serial = 0,  @O_vShipped = 0,  @iLotExists = 0,  @AmntOverExst = 0,  @ENABLEMULTIBIN = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taFSRTVLineLotPre  @I_vRTV_Number output,  @I_vRTV_Line output,  @I_vQTYTYPE output,  @I_vSERLTQTY output,  @I_vSLTSQNUM output,  @I_vInOrOut output,  @I_vITEMNMBR output,  @I_vLOTNUMBR output,  @I_vLOCNCODE output,   @I_vBIN output,  @I_vDATERECD output,  @I_vDTSEQNUM output,  @I_vENTDTE output,  @I_vAUTOCREATELOT output,  @I_vMFGDATE output,  @I_vEXPNDATE output,  @I_vUpdateIfExists output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iErrorString output  select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iErrorString))  set @O_iErrorState = 8891     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @SRLSTAT = isnull(SRLSTAT, ''), @RETCSTNR = RETCSTNR  from SVC00998 (nolock)  if( @I_vRTV_Number is NULL or  @I_vRTV_Line is NULL or  @I_vITEMNMBR is NULL or  @I_vLOCNCODE is NULL or   @I_vQTYTYPE is NULL or  @I_vLOTNUMBR is NULL   ) begin  set @O_iErrorState = 8892    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vRTV_Number='' or  @I_vITEMNMBR = '' or  @I_vLOTNUMBR = '' or  @I_vLOCNCODE = '' or  @I_vRTV_Line = 0  ) begin  set @O_iErrorState = 8893    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if( @I_vRTV_Line < 0 or  @I_vSLTSQNUM < 0 or  @I_vQTYTYPE < 0  ) begin  set @O_iErrorState = 8894    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vUpdateIfExists not in (0,1)) begin  set @O_iErrorState = 8895     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select  @I_vRTV_Number = UPPER(@I_vRTV_Number),  @I_vITEMNMBR = UPPER(rtrim(@I_vITEMNMBR)),  @I_vLOTNUMBR = UPPER(rtrim(@I_vLOTNUMBR)),  @I_vLOCNCODE = UPPER(rtrim(@I_vLOCNCODE))  if exists(select 1 from SVC05635 (nolock) where RTV_Number = @I_vRTV_Number and (MKDTOPST = 1 or POSTED = 1)) begin  set @O_iErrorState = 8896    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if exists(select 1 from SVC05625 (nolock) where RTV_Number = @I_vRTV_Number and (MKDTOPST = 1 or POSTED = 1)) begin  set @O_iErrorState = 8897    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if exists(select 1 from SVC05615 (nolock) where RTV_Number = @I_vRTV_Number and (MKDTOPST = 1 or POSTED = 1)) begin  set @O_iErrorState = 8898    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vQTYTYPE < 1 or @I_vQTYTYPE > 5) begin  set @O_iErrorState = 8899     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@I_vInOrOut not in(1,2)) begin  set @O_iErrorState = 8900     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  if (@I_vSLTSQNUM = 0) begin  select @I_vSLTSQNUM = (isnull(max(SLTSQNUM),0) + 1)  from SVC05602 (nolock)   where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE end  if exists (select 1 from SVC35602 (nolock) where RTV_Number = @I_vRTV_Number   and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM) begin  select @Line_Seq_Exists=1   set @O_iErrorState = 8901    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  set @iValueExists = 0 select @iValueExists = 1, @iPREVLOTNUMBR = SERLNMBR, @iPREVLOTQTY = SERLTQTY   from SVC05602 (nolock)   where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM if (@iValueExists = 1) begin  select @Line_Seq_Exists=1 end  if (@Line_Seq_Exists=1) and (@I_vUpdateIfExists = 0)  begin  set @O_iErrorState = 8902    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@Line_Seq_Exists = 1) begin  select @O_vSERLTQTY = case  when @I_vSERLTQTY <= 0 then isnull(SERLTQTY, 1)  else @I_vSERLTQTY  end,  @I_vITEMNMBR = case  when @I_vITEMNMBR is null then isnull(ITEMNMBR, '')  else @I_vITEMNMBR  end,  @I_vLOTNUMBR = case  when @I_vLOTNUMBR is null then isnull(SERLNMBR, '')  else @I_vLOTNUMBR  end,  @iPREVLOTNUMBR = isnull(SERLNMBR, ''),  @iPREVLOTQTY = isnull(SERLTQTY, 1),  @I_vBIN = case  when @I_vBIN is null then isnull(BIN, '')  else @I_vBIN  end,  @O_vSVC_Serial_ID = isnull(SVC_Serial_ID, ''),  @O_vEQUIPID = isnull(EQUIPID, 0),  @O_vReturn_Item_Number = isnull(Return_Item_Number, ''),  @O_vReturn_Lot_Number = isnull(Return_Serial_Number, ''),  @O_vTOBIN = isnull(TOBIN, ''),  @O_vSVC_Return_Lot_Number = isnull(SVC_Return_Serial_ID, 0),  @O_vReturn_Equipment_ID = isnull(Return_Equipment_ID, 0),  @O_vRETCOST = isnull(RETCOST, 0),  @O_vSVC_Original_Serial = isnull(SVC_Original_Serial, 0),  @I_vDATERECD = case  when @I_vDATERECD is null then isnull(DATERECD, @O_DUMMYDT)  else @I_vDATERECD  end,  @I_vDTSEQNUM = case  when @I_vDTSEQNUM is null then isnull(DTSEQNUM, 0)  else @I_vDTSEQNUM  end,  @O_vTRXSORCE = isnull(TRXSORCE, ''),  @O_vMARKED = isnull(MARKED, 0),  @O_vPOSTED = isnull(POSTED, 0),  @O_vShipped = isnull(Shipped, 0),  @iSHIPPED = isnull(Shipped, 0)   from SVC05602 (nolock)  where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM   select @iRTVLineStatus = isnull(RTV_Status, 0) from SVC05601 where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line  end  select @O_vSERLTQTY = case  when @I_vSERLTQTY <= 0 then 1  else @I_vSERLTQTY  end,  @I_vITEMNMBR = case  when @I_vITEMNMBR is null then ''  else @I_vITEMNMBR  end,  @I_vLOTNUMBR = case  when @I_vLOTNUMBR is null then ''  else @I_vLOTNUMBR  end,  @I_vBIN = case  when @I_vBIN is null then ''  else @I_vBIN  end,  @O_vRETCOST = case  when @O_vRETCOST <> 0 then @O_vRETCOST  else 0  end,  @I_vDATERECD = case  when @I_vDATERECD is null then @O_DUMMYDT  else @I_vDATERECD  end  if ((@iSHIPPED <> 0 or @O_vPOSTED <> 0) and (@iRTVLineStatus <> 5 and @I_vInOrOut <> 2)) begin  set @O_iErrorState = 8915    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vITEMNMBR <> '') begin  set @iValueExists = 0  select @iValueExists = 1,   @iITMTRKOP = ITMTRKOP,   @iSTNDCOST = isnull(STNDCOST, 0.0),   @iCURRCOST = isnull(CURRCOST, 0.0),  @O_vRETCOST = case  when @O_vRETCOST = 0 and VCTNMTHD in (4,5) then isnull(STNDCOST, 0.0)  when @O_vRETCOST = 0 and @iCURRCOST > 0 then isnull(CURRCOST, 0.0)  when @O_vRETCOST <> 0 then @O_vRETCOST  else 0  end  from IV00101 (nolock) where ITEMNMBR=@I_vITEMNMBR  if @iValueExists <> 1  begin  set @O_iErrorState = 8903     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vLOCNCODE <> '')  begin  if not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vLOCNCODE)  begin  set @O_iErrorState = 8904     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)   end  else   begin  if not exists(select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE)  begin  set @O_iErrorState = 8905     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if (@Line_Seq_Exists = 1) and (@I_vSERLTQTY < 0) begin  if (@iPREVLOTNUMBR <> '' and @iPREVLOTNUMBR <> @I_vLOTNUMBR)  begin  set @O_iErrorState = 8918     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   delete from SVC05602 where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8906     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00301 set IUSCOUNT = IUSCOUNT - @iPREVLOTQTY from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8919     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  return (0) end  if (@I_vLOTNUMBR <> '') and (@I_vInOrOut = 1) begin  select @iLotExists = 0,  @I_vMFGDATE = case  when @I_vMFGDATE = '' then @O_DUMMYDT  else convert(char(10), @I_vMFGDATE, 101)  end,  @I_vEXPNDATE = case  when @I_vEXPNDATE = '' then @O_DUMMYDT  else convert(char(10), @I_vEXPNDATE, 101)  end   if (@I_vDTSEQNUM = 0 or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT)  begin  select @iLotExists = 1,   @I_vDATERECD = case  when @I_vDATERECD is null or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then isnull(DATERECD, @O_DUMMYDT)  else @I_vDATERECD  end,  @I_vDTSEQNUM = case  when @I_vDTSEQNUM is null or @I_vDTSEQNUM = 0 then isnull(DTSEQNUM, 0)  else @I_vDTSEQNUM  end,  @O_vRETCOST = case   when @O_vRETCOST = 0 then isnull(UNITCOST, 0)  else @O_vRETCOST  end,  @iLotRecvd = isnull(QTYRECVD, 0),  @iLotSold = isnull(QTYSOLD, 0),  @iLotAlloc = isnull(ATYALLOC, 0),  @O_vEXPNDATE = isnull(EXPNDATE, @O_DUMMYDT),  @O_vMFGDATE = isnull(MFGDATE, @O_DUMMYDT)   from IV00300 (nolock) where ITEMNMBR=@I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR   AND (QTYRECVD - QTYSOLD - ATYALLOC > 0)  end   if (@I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT)  begin  select @I_vDATERECD = @O_TODAY  end   if (@I_vDTSEQNUM = 0 and (@I_vDATERECD <> '' and @I_vDATERECD <> @O_DUMMYDT))  begin  select TOP 1 @iLotExists = 1,   @O_vRETCOST = case  when @O_vRETCOST = 0 then isnull(UNITCOST, 0)  else @O_vRETCOST  end,  @iLotRecvd = isnull(QTYRECVD, 0),  @iLotSold = isnull(QTYSOLD, 0),  @iLotAlloc = isnull(ATYALLOC, 0),  @O_vEXPNDATE = isnull(EXPNDATE, @O_DUMMYDT),  @O_vMFGDATE = isnull(MFGDATE, @O_DUMMYDT)   from IV00300 (nolock) where ITEMNMBR=@I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR   AND DATERECD = @I_vDATERECD and (QTYRECVD - QTYSOLD - ATYALLOC > 0)  end  else   begin  select @iLotExists = 1,   @O_vRETCOST = case  when @O_vRETCOST = 0 then isnull(UNITCOST, 0)  else @O_vRETCOST  end,  @iLotRecvd = isnull(QTYRECVD, 0),  @iLotSold = isnull(QTYSOLD, 0),  @iLotAlloc = isnull(ATYALLOC, 0),  @O_vEXPNDATE = isnull(EXPNDATE, @O_DUMMYDT),  @O_vMFGDATE = isnull(MFGDATE, @O_DUMMYDT)   from IV00300 (nolock) where ITEMNMBR=@I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR   AND DATERECD = @I_vDATERECD and DTSEQNUM = @I_vDTSEQNUM  end   if (@iLotExists <> 1) and (@I_vAUTOCREATELOT = 0)  begin  set @O_iErrorState = 8907     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  else if (@iLotExists = 0) and (@I_vAUTOCREATELOT = 1)  begin  select @I_vDATERECD = case  when @I_vDATERECD is null or @I_vDATERECD = '' or @I_vDATERECD = @O_DUMMYDT then @O_TODAY  else @I_vDATERECD  end  select @I_vDTSEQNUM = isnull(max(DTSEQNUM)+16384, 16384) from IV00300 (nolock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and QTYTYPE = @I_vQTYTYPE   and DATERECD = @I_vDATERECD  end  else if (@iLotExists = 1)  begin  if (((@iLotRecvd - @iLotSold - @iLotAlloc) + @iPREVLOTQTY) < @I_vSERLTQTY)  begin  if (@Line_Seq_Exists = 0)  begin  set @O_iErrorState = 8917     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end  end   select @LOTNUMBR = case  when @LOTNUMBR = '' then @I_vLOTNUMBR  else @LOTNUMBR  end   select  @I_vENTDTE = case   when @I_vENTDTE = '' or @I_vENTDTE = @O_DUMMYDT then @O_TODAY  else convert(char(10), @I_vENTDTE, 101)  end,  @O_vMFGDATE = case  when @I_vMFGDATE is null or @I_vEXPNDATE = '' or @I_vMFGDATE = @O_DUMMYDT then @O_vMFGDATE  else @I_vMFGDATE  end,  @O_vEXPNDATE = case  when @I_vEXPNDATE is null or @I_vEXPNDATE = '' or @I_vEXPNDATE = @O_DUMMYDT then @O_vEXPNDATE  else @I_vEXPNDATE  end   if (@O_vEXPNDATE <> @O_DUMMYDT and @O_vEXPNDATE <= @I_vENTDTE)  begin  if not exists(select 1 from IV40100 where ALLEXPLOTSOTHER = 1 and ALLEXPLOTOTHERPASS = '')  begin  set @O_iErrorState = 8916     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end  end end  if (@I_vDATERECD is NULL)  set @I_vDATERECD = ''  if (@I_vDATERECD <> '') and not (datepart(hour,@I_vDATERECD) = 0 and datepart(minute,@I_vDATERECD) = 0 and datepart(second,@I_vDATERECD) = 0   and datepart(millisecond,@I_vDATERECD) = 0) begin  set @O_iErrorState = 8908     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end if (@I_vDATERECD = '')  set @I_vDATERECD = @O_TODAY  if (@Line_Seq_Exists = 0) and (@I_vInOrOut <> 1) begin  set @O_iErrorState = 8909      exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@Line_Seq_Exists=0) begin  select @sCompanyID = CMPANYID from DYNAMICS..SY01500 c (nolock) where c.INTERID = db_name() end  if (@O_iErrorState <> '')  return (@O_iErrorState)  if (@I_vInOrOut = 1)   begin  select @O_vITEMNMBR = @I_vITEMNMBR,  @O_vLOTNUMBR = @I_vLOTNUMBR,  @O_vBIN = @I_vBIN,  @O_vSVC_Serial_ID = case  when @LOTNUMBR <> '' and  (@iITMTRKOP = 2 or @iITMTRKOP = 3) and (@O_vSVC_Original_Serial = 1) then @LOTNUMBR  when @LOTNUMBR = '' and (@iITMTRKOP = 2 or @iITMTRKOP = 3) and (@O_vSVC_Original_Serial = 1) then @I_vLOTNUMBR  else ''  end,  @O_vEQUIPID = 0,  @O_vReturn_Item_Number = @I_vITEMNMBR,  @O_vReturn_Lot_Number = @I_vLOTNUMBR,  @O_vTOBIN = '',  @O_vSVC_Return_Lot_Number = case  when @LOTNUMBR <> '' and (@iITMTRKOP = 2 or @iITMTRKOP = 3) and (@O_vSVC_Original_Serial = 1) then @LOTNUMBR  when @LOTNUMBR = '' and (@iITMTRKOP = 2 or @iITMTRKOP = 3) and (@O_vSVC_Original_Serial = 1) then @I_vLOTNUMBR  else ''  end,  @O_vReturn_Equipment_ID = 0 end else  begin  select @O_vReturn_Item_Number = @I_vITEMNMBR,  @O_vReturn_Lot_Number = @I_vLOTNUMBR,  @O_vTOBIN = @I_vBIN,  @O_vSVC_Return_Lot_Number = case  when @LOTNUMBR <> '' and (@iITMTRKOP = 2 or @iITMTRKOP = 3) then @LOTNUMBR  when @LOTNUMBR = '' and (@iITMTRKOP = 2 or @iITMTRKOP = 3) then @I_vLOTNUMBR  else ''  end,  @O_vReturn_Equipment_ID = 0  from SVC05602 where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM end  if (@Line_Seq_Exists=0) begin  insert into SVC05602( RTV_Number,  RTV_Line,  QTYTYPE,  SERLTQTY,  SLTSQNUM,  ITEMNMBR,  SERLNMBR,  BIN,  SVC_Serial_ID,  EQUIPID,  Return_Item_Number,  Return_Serial_Number,  TOBIN,  SVC_Return_Serial_ID,  Return_Equipment_ID,  RETCOST,  SVC_Original_Serial,  DATERECD,  DTSEQNUM,  TRXSORCE,  MARKED,  POSTED,  Shipped,  MFGDATE,  EXPNDATE  )  select  @I_vRTV_Number,  @I_vRTV_Line,  @I_vQTYTYPE,  @O_vSERLTQTY,  @I_vSLTSQNUM,  @O_vITEMNMBR,  @O_vLOTNUMBR,  @O_vBIN,  @O_vSVC_Serial_ID,  @O_vEQUIPID,  @O_vReturn_Item_Number,  @O_vReturn_Lot_Number,  @O_vTOBIN,  @O_vSVC_Return_Lot_Number,  @O_vReturn_Equipment_ID,  @O_vRETCOST,  @O_vSVC_Original_Serial,  @I_vDATERECD,  @I_vDTSEQNUM,  @O_vTRXSORCE,  @O_vMARKED,  @O_vPOSTED,  @O_vShipped,  @O_vMFGDATE,  @O_vEXPNDATE  if (@@error <> 0)  begin  set @O_iErrorState = 8910     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end end else begin  if (@I_vUpdateIfExists > 0)  begin  update SVC05602 set SERLTQTY = @O_vSERLTQTY,  ITEMNMBR = @O_vITEMNMBR,  SERLNMBR = @O_vLOTNUMBR,  BIN = @O_vBIN,  SVC_Serial_ID = @O_vSVC_Serial_ID,  EQUIPID = @O_vEQUIPID,  Return_Item_Number = @O_vReturn_Item_Number,  Return_Serial_Number = @O_vReturn_Lot_Number,  TOBIN = @O_vTOBIN,  SVC_Return_Serial_ID = @O_vSVC_Return_Lot_Number,  Return_Equipment_ID = @O_vReturn_Equipment_ID,  RETCOST = @O_vRETCOST,  SVC_Original_Serial = @O_vSVC_Original_Serial,  DATERECD = @I_vDATERECD,  DTSEQNUM = @I_vDTSEQNUM,  TRXSORCE = @O_vTRXSORCE,  MARKED = @O_vMARKED,  POSTED = @O_vPOSTED,  Shipped = @O_vShipped,  MFGDATE = @O_vMFGDATE,  EXPNDATE = @O_vEXPNDATE  where RTV_Number = @I_vRTV_Number and RTV_Line = @I_vRTV_Line and QTYTYPE = @I_vQTYTYPE and SLTSQNUM = @I_vSLTSQNUM  if (@@error <> 0)  begin  set @O_iErrorState = 8911     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end end  if @I_vITEMNMBR <> '' and @I_vLOCNCODE <> '' and @iPREVLOTNUMBR <> '' and @I_vLOTNUMBR <> '' begin  update IV00300 set ATYALLOC = case  when (ATYALLOC - @iPREVLOTQTY >= 0) then ATYALLOC - @iPREVLOTQTY  else ATYALLOC  end  where ITEMNMBR = @I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @iPREVLOTNUMBR AND DTSEQNUM = @I_vDTSEQNUM AND DATERECD = @I_vDATERECD  if (@@error <> 0)  begin  set @O_iErrorState = 8912     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end   update IV00301 set IUSCOUNT = IUSCOUNT - @iPREVLOTQTY from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @iPREVLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8930     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if @I_vITEMNMBR <> '' and @I_vLOCNCODE <> '' and @I_vLOTNUMBR <> '' begin  if (@iLotExists <> 1) and (@I_vAUTOCREATELOT = 1)  begin  if (@I_vAUTOCREATELOT = 1)  begin  select @AmntOverExst = isnull(sum(QTYRECVD - QTYSOLD - ATYALLOC),0) - @I_vSERLTQTY from IV00300 (nolock)  where QTYTYPE = 1 and ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and LTNUMSLD = 0 and LOTNUMBR = @I_vLOTNUMBR  if (@AmntOverExst < 0)  begin  select @AmntOverExst = @AmntOverExst * -1  end  else  begin  select @AmntOverExst = 0  end  end  if ((@I_vAUTOCREATELOT = 1) and (@AmntOverExst >= 0) and (@I_vLOTNUMBR <> ''))  begin  select @ENABLEMULTIBIN = ENABLEMULTIBIN from IV40100 (nolock) where SETUPKEY = 1  if (@ENABLEMULTIBIN = 1) and (@I_vBIN <> '')  begin  if (not exists(select 1 from IV00112 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and BIN = @I_vBIN and QTYTYPE = 1))  begin  insert IV00112 (ITEMNMBR, LOCNCODE, BIN, QTYTYPE, QUANTITY, ATYALLOC)  select @I_vITEMNMBR, @I_vLOCNCODE, @I_vBIN,1,0,0  if (@@error <> 0)  begin  set @O_iErrorState = 8931     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  update IV00112 set QUANTITY = QUANTITY + @I_vSERLTQTY  from IV00112 (updlock)  where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE and  BIN = @I_vBIN and QTYTYPE = @I_vQTYTYPE  if (@@error <> 0)  begin  set @O_iErrorState = 8932     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end   insert IV00300  (  ITEMNMBR,  LOCNCODE,  DATERECD,  DTSEQNUM,  LOTNUMBR,  QTYRECVD,  QTYSOLD,  ATYALLOC,  UNITCOST,  RCTSEQNM,  VNDRNMBR,  LTNUMSLD,  QTYTYPE,  BIN,  MFGDATE,  EXPNDATE  )  select   @I_vITEMNMBR,    @I_vLOCNCODE,    @I_vDATERECD,    @I_vDTSEQNUM,    @I_vLOTNUMBR,    @AmntOverExst,    0,     @I_vSERLTQTY,    @O_vRETCOST,    0,     '',     0,     @I_vQTYTYPE,    case @ENABLEMULTIBIN   when 1 then @I_vBIN  else ''  end,  @I_vMFGDATE,    @I_vEXPNDATE    if (@@error <> 0)  begin  set @O_iErrorState = 8933     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if ((select isnull(LOTTYPE,'') from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR) <> '')  begin  if not exists(select 1 from IV00301 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR)  begin  insert IV00301  (  ITEMNMBR,  LOTNUMBR,  LOTATRB1,  LOTATRB2,  LOTATRB3,  LOTATRB4,  LOTATRB5,  IUSCOUNT,  RCRDSTTS   )  select  @I_vITEMNMBR,    @I_vLOTNUMBR,    '',     '',     '',     '',     '',     1,     2      if (@@error <> 0)  begin  set @O_iErrorState = 8934     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  update IV00301 set IUSCOUNT = IUSCOUNT + 1 from IV00301 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8935     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end  update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vLOCNCODE  if (@@error <> 0)  begin  set @O_iErrorState = 8936     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  update IV00102 set QTYONHND = QTYONHND + @I_vSERLTQTY from IV00102 (updlock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  set @O_iErrorState = 8937     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  end  else  begin  update IV00300 set ATYALLOC = case  when (ATYALLOC + @I_vSERLTQTY + @iLotSold <= @iLotRecvd) then ATYALLOC + @I_vSERLTQTY  when (@iLotRecvd - @iLotSold - ATYALLOC >= 0) then @iLotRecvd - @iLotSold - ATYALLOC  else ATYALLOC  end  where ITEMNMBR = @I_vITEMNMBR AND LOCNCODE = @I_vLOCNCODE AND LOTNUMBR = @I_vLOTNUMBR  if (@@error <> 0)  begin  set @O_iErrorState = 8913     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @iAddCodeErrState output  return (@O_iErrorState)  end  end end  exec @iStatus = taFSRTVLineLotPost  @I_vRTV_Number,  @I_vRTV_Line,  @I_vQTYTYPE,  @I_vSERLTQTY,  @I_vSLTSQNUM,  @I_vInOrOut,  @I_vITEMNMBR,  @I_vLOTNUMBR,  @I_vLOCNCODE,  @I_vBIN,  @I_vDATERECD,  @I_vDTSEQNUM,  @I_vENTDTE,  @I_vAUTOCREATELOT,  @I_vMFGDATE,  @I_vEXPNDATE,  @I_vUpdateIfExists,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iErrorString output  select @iError = @@error if @iStatus = 0 and @iError <> 0 begin  select @iStatus = @iError end if (@iStatus <> 0) or (@iCustomState <> 0) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iErrorString))  set @O_iErrorState = 8914    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taFSRTVLineLot] TO [DYNGRP]
GO
