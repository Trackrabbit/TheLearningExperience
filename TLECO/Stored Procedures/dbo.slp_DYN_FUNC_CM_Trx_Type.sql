SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE PROCEDURE [dbo].[slp_DYN_FUNC_CM_Trx_Type] @iLanguageID int  as  set nocount on   declare @sqldropstring varchar(400),  @sqlstring1 varchar(8000),  @sqlstring2 varchar(8000),  @sqlaccessstring varchar(1000),  @I_iDictID int, @I_sFunctionName varchar(100), @I_iFunctionEnum int, @Deposit varchar(255),  @Receipt varchar(255),  @Check varchar(255),  @Withdrawl varchar(255),  @Increase_Adjustment varchar(255),  @Decrease_Adjustment varchar(255),  @Transfer varchar(255), @Interest_Income varchar(255),  @Other_Income varchar(255),  @Other_Expense varchar(255),  @Service_Charge varchar(255) select @I_iDictID = 0 select @I_sFunctionName = 'DYN_FUNC_CM_Trx_Type' select @I_iFunctionEnum = 1 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Deposit output  select @I_iFunctionEnum = 2 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Receipt output  select @I_iFunctionEnum = 3 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Check output  select @I_iFunctionEnum = 4 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Withdrawl output  select @I_iFunctionEnum = 5 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Increase_Adjustment output  select @I_iFunctionEnum = 6 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Decrease_Adjustment output  select @I_iFunctionEnum = 7 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Transfer output select @I_iFunctionEnum = 101 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Interest_Income output  select @I_iFunctionEnum = 102 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Other_Income output  select @I_iFunctionEnum = 103 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Other_Expense output  select @I_iFunctionEnum = 104 exec DYNAMICS..smGetBIEnumString  @I_iDictID, @iLanguageID, @I_sFunctionName, @I_iFunctionEnum, @Service_Charge output  select @sqldropstring =  'if exists (select * from dbo.sysobjects where id = object_id(N''[dbo].[DYN_FUNC_CM_Trx_Type]'') and xtype in (N''FN'',N''IF'',N''TF'')) ' +  'drop function [dbo].[DYN_FUNC_CM_Trx_Type] '  select @sqlstring1 =  'create function [dbo].[DYN_FUNC_CM_Trx_Type] (@iIntEnum integer) returns varchar(100) ' +  'as  '+ 'begin  '+ 'declare @oVarcharValuestring varchar(100) ' + 'set @oVarcharValuestring = ' + 'case ' +  ' when @iIntEnum = 1 then ''' + @Deposit + '''' +  ' when @iIntEnum = 2 then ''' + @Receipt + '''' +  ' when @iIntEnum = 3 then ''' + @Check + '''' +  ' when @iIntEnum = 4 then ''' + @Withdrawl + '''' +  ' when @iIntEnum = 5 then ''' + @Increase_Adjustment + '''' +  ' when @iIntEnum = 6 then ''' + @Decrease_Adjustment + '''' +  ' when @iIntEnum = 7 then ''' + @Transfer + '''' +  ' when @iIntEnum = 101 then ''' + @Interest_Income + '''' +  ' when @iIntEnum = 102 then ''' + @Other_Income + '''' +  ' when @iIntEnum = 103 then ''' + @Other_Expense + '''' +  ' when @iIntEnum = 104 then ''' + @Service_Charge + '''' +  ' else '''' ' +  ' end ' +  ' RETURN(@oVarcharValuestring) ' +  ' END '  exec (@sqldropstring)  exec (@sqlstring1+' '+@sqlstring2)   set nocount off    
GO
GRANT EXECUTE ON  [dbo].[slp_DYN_FUNC_CM_Trx_Type] TO [DYNGRP]
GO
