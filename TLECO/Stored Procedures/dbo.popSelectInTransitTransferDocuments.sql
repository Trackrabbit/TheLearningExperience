SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
create procedure [dbo].[popSelectInTransitTransferDocuments]  @I_vTableName varchar(25) = NULL,  @I_vMarkedItemsList varchar(25) = NULL,  @I_vTransferNumber varchar(17) = NULL,  @I_vFunctionalCurrency varchar(15) = NULL,  @I_vFunctionalCurrencyIndex int   = NULL,  @I_iAmountToPost int   = NULL,  @I_vReceiptID varchar(20) = NULL,  @I_iCompanyID int   = NULL,  @I_vUserID varchar(15) = NULL,  @I_dtUserDate datetime = NULL,  @I_vMaxChar varchar(1)  = NULL,  @O_iAmountToPost int   = NULL output,  @O_iErrorState           int      = NULL output  as  declare @iStatus int,  @iError int,  @dtDate datetime,   @sSVC_XFR_PARTIAL_SHIPPED  smallint,  @sSVC_XFR_SHIPPED    smallint,  @sSVC_XFR_PARTIAL_RECEIVED  smallint,  @sSVC_XFR_EDITING    smallint,  @sPOP_RECEIPT_UNPOSTED smallint,  @sPOP_RECEIPT_DOCTYPE smallint,  @sRES_RECEIVE smallint,  @sRULE_TRANSFERSTATE smallint,  @tHOLD tinyint,  @iContractCheck int,  @sTRANSFERNUMBER char(17),  @sTRANSFERLINENUMBER int,  @sTRANSFERACTIVITYNUMBER char(30)  select @iStatus = 0,  @dtDate = '1900-01-01 00:00:00.000',  @sSVC_XFR_PARTIAL_SHIPPED  = 3,  @sSVC_XFR_SHIPPED = 4,  @sSVC_XFR_PARTIAL_RECEIVED = 5,  @sSVC_XFR_EDITING = 99,  @sPOP_RECEIPT_UNPOSTED = 0,  @sPOP_RECEIPT_DOCTYPE = 8,  @sRES_RECEIVE = 1104,  @sRULE_TRANSFERSTATE = 1006  select @O_iErrorState   = 0,  @O_iAmountToPost = @I_iAmountToPost  if( @I_vTableName is NULL or  @I_vTransferNumber is NULL or  @I_vFunctionalCurrency is NULL or  @I_iAmountToPost is NULL or  @I_vReceiptID is NULL or  @I_iCompanyID is NULL or  @I_vUserID is NULL or  @I_dtUserDate is NULL or  @I_vMaxChar is NULL ) begin  select          @O_iErrorState = 21022  return end  create table #Quantities  (   PONUMBER char(17) not null,  POLNENUM int   not null,  TransferStatus int not null,  QtyShippedOnTran numeric(19,5) not null,  QtyShippedPosted numeric(19,5) not null,  QtyShippedUnPst numeric(19,5) not null,  QtyRem numeric(19,5) not null,  ) CREATE INDEX AK2#Quantities ON #Quantities (PONUMBER, POLNENUM)   create table #QuantitiesPOP10500  (  PONUMBER char(17)    not null,  POLNENUM int     not null,  QtyShipped numeric(19,5) not null,  ) CREATE INDEX AK2#QuantitiesPOP10500 ON #QuantitiesPOP10500 (PONUMBER, POLNENUM)   CREATE TABLE #PODetailed  (  PONUMBER   char(17)   NOT NULL,   ORD     int            NOT NULL,   ITEMNMBR   char(31)   NOT NULL,   VNDITNUM   char(31)    NOT NULL,   QTYSHPPD   numeric(19,5)  NOT NULL,   QTYINVCD   numeric(19,5)  NOT NULL,   LOCNCODE   char(11)   NOT NULL,   UOFM       char(9)        NOT NULL,   QTYORDER   numeric(19,5)  NOT NULL,   QTYCANCE   numeric(19,5)  NOT NULL,   ITEMDESC   char(101)      NOT NULL,   VNDITDSC   char(101)      NOT NULL,   ORUNTCST   numeric(19,5)  NOT NULL,   UNITCOST   numeric(19,5)  NOT NULL,   DECPLCUR   smallint       NOT NULL,   DECPLQTY   smallint       NOT NULL,   ODECPLCU   smallint       NOT NULL,   MARKED     tinyint        NOT NULL,   CURNCYID   char(15)       NOT NULL,   CURRNIDX   smallint       NOT NULL,   XCHGRATE   numeric(19,7)  NOT NULL,   RATECALC   smallint       NOT NULL,   DENXRATE   numeric(19,7)  NOT NULL,   POTYPE     smallint       NOT NULL,   HOLD       tinyint        NOT NULL,   NONINVEN   smallint       NOT NULL,   NOTEINDX   numeric(19,5)  NOT NULL,  LineNumber int            NOT NULL,  CONTENDDTE datetime       NOT NULL,  POLNESTA   int            NOT NULL,  UnpostedQTYShipped numeric(19,5) NOT NULL,   UnpostedQTYInvoiced numeric(19,5) NOT NULL,   PostedQTYShipped numeric(19,5)  NOT NULL,   PostedQTYInvoiced numeric(19,5)  NOT NULL,  ProjNum char(15)  NOT NULL,  CostCatID char(15)  NOT NULL,  Workflow_Approval_Status   smallint     NOT NULL,   Workflow_Priority          smallint     NOT NULL,   Workflow_Status   smallint     NOT NULL,   UseQtyOverageTolerance  tinyint NOT NULL,  QtyOverTolerancePercent  int NOT NULL,  Net_QTY_Ordered numeric(19,5)  NOT NULL,  QtyRemShip numeric(19,5)   NOT NULL,   DEX_ROW_ID int identity NOT NULL  )  CREATE INDEX AK2#PODetailed ON #PODetailed (PONUMBER, ORD)   if @I_vMarkedItemsList = ''  begin  insert #Quantities (PONUMBER, POLNENUM, TransferStatus, QtyShippedOnTran, QtyShippedPosted, QtyShippedUnPst, QtyRem)  select d.ORDDOCID, d.LNITMSEQ, d.Status, d.QTYSHPPD, d.QTYRECVD, 0,  (d.QTYSHPPD - d.QTYRECVD)  from IV00701V d   where (d.Status = @sSVC_XFR_PARTIAL_SHIPPED or   d.Status = @sSVC_XFR_SHIPPED or d.Status = @sSVC_XFR_PARTIAL_RECEIVED )  end else  begin   create table #MarkedItems  (  PONUMBER char(17) not null,  MKTOPROC int not null  )  CREATE INDEX POs ON #MarkedItems (PONUMBER)    exec ('insert #MarkedItems (PONUMBER,MKTOPROC) select DOCNUMBR, MKTOPROC from ' + @I_vMarkedItemsList )   insert #Quantities (PONUMBER, POLNENUM, TransferStatus, QtyShippedOnTran, QtyShippedPosted, QtyShippedUnPst, QtyRem)  select d.ORDDOCID, d.LNITMSEQ, d.Status, d.QTYSHPPD, d.QTYRECVD, 0, (d.QTYSHPPD - d.QTYRECVD)  from IV00701V d, #MarkedItems  where d.ORDDOCID = #MarkedItems.PONUMBER and  (d.Status = @sSVC_XFR_PARTIAL_SHIPPED or   d.Status = @sSVC_XFR_SHIPPED or d.Status = @sSVC_XFR_PARTIAL_RECEIVED )    end  insert #QuantitiesPOP10500 (PONUMBER, POLNENUM, QtyShipped)  select r.PONUMBER,r.POLNENUM, (sum(r.QTYSHPPD) - sum(r.QTYREJ))  from #Quantities t, POP10500 r  where t.PONUMBER = r.PONUMBER and  t.POLNENUM = r.POLNENUM and  (r.Status = 0)  group by r.PONUMBER, r.POLNENUM, r.Status  update t set t.QtyShippedUnPst = r.QtyShipped, t.QtyRem = (t.QtyRem - r.QtyShipped) from #Quantities t, #QuantitiesPOP10500 r where (t.PONUMBER = r.PONUMBER) and (t.POLNENUM = r.POLNENUM)  insert #PODetailed  (PONUMBER, ORD, ITEMNMBR, VNDITNUM, QTYSHPPD, QTYINVCD,   LOCNCODE, UOFM, QTYORDER, QTYCANCE, ITEMDESC, VNDITDSC,   ORUNTCST, UNITCOST,  DECPLCUR,   DECPLQTY,   ODECPLCU,   MARKED, CURNCYID, CURRNIDX, XCHGRATE, RATECALC, DENXRATE, POTYPE, HOLD, NONINVEN,   NOTEINDX, LineNumber, CONTENDDTE, POLNESTA,  UnpostedQTYShipped, UnpostedQTYInvoiced, PostedQTYShipped, PostedQTYInvoiced, ProjNum, CostCatID,   Workflow_Approval_Status, Workflow_Priority, Workflow_Status,  UseQtyOverageTolerance, QtyOverTolerancePercent, Net_QTY_Ordered, QtyRemShip)  select d.ORDDOCID, d.LNITMSEQ, d.ITEMNMBR, '', 0, 0,   d.TRNSTLOC, d.UOFM, p.QtyShippedOnTran, 0, d.DSCRIPTN, '',   case i.VCTNMTHD   when 4 then round((i.STNDCOST * ip.QTYBSUOM), i.DECPLCUR - 1)   when 5 then round((i.STNDCOST * ip.QTYBSUOM), i.DECPLCUR - 1)   else round((i.CURRCOST * ip.QTYBSUOM), i.DECPLCUR - 1)   end,      case i.VCTNMTHD   when 4 then round((i.STNDCOST * ip.QTYBSUOM), i.DECPLCUR - 1)   when 5 then round((i.STNDCOST * ip.QTYBSUOM), i.DECPLCUR - 1)   else round((i.CURRCOST * ip.QTYBSUOM), i.DECPLCUR - 1)   end ,     d.DECPLCUR + 6,   d.DECPLQTY,   d.DECPLCUR - 1,   0, @I_vFunctionalCurrency, @I_vFunctionalCurrencyIndex, 0, 0, 0, @sPOP_RECEIPT_DOCTYPE, 0, 0,   H.NOTEINDX, 0, @dtDate, d.Status,  p.QtyShippedUnPst, 0,   p.QtyShippedPosted, 0, '', '', 0, 0, 0, 0, 0, 0, 0   from IV00701V d, IV00700V H, #Quantities p, IV00101 i, IV00106 ip  where d.ORDDOCID = H.ORDDOCID and  d.ORDDOCID = p.PONUMBER and  d.LNITMSEQ = p.POLNENUM and  d.ITEMNMBR = i.ITEMNMBR and  d.ITEMNMBR = ip.ITEMNMBR and d.UOFM = ip.UOFM and   p.QtyRem > 0  if @I_vMarkedItemsList = ''  begin  if ((@I_vTransferNumber <> '')   and (exists (select 1 from #PODetailed where PONUMBER = @I_vTransferNumber)))  begin  select @sTRANSFERACTIVITYNUMBER = @I_vTransferNumber + RTRIM(@I_vMaxChar) + '0'  if (not exists(select 1 from DYNAMICS..SY00801   where RULEID = @sRULE_TRANSFERSTATE and CMPANYID = @I_iCompanyID and RSRCID = @sTRANSFERACTIVITYNUMBER))  begin   DECLARE scTransferItems SCROLL CURSOR FOR   SELECT PONUMBER, ORD  FROM #PODetailed   WHERE PONUMBER = @I_vTransferNumber  OPEN scTransferItems   FETCH NEXT FROM scTransferItems  INTO @sTRANSFERNUMBER, @sTRANSFERLINENUMBER   IF @@FETCH_STATUS <> 0  BEGIN  CLOSE scTransferItems  DEALLOCATE scTransferItems  END  ELSE  BEGIN  while @@FETCH_STATUS = 0   begin  select @sTRANSFERACTIVITYNUMBER = RTRIM(@sTRANSFERNUMBER) + RTRIM(@I_vMaxChar) + LTRIM(str(@sTRANSFERLINENUMBER))  if (not exists(select 1 from DYNAMICS..SY00801   where RULEID = @sRULE_TRANSFERSTATE and CMPANYID = @I_iCompanyID   and RSRCID = @sTRANSFERACTIVITYNUMBER))  begin  if (exists (select 1 from DYNAMICS..SY00801   where RULEID = @sRULE_TRANSFERSTATE and  CMPANYID = @I_iCompanyID and  RSRCID = @sTRANSFERACTIVITYNUMBER and  RSRCSBID = @I_vReceiptID and  USERID = @I_vUserID))  begin  update a set USECT = USECT + 1  from DYNAMICS..SY00801 a   where a.RULEID = @sRULE_TRANSFERSTATE and  a.CMPANYID = @I_iCompanyID and  a.RSRCID = @sTRANSFERACTIVITYNUMBER and  a.RSRCSBID = @I_vReceiptID and  a.USERID = @I_vUserID  end  else  begin  insert DYNAMICS..SY00801   (RULEID, RSRCID, RSRCSBID,   CMPANYID, USERID, RSCSTATE, RSRDESC, USECT)  select @sRULE_TRANSFERSTATE, @sTRANSFERACTIVITYNUMBER, @I_vReceiptID,   @I_iCompanyID, @I_vUserID, @sRES_RECEIVE, '', 1  end   update #PODetailed set MARKED = 1   where (PONUMBER = @sTRANSFERNUMBER) and (ORD = @sTRANSFERLINENUMBER)    select @O_iAmountToPost = @O_iAmountToPost + 1.0   update p  set p.QTYSHPPD = q.QtyRem  from #PODetailed p, #Quantities q  where p.PONUMBER = q.PONUMBER and  p.ORD = q.POLNENUM and  p.PONUMBER = @I_vTransferNumber and  p.MARKED = 1  end     FETCH NEXT FROM scTransferItems  INTO @sTRANSFERNUMBER, @sTRANSFERLINENUMBER  end   CLOSE scTransferItems  DEALLOCATE scTransferItems  END     END       END   end   else  BEGIN   DECLARE scMarkedItems SCROLL CURSOR FOR   SELECT d.PONUMBER, d.ORD  FROM #PODetailed as d  JOIN #MarkedItems as m on d.PONUMBER = m.PONUMBER   OPEN scMarkedItems   FETCH NEXT FROM scMarkedItems  INTO @sTRANSFERNUMBER, @sTRANSFERLINENUMBER   IF @@FETCH_STATUS <> 0  BEGIN  CLOSE scMarkedItems  DEALLOCATE scMarkedItems  END  ELSE  BEGIN  while @@FETCH_STATUS = 0   begin  select @sTRANSFERACTIVITYNUMBER = @I_vTransferNumber + RTRIM(@I_vMaxChar) + '0'  if (not exists(select 1 from DYNAMICS..SY00801   where RULEID = @sRULE_TRANSFERSTATE and CMPANYID = @I_iCompanyID and RSRCID = @sTRANSFERACTIVITYNUMBER))  begin  select @sTRANSFERACTIVITYNUMBER = RTRIM(@sTRANSFERNUMBER) + RTRIM(@I_vMaxChar) + LTRIM(str(@sTRANSFERLINENUMBER))  if (not exists(select 1 from DYNAMICS..SY00801   where RULEID = @sRULE_TRANSFERSTATE and CMPANYID = @I_iCompanyID   and RSRCID = @sTRANSFERACTIVITYNUMBER and USERID <> @I_vUserID))  begin  if (exists (select 1 from DYNAMICS..SY00801   where RULEID = @sRULE_TRANSFERSTATE and  CMPANYID = @I_iCompanyID and  RSRCID = @sTRANSFERACTIVITYNUMBER and  RSRCSBID = @I_vReceiptID and  USERID = @I_vUserID))  begin  update a set USECT = USECT + 1  from DYNAMICS..SY00801 a   where a.RULEID = @sRULE_TRANSFERSTATE and  a.CMPANYID = @I_iCompanyID and  a.RSRCID = @sTRANSFERACTIVITYNUMBER and  a.RSRCSBID = @I_vReceiptID and  a.USERID = @I_vUserID  end  else  begin  insert DYNAMICS..SY00801   (RULEID, RSRCID, RSRCSBID,   CMPANYID, USERID, RSCSTATE, RSRDESC, USECT)  select @sRULE_TRANSFERSTATE, @sTRANSFERACTIVITYNUMBER, @I_vReceiptID,   @I_iCompanyID, @I_vUserID, @sRES_RECEIVE, '', 1  end   update #PODetailed set MARKED = 1   where (PONUMBER = @sTRANSFERNUMBER) and (ORD = @sTRANSFERLINENUMBER)    select @O_iAmountToPost = @O_iAmountToPost + 1    update p  set p.QTYSHPPD = q.QtyRem  from #PODetailed p, #Quantities q  where p.PONUMBER = q.PONUMBER and  p.ORD = q.POLNENUM and  (p.PONUMBER = @sTRANSFERNUMBER and  p.ORD = @sTRANSFERLINENUMBER) and  p.MARKED = 1  end   end  FETCH NEXT FROM scMarkedItems  INTO @sTRANSFERNUMBER, @sTRANSFERLINENUMBER  end   CLOSE scMarkedItems  DEALLOCATE scMarkedItems  END  END   exec  ('insert '+@I_vTableName   + ' (PONUMBER, ORD, ITEMNMBR, VNDITNUM, QTYSHPPD, QTYINVCD, LOCNCODE, UOFM, QTYORDER, QTYCANCE, ITEMDESC, VNDITDSC, ORUNTCST, UNITCOST, '  + ' DECPLCUR, DECPLQTY, ODECPLCU, MARKED, CURNCYID, CURRNIDX, XCHGRATE, RATECALC, DENXRATE, POTYPE, HOLD, NONINVEN, NOTEINDX, LineNumber, CONTENDDTE, POLNESTA, '  + ' UnpostedQTYShipped, UnpostedQTYInvoiced, PostedQTYShipped, PostedQTYInvoiced, ProjNum, CostCatID, Workflow_Approval_Status, Workflow_Priority, Workflow_Status, '  + ' UseQtyOverageTolerance, QtyOverTolerancePercent, Net_QTY_Ordered, QTYREMAI, TrackedDropShipped) '  + ' select PONUMBER, ORD, ITEMNMBR, VNDITNUM, QTYSHPPD, QTYINVCD, LOCNCODE, UOFM, QTYORDER, QTYCANCE, ITEMDESC, VNDITDSC, ORUNTCST, UNITCOST, '  + '     DECPLCUR, DECPLQTY, ODECPLCU, MARKED, CURNCYID, CURRNIDX, XCHGRATE, RATECALC, DENXRATE, POTYPE, HOLD, NONINVEN, NOTEINDX, LineNumber, CONTENDDTE, POLNESTA, '  + ' UnpostedQTYShipped, UnpostedQTYInvoiced, PostedQTYShipped, PostedQTYInvoiced, ProjNum, CostCatID, Workflow_Approval_Status, Workflow_Priority, Workflow_Status, '  + ' UseQtyOverageTolerance, QtyOverTolerancePercent, Net_QTY_Ordered, QtyRemShip, 0 '   + ' from #PODetailed'  )   drop table #Quantities drop table #QuantitiesPOP10500 drop table #PODetailed  return(@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[popSelectInTransitTransferDocuments] TO [DYNGRP]
GO
