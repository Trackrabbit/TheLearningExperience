SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[rmHATBCalculateTotals]  @I_tUsingDocumentDate tinyint  = NULL,  @I_dStartDate datetime = NULL,  @I_dEndDate datetime = NULL,  @I_dAgingDate datetime = NULL,  @I_tExcludeUnpostedAppldCrDocs  tinyint  = NULL,  @I_cFunctionalCurrency char(15) = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_sPrintCurrencyIn smallint = NULL,  @I_nReportingExchangeRate numeric(15,7) = NULL,  @I_sReportingRateCalcMethod smallint = NULL,  @I_sReportingDecimalPlaces smallint = NULL,  @O_iErrorState                  int             = NULL output as  declare  @tLoopControl            tinyint,  @cUsingDocumentDate char(1),  @cStartDate char(12),  @cEndDate char(12),  @cAgingDate char(12),  @cExcludeUnpostedFlag char(1),  @vExcludeUnpostedAppldCrDocs varchar(255),  @vExcludeApplyDateRange1 varchar(255),  @cPrintCurrencyIn char(1),  @cMCRegistered char(1),  @cReportingExchangeRate char(20),  @cReportingRateCalcMethod char(1),  @cReportingDecimalPlaces char(1),  @vExcludeApplyDateRange2 varchar(255),  @iStatus int,  @iError int,  @sAgeCrAmts tinyint       select @O_iErrorState = 0  while @tLoopControl is NULL begin  select @tLoopControl = 1   if  @I_tUsingDocumentDate is NULL or  @I_dStartDate is NULL or  @I_dEndDate is NULL or  @I_dAgingDate is NULL or  @I_tExcludeUnpostedAppldCrDocs is NULL or  @I_cFunctionalCurrency   is NULL or  @I_tMCRegistered is NULL or  @I_sPrintCurrencyIn is NULL or  @I_nReportingExchangeRate is NULL or  @I_sReportingRateCalcMethod is NULL or  @I_sReportingDecimalPlaces is NULL  begin  select @O_iErrorState = 20983  break  end    select  @sAgeCrAmts = AGEUNAPPLDCR  from  RM40101 with (NOLOCK)  where  SETUPKEY = '1'   select @cUsingDocumentDate = convert(char(1),@I_tUsingDocumentDate),  @cStartDate = '''' + convert(char(10),@I_dStartDate,102) + '''',  @cEndDate = '''' + convert(char(10),@I_dEndDate,102) + '''',  @cAgingDate = '''' + convert(char(10),@I_dAgingDate,102) + '''',  @cExcludeUnpostedFlag = convert(char(1),@I_tExcludeUnpostedAppldCrDocs)   if @I_tExcludeUnpostedAppldCrDocs = 1  select @vExcludeUnpostedAppldCrDocs = ' and POSTED = 1'  else  select @vExcludeUnpostedAppldCrDocs = ''   if @I_tUsingDocumentDate = 1  begin  select @vExcludeApplyDateRange1 = ' and ((DATE1 < ' + @cStartDate + ' or DATE1 > ' + @cEndDate + ')'  select @vExcludeApplyDateRange2 = ' or (APTODCDT < ' + @cStartDate + ' or APTODCDT > ' + @cEndDate + '))'  end  else  begin  select @vExcludeApplyDateRange1 = ' and ((GLPOSTDT < ' + @cStartDate + ' or GLPOSTDT > ' + @cEndDate + ')'  select @vExcludeApplyDateRange2 = ' or (ApplyToGLPostDate < ' + @cStartDate + ' or ApplyToGLPostDate > ' + @cEndDate + '))'  end   select @cMCRegistered = convert(char(1),@I_tMCRegistered)  select @cPrintCurrencyIn = convert(char(1),@I_sPrintCurrencyIn)  select @cReportingExchangeRate = convert(char(16),@I_nReportingExchangeRate)  select @cReportingRateCalcMethod = convert(char(1),@I_sReportingRateCalcMethod)  select @cReportingDecimalPlaces = convert(char(1),@I_sReportingDecimalPlaces)   CREATE nonclustered index AK1AppliedTEMP  on #AppliedTEMP(ApplyToDocumentNumber, ApplyToDocumentTypeAll)   exec('update  #TransactionTEMP  set  CurrentTrxAmount =  OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + DiscountTakenAmount + WriteoffAmount  - OrigApplyToRndAmt)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00),  OrigCurrentTrxAmount =  case  WHEN (CurrencyID = '''' or CurrencyID = ''' + @I_cFunctionalCurrency + ''' ) THEN  OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + DiscountTakenAmount + WriteoffAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  ELSE  OrigOriginalTrxAmount -   isnull((select  sum(OrigAppliedAmount + OrigDiscTakenAmount + OrigWriteoffAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  end,  RevalDiscAmountAvailAdj = RevalDiscAmountAvailAdj +  (CASE when ' + @cAgingDate + ' <= DiscountDate then  isnull((select  CASE when ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  CASE when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(round((A.Total_Gain_or_Loss_on_Di * ' + @cReportingExchangeRate + '), ' + @cReportingDecimalPlaces + '), 0.00)  else  ISNULL(round((A.Total_Gain_or_Loss_on_Di / ' + @cReportingExchangeRate + '), ' + @cReportingDecimalPlaces + '), 0.00)  end  else  ISNULL(A.Total_Gain_or_Loss_on_Di, 0.00)  end  from  MC020104 A with (NOLOCK)  where   A.CURNCYID = #TransactionTEMP.CurrencyID  and  A.DOCNUMBR = #TransactionTEMP.DocumentNumber  and  A.DOCTYPE  = #TransactionTEMP.RMDocumentTypeAll  and   convert(char(10), A.RVLUDATE, 102) + convert(char(10), A.SEQNUMBR)  = (select max(convert(char(10), B.RVLUDATE, 102) + convert(char(10), B.SEQNUMBR))  from  MC020104 B with (NOLOCK)  where  B.CURNCYID = #TransactionTEMP.CurrencyID  and B.DOCNUMBR = #TransactionTEMP.DocumentNumber  and  B.DOCTYPE  = #TransactionTEMP.RMDocumentTypeAll)), 0.00)  else  0.00  end),  DiscountTakenAmount =   isnull((select  sum(DiscountTakenAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00),  WriteoffAmount =   isnull((select  sum(WriteoffAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00),  OrigDiscTakenAmount =   case  WHEN (CurrencyID = '''' or CurrencyID = ''' + @I_cFunctionalCurrency + ''' ) THEN  isnull((select  sum(DiscountTakenAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  ELSE  isnull((select  sum(OrigDiscTakenAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  end,  OrigWriteoffAmount =   case  WHEN (CurrencyID = '''' or CurrencyID = ''' + @I_cFunctionalCurrency + ''' ) THEN  isnull((select  sum(WriteoffAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  ELSE  isnull((select  sum(OrigWriteoffAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  end,  OrigApplyToRndAmt =  isnull((select  sum(OrigApplyToRndAmt)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00)  where  #TransactionTEMP.RMDocumentTypeAll < 6  and #TransactionTEMP.CustomerType = 0 ')   exec('update  #TransactionTEMP  set  RevalCurrentTrxAmountAdj = RevalCurrentTrxAmountAdj +  isnull((select TOP 1 (CASE when ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  CASE when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(round((A.Total_Gain_or_Loss_on_Cu * ' + @cReportingExchangeRate + '), ' + @cReportingDecimalPlaces + '), 0.00)  else  ISNULL(round((A.Total_Gain_or_Loss_on_Cu / ' + @cReportingExchangeRate + '), ' + @cReportingDecimalPlaces + '), 0.00)  end  else  ISNULL(A.Total_Gain_or_Loss_on_Cu, 0.00)  end)  from  MC020104 A with (NOLOCK)  where  A.CURNCYID = #TransactionTEMP.CurrencyID  and  A.DOCNUMBR = #TransactionTEMP.DocumentNumber  and A.DOCTYPE  = #TransactionTEMP.RMDocumentTypeAll  order by A.RVLUDATE DESC, A.SEQNUMBR DESC),0.00)  where  #TransactionTEMP.RMDocumentTypeAll > 6  and (#TransactionTEMP.Status = 0 or #TransactionTEMP.Status = 1)  and #TransactionTEMP.CustomerType = 0 ')   if @sAgeCrAmts = 0   exec('update  #TransactionTEMP  set  CurrentTrxAmount =  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM20201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM20201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM20201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2  + @vExcludeUnpostedAppldCrDocs + '),0.00) )  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end,   OrigCurrentTrxAmount =  CASE WHEN (CurrencyID <> '''' and CurrencyID <> ''' + @I_cFunctionalCurrency + ''') THEN  -1 *  (OrigCurrentTrxAmount +  isnull((select  sum(B.ActualApplyToAmount)  from  RM20201 B with (NOLOCK) LEFT OUTER JOIN MC020102 C with (NOLOCK)   ON (APFRDCNM = C.DOCNUMBR and APFRDCTY = C.RMDTYPAL)  LEFT OUTER JOIN DYNAMICS.dbo.MC40200 D with (NOLOCK)  ON (B.FROMCURR = D.CURNCYID)  where  #TransactionTEMP.DocumentNumber = B.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = B.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2  + @vExcludeUnpostedAppldCrDocs + '),0.00))  ELSE  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM20201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM20201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM20201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2  + @vExcludeUnpostedAppldCrDocs + '),0.00) )  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end  END,  AgingPeriod = 1   where  #TransactionTEMP.RMDocumentTypeAll > 6  and #TransactionTEMP.Status = 0    and #TransactionTEMP.CustomerType = 0 ')   else  exec('update  #TransactionTEMP  set  CurrentTrxAmount =  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM20201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM20201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM20201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2  + @vExcludeUnpostedAppldCrDocs + '),0.00) )  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end,   OrigCurrentTrxAmount =  CASE WHEN (CurrencyID <> '''' and CurrencyID <> ''' + @I_cFunctionalCurrency + ''') THEN  -1 *  (OrigCurrentTrxAmount +  isnull((select  sum(B.ActualApplyToAmount)  from  RM20201 B with (NOLOCK) LEFT OUTER JOIN MC020102 C with (NOLOCK)   ON (APFRDCNM = C.DOCNUMBR and APFRDCTY = C.RMDTYPAL)  LEFT OUTER JOIN DYNAMICS.dbo.MC40200 D with (NOLOCK)  ON (B.FROMCURR = D.CURNCYID)  where  #TransactionTEMP.DocumentNumber = B.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = B.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2  + @vExcludeUnpostedAppldCrDocs + '),0.00))  ELSE  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM20201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM20201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM20201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2  + @vExcludeUnpostedAppldCrDocs + '),0.00) )  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end  END  where  #TransactionTEMP.RMDocumentTypeAll > 6  and #TransactionTEMP.Status = 0    and #TransactionTEMP.CustomerType = 0 ')    if @sAgeCrAmts = 0   exec('update  #TransactionTEMP  set  CurrentTrxAmount =  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM30201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM30201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM30201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2 + '),0.00))  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end,  OrigCurrentTrxAmount =  CASE WHEN (CurrencyID <> '''' and CurrencyID <> ''' + @I_cFunctionalCurrency + ''') THEN  -1 *  (OrigCurrentTrxAmount +  isnull((select  sum(B.ActualApplyToAmount)  from  RM30201 B LEFT OUTER JOIN MC020102 C with (NOLOCK)   ON (APFRDCNM = C.DOCNUMBR and APFRDCTY = C.RMDTYPAL)  LEFT OUTER JOIN DYNAMICS.dbo.MC40200 D with (NOLOCK)  ON (B.FROMCURR = D.CURNCYID)  where  #TransactionTEMP.DocumentNumber = B.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = B.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2 + '),0.00))  ELSE  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM30201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM30201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM30201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2 + '),0.00))  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end  END,  AgingPeriod = 1   where  #TransactionTEMP.RMDocumentTypeAll > 6  and #TransactionTEMP.Status = 1     and #TransactionTEMP.CustomerType = 0 ')   else   exec('update  #TransactionTEMP  set  CurrentTrxAmount =  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM30201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM30201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM30201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2 + '),0.00))  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end,  OrigCurrentTrxAmount =  CASE WHEN (CurrencyID <> '''' and CurrencyID <> ''' + @I_cFunctionalCurrency + ''') THEN  -1 *  (OrigCurrentTrxAmount +  isnull((select  sum(B.ActualApplyToAmount)  from  RM30201 B LEFT OUTER JOIN MC020102 C with (NOLOCK)   ON (APFRDCNM = C.DOCNUMBR and APFRDCTY = C.RMDTYPAL)  LEFT OUTER JOIN DYNAMICS.dbo.MC40200 D with (NOLOCK)  ON (B.FROMCURR = D.CURNCYID)  where  #TransactionTEMP.DocumentNumber = B.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = B.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2 + '),0.00))  ELSE  case when #TransactionTEMP.VoidStatus = 0 then  -1 *   (CurrentTrxAmount +  RevalCurrentTrxAmountAdj +  isnull((select sum(  case WHEN ' + @cPrintCurrencyIn + ' = 1 and ' + @cMCRegistered + ' = 1 then  case when ' + @cReportingRateCalcMethod + ' = 1 then  ISNULL(ROUND((APPTOAMT * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS * ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  else  ISNULL(ROUND((APPTOAMT / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  +  ISNULL(ROUND((RLGANLOS / ' + @cReportingExchangeRate + '),   ' + @cReportingDecimalPlaces + '),0.00)  end  ELSE  APPTOAMT + RLGANLOS  end )  from  RM30201 with (NOLOCK)  where  #TransactionTEMP.DocumentNumber = RM30201.APFRDCNM  and #TransactionTEMP.RMDocumentTypeAll = RM30201.APFRDCTY'  + @vExcludeApplyDateRange1  + @vExcludeApplyDateRange2 + '),0.00))  else  -1 *   (OriginalTrxAmount +  RevalDocAmountAdj -   isnull((select  sum(AppliedAmount + RealizedGainLossAmount)  from  #AppliedTEMP WITH(INDEX(AK1AppliedTEMP))  where  #TransactionTEMP.DocumentNumber = #AppliedTEMP.ApplyToDocumentNumber  and #TransactionTEMP.RMDocumentTypeAll = #AppliedTEMP.ApplyToDocumentTypeAll),0.00))  end  END  where  #TransactionTEMP.RMDocumentTypeAll > 6  and #TransactionTEMP.Status = 1     and #TransactionTEMP.CustomerType = 0 ')  end   return   
GO
GRANT EXECUTE ON  [dbo].[rmHATBCalculateTotals] TO [DYNGRP]
GO
