SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[icpmValidateMC]  @I_cVoucherNumber char(21) = NULL,  @I_sControlType smallint = NULL,  @I_cOrigICID char(5)  = NULL,  @I_cOrigCurrency char(15) = NULL,  @I_cUserID char(15) = NULL,  @I_dDocumentDate   datetime = NULL,  @O_tPostingError tinyint  = NULL output,  @IO_bICPMMessages binary(4)       = NULL  output,  @IO_bWorkMessages binary(4)       = NULL  output,  @O_iErrorState      int             = NULL  output as  declare  @MS_ITEM09 int,  @tTransaction          tinyint,  @tLoop          tinyint,  @cICID char(5),  @sCompanyID smallint,  @dExchangeDate datetime,  @mExchangeRate numeric(19,7),  @cExchangeTableID char(15),  @dExchangeTime datetime,   @cRateTypeID char(15),  @dTransactionDate datetime,  @iStatus int,  @vProcName varchar(50),   @FALSE tinyint,  @TRUE tinyint,  @sOrigCurrencyIndex smallint,  @sDecimalPlaces smallint,  @bMessages binary(4),  @iError     int,   @vDBName varchar(11),  @cCurrency char(15),  @sROUND   smallint,  @sMCTrxState smallint   select   @bMessages  = 0x00000000,   @O_iErrorState   = 0,  @iError   = 0,  @iStatus  = 0,  @O_tPostingError = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction  end   while (@tLoop is NULL) begin      select @tLoop = 1   if      @I_cVoucherNumber is NULL or  @I_sControlType is NULL or  @I_cOrigICID is NULL or  @I_cOrigCurrency is NULL or  @I_cUserID is NULL or  @I_dDocumentDate   is NULL  begin  select @O_iErrorState = 21003  break  end    select  @MS_ITEM09 = power(2,16),  @FALSE  = 0,   @TRUE   = 1,  @sROUND  = 16   declare   Companycursor  INSENSITIVE   cursor for   select distinct   dist.INTERID,  dist.ICCURRID,  comp.CMPANYID,  dist.EXCHDATE,  dist.XCHGRATE,  dist.EXGTBLID,  dist.TIME1,  dist.RATETPID,  path.DBNAME,  dist.MCTRXSTT  from  PM10100 dist  join  DYNAMICS.dbo.SY01500 comp with (NOLOCK)   on (dist.INTERID = comp.INTERID)  join DYNAMICS.dbo.SY02100 path with (NOLOCK)  on comp.CMPANYID = path.CMPANYID  join DYNAMICS.dbo.SY60100 usracs with (NOLOCK)  on (comp.CMPANYID = usracs.CMPANYID   and usracs.USERID =  @I_cUserID)  where   dist.VCHRNMBR  = @I_cVoucherNumber  and   dist.CNTRLTYP  = @I_sControlType  and  dist.INTERID  <> @I_cOrigICID  and  dist.ICCURRID <> @I_cOrigCurrency  and  dist.DISTTYPE  <> @sROUND  open Companycursor   if @@cursor_rows <>  0  begin     fetch next from  Companycursor  into  @cICID,  @cCurrency,   @sCompanyID,  @dExchangeDate,  @mExchangeRate,  @cExchangeTableID,  @dExchangeTime,  @cRateTypeID,  @vDBName,  @sMCTrxState   while (@@fetch_status <> -1)  begin  select @bMessages = 0x00000000   select @vProcName = rtrim(@vDBName) + '.dbo.glpmcVerifyCurrency'  exec @iStatus = @vProcName   @sCompanyID,  @I_cOrigCurrency,  @dExchangeDate,   @mExchangeRate,  @cExchangeTableID,  @dExchangeTime,   @FALSE,        @FALSE,     @FALSE,      @FALSE,         @cRateTypeID,  @I_dDocumentDate,  @sMCTrxState,  @bMessages output,  @sOrigCurrencyIndex output,  @sDecimalPlaces   output,  @O_iErrorState output    select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  break  end   if @bMessages <> 0x00000000  begin  select   @O_tPostingError  = @TRUE,  @IO_bICPMMessages = (@IO_bICPMMessages | convert(int,@bMessages)),  @IO_bWorkMessages = (@IO_bWorkMessages | @MS_ITEM09)  end    fetch next from  Companycursor  into  @cICID,  @cCurrency,   @sCompanyID,  @dExchangeDate,  @mExchangeRate,  @cExchangeTableID,  @dExchangeTime,  @cRateTypeID,  @vDBName,  @sMCTrxState  end   end    deallocate Companycursor  end   if @iStatus <> 0 or @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)    
GO
GRANT EXECUTE ON  [dbo].[icpmValidateMC] TO [DYNGRP]
GO
