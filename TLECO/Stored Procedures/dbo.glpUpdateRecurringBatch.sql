SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpUpdateRecurringBatch]  @I_iSQLSessionID        int             = NULL,  @I_cBatchSource  char(15)        = NULL,  @I_cBatchNumber  char(15)        = NULL,  @I_sBatchFrequency      smallint        = NULL,  @I_iBatchDays           int             = NULL,  @O_iErrorState          int             = NULL output as  declare  @TRUE                   tinyint,   @DEFAULT_DATE           datetime,  @POSTED                 smallint,  @UNPOSTED               smallint,  @RECURRING_POSTED       smallint,  @REVERSING              smallint,  @PRINT smallint,  @iJournalEntry          int,  @iTempJournalEntry      int,  @dTransactionDate       datetime,  @dReversingDate  datetime,  @sReversing             smallint,  @tTransaction           tinyint,  @nHDRRecurringTrxSeq numeric(19,5),  @sHDRSeries smallint,  @nHdrDTAIndex numeric(19,5),  @sHdrDTASeries smallint,  @cHdrOrigTrxSource char(13),  @tLoop                  tinyint,  @iError                 int,  @iStatus                int,  @dMinDate datetime,  @dTaxDate datetime  select   @O_iErrorState = 0,  @iStatus       = 0  exec @iStatus = smGetMinDate @dMinDate output  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin   select @tLoop = 1   if      @I_iSQLSessionID        is NULL or  @I_cBatchSource  is NULL or  @I_cBatchNumber  is NULL or  @I_sBatchFrequency      is NULL or  @I_iBatchDays           is NULL   begin  select @O_iErrorState = 20542  break  end    select  @TRUE                   = 1,  @UNPOSTED               = 1,  @POSTED                 = 2,  @RECURRING_POSTED       = 4,   @REVERSING              = 1,  @PRINT   = 1,  @DEFAULT_DATE  = @dMinDate   select   @dTransactionDate = @DEFAULT_DATE,  @dReversingDate = @DEFAULT_DATE,  @dTaxDate = @DEFAULT_DATE   declare  RecurringBatchCursor  cursor for select  JRNENTRY,  TRXDATE,  RVRSNGDT,  Tax_Date,  TRXTYPE,  RCTRXSEQ,  SERIES,  DTA_Index,  OrigDTASeries,  ORTRXSRC  from  GL10000 with (NOLOCK)  where  BCHSOURC        = @I_cBatchSource   and    BACHNUMB        = @I_cBatchNumber  and    (PSTGSTUS       = @POSTED  or     PSTGSTUS        = @RECURRING_POSTED)   open RecurringBatchCursor   if @@cursor_rows = 0  begin  select @O_iErrorState = 20759  deallocate RecurringBatchCursor  break  end    fetch next from  RecurringBatchCursor  into  @iJournalEntry,  @dTransactionDate,  @dReversingDate,  @dTaxDate,  @sReversing,  @nHDRRecurringTrxSeq,  @sHDRSeries,  @nHdrDTAIndex,  @sHdrDTASeries,  @cHdrOrigTrxSource   while (@@fetch_status <> -1)  begin  if @@fetch_status = -2  begin   select @O_iErrorState = 20547  break  end  if @dTransactionDate <> @DEFAULT_DATE  begin  exec @iStatus = glpUpdateRecurringDate  @I_sBatchFrequency,  @I_iBatchDays,  @dTransactionDate       output,  @O_iErrorState          output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   end    if @sReversing = @REVERSING and  @dReversingDate <> @DEFAULT_DATE  begin  exec @iStatus = glpUpdateRecurringDate  @I_sBatchFrequency,  @I_iBatchDays,  @dReversingDate output,  @O_iErrorState          output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   end    if @dTaxDate <> @DEFAULT_DATE  begin  exec @iStatus = glpUpdateRecurringDate  @I_sBatchFrequency,  @I_iBatchDays,  @dTaxDate       output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   end    exec @iStatus = dtaUpdateforDateChange  @iJournalEntry,  @nHDRRecurringTrxSeq,  @sHDRSeries,  @nHdrDTAIndex,  @sHdrDTASeries,  @cHdrOrigTrxSource,  @sReversing,  @dTransactionDate,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   update   GL10000  set  TRXDATE   = @dTransactionDate,  RVRSNGDT        = @dReversingDate,  Tax_Date  = @dTaxDate,  GLHDRMSG        = 0x00000000,  GLHDRMS2        = 0x00000000,  PSTGSTUS        = @UNPOSTED,  PRNTSTUS  = @PRINT,  TRXSORCE        = ' ',  RVTRXSRC        = ' '  where  BCHSOURC        = @I_cBatchSource   and BACHNUMB        = @I_cBatchNumber   and JRNENTRY        = @iJournalEntry   if @@rowcount <> 1  begin  select @O_iErrorState = 20492  break   end    update GL10001 set  CRDTAMNT = 0, DEBITAMT = 0, ORCRDAMT = 0, ORDBTAMT = 0  where  JRNENTRY        = @iJournalEntry   and exists(   select *   from SY00500  where  BCHSOURC        = @I_cBatchSource   and BACHNUMB        = @I_cBatchNumber   and ClearRecAmts  = 1)   fetch next from  RecurringBatchCursor  into  @iJournalEntry,  @dTransactionDate,  @dReversingDate,  @dTaxDate,  @sReversing,  @nHDRRecurringTrxSeq,  @sHDRSeries,  @nHdrDTAIndex,  @sHdrDTASeries,  @cHdrOrigTrxSource   end    deallocate RecurringBatchCursor  end   if @iStatus <> 0 or @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction  end else if @tTransaction = 1  commit transaction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glpUpdateRecurringBatch] TO [DYNGRP]
GO
