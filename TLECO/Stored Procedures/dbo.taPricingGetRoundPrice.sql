SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taPricingGetRoundPrice]  @I_vROUNDTO int, @I_vROUNDHOW int, @I_vRNDGAMNT numeric (19,5), @I_vUNITPRICE numeric (19,5) OUTPUT  with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @nCount int,  @cyDivideBy int,  @cyFactorDown numeric (19,5),  @cyFactorUp numeric (19,5),  @cyRemainder numeric (19,5),  @cyTempPriceDown numeric (19,5),  @cyTempPriceUp numeric (19,5),  @cyTempRoundingAmt numeric (19,5),  @cyTempUnitPrice numeric (19,5),   @cyAmtOverLowPriceTemp numeric (19,5),  @cyAmtOverLowPrice numeric (19,5),  @cyAmtUnderHighPrice numeric (19,5),   @cyUnitPrice numeric (19,5),  @cyRNDGAMNT numeric (19,5)  select  @nCount = 0,  @cyDivideBy = 0,  @cyFactorDown = 0,  @cyFactorUp = 0,  @cyRemainder = 0,  @cyTempPriceDown = 0,  @cyTempPriceUp = 0,  @cyTempRoundingAmt = 0,  @cyTempUnitPrice = 0,  @cyAmtOverLowPriceTemp = 0,  @cyAmtOverLowPrice = 0,  @cyAmtUnderHighPrice = 0,  @cyUnitPrice = 0,  @cyRNDGAMNT = 0  if @I_vROUNDTO < 1 or @I_vROUNDTO > 4 or @I_vROUNDHOW < 1 or @I_vROUNDHOW > 2 return  select @cyUnitPrice = @I_vUNITPRICE   if @I_vROUNDHOW = 2 begin   select @cyRNDGAMNT = @I_vRNDGAMNT    select @cyTempUnitPrice = @cyUnitPrice    select @cyTempRoundingAmt = @I_vRNDGAMNT   select @nCount = 0   while (@cyTempRoundingAmt / (power(10,@nCount))) >= 1.0  begin  select @nCount = @nCount + 1  end    select @cyDivideBy = power(10,@nCount)   select @cyFactorUp = round(@cyUnitPrice / @cyDivideBy, 0, 1)  select @cyFactorDown = @cyFactorUp   select @cyRemainder = ((@cyTempUnitPrice / @cyDivideBy) - cast((@cyTempUnitPrice / @cyDivideBy) as int)) * @cyDivideBy   if (@I_vROUNDTO = 2) or (@I_vROUNDTO = 4)   begin  if (@cyRemainder > @cyTempRoundingAmt)   begin  select @cyFactorUp = @cyFactorUp + 1  end  select @cyTempPriceUp = (@cyFactorUp * @cyDivideBy) + @cyTempRoundingAmt;  end   if (@I_vROUNDTO = 3) or (@I_vROUNDTO = 4)   begin   if @cyRemainder < @cyTempRoundingAmt   begin  select @cyFactorDown = @cyFactorDown - 1  if @cyFactorDown < 0  select @cyFactorDown = 0  end  select @cyTempPriceDown = (@cyFactorDown * @cyDivideBy) + @cyTempRoundingAmt  end   if @I_vROUNDTO = 2   select @I_vUNITPRICE = @cyTempPriceUp  else   if @I_vROUNDTO = 3  select @I_vUNITPRICE = @cyTempPriceDown  else   if @I_vROUNDTO = 4   begin  if (@cyUnitPrice - @cyTempPriceDown) < (@cyTempPriceUp - @cyUnitPrice)   select @I_vUNITPRICE = @cyTempPriceDown  else  select @I_vUNITPRICE = @cyTempPriceUp  end end else begin  select @cyTempUnitPrice = @I_vUNITPRICE * 100  select @cyRNDGAMNT = @I_vRNDGAMNT * 100  if @I_vRNDGAMNT = 0   begin  select @I_vUNITPRICE = 0  return  end    if @I_vUNITPRICE = 0   begin  select @I_vUNITPRICE = @I_vRNDGAMNT  return  end    select @cyAmtOverLowPriceTemp = ((@cyTempUnitPrice / @cyRNDGAMNT) - cast((@cyTempUnitPrice / @cyRNDGAMNT) as int)) * @cyRNDGAMNT  select @cyAmtOverLowPrice = @cyAmtOverLowPriceTemp  select @cyAmtOverLowPrice = @cyAmtOverLowPrice/100   if @cyAmtOverLowPrice = 0  begin  return  end    select @cyAmtUnderHighPrice = @I_vRNDGAMNT - @cyAmtOverLowPrice   if @I_vROUNDTO = 4   begin  if @cyAmtOverLowPrice < @cyAmtUnderHighPrice   select @I_vROUNDTO = 3  else  select @I_vROUNDTO = 2  end  if @I_vROUNDTO = 2  begin  select @I_vUNITPRICE = @cyUnitPrice + @cyAmtUnderHighPrice  end  else  if @I_vROUNDTO = 3   begin  if @I_vRNDGAMNT > @cyUnitPrice - @cyAmtOverLowPrice  begin  select @I_vUNITPRICE = @I_vRNDGAMNT  end  else  begin  select @I_vUNITPRICE = @cyUnitPrice - @cyAmtOverLowPrice  end  end end  return   
GO
GRANT EXECUTE ON  [dbo].[taPricingGetRoundPrice] TO [DYNGRP]
GO
