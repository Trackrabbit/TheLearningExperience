SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[aagMLCalcBudgetValues]  @iDebug tinyint = 0,  @oStatus  smallint = 0 out as begin  set nocount on   DECLARE @aaLvlCodeString  NVARCHAR(200),  @aaCodeSequence  INTEGER,  @execCmd   NVARCHAR(4000),  @execInsCmd   NVARCHAR(1000),  @execCurCmd   NVARCHAR(4000),  @execCurCmd1   NVARCHAR(4000),  @sYear      CHAR(20),  @sPer      CHAR(30),   @iYear      INTEGER,  @iPerFrom     INTEGER,  @iPerTo     INTEGER,   @sCodeStr   CHAR(100),  @sCodeStrDummy  CHAR(100),  @sCodeStrDummy2  CHAR(100),  @aaYear     INTEGER,  @aaPeriod     INTEGER,  @sAcctCode   CHAR(100),  @sRepType   CHAR(5),  @iTreeID INTEGER,   @iUseCodes INTEGER,  @iTrxDimID INTEGER,  @sCodeStrFld CHAR(10),  @iTrxDimID1 INTEGER,  @iTrxDimID2 INTEGER,  @iSameOrder INTEGER   if exists(select name from tempdb..sysobjects where name = '##BudCodes' and type = 'U')  drop table ##BudCodes   SELECT @sYear = aaYearFld, @iYear = YEAR1, @iPerFrom = From_Period,  @iPerTo = To_Period, @sPer = aaPerFld from ##Options  select @sYear = substring(@sYear,6,40)   select @sPer = substring(@sPer,6,40)  if @iPerFrom = @iPerTo   begin  select @iPerFrom = 1   end   select @sCodeStr = CodeStr2, @sCodeStrDummy = DummyCodeStr,  @sAcctCode = AcctCode, @sRepType = REPTYPE from ##BudParam   select @sRepType = ltrim(rtrim(@sRepType))  select @sCodeStrDummy2 = REPLACE(@sCodeStrDummy,',',' int,')  select @sCodeStr = rtrim(@sCodeStr)    if dbo.aagMLCancelled() = 1 goto DONE   select @execCmd = 'create table ##BudCodes (Year1 int,Period int,CodeSeq int'   if len(@sAcctCode)<>0 select @execCmd =  @execCmd + ',' + rtrim(@sAcctCode) + ' int'  if len(@sCodeStrDummy2) <> 0   begin  select @execCmd =  @execCmd + ',' + rtrim(@sCodeStrDummy2) + ' int)'  end  else  begin  select @execCmd =  @execCmd + ')'  end   execute sp_executesql @execCmd   if dbo.aagMLCancelled() = 1 goto DONE   select @execCmd = 'insert into ##BudCodes(Year1,Period,CodeSeq'  if len(@sAcctCode)<>0 select @execCmd =  @execCmd + ',' + rtrim(@sAcctCode)   if len(@sCodeStrDummy) <> 0   begin  select @execCmd = @execCmd + ',' + rtrim(@sCodeStrDummy) + ')'   end  else  begin  select @execCmd =  @execCmd + ')'   end  if LEN(@execCmd) = 4000   begin   select @oStatus = -30   return @oStatus   end   select @execCurCmd = 'DECLARE curLvlCd CURSOR FOR'  select @execCurCmd = @execCurCmd   +  ' SELECT YEAR1,aaFiscalPeriod,aaCodeSequence,'    if len(@sAcctCode)<>0   begin  if len(@sCodeStr) <> 0   begin  select @execCurCmd = @execCurCmd   + 'ltrim(str(ACTINDX))+'',''+aaLvlCodeString'   end  else   begin  select @execCurCmd = @execCurCmd   + 'ltrim(str(ACTINDX))'   end  select @execCurCmd = @execCurCmd   + ' from aagMLBudgetAcctBalance '  end  else  begin  select @execCurCmd = @execCurCmd   +  'aaLvlCodeString'   select @execCurCmd = @execCurCmd   + ' from aagMLBudgetNodeBalance '  end    select @execCurCmd = @execCurCmd   +  ' where '  select @execCurCmd = @execCurCmd   +  ' aaBudgetID'  select @execCurCmd = @execCurCmd   +  ' in (select aaBudgetID from AAG00903 where aaBudget in '   select @execCurCmd = @execCurCmd   +  '(select aaBudget from AAG00903 where aaBudgetID in'   select @execCurCmd = @execCurCmd   +  '(select distinct aaBudgetID  from ##ExpCols where aaColumn > 80)))'  select @execCurCmd = @execCurCmd   +  ' and aaBudgetTreeID in'  select @execCurCmd = @execCurCmd   +  ' (select distinct aaBudgetTreeID from AAG00903 where aaBudgetID in'  select @execCurCmd = @execCurCmd   +  ' (select aaBudgetID from AAG00903 where aaBudget in '  select @execCurCmd = @execCurCmd   +  ' (select aaBudget from AAG00903 where aaBudgetID in '  select @execCurCmd = @execCurCmd   +  ' (select distinct aaBudgetID  from ##ExpCols where aaColumn > 80))))'   if len(@sCodeStr) <> 0   begin  select @execCurCmd = @execCurCmd   +  ' and aaTrxDimID = ('   select @execCurCmd1 = 'DECLARE curBudOrder1 CURSOR FOR '  select @execCurCmd1 = @execCurCmd1  +  ' select aaTrxDimID from AAG00400  WHERE  aaTrxDimID IN ( '  select @execCurCmd1 = @execCurCmd1   +  ' select distinct aaTrxDimID from AAG00901 WHERE  aaBudgetTreeID IN '  select @execCurCmd1 = @execCurCmd1   +  ' (select aaBudgetTreeID from AAG00903 where aaBudgetID IN'  select @execCurCmd1 = @execCurCmd1   +  ' (select distinct aaBudgetID from ##ExpCols where aaColumn >80))) ORDER BY aaOrder'   execute sp_executesql  @execCurCmd1   select @execCurCmd1 = 'DECLARE curBudOrder2 CURSOR FOR '  select @execCurCmd1 = @execCurCmd1  +  ' select aaTrxDimID from AAG00400  WHERE  aaTrxDimID IN ( '  select @execCurCmd1 = @execCurCmd1   +  ' select distinct aaTrxDimID from AAG00901 WHERE  aaBudgetTreeID IN '  select @execCurCmd1 = @execCurCmd1   +  ' (select aaBudgetTreeID from AAG00903 where aaBudgetID IN'  select @execCurCmd1 = @execCurCmd1   +  ' (select distinct aaBudgetID from ##ExpCols where aaColumn >80))) ORDER BY aaTrxDimID'   execute sp_executesql  @execCurCmd1  OPEN curBudOrder1  OPEN curBudOrder2  FETCH NEXT FROM curBudOrder1 INTO @iTrxDimID1  FETCH NEXT FROM curBudOrder2 INTO @iTrxDimID2   SELECT @iSameOrder = 1  WHILE @@FETCH_STATUS = 0  BEGIN  IF @iTrxDimID1 <> @iTrxDimID2  begin  SELECT @iSameOrder = 0  break  end  FETCH NEXT FROM curBudOrder1 INTO @iTrxDimID1  FETCH NEXT FROM curBudOrder2 INTO @iTrxDimID2  END   CLOSE curBudOrder1  CLOSE curBudOrder2  DEALLOCATE curBudOrder1  DEALLOCATE curBudOrder2   if @iSameOrder=1  Begin  select @execCurCmd1 = 'DECLARE curBudOrder1 CURSOR FOR '  select @execCurCmd1 = @execCurCmd1  +  ' select aaTrxDimID from AAG00400  WHERE  aaTrxDimID IN ( '  select @execCurCmd1 = @execCurCmd1   +  ' select distinct aaTrxDimID from AAG00901 WHERE  aaBudgetTreeID IN '  select @execCurCmd1 = @execCurCmd1   +  ' (select aaBudgetTreeID from AAG00903 where aaBudgetID IN'  select @execCurCmd1 = @execCurCmd1   +  ' (select distinct aaBudgetID from ##ExpCols where aaColumn >80))) ORDER BY aaOrder'   execute sp_executesql  @execCurCmd1   select @execCurCmd1 = 'DECLARE curBudOrder2 CURSOR FOR '  select @execCurCmd1 = @execCurCmd1   +  ' select aaTrxDimID from AAG00901 WHERE  aaBudgetTreeID IN '  select @execCurCmd1 = @execCurCmd1   +  ' (select aaBudgetTreeID from AAG00903 where aaBudgetID IN'  select @execCurCmd1 = @execCurCmd1   +  ' (select distinct aaBudgetID from ##ExpCols where aaColumn >80)) ORDER BY aaOrder'   execute sp_executesql  @execCurCmd1   OPEN curBudOrder1  OPEN curBudOrder2   FETCH NEXT FROM curBudOrder1 INTO @iTrxDimID1  FETCH NEXT FROM curBudOrder2 INTO @iTrxDimID2   WHILE @@FETCH_STATUS = 0  BEGIN  IF @iTrxDimID1 <> @iTrxDimID2  begin  SELECT @iSameOrder = 0  break  end  FETCH NEXT FROM curBudOrder1 INTO @iTrxDimID1  FETCH NEXT FROM curBudOrder2 INTO @iTrxDimID2  END    CLOSE curBudOrder1  CLOSE curBudOrder2  DEALLOCATE curBudOrder1  DEALLOCATE curBudOrder2  End   IF @iSameOrder = 0   select @execCurCmd = @execCurCmd   +  ' select B.aaTrxDimID from AAG00901 B, ##Col C '  ELSE  select @execCurCmd = @execCurCmd   +  ' select max(B.aaTrxDimID) from AAG00901 B, ##Col C '  select @execCurCmd = @execCurCmd   +  ' where B.aaTrxDimID = C.aaTrxDimID'  select @execCurCmd = @execCurCmd   +  ' and aaBudgetTreeID in'  select @execCurCmd = @execCurCmd   +  ' (select aaBudgetTreeID from AAG00903 where aaBudgetID in'  select @execCurCmd = @execCurCmd   +  ' (select distinct aaBudgetID from ##ExpCols where aaColumn >80))'  select @execCurCmd = @execCurCmd   +  ' and aaColumn > = 16385 and'   IF @iSameOrder = 0   select @execCurCmd = @execCurCmd   +  ' B.aaOrder =(select max(aaOrder) from AAG00901)) '   ELSE   select @execCurCmd = @execCurCmd   +  ' len(rtrim(ltrim(cast(aaSQLCodeCmd as nvarchar(4000))))) <> 0) '  end  else   begin  select @execCurCmd = @execCurCmd   +  ' and aaLevel = 1'  end   select @execCurCmd = @execCurCmd   +  ' and (' + rtrim(@sYear) + ' = ' + ltrim(str((@iYear - 1)))   select @execCurCmd = @execCurCmd   +  ' or ' +  rtrim(@sYear) + ' = ' + ltrim(str(@iYear)) + ') and '  select @execCurCmd = @execCurCmd   +  rtrim(@sPer) +  ' between ' + ltrim(str(@iPerFrom)) + ' and ' + ltrim(str(@iPerTo))  select @execCurCmd = @execCurCmd   +  ' order by'  select @execCurCmd = @execCurCmd   +  ' aaCalYear, aaCalMonth, Balance,aaLvlCodeString,aaBudgetID'    if LEN(@execCurCmd) = 4000   begin   select @oStatus = -30   return @oStatus   end   execute sp_executesql  @execCurCmd  if dbo.aagMLCancelled() = 1 goto DONE   OPEN curLvlCd  FETCH NEXT FROM curLvlCd INTO @aaYear,@aaPeriod,@aaCodeSequence,@aaLvlCodeString  WHILE @@FETCH_STATUS = 0  BEGIN  select @execInsCmd = @execCmd + ' values(' + ltrim(str(@aaYear)) + ',' + ltrim(str(@aaPeriod)) + ',' +  + ltrim(str(@aaCodeSequence)) + ',' + rtrim(@aaLvlCodeString) + ')'   if LEN(@execInsCmd) = 4000   begin   select @oStatus = -30   return @oStatus   end   execute sp_executesql  @execInsCmd   FETCH NEXT FROM curLvlCd INTO @aaYear,@aaPeriod,@aaCodeSequence,@aaLvlCodeString  END  CLOSE curLvlCd  DEALLOCATE curLvlCd   if dbo.aagMLCancelled() = 1 goto DONE   select @execCurCmd =''  select @execCurCmd = 'DECLARE curTreeNd CURSOR FOR'  select @execCurCmd = @execCurCmd   +  ' SELECT aaTreeID,aaUseCodes,aaTrxDimID,'   select @execCurCmd = @execCurCmd   +  'L.aaOrder'  select @execCurCmd = @execCurCmd   +  ' FROM ##Col C , ##Lvl L '  select @execCurCmd = @execCurCmd   +  ' where L.aaColumn=C.aaColumn and'  select @execCurCmd = @execCurCmd   +  ' aaTreeID <> 0 and aaUseCodes = 0'    execute sp_executesql  @execCurCmd  if dbo.aagMLCancelled() = 1 goto DONE    OPEN curTreeNd  FETCH NEXT FROM curTreeNd INTO @iTreeID,@iUseCodes,@iTrxDimID,@sCodeStrFld  WHILE @@FETCH_STATUS = 0  BEGIN  select @execCmd = 'update ##BudCodes set ##BudCodes.L' + ltrim(rtrim(@sCodeStrFld)) + '_codeID= aagMLTreeViewBudget.aaNodeID'  select @execCmd = @execCmd + ' from aagMLTreeViewBudget,##BudCodes where aaTreeID = ' + ltrim(str(@iTreeID))   select @execCmd = @execCmd + ' and aaMstrID = ##BudCodes.L' + ltrim(rtrim(@sCodeStrFld)) + '_codeID'  execute sp_executesql  @execCmd    FETCH NEXT FROM curTreeNd INTO @iTreeID,@iUseCodes,@iTrxDimID,@sCodeStrFld  END  CLOSE curTreeNd  DEALLOCATE curTreeNd   if dbo.aagMLCancelled() = 1 goto DONE    select @execCmd ='insert ##PreCalc(year1, period, debit, credit, balance'   if len(@sAcctCode)<>0   select @execCmd = @execCmd   + ',' + rtrim(@sAcctCode)   if len(@sCodeStr)<>0  select @execCmd = @execCmd +  ',' + ltrim(rtrim(@sCodeStr))   select @execCmd = @execCmd + ',aaBudgetID) '  select @execCmd = @execCmd + 'select distinct BV.' + rtrim(@sYear) + ','   select @execCmd = @execCmd + 'BV.' + rtrim(@sPer) + ',0,0'   if @sRepType = '1'     select @execCmd = @execCmd + ',BV.Balance'  if @sRepType = '2'     select @execCmd = @execCmd + ',BV.QUANTITY'  if @sRepType = '1,2'   select @execCmd = @execCmd + ',(BV.Balance + BV.QUANTITY)'  if @sRepType = '3'   select @execCmd = @execCmd + ',BV.Balance'  if len(@sAcctCode)<>0   select @execCmd = @execCmd + ',' + rtrim(@sAcctCode)    if len(@sCodeStr)<>0  select @execCmd = @execCmd +  ',' + ltrim(rtrim(@sCodeStr))   select @execCmd = @execCmd +  ',' + 'BV.aaBudgetID FROM'   if len(@sAcctCode)<>0   select @execCmd = @execCmd   + ' aagMLBudgetAcctBalance'   else   select @execCmd = @execCmd + ' aagMLBudgetNodeBalance'  select @execCmd = @execCmd + ' BV, ##BudCodes code'   select @execCmd = @execCmd + ' where'  if len(@sCodeStr) <> 0   begin  select @execCmd = @execCmd + ' BV.aaTrxDimID =('   IF @iSameOrder = 0   select @execCmd = @execCmd   +  ' select B.aaTrxDimID from AAG00901 B, ##Col C '  ELSE  select @execCmd = @execCmd   +  ' select max(B.aaTrxDimID) from AAG00901 B, ##Col C '   select @execCmd = @execCmd  +  ' where B.aaTrxDimID = C.aaTrxDimID'  select @execCmd = @execCmd  +  ' and aaBudgetTreeID in'  select @execCmd = @execCmd  +  ' (select aaBudgetTreeID from AAG00903 where aaBudgetID '  select @execCmd = @execCmd  +  ' in (select distinct aaBudgetID from ##ExpCols))'  select @execCmd = @execCmd  +  ' and aaColumn > = 16385 and'  IF @iSameOrder = 0  select @execCmd = @execCmd   +  ' B.aaOrder =(select max(aaOrder) from AAG00901)) and'   ELSE   select @execCmd = @execCmd  +  ' len(rtrim(ltrim(cast(aaSQLCodeCmd as nvarchar(4000))))) <> 0) and'   end   select @execCmd = @execCmd + ' (BV.' + rtrim(@sYear) + ' = ' + ltrim(str((@iYear - 1)))   select @execCmd = @execCmd + ' or BV.' +  rtrim(@sYear) + ' = ' + ltrim(str(@iYear)) + ')'   if len(@sCodeStr) = 0   select @execCurCmd = @execCurCmd   +  ' and BV.aaLevel = 1'   select @execCmd = @execCmd + ' and BV.' + rtrim(@sPer) +  ' between ' + ltrim(str(@iPerFrom)) + ' and ' + ltrim(str(@iPerTo))  select @execCmd = @execCmd + ' and BV.aaBudgetID in '  select @execCmd = @execCmd   +  ' (select aaBudgetID from AAG00903 where aaBudget in '  select @execCmd = @execCmd   +  ' (select aaBudget from AAG00903 where aaBudgetID in '  select @execCmd = @execCmd   +  ' (select distinct aaBudgetID  from ##ExpCols where aaColumn > 80)))'  select @execCmd = @execCmd + ' and BV.aaCodeSequence = code.CodeSeq'  select @execCmd = @execCmd + ' and BV.YEAR1 = code.Year1'  select @execCmd = @execCmd + ' and BV.aaFiscalPeriod = code.Period'  if len(@sAcctCode)<>0   select @execCmd = @execCmd + ' and BV.ACTINDX = code.' + rtrim(@sAcctCode)    select @execCmd = @execCmd + ''   if dbo.aagMLCancelled() = 1 goto DONE  if LEN(@execCmd) = 4000   begin   select @oStatus = -30   return @oStatus   end   execute sp_executesql @execCmd   DONE:  if @iDebug = 1   begin  print ''  print '*******************************************'  print '** aagMLCalcBudgetValues  finished **'  print '******************************************'  print ''  end   set nocount off end    
GO
GRANT EXECUTE ON  [dbo].[aagMLCalcBudgetValues] TO [DYNGRP]
GO
