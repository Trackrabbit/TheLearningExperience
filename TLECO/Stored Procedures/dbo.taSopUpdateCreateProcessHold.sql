SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taSopUpdateCreateProcessHold]  @I_vSOPTYPE smallint,    @I_vSOPNUMBE char(21),     @I_vPRCHLDID char(15),    @I_vDSCRIPTN char(30) = '',   @I_vPASSWORD char(15) = '',   @I_vXFERPHOL tinyint = 0,   @I_vPOSTPHOL tinyint = 0,   @I_vFUFIPHOL tinyint = 0,    @I_vPRINPHOL tinyint = 0,   @I_vHOLDDATE datetime = '',   @I_vUSERID char(15)='',    @I_vTIME1 datetime = '',   @I_vDELETE1 int=0,    @I_vUpdateIfExistsMaster int = 0,  @I_vUpdateSopIfExists int = 0,   @I_vRequesterTrx smallint = 0,   @O_iErrorState int output,   @oErrString varchar(255) output    with encryption as  set transaction isolation level read uncommitted set nocount on  declare  @iStatus int,  @iAddHoldErrString varchar(255),   @iAddHoldErrState int,  @iError int,  @iCustomState int,  @O_oErrorState int  select  @O_iErrorState = 0,  @iStatus = 0,  @O_oErrorState = 0,  @iCustomState = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  if ( @I_vSOPTYPE is NULL or  @I_vSOPNUMBE is NULL or  @I_vHOLDDATE is NULL or  @I_vUSERID is NULL or  @I_vTIME1 is NULL or  @I_vDELETE1 is NULl or  @I_vUpdateIfExistsMaster is NULL or  @I_vUpdateSopIfExists is NULL or  @I_vPRCHLDID is NULL or  @I_vDSCRIPTN is NULL or  @I_vPASSWORD is NULL or  @I_vXFERPHOL is NULL or  @I_vPOSTPHOL is NULL or  @I_vFUFIPHOL is NULL or  @I_vPRINPHOL is NULL  ) begin  select @O_iErrorState = 6000    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  select @I_vSOPNUMBE = UPPER(@I_vSOPNUMBE)  if @I_vHOLDDATE = ''  select @I_vHOLDDATE = convert(varchar(12),getdate())   if @I_vTIME1 = ''  select @I_vTIME1 = '' + substring(convert(varchar(25),getdate()),12,12)  if ( @I_vPRCHLDID = '' ) begin  select @O_iErrorState = 6001    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if ( @I_vSOPNUMBE = '' or  @I_vPRCHLDID = '' or  @I_vSOPTYPE = 0  ) begin  select @O_iErrorState = 88     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if not exists(select 1 from SOP10100 a (nolock) where a.SOPTYPE = @I_vSOPTYPE and a.SOPNUMBE = @I_vSOPNUMBE) begin  select @O_iErrorState = 87     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ( @I_vXFERPHOL > 1 or   @I_vPOSTPHOL > 1 or   @I_vFUFIPHOL > 1 or   @I_vPRINPHOL > 1 )  begin  select @O_iErrorState = 717     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (not exists (select 1 from SOP00100 (nolock) where PRCHLDID = @I_vPRCHLDID ) or @I_vUpdateIfExistsMaster = 1) begin  exec @iStatus = taCreateProcessHold  @I_vPRCHLDID,  @I_vDSCRIPTN,  @I_vPASSWORD,  @I_vXFERPHOL,  @I_vPOSTPHOL,  @I_vFUFIPHOL,  @I_vPRINPHOL,  @I_vHOLDDATE,  @I_vUSERID,  @I_vUpdateIfExistsMaster,  @O_iErrorState = @iAddHoldErrState output,  @oErrString = @iAddHoldErrString output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or ( @iAddHoldErrState <> 0)  begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iAddHoldErrString))  select @O_iErrorState = 6002    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,   @oErrString output,  @O_oErrorState output  end end  if @O_iErrorState <> 0   return (@O_iErrorState)  if (@I_vRequesterTrx=0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='Sales_Transaction',  @I_vINDEX1=@I_vSOPNUMBE,  @I_vINDEX2=@I_vSOPTYPE,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @O_iErrorState = 2787    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if not exists(select 1 from SOP10104 a (nolock) where   a.SOPTYPE = @I_vSOPTYPE and   a.SOPNUMBE = @I_vSOPNUMBE and   a.PRCHLDID = @I_vPRCHLDID) begin  insert into SOP10104 (  SOPTYPE,  SOPNUMBE,  PRCHLDID,  DELETE1,  USERID,  HOLDDATE,  TIME1,  TRXSORCE  )  select  @I_vSOPTYPE,    @I_vSOPNUMBE,    @I_vPRCHLDID,    @I_vDELETE1,    @I_vUSERID,    @I_vHOLDDATE,    @I_vTIME1,    ''     if (@@error <> 0)  begin  select @O_iErrorState = 6003    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end else if (@I_vUpdateSopIfExists > 0) begin  update SOP10104  set  DELETE1 = @I_vDELETE1,  USERID = @I_vUSERID,  HOLDDATE = @I_vHOLDDATE,  TIME1 = @I_vTIME1  where SOPTYPE = @I_vSOPTYPE and  SOPNUMBE = @I_vSOPNUMBE and  PRCHLDID = @I_vPRCHLDID  if (@@error <> 0)  begin  select @O_iErrorState = 6004    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vRequesterTrx=0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE='Sales_Transaction',  @I_vINDEX1=@I_vSOPNUMBE,  @I_vINDEX2=@I_vSOPTYPE,  @I_vINDEX3='',  @I_vINDEX4='',  @I_vINDEX5='',  @I_vINDEX6='',  @I_vINDEX7='',  @I_vINDEX8='',  @I_vINDEX9='',  @I_vINDEX10='',  @I_vINDEX11='',  @I_vINDEX12='',  @I_vINDEX13='',  @I_vINDEX14='',  @I_vINDEX15='',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  begin  select @iStatus = @iError  end  if (@iStatus <> 0) or (@iCustomState <> 0)  begin  select @O_iErrorState = 2788    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taSopUpdateCreateProcessHold] TO [DYNGRP]
GO
