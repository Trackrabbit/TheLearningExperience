SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpPostClearingTransaction]  @I_iSQLSessionID int  = NULL,  @I_iJournalEntry int  = NULL,  @I_cUserID char(15) = NULL,  @I_tPrinting tinyint  = NULL,  @I_tPosting tinyint  = NULL,  @I_tPrintDistributions tinyint  = NULL,  @I_bBatchValid binary(4) = NULL,  @I_cFuncCurrencyID char(15) = NULL,  @I_sFuncCurrencyIndex smallint = NULL,  @I_sFuncDecimalPlaces smallint = NULL,  @I_tMCRegistered tinyint  = NULL,  @I_tMCReport tinyint  = NULL,  @I_sCompanyID smallint = NULL,  @I_cIntercompanyID char(5)  = NULL,  @I_iPostingNumber int  = NULL,  @I_iPeriodPostingNumber int  = NULL,  @I_iPostingNumberHist int  = NULL,  @I_iPeriodPostingNumberHist int  = NULL,  @O_mSequenceLine numeric(19,5) = NULL output,  @O_bLineMessages binary(4) = NULL output,  @O_bLineMessages2 binary(4) = NULL output,  @O_bOffsetMessages binary(4) = NULL output,  @O_bOffsetMessages2 binary(4) = NULL output,  @O_iErrorState int  = NULL output as  declare  @TRUE tinyint,  @FALSE tinyint,  @CLEARING_TRX smallint,  @POST_ACCT smallint,  @UNIT_ACCT smallint,  @POST_ALLOC_ACCT smallint,  @UNIT_ALLOC_ACCT smallint,  @REGULAR_OFFSET smallint,  @ALLOC_SEQ_LINE_CLEARING int,  @GL_TRANSACTION smallint,  @MC_CLEARING_TRANSACTION smallint,  @UNIT_DECIMAL_PLACES smallint,  @OFFSET_ACCOUNT smallint,  @DEFAULT_DATE                   datetime,   @MS_ITEM_1 int,  @MS_ITEM_2 int,  @MS_ITEM_3 int,  @MS_ITEM_13 int,  @MS_ITEM_18 int,  @MS_ITEM_19 int,  @MS_ITEM_20 int,  @iOffsetAccountIndex int,  @iAccountIndex int,  @iTempAccountIndex int,  @iClearingAccountIndex int,  @cDescription char(31),  @tActive tinyint,  @tValidAccountNumber tinyint,  @tTransaction tinyint,  @nAmount numeric(19,5),  @nSequenceLine numeric(19,5),   @nTempSequenceLine numeric(19,5),   @nClearingSequenceLine numeric(19,5),   @nOffsetSequenceLine numeric(19,5),   @tOffset tinyint,  @sAccountType smallint,  @sClearingAccountType smallint,  @sOffsetAccountType smallint,  @sEmptyString smallint,  @sFixedOrVariable smallint,  @sClearingFixedOrVariable smallint,  @sOffsetFixedOrVariable smallint,  @sLoopCounter smallint,  @iError int,  @iStatus int,  @bTempLineMessages binary(4),  @bTempLineMessages2 binary(4),  @tLoop tinyint,  @sBalanceForCalculation smallint,  @sClearingBalForCal smallint,  @sOffsetBalForCal smallint,  @bLineValid binary(4),  @sPostingType smallint,  @sClearingPostingType smallint,  @sOffsetPostingType smallint,  @cOrigCurrencyID char(15),  @sOrigCurrencyIndex smallint,  @sOrigDecimalPlaces smallint,  @nOrigAmount    numeric(19,5),  @nOrigDebit    numeric(19,5),  @nOrigCredit numeric(19,5),  @tVerifyAccountCurrency tinyint,  @nFuncAmount    numeric(19,5),  @nFuncDebit    numeric(19,5),  @nFuncCredit numeric(19,5),  @iClrAccountIndex int,  @tContinue tinyint,  @nFuncTotal numeric(19,5),  @tPosting tinyint,  @tPrinting tinyint,  @sMCTransaction smallint,  @sClearingDecimalPlaces smallint,  @sOffsetDecimalPlaces smallint,   @sUnitDecimalPlaces smallint,  @sFuncCurrencyIndex smallint,  @sTempOrigCurrencyIndex  smallint,  @tMCExists    tinyint,  @tPrintFunctional tinyint,  @cHdrBatchSource char(15),  @cHdrBatchNumber char(15),  @sHdrSeries smallint,  @cHdrAuditTrailCode char(13),  @dHdrTransactionDate datetime,  @sHdrTransactionPeriodID smallint,  @sHdrTransactionYear smallint,  @sHdrTransactionClosingYear smallint,  @tHdrTransactionHistory tinyint,  @sHdrBalanceForCalculation smallint,  @nHdrRecurringTRXSequence numeric(19,5),  @nDenomExchangeRate numeric(15,7),  @sMCTrxState smallint,   @dDocumentDate datetime,  @dMinDate datetime,  @nLedger_ID int  select   @O_bLineMessages = 0x00000000,  @O_bLineMessages2 = 0x00000000,  @O_bOffsetMessages = 0x00000000,  @O_bOffsetMessages2 = 0x00000000,  @O_mSequenceLine = 0.00000,  @O_iErrorState = 0,  @iStatus = 0  exec @iStatus = smGetMinDate @dMinDate output  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if  @I_iSQLSessionID is NULL or  @I_iJournalEntry is NULL or   @I_cUserID is NULL or  @I_tPrinting is NULL or  @I_tPosting is NULL or  @I_tPrintDistributions is NULL or  @I_bBatchValid is NULL or  @I_sCompanyID is NULL or  @I_cFuncCurrencyID is NULL or  @I_sFuncCurrencyIndex is NULL or  @I_sFuncDecimalPlaces is NULL or  @I_tMCRegistered is NULL or  @I_tMCReport is NULL or  @I_cIntercompanyID is NULL or  @I_iPostingNumber is NULL or  @I_iPeriodPostingNumber is NULL or  @I_iPostingNumberHist is NULL or  @I_iPeriodPostingNumberHist is NULL   begin  select @O_iErrorState = 20138  break  end    select  @TRUE    = 1,  @FALSE    = 0,  @CLEARING_TRX   = 2,  @POST_ACCT   = 1,  @UNIT_ACCT   = 2,  @POST_ALLOC_ACCT  = 3,  @UNIT_ALLOC_ACCT  = 4,  @REGULAR_OFFSET   = 1,  @ALLOC_SEQ_LINE_CLEARING = 1,  @GL_TRANSACTION   = 0,  @MC_CLEARING_TRANSACTION = 2,  @UNIT_DECIMAL_PLACES  = 3,  @OFFSET_ACCOUNT   = 5,  @DEFAULT_DATE   = @dMinDate,  @MS_ITEM_1   = power(2,24),  @MS_ITEM_2   = power(2,25),  @MS_ITEM_3   = power(2,26),  @MS_ITEM_13   = power(2,20),  @MS_ITEM_18   = power(2,9),  @MS_ITEM_19   = power(2,10),  @MS_ITEM_20   = power(2,11)   insert  into  #ReportSetup  values(@I_tPrintDistributions,  @I_tMCRegistered,  @I_tMCReport)   select  @cHdrBatchSource  = BatchSource,  @cHdrBatchNumber  = BatchNumber,  @sHdrSeries   = Series,  @cHdrAuditTrailCode  = TRXSource,  @dHdrTransactionDate  = TransactionDate,  @sHdrTransactionPeriodID = TransactionPeriodID,  @sHdrTransactionYear  = TransactionYear,  @sHdrTransactionClosingYear = TransactionClosingYear,  @tHdrTransactionHistory  = TransactionHistory,  @sHdrBalanceForCalculation = BalanceForCalculation,  @nHdrRecurringTRXSequence = RecurringTRXSequence,  @nDenomExchangeRate  = DenomExchangeRate,  @sMCTrxState   = MCTrxState,   @dDocumentDate   = DocumentDate,  @nLedger_ID   = Ledger_ID   from  #TRXHeader  where  JournalEntry = @I_iJournalEntry   if @@rowcount <> 1  begin  select @O_iErrorState = 20890  break  end   declare  ClearingCursor INSENSITIVE  cursor for select  SQNCLINE,  ACTINDX,  OFFINDX,   DSCRIPTN,  GLLINVAL,  ACCTTYPE,  OFFACTYP,  OFFXVAR,  OFFBLCLC,  DECPLACS,  OFFDECPL  from  GL10002 with (NOLOCK)  where  JRNENTRY = @I_iJournalEntry  order by  SQNCLINE   open ClearingCursor   if @@cursor_rows = 0  begin  deallocate ClearingCursor   select @O_bLineMessages = (@O_bLineMessages | @MS_ITEM_1)   if @I_tPosting = @FALSE  begin  exec @iStatus = glpUpdateAllocationRegister  @CLEARING_TRX,     @I_iJournalEntry,  @cHdrBatchSource,  @cHdrBatchNumber,  @I_cUserID,  @FALSE,      0,      0,      0.00000,     0.00000,     @dHdrTransactionDate,  0.0,      ' ',      @FALSE,       @tHdrTransactionHistory,   @FALSE,      @O_bLineMessages,  @I_cFuncCurrencyID,  @I_sFuncCurrencyIndex,  @O_bLineMessages2,  0.00000,     0.00000,     @I_cFuncCurrencyID,  @I_sFuncCurrencyIndex,  '',      @FALSE,      '',  '',  '',  '',  0,  @sMCTrxState,  0.0,      @nDenomExchangeRate,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break  end   else  select @O_iErrorState = 20139  break  end    select  @nSequenceLine   = 0.00000,  @sPostingType   = 0,  @sClearingBalForCal  = 0,  @sClearingPostingType  = 0,  @sClearingFixedOrVariable = 0,  @sOffsetPostingType  = 0   fetch next from   ClearingCursor  into   @nSequenceLine,  @iAccountIndex,  @iOffsetAccountIndex,  @cDescription,  @bLineValid,  @sClearingAccountType,  @sOffsetAccountType,  @sOffsetFixedOrVariable,  @sOffsetBalForCal,  @sClearingDecimalPlaces,  @sOffsetDecimalPlaces   while (@@fetch_status <> -1)  begin     if (@@fetch_status = -2)  begin  select @O_iErrorState = 20139  break  end   if (@iAccountIndex <> 0) or (@iOffsetAccountIndex <> 0)  begin   select    @tPosting = @I_tPosting,  @tPrinting = @I_tPrinting,  @sClearingFixedOrVariable = 0,   @sClearingBalForCal = 0,  @sClearingPostingType = 0,  @sOffsetPostingType = 0,  @O_bLineMessages = 0x00000000,  @O_bLineMessages2 = 0x00000000,  @O_bOffsetMessages = 0x00000000,  @O_bOffsetMessages2 = 0x00000000,  @tVerifyAccountCurrency = @FALSE,  @tMCExists = @FALSE,  @tPrintFunctional = @FALSE,  @tContinue = @TRUE,  @nFuncTotal = 0.00000   select   @O_mSequenceLine = @nSequenceLine,  @nClearingSequenceLine = @nSequenceLine,  @nOffsetSequenceLine = (@nSequenceLine + @ALLOC_SEQ_LINE_CLEARING)   exec @iStatus = glpVerifyClearingAccounts  @iAccountIndex,   @iOffsetAccountIndex,  @I_bBatchValid,  @bLineValid,  @I_cIntercompanyID,  @sClearingAccountType output,  @sClearingFixedOrVariable output,  @sClearingBalForCal output,  @sClearingPostingType output,  @sClearingDecimalPlaces output,  @sOffsetAccountType output,  @sOffsetFixedOrVariable output,  @sOffsetBalForCal output,  @sOffsetPostingType output,  @sOffsetDecimalPlaces output,  @O_bLineMessages output,  @O_bOffsetMessages output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  begin  if @tPosting = @TRUE  break  end   exec @iStatus = glpCalculateAmountToPost  @iAccountIndex,  @sClearingAccountType,  @sHdrTransactionYear,  @sHdrTransactionPeriodID,  @nLedger_ID,  @sHdrBalanceForCalculation,   @nAmount output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   if @nAmount = 0.0  select @O_bLineMessages = (@O_bLineMessages | @MS_ITEM_13)   if @O_bLineMessages <> 0 or   @O_bOffsetMessages <> 0  begin  if @tPosting = @TRUE  begin  select @O_iErrorState = 20140  break  end  end    while @tContinue = @TRUE  begin  if @I_tMCRegistered = @TRUE  begin   if @I_tMCReport = @FALSE  select @tPrinting = @FALSE   if @tPrintFunctional = @TRUE   select   @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,  @cOrigCurrencyID = @I_cFuncCurrencyID,  @sOrigCurrencyIndex = @I_sFuncCurrencyIndex,  @sOrigDecimalPlaces = @I_sFuncDecimalPlaces,  @nClearingSequenceLine = @nSequenceLine,  @nOffsetSequenceLine = (@nSequenceLine + @ALLOC_SEQ_LINE_CLEARING),  @sMCTransaction = @GL_TRANSACTION,  @tVerifyAccountCurrency = @FALSE,  @tPrinting = @I_tPrinting,  @tPosting = @FALSE,  @tPrintFunctional = @FALSE,  @nFuncAmount = @nAmount,  @nOrigAmount = @nAmount,   @tContinue = @FALSE  else  begin  select   @iClearingAccountIndex = @iAccountIndex,  @nOrigAmount = 0.0   while @iClearingAccountIndex is not NULL and  @tPrintFunctional = @FALSE and  @nOrigAmount = 0.0  begin  exec @iStatus = glpmcGetAccountCurrency  @sHdrBalanceForCalculation,  @sHdrTransactionPeriodID,  @sHdrTransactionYear,  @iClearingAccountIndex output,  @tVerifyAccountCurrency output,  @nFuncDebit   output,  @nFuncCredit output,  @nOrigDebit   output,  @nOrigCredit output,  @cOrigCurrencyID output,  @sOrigCurrencyIndex output,  @O_iErrorState output   select @nOrigAmount = (@nOrigDebit - @nOrigCredit),  @nFuncAmount = (@nFuncDebit - @nFuncCredit)   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break  end    if @iStatus <> 0 or @O_iErrorState <> 0  break   if @iClearingAccountIndex is not NULL   select   @tMCExists = @TRUE,  @nFuncTotal = @nFuncTotal + @nFuncAmount,  @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,  @sMCTransaction = @MC_CLEARING_TRANSACTION,  @nClearingSequenceLine = @nClearingSequenceLine + 0.001,  @nOffsetSequenceLine = @nOffsetSequenceLine + 0.001,  @sOrigDecimalPlaces = @I_sFuncDecimalPlaces,  @tContinue = @TRUE  else if @iClearingAccountIndex is NULL  begin  select   @nFuncAmount = @nAmount - @nFuncTotal,  @nOrigAmount = @nAmount - @nFuncTotal,  @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,  @cOrigCurrencyID = @I_cFuncCurrencyID,  @sOrigCurrencyIndex = @I_sFuncCurrencyIndex,  @sOrigDecimalPlaces = @I_sFuncDecimalPlaces,  @sMCTransaction = @GL_TRANSACTION,  @nClearingSequenceLine = @nClearingSequenceLine + 0.001,  @nOffsetSequenceLine = @nOffsetSequenceLine + 0.001,  @tVerifyAccountCurrency = @FALSE,  @tPrinting = @I_tPrinting,  @tContinue = @FALSE   if @nFuncAmount = 0.0 and  @I_tMCReport = @TRUE and  @tMCExists = @TRUE    break   else if @nFuncAmount <> 0.0 and  @I_tMCReport = @FALSE and  @tMCExists = @TRUE and  @I_tPrinting = @TRUE   select   @tPrintFunctional = @TRUE,  @tPrinting = @FALSE,  @tContinue = @TRUE   else if @nFuncAmount = 0.0 and  @I_tMCReport = @FALSE and  @tMCExists = @TRUE and  @I_tPrinting = @TRUE   select   @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,  @cOrigCurrencyID = @I_cFuncCurrencyID,  @sOrigCurrencyIndex = @I_sFuncCurrencyIndex,  @sOrigDecimalPlaces = @I_sFuncDecimalPlaces,  @nClearingSequenceLine = @nSequenceLine,  @nOffsetSequenceLine = (@nSequenceLine + @ALLOC_SEQ_LINE_CLEARING),  @sMCTransaction = @GL_TRANSACTION,  @tVerifyAccountCurrency = @FALSE,  @tPrinting = @I_tPrinting,  @tPosting = @FALSE,  @tPrintFunctional = @FALSE,  @nFuncAmount = @nAmount,  @nOrigAmount = @nAmount,   @tContinue = @FALSE   end    end    end   else  select   @nFuncAmount = @nAmount,  @nOrigAmount = @nAmount,  @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,   @cOrigCurrencyID = @I_cFuncCurrencyID,  @sOrigCurrencyIndex = @I_sFuncCurrencyIndex,  @sOrigDecimalPlaces = @I_sFuncDecimalPlaces,  @sMCTransaction = @GL_TRANSACTION,  @tVerifyAccountCurrency = @FALSE,  @tContinue = @FALSE    select @sLoopCounter = 0   while @sLoopCounter < 2  begin  if @sLoopCounter = 0   begin  select  @iTempAccountIndex = @iAccountIndex,  @sAccountType  = @sClearingAccountType,  @bTempLineMessages = @O_bLineMessages,  @bTempLineMessages2 = @O_bLineMessages2,  @tOffset  = @FALSE,  @sBalanceForCalculation = @sClearingBalForCal,  @sPostingType  = @sClearingPostingType,  @sFixedOrVariable = @sClearingFixedOrVariable,  @sUnitDecimalPlaces = @sClearingDecimalPlaces,  @nTempSequenceLine = @nClearingSequenceLine,  @iClrAccountIndex = 0   end   else      begin  select  @iTempAccountIndex = @iOffsetAccountIndex,  @sAccountType  = @sOffsetAccountType,  @bTempLineMessages = @O_bOffsetMessages,  @tOffset  = @TRUE,  @sBalanceForCalculation = @sOffsetBalForCal,  @sPostingType  = @sOffsetPostingType,  @sFixedOrVariable = @sOffsetFixedOrVariable,  @sUnitDecimalPlaces = @sOffsetDecimalPlaces,  @nTempSequenceLine = @nOffsetSequenceLine,  @iClrAccountIndex = @iAccountIndex   if @I_tMCReport = @TRUE  begin  select @bTempLineMessages2 = 0x00000000  end  else  begin  select @bTempLineMessages2 = @O_bOffsetMessages2  end  end   select @sTempOrigCurrencyIndex = @sOrigCurrencyIndex   if @sAccountType = @UNIT_ACCT   select   @sFuncCurrencyIndex = @sUnitDecimalPlaces,  @sOrigCurrencyIndex = @sUnitDecimalPlaces  else if @sAccountType = @UNIT_ALLOC_ACCT  select   @sFuncCurrencyIndex = @UNIT_DECIMAL_PLACES,  @sOrigCurrencyIndex = @UNIT_DECIMAL_PLACES   select  @nFuncAmount = @nFuncAmount * -1.00000,  @nOrigAmount = @nOrigAmount * -1.00000  if @tVerifyAccountCurrency = @TRUE and  @tOffset = @TRUE  begin  exec @iStatus = glpmcVerifyCurrency  @I_sCompanyID,  @cOrigCurrencyID,  @DEFAULT_DATE,  1.0000,  ' ',  @DEFAULT_DATE,  @FALSE,     @FALSE,      @tPosting,  @TRUE,      ' ',  @DEFAULT_DATE,  @sMCTrxState,  @bTempLineMessages2 output,  @sOrigCurrencyIndex output,  @sOrigDecimalPlaces output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   select @sOrigDecimalPlaces = @sOrigDecimalPlaces - 1   if @sAccountType = @POST_ACCT or  @sAccountType = @UNIT_ACCT    begin  exec @iStatus = glpmcVerifyAccountCurrency  @iTempAccountIndex,  @OFFSET_ACCOUNT,  @cOrigCurrencyID,  @tPosting,  @bTempLineMessages2 output,  @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  if @iStatus <> 0 or @O_iErrorState <> 0  break   end   end    if @nFuncAmount > 0.0  select  @nFuncDebit = @nFuncAmount,  @nFuncCredit = 0.0   else  select  @nFuncDebit = 0.0,  @nFuncCredit = @nFuncAmount * -1  if @nOrigAmount > 0.0  select  @nOrigDebit = @nOrigAmount,  @nOrigCredit = 0.0  else  select  @nOrigDebit = 0.0,  @nOrigCredit = @nOrigAmount * -1   exec @iStatus = glpPostAccount  @I_iSQLSessionID,  @CLEARING_TRX,     @I_iJournalEntry,   @cHdrBatchSource,   @cHdrBatchNumber,  @I_cUserID,   @sHdrSeries,   @iTempAccountIndex,  @sAccountType,  @sFixedOrVariable,  @nFuncDebit,  @nFuncCredit,  @cHdrAuditTrailCode,  @nTempSequenceLine,  @dHdrTransactionDate,  @sHdrTransactionPeriodID,  @nLedger_ID,  @sHdrTransactionYear,  @sHdrTransactionClosingYear,  @tHdrTransactionHistory,  @cDescription,  @I_tPrintDistributions,  @FALSE,       @tPrinting,  @tPosting,   @tOffset,      @FALSE,       @REGULAR_OFFSET,  @nHdrRecurringTRXSequence,  0.0,       @sBalanceForCalculation,  @sPostingType,  @I_cFuncCurrencyID,  @sFuncCurrencyIndex,  @I_sFuncDecimalPlaces,  @I_tMCRegistered,  @I_tMCReport,   @sMCTransaction,  @nOrigDebit,  @nOrigCredit,  @cOrigCurrencyID,  @sOrigCurrencyIndex,  @sOrigDecimalPlaces,  '',     @FALSE,     '',     '',     '',     '',     0,     '',     0,     0,     0,     0.0,     @nDenomExchangeRate,  @sMCTrxState,  @dDocumentDate,   @iClrAccountIndex,  @I_iPostingNumber,  @I_iPeriodPostingNumber,  @I_iPostingNumberHist,  @I_iPeriodPostingNumberHist,  '',     @bTempLineMessages output,  @bTempLineMessages2 output,   @O_iErrorState output   select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError   if @iStatus <> 0 or @O_iErrorState <> 0  break   if @bTempLineMessages <> 0  begin  if @sLoopCounter = 0  select @O_bLineMessages =  (@O_bLineMessages | convert(int, @bTempLineMessages))   else  select @O_bOffsetMessages =  (@O_bOffsetMessages | convert(int, @bTempLineMessages))  end   if @bTempLineMessages2 <> 0  begin  if @sLoopCounter = 0  select @O_bLineMessages2 =  (@O_bLineMessages2 | convert(int, @bTempLineMessages2))    else  select @O_bOffsetMessages2 =  (@O_bOffsetMessages2 | convert(int, @bTempLineMessages2))   end   select   @sLoopCounter = @sLoopCounter + 1,  @sFuncCurrencyIndex = @I_sFuncCurrencyIndex,  @sOrigCurrencyIndex = @sTempOrigCurrencyIndex   end   if @iStatus <> 0 or @O_iErrorState <> 0  begin  if (@tPosting = @TRUE)  begin  if @bTempLineMessages <> 0  begin  if @sLoopCounter = 0  select @O_bLineMessages =  (@O_bLineMessages | convert(int, @bTempLineMessages))   else  select @O_bOffsetMessages =  (@O_bOffsetMessages | convert(int, @bTempLineMessages))  end   if @bTempLineMessages2 <> 0  begin  if @sLoopCounter = 0  select @O_bLineMessages2 =  (@O_bLineMessages2 | convert(int, @bTempLineMessages2))   else  select @O_bOffsetMessages2 =  (@O_bOffsetMessages2 | convert(int, @bTempLineMessages2))   end  break  end  end   end    if @iStatus <> 0 or @O_iErrorState <> 0  break   delete   #DistErrors   where   SQLSessionID = @I_iSQLSessionID  and     AllocationIndex = @iOffsetAccountIndex  end    fetch next from   ClearingCursor  into   @nSequenceLine,  @iAccountIndex,  @iOffsetAccountIndex,  @cDescription,  @bLineValid,  @sClearingAccountType,  @sOffsetAccountType,  @sOffsetFixedOrVariable,  @sOffsetBalForCal,  @sClearingDecimalPlaces,  @sOffsetDecimalPlaces   end   delete #ReportSetup  deallocate ClearingCursor  end   if @iStatus <> 0 or @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[glpPostClearingTransaction] TO [DYNGRP]
GO
