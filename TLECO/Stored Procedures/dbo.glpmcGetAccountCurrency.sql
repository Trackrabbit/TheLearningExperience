SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[glpmcGetAccountCurrency]  @I_sBalanceForCalculation smallint = NULL,  @I_sPeriodID smallint = NULL,  @I_sYear smallint = NULL,  @IO_iAccountIndex int  = NULL  output,  @IO_tVerifyAccountCurrency tinyint  = NULL  output,  @O_mFuncDebit    numeric(19,5) = NULL  output,  @O_mFuncCredit numeric(19,5) = NULL  output,  @O_mOrigDebit    numeric(19,5) = NULL  output,  @O_mOrigCredit numeric(19,5) = NULL  output,  @O_cOrigCurrencyID char(15) = NULL  output,  @O_sOrigCurrencyIndex smallint = NULL  output,  @O_iErrorState int  = NULL  output as  declare  @TRUE                   tinyint,  @FALSE                  tinyint,  @BEGINNING_BALANCE      smallint,  @TRX_PERIOD             smallint,  @YEAR_TO_DATE           smallint,  @iAccountIndex          int,  @iRowCount              int,  @sEndPeriodID           smallint,  @sStartPeriodID smallint,  @tTransaction           tinyint,  @tLoop                  tinyint  select   @O_iErrorState = 0  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end   while (@tLoop is NULL) begin  select @tLoop = 1   if      @I_sBalanceForCalculation is NULL or  @I_sPeriodID is NULL or  @I_sYear is NULL or  @IO_iAccountIndex is NULL or  @IO_tVerifyAccountCurrency is NULL  begin  select @O_iErrorState = 20762  break  end    select  @TRUE = 1,  @FALSE = 0,  @BEGINNING_BALANCE = 0,   @TRX_PERIOD = 1,  @YEAR_TO_DATE = 0  if @IO_tVerifyAccountCurrency = @FALSE  begin  if @I_sBalanceForCalculation = @YEAR_TO_DATE  select  @sStartPeriodID = @BEGINNING_BALANCE,  @sEndPeriodID = @I_sPeriodID  else if @I_sBalanceForCalculation = @TRX_PERIOD  select  @sStartPeriodID = @I_sPeriodID,  @sEndPeriodID = @I_sPeriodID  else  begin  select @O_iErrorState = 20763  break  end    insert  into  #MCAccounts (  AccountIndex,  CurrencyID,  CurrencyIndex,  FunctionalDebit,  FunctionalCredit,  OriginatingDebit,  OriginatingCredit )  select  ACTINDX,  CURNCYID,  CURRNIDX,  case  when sum(FUNCTAMT) > 0.0 then   sum(FUNCTAMT)  else  0.0  end,  case  when sum(FUNCTAMT) <= 0.0 then   -1 * sum(FUNCTAMT)  else  0.0  end,  case  when sum(ORIGAMT) > 0.0 then   sum(ORIGAMT)  else  0.0  end,  case  when sum(ORIGAMT) <= 0.0 then   -1 * sum(ORIGAMT)  else  0.0  end  from  MC00201  where  ACTINDX = @IO_iAccountIndex  and     OPENYEAR = @I_sYear  and     PERIODID >= @sStartPeriodID  and     PERIODID <= @sEndPeriodID  and Ledger_ID = 1  group by  CURNCYID, CURRNIDX, ACTINDX   if @@rowcount = 0  begin  select @IO_iAccountIndex = NULL  break  end    select @IO_tVerifyAccountCurrency = @TRUE  end    set rowcount 1   select   @iAccountIndex = AccountIndex,  @O_cOrigCurrencyID = CurrencyID,   @O_sOrigCurrencyIndex = CurrencyIndex,  @O_mFuncDebit = FunctionalDebit,   @O_mFuncCredit = FunctionalCredit,   @O_mOrigDebit = OriginatingDebit,   @O_mOrigCredit = OriginatingCredit   from  #MCAccounts  where  AccountIndex = @IO_iAccountIndex   select @iRowCount = @@rowcount   set rowcount 0   if @iRowCount = 1  begin  delete  #MCAccounts  where  AccountIndex = @IO_iAccountIndex  and     CurrencyID = @O_cOrigCurrencyID   if @@rowcount <> 1  begin  select @O_iErrorState = 20764  break  end   end   else if @iAccountIndex is NULL  select @IO_iAccountIndex = NULL end   if @O_iErrorState <> 0 begin  if @tTransaction = 1  rollback transaction end else if @tTransaction = 1  commit transaction   return    
GO
GRANT EXECUTE ON  [dbo].[glpmcGetAccountCurrency] TO [DYNGRP]
GO
