SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taIVTransferLineInsert] @I_vIVDOCNBR char(17),     @I_vITEMNMBR char(30),    @I_vReason_Code char(15) = '',   @I_vLNSEQNBR numeric(19,5) = 0,  @I_vTRXQTY numeric(19,5) = 0,   @I_vUOFM char(8) = '',    @I_vUNITCOST numeric(19,5) = 0,  @I_vTRXLOCTN  char(10),    @I_vTRNSTLOC char(10),    @I_vTRFQTYTY smallint = 1,   @I_vTRTQTYTY smallint = 1,   @I_vIVIVINDX int = 0,    @I_vInventoryAccount varchar(75) = '',  @I_vIVIVOFIX int = 0,    @I_vInventoryAccountOffSet varchar(75) = '',  @I_vOverrideQty tinyint = 1,   @I_vRequesterTrx smallint = 0,   @I_vUSRDEFND1  char(50) = '',      @I_vUSRDEFND2  char(50) = '',      @I_vUSRDEFND3  char(50) = '',      @I_vUSRDEFND4  varchar(8000) = '',  @I_vUSRDEFND5  varchar(8000) = '',  @O_iErrorState int output,    @oErrString varchar(255) output    with encryption as  set deadlock_priority low  set transaction isolation level read uncommitted set nocount on  declare  @IVDOCTYP smallint,     @ITEMTYPE tinyint,  @LNSEQNBR int,      @FUNCUR smallint,  @DECPLCUR smallint,     @DECPLQTY smallint,     @TRXQTY numeric (19,5),  @BaseUOFM char(8),  @QTYBSUOM numeric (19,5),   @QtyAvailable numeric (19,5),  @ATRSOVRD smallint,     @iStatus int,  @SERIALOT int,  @UOFM char(8),  @QTYRTRND numeric (19,5),   @QTYINUSE numeric (19,5),   @QTYINSVC numeric (19,5),   @QTYDMGED numeric (19,5),   @SUMSERIAL numeric (19,5),   @UOMSCHDL char(10),  @Location_Segment char(67),  @ACSGFLOC smallint,  @ACCNT_STRING char(100),  @LOFSGMNT int,  @MAXSEG int,  @LOFSGMNTEND int,  @LOFSGMNTALL int,  @NEW_ACCNT_STRING varchar(100),  @ACTINDX int,  @SEQNUMBR int,  @O_oErrorState int,  @iCustomState int,  @iCustomErrString varchar(255),  @iError int,       @itemtransfer tinyint,  @INACTIVEReason tinyint,  @SITEINACTIVE tinyint,  @ITEMSITEINACTIVE tinyint  select  @IVDOCTYP = 3,       @ITEMTYPE = 0,  @LNSEQNBR = 0,  @FUNCUR   = 0,  @DECPLCUR = 0,  @DECPLQTY = 0,  @TRXQTY = 0,  @BaseUOFM = '',  @QTYBSUOM = 0,  @QtyAvailable = 0,  @ATRSOVRD = 0,  @iStatus = 0,  @O_oErrorState = 0,  @SERIALOT = 0,  @UOFM = '',  @QTYRTRND = 0,      @QTYINUSE = 0,      @QTYINSVC = 0,      @QTYDMGED = 0,      @SUMSERIAL = 0,  @UOMSCHDL = '',  @Location_Segment = '',  @ACSGFLOC = 0,  @ACCNT_STRING = '',  @LOFSGMNT = 0,  @MAXSEG = 0,  @LOFSGMNTEND = 0,  @LOFSGMNTALL = 0,  @NEW_ACCNT_STRING = '',  @ACTINDX = 0,  @SEQNUMBR = 0,  @O_iErrorState = 0,     @itemtransfer = 0,  @INACTIVEReason = 0,  @SITEINACTIVE = 0,  @ITEMSITEINACTIVE = 0  if (@oErrString is NULL) begin  select @oErrString = '' end  exec @iStatus = taIVTransferLineInsertPre  @I_vIVDOCNBR output,  @I_vITEMNMBR output,  @I_vReason_Code output,  @I_vLNSEQNBR output,  @I_vTRXQTY output,  @I_vUOFM output,  @I_vUNITCOST output,  @I_vTRXLOCTN output,  @I_vTRNSTLOC output,  @I_vTRFQTYTY output,  @I_vTRTQTYTY output,  @I_vIVIVINDX output,  @I_vInventoryAccount output,  @I_vIVIVOFIX output,  @I_vInventoryAccountOffSet output,  @I_vOverrideQty output,  @I_vRequesterTrx output,  @I_vUSRDEFND1 output,  @I_vUSRDEFND2 output,  @I_vUSRDEFND3 output,  @I_vUSRDEFND4 output,  @I_vUSRDEFND5 output,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus = 0) and (@iError <> 0)) begin  select @iStatus = @iError end if ((@iStatus <> 0) or (@iCustomState <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 1364    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vIVDOCNBR is null or  @I_vITEMNMBR is null or  @I_vLNSEQNBR is null or  @I_vTRXQTY is null or  @I_vUOFM is NULL or  @I_vUNITCOST is null or  @I_vTRXLOCTN is null or  @I_vTRNSTLOC is null or  @I_vTRFQTYTY is null or  @I_vTRTQTYTY is null or  @I_vIVIVINDX is null or  @I_vInventoryAccount is null or  @I_vIVIVOFIX  is null or  @I_vInventoryAccountOffSet is null or  @I_vOverrideQty is null or  @I_vRequesterTrx is null) begin  select @O_iErrorState = 1365    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select  @I_vITEMNMBR = UPPER(@I_vITEMNMBR),  @I_vTRXLOCTN = UPPER(@I_vTRXLOCTN),  @I_vTRNSTLOC = UPPER(@I_vTRNSTLOC),  @I_vIVDOCNBR = UPPER(@I_vIVDOCNBR)  select @DECPLCUR = DECPLCUR,  @DECPLQTY = DECPLQTY,  @UOMSCHDL = UOMSCHDL,  @SERIALOT = ITMTRKOP,  @ITEMTYPE = ITEMTYPE  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR  select @ATRSOVRD = ATRSOVRD from IV40100 (nolock)  select @FUNCUR = DECPLCUR - 1 from DYNAMICS..MC40200 (nolock) where CURNCYID in (select FUNLCURR from MC40000 (nolock))  if (@I_vUOFM <> '') begin  if not exists(select 1 from IV00106 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM)  begin  select @O_iErrorState = 1379     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else if (@I_vUOFM = '') begin  select @I_vUOFM = BASEUOFM from IV40201 (nolock) where UOMSCHDL = @UOMSCHDL   if (@I_vUOFM = '')  begin  select @O_iErrorState = 6346    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  select @QTYBSUOM = QTYBSUOM from IV00106 (nolock) where ITEMNMBR = @I_vITEMNMBR and UOFM = @I_vUOFM select @TRXQTY = round(@I_vTRXQTY * @QTYBSUOM,@DECPLQTY - 1)  if (@I_vUNITCOST = 0) begin  select @I_vUNITCOST =  case  when VCTNMTHD in (4,5) then (STNDCOST * @QTYBSUOM)  else (CURRCOST * @QTYBSUOM)  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR end  if (@I_vITEMNMBR = '') begin  select @O_iErrorState = 1366    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vITEMNMBR <> '') begin  if (not exists(select 1 from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR))  begin  select @O_iErrorState = 2267    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vIVDOCNBR = '') begin  select @O_iErrorState = 1561    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@ITEMTYPE not in (1,2)) begin  select @O_iErrorState = 4735    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRXQTY < 0) begin  select @O_iErrorState = 1368     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRFQTYTY < 1 or @I_vTRFQTYTY > 5) begin  select @O_iErrorState = 1369     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRTQTYTY < 1 or @I_vTRTQTYTY > 5) begin  select @O_iErrorState = 1370     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if ((@I_vTRTQTYTY = @I_vTRFQTYTY) and (@I_vTRXLOCTN = @I_vTRNSTLOC)) begin  select @O_iErrorState = 5018     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vOverrideQty not in (0,1)) begin  select @O_iErrorState = 5017     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vRequesterTrx not in (0,1)) begin  select @O_iErrorState = 3616     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRXLOCTN = '') begin  select @O_iErrorState = 1371    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRNSTLOC = '') begin  select @O_iErrorState = 1372    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRXLOCTN <> '') begin  if not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN)  begin  select @O_iErrorState = 1373    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if (@I_vTRNSTLOC <> '') begin  if not exists(select 1 from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN)  begin  select @O_iErrorState = 1374    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end  if not exists (select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN) begin  select @O_iErrorState = 1375    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if not exists (select 1 from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRNSTLOC) begin  select @O_iErrorState = 1376    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN)  if (@I_vTRXLOCTN <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11831     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vTRXLOCTN <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11832     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  select @SITEINACTIVE = INACTIVE from IV40700 (nolock) where LOCNCODE = @I_vTRNSTLOC select @ITEMSITEINACTIVE = INACTIVE from IV00102 (nolock) where (ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRNSTLOC)  if (@I_vTRNSTLOC <> '' and @SITEINACTIVE = 1) begin  select @O_iErrorState = 11833     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end if (@I_vTRXLOCTN <> '' and @I_vITEMNMBR <> '' and @ITEMSITEINACTIVE = 1) begin  select @O_iErrorState = 11834     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vTRFQTYTY = 1) begin  select @QtyAvailable = QTYONHND - ATYALLOC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN   if (@TRXQTY > @QtyAvailable)  begin  if ((@ATRSOVRD = 1) and (@I_vOverrideQty = 0))  begin  select @I_vTRXQTY = round(@QtyAvailable / @QTYBSUOM, @DECPLQTY - 1, 1)  select @TRXQTY = @QTYBSUOM * @I_vTRXQTY  end  else  if (@ATRSOVRD = 0)  begin  select @O_iErrorState = 1377    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@I_vTRFQTYTY = 2) begin  select @QTYRTRND = QTYRTRND from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN   if (@TRXQTY > @QTYRTRND)  begin  if ((@ATRSOVRD = 1) and (@I_vOverrideQty = 0))  begin  select @I_vTRXQTY = round(@QTYRTRND / @QTYBSUOM, @DECPLQTY - 1, 1)  select @TRXQTY = @QTYBSUOM * @I_vTRXQTY  end  else  if (@ATRSOVRD = 0)  begin  select @O_iErrorState = 1557    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@I_vTRFQTYTY = 3) begin  select @QTYINUSE = QTYINUSE from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN   if(@TRXQTY > @QTYINUSE)  begin  if ((@ATRSOVRD = 1) and (@I_vOverrideQty = 0))  begin  select @I_vTRXQTY = round(@QTYINUSE / @QTYBSUOM, @DECPLQTY - 1, 1)  select @TRXQTY = @QTYBSUOM * @I_vTRXQTY  end  else  if (@ATRSOVRD = 0)  begin  select @O_iErrorState = 1558    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@I_vTRFQTYTY = 4) begin  select @QTYINSVC = QTYINSVC from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN   if (@TRXQTY > @QTYINSVC)  begin  if ((@ATRSOVRD = 1) and (@I_vOverrideQty = 0))  begin  select @I_vTRXQTY = round(@QTYINSVC / @QTYBSUOM, @DECPLQTY - 1, 1)  select @TRXQTY = @QTYBSUOM * @I_vTRXQTY  end  else  if (@ATRSOVRD = 0)  begin  select @O_iErrorState = 1559    exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@I_vTRFQTYTY = 5) begin  select @QTYDMGED = QTYDMGED from IV00102 (nolock) where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN   if (@TRXQTY > @QTYDMGED)  begin  if ((@ATRSOVRD = 1) and (@I_vOverrideQty = 0))  begin  select @I_vTRXQTY = round(@QTYDMGED / @QTYBSUOM, @DECPLQTY - 1, 1)  select @TRXQTY = @QTYBSUOM * @I_vTRXQTY  end   if (@ATRSOVRD = 0)  begin  select @O_iErrorState = 1560   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end end  if (@I_vLNSEQNBR = 0) begin  select @LNSEQNBR = isnull(max(LNSEQNBR),0) + 16384 from IV10001 (nolock) where IVDOCTYP = @IVDOCTYP and IVDOCNBR = @I_vIVDOCNBR end else begin  select @LNSEQNBR = @I_vLNSEQNBR end  if exists (select 1 from IV10001 (nolock) where IVDOCNBR = @I_vIVDOCNBR and LNSEQNBR = @LNSEQNBR and IVDOCTYP = @IVDOCTYP) begin  select @O_iErrorState = 1378   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output end  if (@I_vInventoryAccount <> '') begin  select @I_vIVIVINDX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vInventoryAccount   if (@I_vIVIVINDX = 0)  begin  select @O_iErrorState = 1380     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if (@I_vIVIVINDX <> 0)  begin  if not exists(select 1 from GL00105 (nolock) where ACTINDX = @I_vIVIVINDX)  begin  select @O_iErrorState = 1381     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  select @I_vIVIVINDX =  case @I_vTRFQTYTY  when 1 then IVIVINDX  when 2 then IVRETIDX  when 3 then IVINUSIX  when 4 then IVINSVIX  when 5 then IVDMGIDX  else 0  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   if (@I_vIVIVINDX = 0)  begin  select @SEQNUMBR =  case @I_vTRFQTYTY  when 1 then 100  when 2 then 600  when 3 then 700  when 4 then 800  when 5 then 900  else 0  end   select @I_vIVIVINDX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = @SEQNUMBR   if (@I_vIVIVINDX = 0)  begin  select @O_iErrorState = 1382     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   select @Location_Segment = Location_Segment from IV40700 (nolock) where LOCNCODE = @I_vTRXLOCTN  select @ACSGFLOC = ACSGFLOC from IV40100 (nolock) where SETUPKEY = 1   if ((@I_vIVIVINDX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0))  begin  select  @MAXSEG = max(SGMTNUMB) from SY00300 (nolock)  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @I_vIVIVINDX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT) + (@MAXSEG - 1) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING, 1, @LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING, @LOFSGMNTALL - @LOFSGMNTEND + 1, @LOFSGMNTALL)  end   select @ACTINDX = isnull(ACTINDX, 0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  select @I_vIVIVINDX = @ACTINDX  end  end end  if (@I_vInventoryAccountOffSet <> '') begin  select @I_vIVIVOFIX = ACTINDX from GL00105 (nolock) where ACTNUMST = @I_vInventoryAccountOffSet   if (@I_vIVIVOFIX = 0)  begin  select @O_iErrorState = 1383     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end end else begin  if (@I_vIVIVOFIX <> 0)  begin  if not exists(select 1 from GL00105 (nolock) where ACTINDX = @I_vIVIVOFIX)  begin  select @O_iErrorState = 1384     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end  else  begin  select @I_vIVIVOFIX =  case @I_vTRTQTYTY  when 1 then IVIVINDX  when 2 then IVRETIDX  when 3 then IVINUSIX  when 4 then IVINSVIX  when 5 then IVDMGIDX  else 0  end  from IV00101 (nolock) where ITEMNMBR = @I_vITEMNMBR   if (@I_vIVIVOFIX = 0)  begin  select @SEQNUMBR =  case @I_vTRTQTYTY  when 1 then 100  when 2 then 600  when 3 then 700  when 4 then 800  when 5 then 900  else 0  end   select @I_vIVIVOFIX = ACTINDX from SY01100 (nolock) where SERIES = 5 and SEQNUMBR = @SEQNUMBR   if (@I_vIVIVOFIX = 0)  begin  select @O_iErrorState = 1385     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  end   select @Location_Segment = Location_Segment from IV40700 (nolock) where LOCNCODE = @I_vTRNSTLOC  select @ACSGFLOC = ACSGFLOC from IV40100 (nolock) where SETUPKEY = 1   if ((@I_vIVIVOFIX <> 0) and (@Location_Segment <> '') and (@ACSGFLOC <> 0))  begin  select  @MAXSEG = max(SGMTNUMB) from SY00300 (nolock)  select @ACTINDX = 0,  @ACCNT_STRING = '',  @NEW_ACCNT_STRING = ''   select @ACCNT_STRING = ACTNUMST from GL00105 (nolock) where ACTINDX = @I_vIVIVOFIX   if (@ACSGFLOC < @MAXSEG)  begin  select @LOFSGMNT = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB >= @ACSGFLOC  select @LOFSGMNTEND = sum(LOFSGMNT) + (@MAXSEG - @ACSGFLOC) from SY00300 (nolock) where SGMTNUMB > @ACSGFLOC  end  else  begin  select @LOFSGMNT = sum(LOFSGMNT) from SY00300 (nolock) where SGMTNUMB = @ACSGFLOC  end   select @LOFSGMNTALL = sum(LOFSGMNT) + (@MAXSEG - 1) from SY00300 (nolock)   if (@ACSGFLOC = @MAXSEG)  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING,1,@LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment))  end  else  begin  select @NEW_ACCNT_STRING = substring(@ACCNT_STRING, 1, @LOFSGMNTALL - @LOFSGMNT) + rtrim(ltrim(@Location_Segment)) +  substring(@ACCNT_STRING, @LOFSGMNTALL - @LOFSGMNTEND + 1, @LOFSGMNTALL)  end   select @ACTINDX = isnull(ACTINDX, 0) from GL00105 (nolock) where ACTNUMST = @NEW_ACCNT_STRING   if (@ACTINDX <> 0)  select @I_vIVIVOFIX = @ACTINDX  end  end end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  if (@I_vTRFQTYTY = 1) begin  update IV00102 set ATYALLOC = ATYALLOC + @TRXQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = @I_vTRXLOCTN  if (@@error <> 0)  begin  select @O_iErrorState = 1518     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end   update IV00102 set ATYALLOC = ATYALLOC + @TRXQTY where ITEMNMBR = @I_vITEMNMBR and LOCNCODE = ''  if (@@error <> 0)  begin  select @O_iErrorState = 1519     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@SERIALOT = 2) or (@SERIALOT = 3)) begin  select @SUMSERIAL = isnull(sum(SERLTQTY),0) from IV10002 (nolock) where IVDOCNBR = @I_vIVDOCNBR and ITEMNMBR = @I_vITEMNMBR and IVDOCTYP = @IVDOCTYP and LNSEQNBR = @LNSEQNBR   if (@SUMSERIAL <> @TRXQTY)  begin  select @O_iErrorState = 1562     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if (@I_vReason_Code <> '') begin  if (not exists(select 1 from IV40300 (nolock) where Reason_Code = @I_vReason_Code))  begin  select @O_iErrorState = 11711     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end  select  @INACTIVEReason = INACTIVE,  @itemtransfer = Item_Transfer  from IV40300 (nolock) where Reason_Code = @I_vReason_Code  if (@INACTIVEReason = 1)  begin  select @O_iErrorState = 11712     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  end   if (@itemtransfer = 0)  begin  select @O_iErrorState = 11713     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output   end end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'IV_Transaction',  @I_vINDEX1 = @I_vIVDOCNBR,  @I_vINDEX2 = @IVDOCTYP,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 0,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus = 0) and (@iError <> 0))  begin  select @iStatus = @iError  end  if ((@iStatus <> 0) or (@iCustomState <> 0))  begin  select @O_iErrorState = 2763   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  insert IV10001  (  IVDOCNBR,  IVDOCTYP,  ITEMNMBR,  LNSEQNBR,  UOFM,  QTYBSUOM,  TRXQTY,  UNITCOST,  EXTDCOST,  TRXLOCTN,  TRNSTLOC,  TRFQTYTY,  TRTQTYTY,  IVIVINDX,  IVIVOFIX,  IVWLNMSG,  DECPLCUR,  DECPLQTY,  USAGETYPE,  Reason_Code  ) select  @I_vIVDOCNBR,      @IVDOCTYP,       @I_vITEMNMBR,      @LNSEQNBR,        @I_vUOFM,        @QTYBSUOM,       @I_vTRXQTY,       @I_vUNITCOST,      round(@I_vTRXQTY * @I_vUNITCOST,@FUNCUR),   @I_vTRXLOCTN,      @I_vTRNSTLOC,      @I_vTRFQTYTY,      @I_vTRTQTYTY,      @I_vIVIVINDX,      @I_vIVIVOFIX,      0,           @DECPLCUR,       @DECPLQTY,       0,         @I_vReason_Code     if (@@error <> 0) begin  select @O_iErrorState = 1386     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@O_iErrorState <> 0)  return (@O_iErrorState)  exec @iStatus = taIVTransferLineInsertPost  @I_vIVDOCNBR,  @I_vITEMNMBR,  @I_vReason_Code,  @I_vLNSEQNBR,  @I_vTRXQTY,  @I_vUOFM,  @I_vUNITCOST,  @I_vTRXLOCTN,  @I_vTRNSTLOC,  @I_vTRFQTYTY,  @I_vTRTQTYTY,  @I_vIVIVINDX,  @I_vInventoryAccount,  @I_vIVIVOFIX,  @I_vInventoryAccountOffSet,  @I_vOverrideQty,  @I_vRequesterTrx,  @I_vUSRDEFND1,  @I_vUSRDEFND2,  @I_vUSRDEFND3,  @I_vUSRDEFND4,  @I_vUSRDEFND5,  @O_iErrorState = @iCustomState output,  @oErrString = @iCustomErrString output select @iError = @@error if ((@iStatus = 0) and (@iError <> 0)) begin  select @iStatus = @iError end if ((@iStatus <> 0) or (@iCustomState <> 0)) begin  select @oErrString = rtrim(@oErrString) + ' ' + ltrim(rtrim(@iCustomErrString))  select @O_iErrorState = 1387     exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState) end  if (@I_vRequesterTrx = 0) begin  exec @iStatus = eConnectOutVerify  @I_vDOCTYPE = 'IV_Transaction',  @I_vINDEX1 = @I_vIVDOCNBR,  @I_vINDEX2 = @IVDOCTYP,  @I_vINDEX3 = '',  @I_vINDEX4 = '',  @I_vINDEX5 = '',  @I_vINDEX6 = '',  @I_vINDEX7 = '',  @I_vINDEX8 = '',  @I_vINDEX9 = '',  @I_vINDEX10 = '',  @I_vINDEX11 = '',  @I_vINDEX12 = '',  @I_vINDEX13 = '',  @I_vINDEX14 = '',  @I_vINDEX15 = '',  @I_vDelete = 1,  @O_iErrorState = @iCustomState output  select @iError = @@error  if ((@iStatus = 0) and (@iError <> 0))  begin  select @iStatus = @iError  end  if ((@iStatus <> 0) or (@iCustomState <> 0))  begin  select @O_iErrorState = 2764   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taIVTransferLineInsert] TO [DYNGRP]
GO
