SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE    FUNCTION [dbo].[aagValidatePeriodBudgetAmount_Children] ( @aaFiscalPeriod SMALLINT,  @PeriodDate DATETIME ) RETURNS INT AS BEGIN  DECLARE  @aaBudgetID INTEGER ,@aaCodeSequence INTEGER ,  @ACTINDX INTEGER ,@aaActualPriliminary INTEGER ,  @NETCHNG TINYINT ,@YEAR1 SMALLINT,  @aaRange SMALLINT,@STR30 CHAR(31),  @ParentAmount FLOAT ,@ChildrenTotal FLOAT ,  @NodeAmount FLOAT ,@Result INTEGER ,  @aaBudgetTreeID INTEGER ,@Temp INTEGER ,   @ZAccountValue   FLOAT ,@NodeValue FLOAT ,  @aaAmountQty INTEGER ,@aaAcctType INTEGER ,  @aaLevel    INTEGER ,@aaCodeNext INTEGER ,  @USERID CHAR(15),  @WINTYPE SMALLINT,  @CMPANYID    INTEGER   SELECT @USERID  = SYSTEM_USER  SELECT @WINTYPE = 1   SELECT @CMPANYID = dbo.aagGetCompanyID()   SELECT @aaBudgetID = aaBudgetID ,   @aaCodeSequence = aaCodeSequence ,  @ACTINDX = ACTINDX ,   @aaActualPriliminary = aaActualPriliminary ,  @aaAmountQty = aaAmtQty,  @YEAR1 = AAG00906.YEAR1 ,   @aaRange = aaRange,   @NETCHNG = NETCHNG,   @STR30 = STR30  FROM AAG00906   WHERE USERID = @USERID and   WINTYPE = @WINTYPE   SELECT @aaBudgetTreeID = aaBudgetTreeID   FROM AAG00903   WHERE aaBudgetID = @aaBudgetID   SELECT @aaLevel = aaLevel   FROM AAG00902   WHERE aaCodeSequence = @aaCodeSequence AND   aaBudgetTreeID = @aaBudgetTreeID   SELECT TOP 1 @aaCodeNext = aaCodeSequence   FROM AAG00902   WHERE aaLevel = @aaLevel AND   aaCodeSequence > @aaCodeSequence   IF @ACTINDX <=0 OR LEN(RTRIM(LTRIM(STR(@ACTINDX)))) = 0  BEGIN   SELECT @ZAccountValue = SUM(Balance)   FROM   AAG00905   WHERE  aaBudgetID = @aaBudgetID   AND aaCodeSequence = @aaCodeSequence   AND aaActualPriliminary = @aaActualPriliminary   AND aaFiscalPeriod = @aaFiscalPeriod   AND PERIODDT = @PeriodDate   AND ACTINDX IN (SELECT ACTINDX   FROM   GL00100   WHERE  ACCTTYPE = 1)    SELECT @NodeValue = Balance   FROM   AAG00904   WHERE  aaBudgetID = @aaBudgetID   AND aaCodeSequence = @aaCodeSequence   AND aaActualPriliminary = @aaActualPriliminary   AND aaFiscalPeriod = @aaFiscalPeriod   AND PERIODDT = @PeriodDate    IF @ZAccountValue > @NodeValue   BEGIN   SET @Result = -3    RETURN @Result   END   ELSE   BEGIN   SET @Result = 3   END   SELECT @ZAccountValue = SUM(Balance)   FROM   AAG00905   WHERE  aaBudgetID = @aaBudgetID   AND aaCodeSequence = @aaCodeSequence   AND aaActualPriliminary = @aaActualPriliminary   AND aaFiscalPeriod = @aaFiscalPeriod   AND PERIODDT = @PeriodDate   AND ACTINDX IN (SELECT ACTINDX   FROM   GL00100   WHERE  ACCTTYPE = 2)    SELECT @NodeValue = QUANTITY   FROM   AAG00904   WHERE  aaBudgetID = @aaBudgetID   AND aaCodeSequence = @aaCodeSequence   AND aaActualPriliminary = @aaActualPriliminary   AND aaFiscalPeriod = @aaFiscalPeriod   AND PERIODDT = @PeriodDate    IF @ZAccountValue > @NodeValue   BEGIN   SET @Result = -3  RETURN @Result   END   ELSE   BEGIN   SET @Result = 3   END   SELECT @NodeAmount = CASE @aaAmountQty WHEN 0 THEN Balance WHEN 1 THEN QUANTITY END  FROM AAG00904   WHERE aaCodeSequence = @aaCodeSequence AND  aaBudgetID = @aaBudgetID AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  PERIODDT = @PeriodDate   SELECT @Temp = aaTrxDimCodeID   FROM AAG00902   WHERE aaCodeSequence = @aaCodeSequence   SELECT @ChildrenTotal = CASE @aaAmountQty WHEN 0 THEN SUM(Balance) ELSE SUM(QUANTITY) END   FROM AAG00904   WHERE aaBudgetID = @aaBudgetID AND  aaCodeSequence IN  (SELECT aaCodeSequence   FROM aagGetChildNodes( @aaBudgetTreeID, @aaCodeSequence)) AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate   IF @ChildrenTotal IS NULL  BEGIN  RETURN -13   END  IF @NodeAmount >= @ChildrenTotal  BEGIN  RETURN (4)  END   IF @NodeAmount < @ChildrenTotal  BEGIN  RETURN (-4)   END   END  ELSE IF @aaRange = 0 or LEN(RTRIM(LTRIM(STR(@aaRange)))) = 0  BEGIN  SELECT @aaAcctType = ACCTTYPE   FROM GL00100   WHERE ACTINDX = @ACTINDX    SELECT @ZAccountValue = SUM(Balance)   FROM AAG00905   WHERE aaBudgetID = @aaBudgetID AND  aaCodeSequence = @aaCodeSequence AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate AND   ACTINDX IN  (SELECT ACTINDX FROM GL00100 WHERE ACCTTYPE = @aaAcctType)   SELECT @NodeValue = CASE @aaAcctType WHEN 1 THEN Balance ELSE QUANTITY END   FROM AAG00904   WHERE aaBudgetID = @aaBudgetID AND  aaCodeSequence = @aaCodeSequence AND  aaActualPriliminary = @aaActualPriliminary  AND  aaFiscalPeriod = @aaFiscalPeriod AND   PERIODDT = @PeriodDate   IF @ZAccountValue > @NodeValue  BEGIN  SET @Result = -3  RETURN @Result  END  ELSE  BEGIN  SET @Result = 3  END   SELECT @NodeAmount = ISNULL(SUM(Balance),0)   FROM AAG00905   WHERE aaCodeSequence = @aaCodeSequence AND  aaBudgetID = @aaBudgetID AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  ACTINDX = @ACTINDX AND  PERIODDT = @PeriodDate   SELECT @aaBudgetTreeID = aaBudgetTreeID   FROM AAG00903  WHERE aaBudgetID = @aaBudgetID   SELECT @Temp = aaTrxDimCodeID   FROM AAG00902   WHERE aaCodeSequence = @aaCodeSequence   SELECT @ChildrenTotal = SUM( Balance )   FROM AAG00905   WHERE aaBudgetID = @aaBudgetID AND  aaCodeSequence IN  (SELECT aaCodeSequence FROM aagGetChildNodes( @aaBudgetTreeID, @aaCodeSequence)) AND  aaActualPriliminary = @aaActualPriliminary AND  aaFiscalPeriod = @aaFiscalPeriod AND  ACTINDX = @ACTINDX AND   PERIODDT = @PeriodDate   IF @ChildrenTotal IS NULL  BEGIN  RETURN @Result   END  IF @NodeAmount >= @ChildrenTotal  BEGIN  RETURN (4)  END   IF @NodeAmount < @ChildrenTotal  BEGIN  RETURN (-4)   END    END  ELSE  BEGIN  SET @Result = -1000009  END  RETURN @Result END    
GO
GRANT EXECUTE ON  [dbo].[aagValidatePeriodBudgetAmount_Children] TO [DYNGRP]
GO
