SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
 CREATE FUNCTION [dbo].[mcFuncGLYECCalcNewExchangeRate]  (  @I_nCreditAmount   [numeric](19, 5) = NULL,  @I_nDebitAmount    [numeric](19, 5) = NULL,  @I_nOrigCreditAmount  [numeric](19, 5) = NULL,  @I_nOrigDebitAmount   [numeric](19, 5) = NULL,  @I_cCurrencyID char(15) = NULL,  @I_nRateCalcMethod smallint = NULL,  @I_cFunctional_Currency char(15) = NULL,  @I_cEuroCurrency char(15) = NULL,  @I_tEuroEnabled tinyint  = NULL,  @I_tFunctionalEnabled tinyint  = NULL,  @MC_NOEURO int  = NULL,  @MC_NONDENOM_TO_NONDENOM int  = NULL,  @MC_NONDENOM_TO_EURO int  = NULL,  @MC_NONDENOM_TO_DENOM int  = NULL,  @MC_DENOM_TO_NONDENOM int  = NULL,  @MC_DENOM_TO_DENOM int  = NULL,  @MC_DENOM_TO_EURO int  = NULL,  @MC_EURO_TO_DENOM int  = NULL,  @MC_EURO_TO_NONDENOM int  = NULL  )  RETURNS  [numeric](19, 7) AS  BEGIN   declare @iStatus int,  @FALSE int,  @TRUE int,  @MULTIPLY int,  @DIVIDE int,  @nExchRate   [numeric](22, 7)   select @FALSE = 0,  @TRUE = 1,  @MULTIPLY = 0,  @DIVIDE = 1,  @iStatus = 1,  @nExchRate = 0.0   if @I_nRateCalcMethod = @MULTIPLY  begin    select @nExchRate = case  when (@FALSE = @I_tEuroEnabled) then   case   when (@I_nOrigDebitAmount - @I_nOrigCreditAmount) <> 0.0 then  (@I_nDebitAmount - @I_nCreditAmount)/(@I_nOrigDebitAmount - @I_nOrigCreditAmount)  else   0.0  end  when (@FALSE = @I_tFunctionalEnabled)   and (@FALSE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cEuroCurrency != @I_cCurrencyID)  and (@I_cEuroCurrency != @I_cFunctional_Currency) then  case   when (@I_nOrigDebitAmount - @I_nOrigCreditAmount) <> 0.0 then  (@I_nDebitAmount - @I_nCreditAmount)/(@I_nOrigDebitAmount - @I_nOrigCreditAmount)  else  0.0  end  when (@FALSE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cEuroCurrency = @I_cFunctional_Currency) then  case   when (@I_nOrigDebitAmount - @I_nOrigCreditAmount) <> 0.0 then  (@I_nDebitAmount - @I_nCreditAmount)/(@I_nOrigDebitAmount - @I_nOrigCreditAmount)  else  0.0  end  when (@TRUE = @I_tFunctionalEnabled)   and (@FALSE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cCurrencyID != @I_cEuroCurrency) then  case   when (@I_nOrigDebitAmount - @I_nOrigCreditAmount) <> 0.0 then  cast((@I_nDebitAmount - @I_nCreditAmount) as numeric(19,7))/   round ((@I_nOrigDebitAmount - @I_nOrigCreditAmount)/ isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cFunctional_Currency), 1.0), 5)  else  0.0  end  when (@FALSE = @I_tFunctionalEnabled)   and (@TRUE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cEuroCurrency != @I_cFunctional_Currency) then  case   when (@I_nOrigDebitAmount - @I_nOrigCreditAmount) <> 0.0 then  cast((@I_nDebitAmount - @I_nCreditAmount) as numeric(19,7))/   round ((@I_nOrigDebitAmount - @I_nOrigCreditAmount)/ isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cFunctional_Currency), 1.0), 5)  else  0.0  end  when (@FALSE = @I_tFunctionalEnabled)   and (@TRUE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE )) then  isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cCurrencyID), 0.0)  when (@TRUE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cFunctional_Currency = @I_cEuroCurrency) then  isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cCurrencyID), 0.0)  when (@TRUE = @I_tFunctionalEnabled)   and (@I_cCurrencyID = @I_cEuroCurrency) then  isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cFunctional_Currency), 0.0)  when (@FALSE = @I_tFunctionalEnabled)   and (@I_cFunctional_Currency != @I_cEuroCurrency)  and (@I_cCurrencyID = @I_cEuroCurrency) then  case   when (@I_nOrigDebitAmount - @I_nOrigCreditAmount) <> 0.0 then  (@I_nDebitAmount - @I_nCreditAmount)/(@I_nOrigDebitAmount - @I_nOrigCreditAmount)  else  0.0  end  else   -1  end   end  else if @I_nRateCalcMethod = @DIVIDE  begin  select @nExchRate = case  when (@FALSE = @I_tEuroEnabled) then   case   when (@I_nDebitAmount - @I_nCreditAmount) <> 0.0 then  (@I_nOrigDebitAmount - @I_nOrigCreditAmount)/(@I_nDebitAmount - @I_nCreditAmount)  else  0.0  end  when (@FALSE = @I_tFunctionalEnabled)   and (@FALSE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE )) then  case   when (@I_nDebitAmount - @I_nCreditAmount) <> 0.0 then  (@I_nOrigDebitAmount - @I_nOrigCreditAmount)/(@I_nDebitAmount - @I_nCreditAmount)  else  0.0  end  when (@I_cFunctional_Currency = @I_cEuroCurrency)   and (@FALSE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE )) then  case   when (@I_nDebitAmount - @I_nCreditAmount) <> 0.0 then  (@I_nOrigDebitAmount - @I_nOrigCreditAmount)/(@I_nDebitAmount - @I_nCreditAmount)  else  0.0  end  when (@TRUE = @I_tFunctionalEnabled)   and (@FALSE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cCurrencyID != @I_cEuroCurrency) then  case   when (@I_nDebitAmount - @I_nCreditAmount) <> 0.0 then  round (cast((@I_nOrigDebitAmount - @I_nOrigCreditAmount) as numeric (19,7))/ isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cFunctional_Currency), 1.0), 5)/  (@I_nDebitAmount - @I_nCreditAmount)  else  0.0  end  when (@FALSE = @I_tFunctionalEnabled)   and (@TRUE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cEuroCurrency != @I_cFunctional_Currency) then  case   when (@I_nDebitAmount - @I_nCreditAmount) <> 0.0 then  round (cast((@I_nOrigDebitAmount - @I_nOrigCreditAmount) as numeric (19,7))/ isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cFunctional_Currency), 1.0), 5)/  (@I_nDebitAmount - @I_nCreditAmount)  else  0.0  end  when (@TRUE = @I_tFunctionalEnabled)   and (@TRUE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE )) then  isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cCurrencyID), 0.0)  when (@TRUE = isnull(( select ENABLED from MC60400 where DENOMCURR = @I_cCurrencyID), @FALSE ))   and (@I_cFunctional_Currency = @I_cEuroCurrency) then  isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cCurrencyID), 0.0)  when (@TRUE = @I_tFunctionalEnabled)   and (@I_cCurrencyID = @I_cEuroCurrency) then  isnull((select DENXRATE from DYNAMICS..MC40401 where DENOMCURR = @I_cFunctional_Currency), 0.0)  when (@FALSE = @I_tFunctionalEnabled)   and (@I_cFunctional_Currency != @I_cEuroCurrency)  and (@I_cCurrencyID = @I_cEuroCurrency) then  case   when (@I_nDebitAmount - @I_nCreditAmount) <> 0.0 then  (@I_nOrigDebitAmount - @I_nOrigCreditAmount)/ (@I_nDebitAmount - @I_nCreditAmount)  else  0.0  end  else   -1  end   end   if (@nExchRate > 999999999999.9999999) or (@nExchRate < -999999999999.9999999)  select @nExchRate = 0.0  RETURN(@nExchRate) END   
GO
GRANT EXECUTE ON  [dbo].[mcFuncGLYECCalcNewExchangeRate] TO [DYNGRP]
GO
