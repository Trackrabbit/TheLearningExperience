SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE VIEW [dbo].[GL10100CurrencyTranslationView] AS  select   [GL10100Final].[OPENYEAR],  [GL10100Final].[ACTINDX],  [GL10100Final].[CRDTAMNT],  [GL10100Final].[DEBITAMT],  [GL10100Final].[ORCRDAMT],  [GL10100Final].[ORDBTAMT],  [GL10100Final].[TRXDATE],  [GL10100Final].[DSCRIPTN],  [GL10100Final].[REFRENCE],  [GL10100Final].[CURNCYID],  [GL10100Final].[Original_Exchange_Rate],  [GL10100Final].[JRNENTRY],  [GL10100Final].[TRXSORCE],  [GL10100Final].[SOURCDOC],  [GL10100Final].[ORDOCNUM],  [GL10100Final].[ORTRXSRC],  [GL10100Final].[ORMSTRID],  [GL10100Final].[ORMSTRNM],  [GL10100Final].[ORTRXTYP],  [GL10100Final].[SERIES],  [GL10100Final].[VOIDED],  [GL10100Final].[Ledger_ID],  [GL10100Final].[TranslationCurrencyID],  [GL10100Final].[CurrencyTranslationType],  [GL10100Final].[PERDENDT],  [GL10100Final].[TranslationExchangeRate],  case GL10100Final.CRDTAMNT  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmountExtended([GL10100Final].[RTCLCMTD], 3,   [GL10100Final].[TranslationExchangeRate],  [GL10100Final].[DENXRATE],  [GL10100Final].[MCTRXSTT],  [GL10100Final].[DECPLCUR],   [GL10100Final].[CRDTAMNT])  end as TranslationCreditAmount,  case GL10100Final.DEBITAMT  when 0.0 then  0.0  else  dbo.mcFuncCalculateAmountExtended([GL10100Final].[RTCLCMTD], 3,   [GL10100Final].[TranslationExchangeRate],  [GL10100Final].[DENXRATE],  [GL10100Final].[MCTRXSTT],  [GL10100Final].[DECPLCUR],   [GL10100Final].[DEBITAMT])  end as TranslationDebitAmount,  [GL10100Final].[SequenceNumber],  [GL10100Final].[PERIODID],  [GL10100Final].[CURRNIDX],  [GL10100Final].[DECPLCUR],  [GL10100Final].[RATETPID],  [GL10100Final].[EXGTBLID],  [GL10100Final].[EXCHDATE],  [GL10100Final].[TIME1],  [GL10100Final].[RTCLCMTD],  [GL10100Final].[DENXRATE],  [GL10100Final].[MCTRXSTT],  0 as Adjustment_Transaction from (select distinct  [GL_TRX_WORK].[OPENYEAR],   [GL_TRX_WORK].[ACTINDX],  [GL_TRX_WORK].[CRDTAMNT],  [GL_TRX_WORK].[DEBITAMT],  [GL_TRX_WORK].[ORCRDAMT],  [GL_TRX_WORK].[ORDBTAMT],  [GL_TRX_WORK].[TRXDATE],  [GL_TRX_WORK].[DSCRIPTN],  [GL_TRX_WORK].[REFRENCE],  [GL_TRX_WORK].[CURNCYID],  [GL_TRX_WORK].[XCHGRATE] as Original_Exchange_Rate,   [GL_TRX_WORK].[JRNENTRY],  [GL_TRX_WORK].[TRXSORCE],  [GL_TRX_WORK].[SOURCDOC],  [GL_TRX_WORK].[ORDOCNUM],  [GL_TRX_WORK].[ORTRXSRC],  [GL_TRX_WORK].[ORMSTRID],  [GL_TRX_WORK].[ORMSTRNM],  [GL_TRX_WORK].[ORTRXTYP],  [GL_TRX_WORK].[SERIES],  [GL_TRX_WORK].[VOIDED],  [GL_TRX_WORK].[Ledger_ID],  [GL_TRX_WORK].[TranslationCurrencyID],  [GL_TRX_WORK].[CurrencyTranslationType],  [GL_TRX_WORK].[PERDENDT],  F.XCHGRATE as TranslationExchangeRate,  [GL_TRX_WORK].[SQNCLINE] as SequenceNumber,  [GL_TRX_WORK].[PERIODID],  E.[CURRNIDX],  (E.[DECPLCUR]-1) as DECPLCUR,  [GL_TRX_WORK].[RATETPID],  [GL_TRX_WORK].[EXGTBLID],  F.[EXCHDATE],  F.[TIME1],  D.[RTCLCMTD],  dbo.mcFuncGetDenExchRate(GL_TRX_WORK.TranslationCurrencyID,D.RTCLCMTD) as DENXRATE,  [GL_TRX_WORK].[MCTRXSTT] from DYNAMICS..MC40200 E, DYNAMICS..MC40300 D cross apply  (select a.OPENYEAR, a.ACTINDX,   a.CRDTAMNT,  a.DEBITAMT,  a.ORCRDAMT,  a.ORDBTAMT,  a.TRXDATE, a.DSCRIPTN,  a.REFRENCE, a.CURNCYID, 0 as XCHGRATE, a.JRNENTRY,   a.TRXSORCE, a.SOURCDOC, '' as ORDOCNUM, '' as ORTRXSRC,  '' as ORMSTRID, '' as ORMSTRNM, 0 as ORTRXTYP, 2 as SERIES,  a.VOIDED, 1 as Ledger_ID, b.CURNCYID as TranslationCurrencyID, a.CurrencyTranslationType,  a.PERDENDT,  a.SQNCLINE, a.PERIODID,   EXGTBLID=  case a.CurrencyTranslationType  when 1 then b.AverageExchangeTableID  when 3 then b.HistoricalExchgTableID  end,  dbo.mcFuncGetMCTrxState(b.CURNCYID) as MCTRXSTT,  '' as RATETPID, a.EXCHDATE, a.TIME1,  case a.CurrencyTranslationType  when 1 then (SELECT CASE AVGCLMD WHEN 1 THEN a.PERDENDT ELSE (DATEADD(dd, -DAY(DATEADD(m,1,a.TRXDATE)), DATEADD(m,1,a.TRXDATE)))END AS A FROM MC40000)  when 3 then a.TRXDATE  end as ExhangeRateDate  from (select x.OPENYEAR, y.ACTINDX,   CRDTAMNT = case when y.TRXAMNT<0 then abs(y.TRXAMNT) else 0.0 end,  DEBITAMT = case when y.TRXAMNT>0 then y.TRXAMNT else 0.0 end,  ORCRDAMT = case when y.TRXAMNT<0 then abs(y.TRXAMNT) else 0.0 end,  ORDBTAMT = case when y.TRXAMNT>0 then y.TRXAMNT else 0.0 end,  x.TRXDATE, y.DSCRIPTN,  x.REFRENCE, x.CURNCYID, 0 as XCHGRATE, x.JRNENTRY,   x.TRXSORCE, x.SOURCDOC,  x.VOIDED, z.CurrencyTranslationType,  dbo.glFuncGetPeriodEndDate(x.OPENYEAR,2,dbo.glFuncGetPeriodID(x.TRXDATE,x.OPENYEAR,2)) as PERDENDT,  x.SQNCLINE, dbo.glFuncGetPeriodID(x.TRXDATE,x.OPENYEAR,2) as PERIODID,   dbo.glFuncGetMinDate() as EXCHDATE, dbo.glFuncGetMinDate() as TIME1  from GL10100 x, GL10101 y, MC00200 z   where x.BSNSFMID=y.BSNSFMID and x.JRNENTRY=y.JRNENTRY and x.PERIODID<>0 and z.CurrencyTranslationType <> 2   and y.ACTINDX=z.ACTINDX and z.CURNCYID='') a, MC40600 b   ) GL_TRX_WORK  cross apply (select top 1 * from dbo.mcFuncGetExchangeRateTable(GL_TRX_WORK.ExhangeRateDate, GL_TRX_WORK.EXGTBLID, D.TRXDTDEF, D.DATELMTS,D.PRVDSLMT,D.Base_Exchange_Rate_On,GL_TRX_WORK.MCTRXSTT,GL_TRX_WORK.CurrencyTranslationType) order by EXCHDATE, TIME1 desc) F  where GL_TRX_WORK.EXGTBLID = D.EXGTBLID and D.CURNCYID=E.CURNCYID) GL10100Final    
GO
GRANT SELECT ON  [dbo].[GL10100CurrencyTranslationView] TO [DYNGRP]
GO
GRANT INSERT ON  [dbo].[GL10100CurrencyTranslationView] TO [DYNGRP]
GO
GRANT DELETE ON  [dbo].[GL10100CurrencyTranslationView] TO [DYNGRP]
GO
GRANT UPDATE ON  [dbo].[GL10100CurrencyTranslationView] TO [DYNGRP]
GO
