SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 CREATE procedure [dbo].[WDC_Security_ResetCacheStateParent] (   @pNodeImage smallint = 0,   @pNodeData int = 0,   @pEntityID int = 0,   @O_iErrorState int = NULL output)   AS SET NOCOUNT ON   declare @iNODEWINDOW smallint, @iNODEREPORT smallint, @iNODETABLE smallint, @iNODEREPORTMOD smallint  select @iNODEWINDOW = 10, @iNODEREPORT = 20, @iNODETABLE = 21, @iNODEREPORTMOD = 33  declare @iNodeImageParent1 smallint  declare @iNodeDataParent1 int  declare @iNodeImageParent2 smallint  declare @iNodeDataParent2 int  declare @iNodeImageParent3 smallint  declare @iNodeDataParent3 int  declare @iLoopEntityID int  declare @iLoopNodeImage smallint  declare @iLoopNodeData int  declare @iRetVal int, @tTransaction tinyint, @iErrorState int  select @O_iErrorState = 0, @iErrorState = 0  if @@trancount = 0 begin   select @tTransaction = 1 begin transaction  end  if @pNodeImage = 0 and @pNodeData = 0 begin   DECLARE cEntityList cursor for   select WDC_Entity_ID, Node_Image_Parent1, Node_Data_Parent1, 0 as Node_Image_Parent2, 0 as Node_Data_Parent2, 0 as Node_Image_Parent3, 0 as Node_Data_Parent3 from DYNAMICS.dbo.WDC51101   where ACTIVE = 1 and Node_Image_Parent1 <> 0 and Node_Data_Parent1 <> 0 and (@pEntityID = 0 or (WDC_Entity_ID = @pEntityID))   group by WDC_Entity_ID, Node_Image_Parent1, Node_Data_Parent1   union   select WDC_Entity_ID, 0 as Node_Image_Parent1, 0 as Node_Data_Parent1, Node_Image_Parent2, Node_Data_Parent2, 0 as Node_Image_Parent3, 0 as Node_Data_Parent3 from DYNAMICS.dbo.WDC51101   where ACTIVE = 1 and Node_Image_Parent2 <> 0 and Node_Data_Parent2 <> 0 and (@pEntityID = 0 or (WDC_Entity_ID = @pEntityID))   group by WDC_Entity_ID, Node_Image_Parent2, Node_Data_Parent2   union   select WDC_Entity_ID, 0 as Node_Image_Parent1, 0 as Node_Data_Parent1, 0 as Node_Image_Parent2, 0 as Node_Data_Parent2, Node_Image_Parent3, Node_Data_Parent3 from DYNAMICS.dbo.WDC51101   where ACTIVE = 1 and Node_Image_Parent3 <> 0 and Node_Data_Parent3 <> 0 and (@pEntityID = 0 or (WDC_Entity_ID = @pEntityID))   group by WDC_Entity_ID, Node_Image_Parent3, Node_Data_Parent3   open cEntityList   fetch next from cEntityList into @iLoopEntityID, @iNodeImageParent1, @iNodeDataParent1, @iNodeImageParent2, @iNodeDataParent2, @iNodeImageParent3, @iNodeDataParent3   while @@FETCH_STATUS = 0 begin   if @iNodeImageParent1 <> 0 or @iNodeDataParent1 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent1, @pNodeImage = @iNodeImageParent1, @pBranch = 1, @pEntityID = @iLoopEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   if @iNodeImageParent2 <> @iNodeImageParent1 or @iNodeDataParent2 <> @iNodeDataParent1 begin   if @iNodeImageParent2 <> 0 or @iNodeDataParent2 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent2, @pNodeImage = @iNodeImageParent2, @pBranch = 2, @pEntityID = @iLoopEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   end   if @iNodeImageParent2 <> @iNodeImageParent3 or @iNodeDataParent2 <> @iNodeDataParent3 begin   if @iNodeImageParent3 <> 0 or @iNodeDataParent3 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent3, @pNodeImage = @iNodeImageParent3, @pBranch = 3, @pEntityID = @iLoopEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   end   fetch next from cEntityList into @iLoopEntityID, @iNodeImageParent1, @iNodeDataParent1, @iNodeImageParent2, @iNodeDataParent2, @iNodeImageParent3, @iNodeDataParent3   end    close cEntityList   deallocate cEntityList   UPDATE DYNAMICS.dbo.WDC51101 set ACTIVE = 0 where ACTIVE = 1 and (@pEntityID = 0 or (WDC_Entity_ID = @pEntityID))   if @@ERROR <> 0 begin   if @tTransaction = 1  rollback transaction   select @O_iErrorState = 50201  return   end  end  else begin   if @pEntityID = 0 begin   DECLARE cEntityList cursor for   select WDC_Entity_ID from DYNAMICS.dbo.WDC51100 where ACTIVE = 1   open cEntityList   fetch next from cEntityList into @iLoopEntityID   while @@FETCH_STATUS = 0 begin   SELECT top 1 @iNodeImageParent1=Node_Image_Parent1,@iNodeDataParent1=Node_Data_Parent1,@iNodeImageParent2=Node_Image_Parent2,@iNodeDataParent2=Node_Data_Parent2,@iNodeImageParent3=Node_Image_Parent3,@iNodeDataParent3=Node_Data_Parent3   from DYNAMICS.dbo.WDC51101 where Node_Image = @pNodeImage and Node_Data = @pNodeData and WDC_Entity_ID = @iLoopEntityID   if @@ERROR <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = 50202  return   end   if @iNodeImageParent1 <> 0 or @iNodeDataParent1 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent1, @pNodeImage = @iNodeImageParent1, @pBranch = 1, @pEntityID = @iLoopEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   if @iNodeImageParent2 <> @iNodeImageParent1 or @iNodeDataParent2 <> @iNodeDataParent1 begin   if @iNodeImageParent2 <> 0 or @iNodeDataParent2 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent2, @pNodeImage = @iNodeImageParent2, @pBranch = 2, @pEntityID = @iLoopEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   end   if @iNodeImageParent2 <> @iNodeImageParent3 or @iNodeDataParent2 <> @iNodeDataParent3 begin   if @iNodeImageParent3 <> 0 or @iNodeDataParent3 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent3, @pNodeImage = @iNodeImageParent3, @pBranch = 3, @pEntityID = @iLoopEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   end   UPDATE DYNAMICS.dbo.WDC51101 set ACTIVE = 0 where ACTIVE = 1 and Node_Image = @pNodeImage and Node_Data = @pNodeData and WDC_Entity_ID = @iLoopEntityID   if @@ERROR <> 0 begin   close cEntityList   deallocate cEntityList   if @tTransaction = 1  rollback transaction   select @O_iErrorState = 50203  return   end   fetch next from cEntityList into @iLoopEntityID   end    close cEntityList   deallocate cEntityList   end   else begin   SELECT top 1 @iNodeImageParent1=Node_Image_Parent1,@iNodeDataParent1=Node_Data_Parent1,@iNodeImageParent2=Node_Image_Parent2,@iNodeDataParent2=Node_Data_Parent2,@iNodeImageParent3=Node_Image_Parent3,@iNodeDataParent3=Node_Data_Parent3   from DYNAMICS.dbo.WDC51101 where Node_Image = @pNodeImage and Node_Data = @pNodeData and WDC_Entity_ID = @pEntityID   if @@ERROR <> 0 begin   if @tTransaction = 1  rollback transaction   select @O_iErrorState = 50204  return   end   if @iNodeImageParent1 <> 0 or @iNodeDataParent1 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent1, @pNodeImage = @iNodeImageParent1, @pBranch = 1, @pEntityID = @pEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   if @iNodeImageParent2 <> @iNodeImageParent1 or @iNodeDataParent2 <> @iNodeDataParent1 begin   if @iNodeImageParent2 <> 0 or @iNodeDataParent2 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent2, @pNodeImage = @iNodeImageParent2, @pBranch = 2, @pEntityID = @pEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   end   if @iNodeImageParent2 <> @iNodeImageParent3 or @iNodeDataParent2 <> @iNodeDataParent3 begin   if @iNodeImageParent3 <> 0 or @iNodeDataParent3 <> 0 begin   exec @iRetVal = DYNAMICS.dbo.WDC_Security_RippleCacheState @pNodeData = @iNodeDataParent3, @pNodeImage = @iNodeImageParent3, @pBranch = 3, @pEntityID = @pEntityID, @O_iErrorState = @iErrorState   if @iRetVal <> 0 or @iErrorState <> 0 begin   if @tTransaction = 1  rollback transaction   select @O_iErrorState = @iErrorState  return   end   end   end   UPDATE DYNAMICS.dbo.WDC51101 set ACTIVE = 0 where ACTIVE = 1 and Node_Image = @pNodeImage and Node_Data = @pNodeData and WDC_Entity_ID = @pEntityID   if @@ERROR <> 0 begin   if @tTransaction = 1  rollback transaction   select @O_iErrorState = 50205  return   end   end  end  if @tTransaction = 1 commit transaction  return     
GO
GRANT EXECUTE ON  [dbo].[WDC_Security_ResetCacheStateParent] TO [DYNGRP]
GO
