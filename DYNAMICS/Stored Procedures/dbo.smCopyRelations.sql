SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[smCopyRelations]   @I_iFromRelID int   = NULL,  @I_iToRelID int   = NULL,  @I_tReplace smallint = NULL,  @O_SQL_Error_State int   = NULL output as  declare   @iRowCount int,  @tTransaction tinyint,  @cString varchar(30),  @cToRelString varchar(30),  @cToSubRelString varchar(30),  @iToParentRelID  int,  @iToRootEntityID  int,  @iLevel int,  @iEntityID int,  @iEndPosition int,  @iRelOffset int,  @ORGMAXLEVEL int,  @ORGENTITYSTRLEN int,  @iStatus int,  @cFiltername   varchar(255),  @cPoststring   varchar(255),  @iLoop     int,  @cLargeString    varchar(255)  select @O_SQL_Error_State = 0  select @iLoop = 1  select @cPoststring = ' where RELID IN (select RELID from #RELTOREMOVE)'  create table #RELTOREMOVE(  RELID int not null)  if @I_iFromRelID is NULL or  @I_iToRelID is NULL or  @I_tReplace is NULL begin  select @O_SQL_Error_State = 20927  return  end   exec @iStatus = smGetConstantInt   'ORGMAXLEVEL',   @ORGMAXLEVEL output,   @O_SQL_Error_State output  if @O_SQL_Error_State <> 0 or @iStatus <> 0  return @iStatus  exec @iStatus = smGetConstantInt   'ORGENTITYSTRLEN',   @ORGENTITYSTRLEN output,   @O_SQL_Error_State output  if @O_SQL_Error_State <> 0 or @iStatus <> 0  return @iStatus  select   @cString = RELSTRNG from  ORG00100 where  RELID = @I_iFromRelID  select   @iLevel = ENTYLVL from  ORG00100 r, ORG40100 e where  r.RELID = @I_iFromRelID and r.ENTITYID = e.ENTITYID  select @iEndPosition = @iLevel * 6  select @cString = substring(@cString, 1, @iEndPosition)  insert into #Relations(  RELID,  PARNTRLTID,  ENTYLVL,  ENTITYID,  RELSTRNG) select  0,  0,  e.ENTYLVL,  e.ENTITYID,  r.RELSTRNG from  ORG40100 e,   ORG00100 r where  e.ENTITYID = r.ENTITYID and r.RELSTRNG like @cString + '%'  select  @iToParentRelID = PARNTRLTID,  @iToRootEntityID = ENTITYID,  @cToRelString = RELSTRNG from  ORG00100 where  RELID = @I_iToRelID  update #Relations  set   RELID = @I_iToRelID,  PARNTRLTID = @iToParentRelID,  ENTITYID = @iToRootEntityID  where  ENTYLVL = @iLevel  select @cToSubRelString = substring(@cToRelString, 1, @iEndPosition)  update #Relations  set RELSTRNG = @cToSubRelString + substring(RELSTRNG, @iEndPosition+1, 24-@iEndPosition)  update #Relations  set RELID = ORG00100.RELID,  PARNTRLTID = ORG00100.PARNTRLTID from  ORG00100 where  #Relations.RELSTRNG = ORG00100.RELSTRNG  insert into #RelIDs select  RELSTRNG from  #Relations where  RELID = 0  select @iRelOffset = isnull((max(RELID)),0) from ORG00100  update   #Relations set   RELID = #RelIDs.DEX_ROW_ID + @iRelOffset from  #RelIDs where   #Relations.RELSTRNG = #RelIDs.RELSTRNG  while @iLevel <= @ORGMAXLEVEL begin  if @iLevel = 1  select @iEndPosition = 1  else  select @iEndPosition = (@iLevel - 2)*6 + 1   update a  set a.PARNTRLTID = b.RELID  from  #Relations a, #Relations b  where   b.ENTITYID = convert(int, substring(a.RELSTRNG, @iEndPosition, @ORGENTITYSTRLEN))  and  a.ENTYLVL = @iLevel   select @iLevel = @iLevel + 1 end  if @@trancount = 0 begin  select @tTransaction = 1  begin transaction end  if @I_tReplace = 0  delete   #Relations  where  RELSTRNG in (select RELSTRNG from ORG00100)      else begin  insert into   #RELTOREMOVE (RELID)  select   RELID   from   ORG00100  where  RELSTRNG like @cToSubRelString + '%'  and RELSTRNG <> @cToRelString   DECLARE c_cursor CURSOR for  select 'delete from ' + rtrim(INTERID) + '.dbo.GL00100F'   from  DYNAMICS..SY01500 c, master.dbo.sysdatabases d  where  c.INTERID = d.name  set NOCOUNT on   open c_cursor   FETCH NEXT FROM c_cursor INTO @cFiltername  while (@@fetch_status <> -1)  begin  if (@@fetch_status <> -2)  begin  select @iLoop = 1  while (@iLoop < 5)  begin   select @cLargeString = @cFiltername + convert(char(1),@iLoop) + @cPoststring  exec (@cLargeString)  select @iLoop = @iLoop + 1  end  end  FETCH NEXT FROM c_cursor into @cFiltername  end  DEALLOCATE c_cursor   delete  ORG00100  where  RELSTRNG like @cToSubRelString + '%'  and RELSTRNG <> @cToRelString end  delete  #Relations where  RELSTRNG = @cToRelString  insert into ORG00100(  RELID,  PARNTRLTID,  RELSTRNG,  ENTITYID) select   RELID,   PARNTRLTID,  RELSTRNG,  ENTITYID from  #Relations  if @@rowcount <> (select count(RELID) from #Relations) begin  if @tTransaction = 1  rollback transaction  select @O_SQL_Error_State = 20928  return end  if @tTransaction = 1  commit transaction  return    
GO
GRANT EXECUTE ON  [dbo].[smCopyRelations] TO [DYNGRP]
GO
