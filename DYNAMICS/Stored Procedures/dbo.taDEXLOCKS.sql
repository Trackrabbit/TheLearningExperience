SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[taDEXLOCKS]  @I_vOperation int,     @I_vtable_path_name char(255) = '',  @I_vsession_id int = 0,    @I_vrow_id int = 0,    @O_oExists int output,    @O_oInsertStatus int output,   @O_iErrorState  int output  with encryption as  set transaction isolation level read uncommitted set nocount on  declare   @Session int,  @O_oErrorState int,  @sCompanyName char(65),  @iStatus int,  @oErrString varchar(255),  @rowcount int,  @error int  select  @O_iErrorState = 0,  @O_oExists = 0,  @O_oInsertStatus = 0,  @sCompanyName = '',  @iStatus = 0,  @oErrString = '',  @rowcount = 0,  @error = 0  if (@I_vsession_id = 0) begin  select @Session = @@spid end else begin  select @Session = @I_vsession_id end  if @I_vOperation = 0 or @I_vOperation = 1 begin  if exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @I_vtable_path_name and  row_id = @I_vrow_id)  begin  select @O_oExists = 1  end  else  begin  select @O_oExists = 0  if @I_vOperation = 1  begin  insert into tempdb..DEX_LOCK ( session_id, row_id, table_path_name )  select @Session, @I_vrow_id, @I_vtable_path_name  if @@error <> 0  begin  select @O_iErrorState = 213   return (@O_iErrorState)  end  else  begin  select @O_oInsertStatus = 1  end  end  end end  if @I_vOperation = 2  begin  if exists(select 1 from tempdb..DEX_LOCK (nolock) where table_path_name = @I_vtable_path_name and  row_id = @I_vrow_id and session_id = @Session)  begin  select @O_oExists = 1  end end  if @I_vOperation = 3 begin  delete tempdb..DEX_LOCK where table_path_name = @I_vtable_path_name and  row_id = @I_vrow_id and session_id = @Session  select @rowcount = @@ROWCOUNT, @error = @@error  if @error <> 0  begin  select @O_iErrorState = 8   select @O_oExists = 1  return (@O_iErrorState)  end  else  begin  if @rowcount > 0  begin  select @O_oInsertStatus = 1  end   select @O_oExists = 0  end end  if @I_vOperation = 4 begin  delete tempdb..DEX_LOCK where table_path_name = @I_vtable_path_name and  row_id = @I_vrow_id   select @rowcount = @@ROWCOUNT, @error = @@error  if @error <> 0  begin  select @O_iErrorState = 9   select @O_oExists = 1  return (@O_iErrorState)  end  else  begin  if @rowcount > 0  begin  select @O_oInsertStatus = 1  end   select @O_oExists = 0  end end  if @I_vOperation = 5 begin  delete tempdb..DEX_LOCK where session_id = @Session  select @rowcount = @@ROWCOUNT, @error = @@error  if @error <> 0  begin  select @O_iErrorState = 10   select @O_oExists = 1  return (@O_iErrorState)  end  else  begin  if @rowcount > 0  begin  select @O_oInsertStatus = 1  end   select @O_oExists = 0  end end  if @I_vOperation = 6 begin  delete tempdb..DEX_LOCK where session_id = @I_vsession_id  select @rowcount = @@ROWCOUNT, @error = @@error  if @error <> 0  begin  select @O_iErrorState = 11   select @O_oExists = 1  return (@O_iErrorState)  end  else  begin  if @rowcount > 0  begin  select @O_oInsertStatus = 1  end   select @O_oExists = 0  end end  select @sCompanyName = CMPNYNAM from DYNAMICS..SY01500 (nolock) where INTERID = db_name()  if ((@I_vOperation = 1) and (not exists(select 1 from DYNAMICS..SY00800 (nolock)  where WINTYPE = 4 and USERID = 'eCon' + ltrim(@Session) and CMPNYNAM = @sCompanyName and BCHSOURC = 'TRX ACTIVITY' and BACHNUMB = 'TRX ACTIVITY'))) begin  insert into DYNAMICS..SY00800 (  WINTYPE,  USERID,  CMPNYNAM,  BCHSOURC,  BACHNUMB,  POSTING,  TRXSOURC  )  select  4,  'eCon' + ltrim(@Session),  @sCompanyName,  'TRX ACTIVITY',  'TRX ACTIVITY',  0,  ''  if @@error <> 0  begin  select @O_iErrorState = 2700   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  if ((@I_vOperation > 2) and (@I_vOperation < 7)) begin  delete DYNAMICS..SY00800 where WINTYPE = 4 and USERID = 'eCon' + ltrim(@Session) and CMPNYNAM = @sCompanyName and BCHSOURC = 'TRX ACTIVITY' and BACHNUMB = 'TRX ACTIVITY'  if @@error <> 0  begin  select @O_iErrorState = 2694   exec @iStatus = taUpdateString  @O_iErrorState,  @oErrString,  @oErrString output,  @O_oErrorState output  return (@O_iErrorState)  end end  return (@O_iErrorState)   
GO
GRANT EXECUTE ON  [dbo].[taDEXLOCKS] TO [DYNGRP]
GO
