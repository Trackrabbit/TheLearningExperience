SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[syCLSecurityTables]  @I_cUser_ID char(15)  = NULL,  @I_tSetupTables tinyint   = NULL,  @I_tUserTables tinyint   = NULL,  @cDBName      char(6)   = NULL,  @I_cTaskRole_Table_Name char(255)  = NULL,  @I_cUserRole_Table_Name char(255)  = NULL,  @I_cUserModAlt_Table_Name char(255)  = NULL,  @O_SQL_Error_State int    = NULL   output as   declare  @cGETMSG10346 char(255),  @cGETMSG10347    char(255),  @cGETMSG10348    char(255),  @cSubQuery1 varchar(2000),  @cSubQuery2 varchar(2000),  @TRUE int,  @FALSE int,  @iStatus int,  @iError int,  @stringlength int,  @OutStringLength int,  @iCount int,  @cStringCharacter char(1),  @TableNamePost varchar(255)  select @O_SQL_Error_State = 0  if (  @I_cUser_ID is NULL or  @I_tUserTables is NULL or  @I_tSetupTables is NULL or  @cDBName      is NULL or  @I_cTaskRole_Table_Name is NULL or  @I_cUserRole_Table_Name is NULL or  @I_cUserModAlt_Table_Name is NULL)  begin  select          @O_SQL_Error_State = 20857  return end  exec @iStatus = DYNAMICS..smGetConstantInt 'TRUE', @TRUE output, @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetConstantInt 'FALSE', @FALSE output, @O_SQL_Error_State output  select @iError = @@error  if @iStatus = 0 and @iError <> 0  select @iStatus = @iError if ( (@iStatus <> 0) or (@O_SQL_Error_State <> 0) )  return (@iStatus)  exec @iStatus = DYNAMICS..smGetMsgString   10346,   @cDBName,  @cGETMSG10346 output,   @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  exec @iStatus = DYNAMICS..smGetMsgString   10347,   @cDBName,  @cGETMSG10347 output,   @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  exec @iStatus = DYNAMICS..smGetMsgString   10348,   @cDBName,  @cGETMSG10348 output,   @O_SQL_Error_State output  select @iError = @@error if @iStatus = 0 and @iError <> 0  select @iStatus = @iError  create table #SecurityTemp (SECID char(25) not null, sMessage char(255) not null, INDEX1 int identity) select @I_cUser_ID = rtrim(@I_cUser_ID) select @I_cTaskRole_Table_Name = rtrim(@I_cTaskRole_Table_Name) select @I_cUserRole_Table_Name = rtrim(@I_cUserRole_Table_Name) select @I_cUserModAlt_Table_Name = rtrim(@I_cUserModAlt_Table_Name)  select  @iCount = 1,  @OutStringLength = 1,  @TableNamePost = ' ',  @stringlength = datalength(@I_cTaskRole_Table_Name)   while @iCount <= @stringlength  begin  select @cStringCharacter = substring(@I_cTaskRole_Table_Name,@iCount,1)   if @cStringCharacter = ''''  begin  select @TableNamePost = substring(@TableNamePost,1,@OutStringLength) + REPLICATE('''',2)  select @OutStringLength = @OutStringLength + 2  end  else  begin  select @TableNamePost = substring(@TableNamePost,1,@OutStringLength) + REPLICATE(@cStringCharacter,1)  select @OutStringLength = @OutStringLength + 1  end   select @iCount = @iCount + 1  end  select @I_cTaskRole_Table_Name = rtrim(@TableNamePost)  select @I_cTaskRole_Table_Name = ltrim(@I_cTaskRole_Table_Name)  select  @iCount = 1,  @OutStringLength = 1,  @TableNamePost = ' ',  @stringlength = datalength(@I_cUserRole_Table_Name)   while @iCount <= @stringlength  begin  select @cStringCharacter = substring(@I_cUserRole_Table_Name,@iCount,1)   if @cStringCharacter = ''''  begin  select @TableNamePost = substring(@TableNamePost,1,@OutStringLength) + REPLICATE('''',2)  select @OutStringLength = @OutStringLength + 2  end  else  begin  select @TableNamePost = substring(@TableNamePost,1,@OutStringLength) + REPLICATE(@cStringCharacter,1)  select @OutStringLength = @OutStringLength + 1  end   select @iCount = @iCount + 1  end  select @I_cUserRole_Table_Name = rtrim(@TableNamePost)  select @I_cUserRole_Table_Name = ltrim(@I_cUserRole_Table_Name)  select  @iCount = 1,  @OutStringLength = 1,  @TableNamePost = ' ',  @stringlength = datalength(@I_cUserModAlt_Table_Name)   while @iCount <= @stringlength  begin  select @cStringCharacter = substring(@I_cUserModAlt_Table_Name,@iCount,1)   if @cStringCharacter = ''''  begin  select @TableNamePost = substring(@TableNamePost,1,@OutStringLength) + REPLICATE('''',2)  select @OutStringLength = @OutStringLength + 2  end  else  begin  select @TableNamePost = substring(@TableNamePost,1,@OutStringLength) + REPLICATE(@cStringCharacter,1)  select @OutStringLength = @OutStringLength + 1  end   select @iCount = @iCount + 1  end  select @I_cUserModAlt_Table_Name = rtrim(@TableNamePost)  select @I_cUserModAlt_Table_Name = ltrim(@I_cUserModAlt_Table_Name)  if @I_tSetupTables = @TRUE  begin  delete #SecurityTemp  insert into #SecurityTemp select DISTINCT(SECURITYTASKID), stuff(rtrim(@cGETMSG10347), charindex('%1',rtrim(@cGETMSG10347)),2, rtrim(SECURITYTASKID))  from SY10600 where SECURITYTASKID not in (select SECURITYTASKID from SY09000)  exec ('insert into ' + @cDBName + '..SY03400(USERID, INDXLONG, FILENAME, ERMSGTX2, ERMSGTXT) select ' + '''' +  @I_cUser_ID + '''' + ', INDEX1, '+ '''' + @I_cTaskRole_Table_Name + '''' + ',' + '''' + '''' + ', sMessage from #SecurityTemp')   delete SY10600 where SECURITYTASKID not in (select SECURITYTASKID from SY09000)   delete SY10600 where SECURITYROLEID not in (select SECURITYROLEID from SY09100)   delete SY10700 where SECURITYTASKID not in (select SECURITYTASKID from SY09000)   delete SY10800 where SECMODALTID not in (select SECMODALTID from SY09200) end   if @I_tUserTables = @TRUE  begin  delete #SecurityTemp   insert into #SecurityTemp select DISTINCT(SECURITYROLEID), stuff(rtrim(@cGETMSG10346), charindex('%1',rtrim(@cGETMSG10346)),2, rtrim(SECURITYROLEID))  from SY10500 where SECURITYROLEID not in (select SECURITYROLEID from SY09100)  exec ('insert into ' + @cDBName + '..SY03400(USERID, INDXLONG, FILENAME, ERMSGTX2, ERMSGTXT) select ' + '''' +  @I_cUser_ID + '''' + ', INDEX1, '+ '''' + @I_cUserRole_Table_Name + '''' + ',' + '''' + '''' + ', sMessage from #SecurityTemp')   delete SY10500 where SECURITYROLEID not in (select SECURITYROLEID from SY09100)   delete #SecurityTemp  insert into #SecurityTemp select DISTINCT(SECMODALTID), stuff(rtrim(@cGETMSG10348), charindex('%1',rtrim(@cGETMSG10348)),2, rtrim(SECMODALTID))  from SY10550 where SECMODALTID not in (select SECMODALTID from SY09200)  exec ('insert into ' + @cDBName + '..SY03400(USERID, INDXLONG, FILENAME, ERMSGTX2, ERMSGTXT) select ' + '''' +  @I_cUser_ID + '''' + ', INDEX1, '+ '''' + @I_cUserModAlt_Table_Name + '''' + ',' + '''' + '''' + ', sMessage from #SecurityTemp')   delete SY10550 where SECMODALTID not in (select SECMODALTID from SY09200)  end  return (@iStatus)   
GO
GRANT EXECUTE ON  [dbo].[syCLSecurityTables] TO [DYNGRP]
GO
