SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO
 create procedure [dbo].[eConnectOutTriggers]  @TableName varchar(50), @Action int,  @DOCTYPE varchar(50), @Alias varchar(50), @Required1 varchar(30)='', @ActionType int, @O_iErrorState int = NULL  output  with encryption as  set transaction isolation level read uncommitted  declare @ColumnName varchar(50),   @x int,   @IndexName varchar(50),  @TRIGGERCNT int,   @CUSTNMBR varchar(30),  @fill char(1),  @fill2 char(2),  @loop int,  @triggername varchar(150),  @DropTrigger1 varchar(1000),  @CreateTrigger1 varchar(4000),  @WhereStatement varchar(4000),  @type varchar(25),  @CreateTrigger varchar(4000),  @DeleteStatement varchar(2000),  @MainTableName varchar(50),  @CreateRequired varchar(1000),  @declare varchar(1000),  @fetch varchar(1000),  @if varchar(1000),  @ifwhere varchar(1000),  @select varchar(1000),  @cursorend varchar(4000),  @vardeclare varchar(1000),  @actiontable varchar(100),  @cursorname varchar(255)  select @fill = char(39),  @fill2 = char(39)+char(39),  @triggername ='',  @DropTrigger1 ='',  @CreateTrigger1='',  @WhereStatement ='',  @TRIGGERCNT=0,  @MainTableName='',  @CreateRequired = '',  @declare ='',  @fetch ='',  @if ='',  @ifwhere ='',  @select ='',  @cursorend = '',  @vardeclare = '',  @actiontable = '',  @cursorname = ''  create table #insert(ColumnName varchar(50))  select @TRIGGERCNT=TRIGGERCNT from eConnect_Out_Setup (nolock) where TABLENAME = @TableName and DOCTYPE = @DOCTYPE   select @MainTableName=TABLENAME from eConnect_Out_Setup (nolock) where DOCTYPE = @DOCTYPE and MAIN = 1  select @loop = 1 if (@TRIGGERCNT > 0) begin  select @WhereStatement = ''  select @DeleteStatement = ''   select  @triggername =  case @ActionType   when 1 then 'dbo.eConnect_' + @DOCTYPE + @TableName + '_InsertTrigger'  when 2 then 'dbo.eConnect_' + @DOCTYPE + @TableName + '_UpdateTrigger'  when 3 then 'dbo.eConnect_' + @DOCTYPE + @TableName + '_DeleteTrigger'  end   select  @cursorname =  case @ActionType  when 1 then 'eConnect_' + @DOCTYPE + @TableName + '_InsertTrigger'  when 2 then 'eConnect_' + @DOCTYPE + @TableName + '_UpdateTrigger'  when 3 then 'eConnect_' + @DOCTYPE + @TableName + '_DeleteTrigger'  end   if (@Action = 1)  begin  select  @type =  case @ActionType  when 1 then ' insert '  when 2 then ' update '  when 3 then ' delete '  end   if (@ActionType < 3)  begin  select @actiontable = ' inserted a'  end  else  begin  select @actiontable = ' deleted a'  end   select @DropTrigger1 = 'if exists (select * from sysobjects (nolock) where id = object_id(''' + @triggername + ''') and sysstat & 0xf = 8)  drop trigger ' + @triggername + char(10)    select @CreateTrigger = 'create trigger ' + @triggername + ' on ' + @TableName + ' for ' + @type + ' as ' + char(10) +  'declare @required char(50),@DRI int, '   if ((@Required1 <> '') and (@ActionType=1))  begin  select @CreateRequired = 'select @required = ' + @Required1 + ' from inserted ' + char(10)   select @CreateRequired = @CreateRequired + 'if @required <> ''''' + char(10) + 'begin' + char(10)  end   if (@ActionType < 3)  begin  select @DeleteStatement = ' delete eConnect_Out from eConnect_Out b (updlock) where (b.DOCTYPE = '''  + @DOCTYPE + ''' and ACTION = ' +  ltrim(str(@ActionType))  end  else  begin  select @DeleteStatement = ' delete eConnect_Out from eConnect_Out b (updlock) where (b.DOCTYPE = '''  + @DOCTYPE + ''' and ACTION = ' +  ltrim(str(@ActionType))  end   select @CreateTrigger1 = 'insert into eConnect_Out(DOCTYPE,TABLENAME,DEX_ROW_ID,INDEX1,INDEX2,INDEX3,INDEX4,INDEX5,INDEX6,INDEX7,INDEX8,INDEX9,INDEX10,  INDEX11,INDEX12,INDEX13,INDEX14,INDEX15,ACTION) select ' + char(10)  select @CreateTrigger1 = @CreateTrigger1 + @fill + @DOCTYPE + @fill + ','  + char(10)+ @fill + @MainTableName + @fill + ','  + char(10)+ ' @DRI,'  + char(10)   select @x = 1  while (@x <= 15)  begin  if (@x <= @TRIGGERCNT)  begin  exec('insert into #insert select TRIGGER' + @x + ' from eConnect_Out_Setup (nolock) where DOCTYPE = ''' + @DOCTYPE + ''' and TABLENAME = ''' + @TableName + '''')  select @ColumnName = ColumnName from #insert  select @CreateTrigger1 = @CreateTrigger1 + '@'+rtrim(@ColumnName)  truncate table #insert   if (@x < @TRIGGERCNT)  begin  select @WhereStatement = @WhereStatement + ' and INDEX' + ltrim(str(@x)) + '= @' + @ColumnName + char(10)  select @if =  @if + ' INDEX' + ltrim(str(@x)) + '= @' + @ColumnName + ' and '  select @declare = @declare + 'convert(varchar(50),' + @ColumnName + ',121), '  select @vardeclare = @vardeclare + ' @' + @ColumnName + ' varchar(50), '  select @fetch =  @fetch + '@' + @ColumnName + ','  select @select = @select + @ColumnName + '= @' + @ColumnName + ' and '  end  else  begin  select @WhereStatement = @WhereStatement + ' and INDEX' + ltrim(str(@x)) + '= @' + @ColumnName + ')' + char(10)  select @if =  @if + ' INDEX' + ltrim(str(@x)) + '= @' + @ColumnName   select @declare = @declare + 'convert(varchar(50),' + @ColumnName + ',121)'  select @vardeclare = @vardeclare + ' @'+ @ColumnName + ' varchar(50) '  select @fetch =  @fetch + '@' + @ColumnName  select @select = @select + @ColumnName + '= @' + @ColumnName  end  end  else  select @CreateTrigger1 = @CreateTrigger1 + @fill2   select @CreateTrigger1 = @CreateTrigger1 + ',' + CHAR(10)  select @x = @x + 1  end   select @CreateTrigger = @CreateTrigger + @vardeclare  select @CreateTrigger = @CreateTrigger + 'declare ' + @cursorname + ' CURSOR for select ' + @declare + ' from ' + @actiontable + char(10)   select @CreateTrigger = @CreateTrigger + ' set nocount on' + char(10) + 'OPEN ' + @cursorname + char(10) +   'FETCH NEXT FROM ' + @cursorname + ' INTO ' + @fetch + char(10)  select @CreateTrigger = @CreateTrigger + 'WHILE (@@FETCH_STATUS <> -1)' + char(10) + 'begin' + char(10)+  'if (not exists (select 1 from eConnectOutTemp (nolock) ' +   ' where ' + ' DOCTYPE = ' + '''' + @DOCTYPE + ''' and ' + @if + '))' + char(10) + 'begin' + char(10)   if (@ActionType<3)  begin  select @CreateTrigger = @CreateTrigger + 'select @DRI = 0 ' + char(10)  select @CreateTrigger = @CreateTrigger + 'select @DRI = isnull(DEX_ROW_ID,0) from ' + @MainTableName + ' (nolock) where ' + @select + char(10)  select @CreateTrigger = @CreateTrigger + ' if (@DRI > 0) ' + char(10) + 'begin' + char(10)  select @cursorend = 'end' + char(10) + 'end' + char(10)  end  else  begin  select @CreateTrigger = @CreateTrigger + 'select @DRI = 0'  select @cursorend = 'end' + char(10)   end   if ((@Required1 <> '') and (@ActionType=1))  begin  select @cursorend = @cursorend +  'end' + char(10) + 'FETCH NEXT FROM ' + @cursorname + ' INTO ' + @fetch + char(10) + 'end' + char(10) + 'DEALLOCATE ' + @cursorname  + char(10)   end  else  begin  select @cursorend = @cursorend + 'FETCH NEXT FROM ' + @cursorname + ' INTO ' + @fetch + char(10) + 'end' + char(10) + 'DEALLOCATE ' + @cursorname + char(10)   end   select @CreateTrigger1 = @CreateTrigger1 + ltrim(str(@ActionType)) + CHAR(10)    select @DeleteStatement = @DeleteStatement +@WhereStatement+char(10)   exec (@DropTrigger1)  exec (@CreateTrigger+@CreateRequired+@DeleteStatement+@CreateTrigger1+@cursorend)  end  else  begin  exec('if exists (select * from sysobjects (nolock) where id = object_id(''' + @triggername + ''') and sysstat & 0xf = 8)  drop trigger ' + @triggername)  end  select @loop = @loop + 1 end  drop table #insert  select @O_iErrorState = 0 return    
GO
GRANT EXECUTE ON  [dbo].[eConnectOutTriggers] TO [DYNGRP]
GO
